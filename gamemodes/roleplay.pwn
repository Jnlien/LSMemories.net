main() { }

#pragma dynamic 65000
//============================================//
#include <a_samp>
#include <YSI\y_hooks>
#include <streamer>
#include <a_mysql>
#include <foreach>
#include <progress>
#include <eSelection>
#include <easyDialog>
#include <zcmd>
#include <sscanf2>
#include <geolocation>
#include <nex-ac>

#include "./maps/aa_index.pwn"
//============================================//
#undef MAX_PLAYERS
#define MAX_PLAYERS (150)

#define SQL_HOSTNAME "localhost"
#define SQL_USERNAME "root"
#define SQL_DATABASE "lsrp"
#define SQL_PASSWORD ""
//============================================//
#define SERVER_NAME "(FRA) - LSmemories.net 1.0"
#define SERVER_URL "lsmemories.net"
#define SERVER_MAP "Los Santos"
#define SERVER_LANG "Français"
#define SERVER_REVISION "LSMemories v1.01"
//============================================//
#define COLOR_VERTFONCE   (0x54A63FFF)
#define COLOR_CLIENT      (0xAAC4E5FF)
#define COLOR_WHITE       (0xFFFFFFFF)
#define COLOR_RED         (0xFF0000FF)
#define COLOR_CYAN        (0x33CCFFFF)
#define COLOR_LIGHTRED    (0xFF6E0000)
#define COLOR_LIGHTGREEN  (0x9ACD32FF)
#define COLOR_YELLOW      (0xA5BD44FF) // A5BD44
#define COLOR_GREY        (0xAFAFAFFF)
#define COLOR_HOSPITAL    (0xFF8282FF)
#define COLOR_PURPLE      (0xC3A4DBFF)
#define COLOR_LIGHTYELLOW (0xF5DEB3FF)
#define COLOR_DARKBLUE    (0x1394BFFF)
#define COLOR_ORANGE      (0xFFA500FF)
#define COLOR_LIME        (0x00FF00FF)
#define COLOR_GREEN       (0x33CC33FF)
#define COLOR_BLUE        (0x2641FEFF)
#define COLOR_FACTION     (0xBDF38BFF)
#define COLOR_RADIO       (0x8D8DFFFF)
#define COLOR_LIGHTBLUE   (0x007FFFFF)
#define COLOR_SERVER      (0xFFFF90FF) // 6688FF
#define COLOR_DEPARTMENT  (0xF0CC00FF)
#define COLOR_ADMINCHAT   (0xFF6500FF) //(0x33EE33FF) //0x00BFFFFF
#define COLOR_ADMINGROUP  (0x76DEA7FF)
#define COLOR_DEFAULT     (0xA9C4E4FF)

#define COLOR_INFO        (0x33CCFFFF)
#define COLOR_ERROR       (0xDE3838FF)
#define COLOR_USAGE       (0x8CAA63FF)
#define COLOR_ADMIN       (0xFC7777FF)
//============================================//
#define THREAD_LOAD_INVENTORY (1)
#define THREAD_LOAD_CONTACTS (2)
#define THREAD_LOAD_LOCATIONS (3)
#define THREAD_LOAD_TICKETS (4)
//============================================//
#define MODEL_SELECTION_GLASSES (1)
#define MODEL_SELECTION_HATS (2)
#define MODEL_SELECTION_BANDANAS (3)
#define MODEL_SELECTION_SKIN (4)
#define MODEL_SELECTION_INVENTORY (5)
#define MODEL_SELECTION_CLOTHES (6)
#define MODEL_SELECTION_DEALER (7)
#define MODEL_SELECTION_DEALER_ADD (8)
#define MODEL_SELECTION_BUY_CAR (9)
#define MODEL_SELECTION_FURNITURE (10)
#define MODEL_SELECTION_COLOR (11)
#define MODEL_SELECTION_SKINS (12)
#define MODEL_SELECTION_ADD_SKIN (13)
#define MODEL_SELECTION_FACTION_SKIN (14)
#define MODEL_SELECTION_WHEELS (15)
#define MODEL_SELECTION_GATE (16)
#define MODEL_CADAVRE_INVENTORY (17)
#define MODEL_SELECTION_TAXILICENSE (18)
#define MODEL_SELECTION_MECANOSKIN (19)
#define MODEL_SELECTION_TAG (20)
#define MODEL_SELECTION_DOORS (21)

//============================================//
#define FACTION_POLICE (1)
#define FACTION_NEWS (2)
#define FACTION_GOV (4)
#define FACTION_GANG (5)
#define FACTION_MAFIA (6)
//============================================//
#define JOB_COURIER (1)
#define JOB_MECHANIC (2)
#define JOB_TAXI (3)
#define JOB_MINER (4)
#define JOB_FOOD_VENDOR (5)
#define JOB_GARBAGE (6)
#define JOB_SORTER (7)
#define JOB_MEDIC (8)
//============================================//
#define MAX_BILLBOARDS (50)
#define MAX_REPORTS (50)
#define MAX_INVENTORY (50)
#define MAX_HOUSES (500)
#define MAX_HOUSE_STORAGE (10)
#define MAX_BUSINESSES (500)
#define MAX_DROPPED_ITEMS (5000)
#define MAX_ENTRANCES (100)
#define MAX_DEALERSHIP_CARS (90)
#define MAX_DYNAMIC_CARS (1500)
#define MAX_GAS_PUMPS (100)
#define MAX_FURNITURE (2000)
#define MAX_HOUSE_FURNITURE (30)
#define MAX_DYNAMIC_JOBS (25)
#define MAX_CONTACTS (20)
#define MAX_GPS_LOCATIONS (20)
#define MAX_CAR_STORAGE (5)
#define MAX_CRATES (200)
#define MAX_DRUG_PLANTS (200)
#define MAX_FACTIONS (15)
#define MAX_ARREST_POINTS (50)
#define MAX_PLAYER_TICKETS (100)
#define MAX_BARRICADES (25)
#define MAX_GATES (200)
#define MAX_IMPOUND_LOTS (20)
#define MAX_ATM_MACHINES (50)
#define MAX_GARBAGE_BINS (50)
#define MAX_CAMERAS (50)
#define MAX_GYM (50)
#define MAX_DYNAMICS_PICKUPS (200)
#define MAX_SIGNS (500)
#define MAX_CABINES (500)
#define MAX_VENDORS (50)
#define MAX_WEAPON_RACKS (500)
#define MAX_SPEED_CAMERAS (100)
#define MAX_LISTED_ITEMS (10)
#define MAX_GRAFFITI_POINTS (50)
#define MAX_METAL_DETECTORS (20)
#define MAX_TELEPORTATIONS_CUSTOM (50)
#define MAX_CORPSE (300)
#define MAX_TAXIS_CALLS (5)
#define MAX_CHALLENGES (6)
//============================================//
#define MAX_OWNABLE_CARS (5)
#define MAX_OWNABLE_HOUSES (1)
#define MAX_OWNABLE_BUSINESSES (5)
//============================================//
#define MAX_BACKPACKS (2000)
#define MAX_BACKPACK_ITEMS (4000)
#define MAX_BACKPACK_CAPACITY (10)
//============================================//
#define AFKMAXMIN (15) // Nombre de minutes avant le kick pour AFK.
#define PRICE_PERMIS_CONDUIRE (1500)
#define PRICE_LICENSE_TAXI (15000)
#define PRICE_FUEL          (2) // Prix de l'essence par litre
//============================================//
#define WORLD_DRIVELICENSE 	(7004)
#define WORLD_TAXILICENSE 	(7005)
#define WORLD_AFK           (15000)
//============================================//
#define MAX_FACTION_UPGRADE (17)

#define UPGRADE_MUNITION 	(0)
#define UPGRADE_COCKTAIL 	(1)
#define UPGRADE_SILENCIEUX 	(2)
#define UPGRADE_COLT 		(3)
#define UPGRADE_EAGLE 		(4)
#define UPGRADE_SHOTGUN		(5)
#define UPGRADE_UZI 		(6)
#define UPGRADE_TEC9 		(7)
#define UPGRADE_MP5 		(8)
#define UPGRADE_AK47 		(9)
#define UPGRADE_M4	 		(10)
#define UPGRADE_RIFLE 		(11)
#define UPGRADE_SNIPER 		(12)

#define UPGRADE_MARIJUANA	(13)
#define UPGRADE_COCA 		(14)
#define UPGRADE_HEROINE		(15)
#define UPGRADE_STEROIDES	(16)

#define     PRICE_MARIJUANA     (20)
#define     PRICE_COCA		    (20)
#define     PRICE_OPIUM			(20)
#define     PRICE_STEROIDES     (20)

#define     PRICE_MUNITIONS     (500)
#define     PRICE_COCKTAIL     	(8000)
#define     PRICE_SILENCIEUX    (1700)
#define     PRICE_COLT		    (1700)
#define     PRICE_EAGLE     	(3200)
#define     PRICE_SHOTGUN     	(3200)
#define     PRICE_UZI     		(1500)
#define     PRICE_TEC9     		(1500)
#define     PRICE_MP5     		(2500)
#define     PRICE_AK47     		(5000)
#define     PRICE_M4A1     		(5500)
#define     PRICE_RIFLE     	(7000)
#define     PRICE_SNIPER     	(9000)
//============================================//
#define VW_LOGIN        (20000)


/* MICRO ESPION */
enum espioninfo
{
	bool:Micro,
	Supervisor
}
new espionInfo[MAX_PLAYERS][espioninfo];
new AlreadyWatching[MAX_PLAYERS];
new gainPower[MAX_PLAYERS];

// Introduction
new Text:TDEditor_INTRO[10],
    PlayerText:TDEditor_PINTRO[MAX_PLAYERS][4],
    PlayerText:TDEditor_BACKGROUND[MAX_PLAYERS],
    PlayerText:TDEditor_LOGO[MAX_PLAYERS][3],
	ScreenStatus[MAX_PLAYERS],
	timer_Intro[MAX_PLAYERS][10];

new bool:developpementEnabled;
new garbageDecharge[MAX_PLAYERS][2];
new PlayerSpec[MAX_PLAYERS];
new objectTaxi[MAX_PLAYERS];
new time_StartLicenseTaxi[MAX_PLAYERS];
new timer_Spec[MAX_PLAYERS];
new PlayerText:TD_SPEC_PLAYER[MAX_PLAYERS][15];
new bool:Fenetre[4][MAX_VEHICLES];
new Text3D:SME[MAX_PLAYERS];
new HaveSME[MAX_PLAYERS] = {0, ...};
new TimerSME[MAX_PLAYERS];
new Text3D:VME[MAX_PLAYERS];
new HaveVME[MAX_PLAYERS] = {0, ...};
new TimerVME[MAX_PLAYERS];
new MecanoApel = -1;
new coffreba,coffreba2,C4sol,Bcasier1,Bcasier2,Bcasier3;
new pmodelid[MAX_PLAYERS];
new PoliceCivil[MAX_PLAYERS];
new EntreCar[MAX_DYNAMIC_CARS];
new DisconnectReasons[3][]={
    "Connexion interrompue",
    "Déconnexion",
    "Kick/Ban"
};

new Float:examPos[MAX_PLAYERS][4];
new messagePrivate[MAX_PLAYERS];
new DernieVehLoc[MAX_PLAYERS];
new DernieVehLocID[MAX_PLAYERS];
new TruckingCheck[MAX_PLAYERS];
new Text3D:vehicle3Dtext[MAX_VEHICLES];
new vehiclecallsign[MAX_VEHICLES];
new Float:xmor[MAX_PLAYERS];
new Float:ymor[MAX_PLAYERS];
new Float:zmor[MAX_PLAYERS];
new int_mor[MAX_PLAYERS];
new vw_mor[MAX_PLAYERS];
new shotTime[MAX_PLAYERS];
new shot[MAX_PLAYERS];
new PaID[MAX_PLAYERS];
new	PaPri[MAX_PLAYERS];
new RepaID[MAX_PLAYERS];
new	ReparPri[MAX_PLAYERS];
new PeintureID[MAX_PLAYERS];
new	PeinturePri[MAX_PLAYERS];
new	PeintureColor1[MAX_PLAYERS];
new	PeintureColor2[MAX_PLAYERS];
new PleinID[MAX_PLAYERS];
new	PleinPri[MAX_PLAYERS];
new TrafiqueFilsTimer[MAX_PLAYERS];
new TrafiqueFilsKillTimer[MAX_PLAYERS];
new BraquageTimer[MAX_PLAYERS];
new BraquageKillTimer[MAX_PLAYERS];
new	Ccasier[MAX_PLAYERS];
new	Cforcerporte[MAX_PLAYERS];
new Forcerporte[MAX_PLAYERS] = {10, ...};
new CasierN[MAX_PLAYERS];
new CassageC[MAX_PLAYERS];
new C4Timer[MAX_PLAYERS];
new CoffreExplos;
new SacTem[MAX_PLAYERS];
new SacKillTimer[MAX_PLAYERS];
new SacSome[MAX_PLAYERS];
new aBraquerBanque[MAX_PLAYERS];
new C4KillTimer[MAX_PLAYERS];
new ASac[MAX_PLAYERS];
new bool:aBraquer[MAX_PLAYERS char] = {false, ...};
new SobeitCheckTimer[MAX_PLAYERS];
new TimerFaim[MAX_PLAYERS];
new PlayerText:TD_Register[MAX_PLAYERS][30];

new
	amendeInfo[MAX_PLAYERS][2],
	amendeReason[MAX_PLAYERS][64];

new AFKTimer;
new AFKMin[MAX_PLAYERS];
new Float:AFKPos[MAX_PLAYERS][3];

new Text:Textdraw0;
new Text:Textdraw1;
new Text:Textdraw2;
new Text:Textdraw3;
new Text:Textdraw4;

new CasierCas = 0;
new BraquageBiz = 0;
new BraquageBanque = 0;
new Casier = 3;
new SacBanque = 3;
new bool:InWatch[MAX_PLAYERS];
new waitingRename[MAX_PLAYERS][MAX_PLAYER_NAME +1];
// DASHCAM
new Text:DashCam_TD[20];
new PlayerText:Dashcam_PTD[MAX_PLAYERS][2];

new weaponsSaving[MAX_PLAYERS][13][2];
new skinSaving[MAX_PLAYERS];
new Float:armourSaving[MAX_PLAYERS];
new Float:healthSaving[MAX_PLAYERS];
//Gobale
new bool:BAR_CAN_BE_USED[MAX_PLAYERS]=false;

//TEXTDRAWS
new Bar:player_gym_progress[MAX_PLAYERS];
new PlayerText:GYM_TD[MAX_PLAYERS][3];

//TIMERS
//________TREAD____________________
new PLAYER_TREAD_TIMER[MAX_PLAYERS];
//________BIKE_____________________
new PLAYER_BIKE_TIMER[MAX_PLAYERS];
//________BENCH____________________
new PLAYER_BENCH_TIMER[MAX_PLAYERS];
//________DUMB_BELL_____________
new PLAYER_DUMB_TIMER[MAX_PLAYERS];

//VALUES
//________TREAD____________________
new PLAYER_TREAM_DIS_COUNT[MAX_PLAYERS];
//________BIKE_____________________
new PLAYER_BIKE_DIS_COUNT[MAX_PLAYERS];
//_______BENCH___________________
new PLAYER_BENCH_COUNT[MAX_PLAYERS];
//________DUMB_BELL_____________
new PLAYER_DUMB_COUNT[MAX_PLAYERS];

enum playerData {
	pID,
	pAccount,
	pLogged,
	pIP[16],
	pAFK,
	pAFK_vw,
	pLoginDate[36],
	PlayerText:pTextdraws[89],
	pUsername[MAX_PLAYER_NAME + 1],
	pLoginAttempts,
	pCreated,
	pGender,
	pBirthdate[24],
	pOrigin[32],
	pSkin,
	pAnnuary,
	pRedList,
	pEditType,
	pGlasses,
	pHat,
	Float:pIndiceForce,
	pBandana,
	pSac,
	pEditSac,
	pBracelet,
	Float:pPos[4],
	Float:pHealth,
	pInterior,
	pWorld,
	pHospital,
	pHospitalInt,
	pHospitalTime,
	pRepairTime,
	pLastWarnCheat,
	pKilled,
	pMoney,
	pBankMoney,
	pOwnsBillboard,
	pSavings,
	pHelper,
	pAdmin,
	pDonator,
	pAstuces,
	pShowFooter,
	pFooterTimer,
	pReportTime,
	pHelpTime,
	pSpectator,
	pJailTime,
	pKicked,
	pCombat,
	pAnimParler,
	pMuted,
	pDisplayStats,
	pToggleGlasses,
	pToggleHat,
	pToggleBandana,
	pToggleArmor,
	pLastShot,
	pShotTime,
	pInventoryItem,
	pStorageItem,
	pStorageSelect,
	pProductModify,
	pArmeTF[2],
	pAmmoTF[2],
	pGuns[13],
	pAmmo[13],
	pHouse,
	pLocat,
	pBusiness,
	pEntrance,
	pDealership,
	pContact,
	pGasPump,
	pGasStation,
	pEditCamera,
	pEditPump,
	pEditFurniture,
	pEditDoors,
	pEditGate,
	pEditVendor,
	pEditGarbage,
	pEditGym_1,
	pEditGym_2,
	pEditATM,
	pEditCabine,
	pEditSign,
	pEditSpeed,
	pEditRack,
	pSelectFurniture,
	pRefill,
	Bar:pRefillBar,
	pRefillPrice,
	pDealerCar,
	pEditingItem[32],
	pHouseSeller,
	pHouseOffered,
	pHouseValue,
	pBusinessSeller,
	pBusinessOffered,
	pBusinessValue,
	pCarSeller,
	pCarOffered,
	pCarValue,
	pShakeOffer,
	pShakeType,
	pFriskOffer,
	pFoodSeller,
	pFoodType,
	pFoodPrice,
	pFactionOffer,
	pFactionOffered,
	pHouseLights,
	pPhone,
	pPhoneOff,
	pLottery,
	pLotteryB,
	pCooking,
	pCookingTime,
	pCookingHouse,
	pLevel,
	pHours,
	pPlayingHours,
	pPlayingHoursMax,
	pMinutesCount,
	pMinutes,
	Float:pArmorStatus,
	pArmorShown,
	pClothesType,
	pDrivingTest,
	pTestStage,
	pTestCar,
	pTestWarns,
	/* TAXI LICENSE */
	pTaxiTest,
	/* ------------ */
	pFurnitureType,
	pJob,
	pTaxiFee,
	pTaxiTime,
	pTaxiPlayer,
	pPizza_House,
	pPizza_Vehicle,
	pFirstAid,
	pAidTimer,
	pIncomingCall,
	pCallLine,
	pCallLineCabine,
	pCallWithCabine,
	pMining,
	pMineTime,
	pMinedRock,
	pCarryTrash,
	pCarryCrate,
	pCrafting,
	pOpeningCrate,
	pHarvesting,
	pFaction,
	pFactionID,
	pFactionRank,
	pFactionEdit,
	pSelectedSlot,
	pOnDuty,
	pJobDuty,
	pTazer,
	pBeanBag,
	pStunned,
	pCuffed,
	pDragged,
	pDraggedBy,
	pDragTimer,
	pWarrants,
	pMDCPlayer,
	pTrackTime,
	pCP,
	pPrisoned,
	pInjured,
	pBroadcast,
	pNewsGuest,
	pSpamCount,
	pCommandCount,
	pMuteTime,
	pTransfer,
	pWaypoint,
	pLocation[32],
	Float:pWaypointPos[3],
	pFuelCan,
	pDisableOOC,
	pDisablePM,
	pDisableFaction,
	pDisableAdmin,
	pDisableBC,
	pDisableSpeedo,
	pNameChange[32],
	pDrugUsed,
	pDrugTime,
	pPrime,
	pFingerTime,
	pFingerItem,
	pHealthTime,
	pWeapon,
	pLastWeapon,
	pBackpackLoot,
	pGiveItem,
	pChannel,
	pEmergency,
	pPlaceAd,
	pAdTime,
	pTargets,
	pTargetLevel,
	pVendorTime,
	pLoopAnim,
	pExecute,
	pBoombox,
	pTakeItems,
	Bar:pDrinkBar,
	pDrinking,
	pDrinkTime,
	pAdvertise[128 char],
	pTaxiCalled,
	pTaxiPNJ,
	pTaxiStep,
	pSpeedTime,
	pMarker,
	pBleeding,
	pBleedTime,
	pLoadType,
	pLoadCrate,
	pLoading,
	pUnloading,
	pUnloadVehicle,
	pShipment,
	pDeliverShipment,
	pUsedMagazine,
	pTask,
	pBankTask,
	pStoreTask,
	pTestTask,
	pWarnings,
	pWarn1[32],
	pWarn2[32],
	pSorting,
	pSortingType,
	pSortingVehicle,
	pSortingObject[3],
	pSortCrate,
	pSortingBase,
	pAdminDuty,
	pSeekHelp,
	pHUD,
	pMaskID,
	pMaskOn,
	pCeinture,
	pHideTags,
	pCapacity,
	pPlayRadio,
	pLeaveTime,
	pLeaveIP[16],
	pGraffiti,
	pGraffitiTime,
	pGraffitiColor,
	pGraffitiText[64 char],
	pMakeGraffiti,
	pEditGraffiti,
	pEditGraffitiID,
	pAdminHide,
	pDetectorTime,
	pPicking,
	pPickCar,
	pPickTime,
	pJetpack,
	pFreeze,
	pFreezeTimer,
	Text3D:pNameTag,
	pSpawnPoint,
	pLocaID,
	pCarD,
	pPaVal,
	pPaVen,
	pEnRecolte,
	pRecoltGraine,
	pEnRecolteChe,
	pVip,
	pMortAcheve,
	pMortWeapon,
	Float:pDashcamPos[3],
	pDashcam_intVW[2],
	pDashcam,
	pDashcam_veh,
	pDashcam_object,
	pGateModify,
	pDoorCreate,
	pSpeciality[60],
	bool:p_DriveBy,
	pAdminClicked,
	pEditActor,
	pTakeCorpse,
	pKickDoor,
	pGymnase
};

enum reportData {
	rExists,
	rType, // 1 = report ; 2 = irc
	rPlayerReported, // Joueur reporté (ID)
	rPlayerReported_name[MAX_PLAYER_NAME+1], // Joueur reporté (ID)
	rPlayerReport,
	rPlayerReport_name[MAX_PLAYER_NAME+1], // Joueur reporté (ID)
	rText[128],
	rDate[128],
};

enum taxiData {
	tExists,
	actorID,
	Text3D:actorText3D,
	tName[50],
	tSkin,
	Float:tPos[4],
	Float:tDest[3]
};
new TaxiData[MAX_TAXIS_CALLS][taxiData];

enum billboardData {
	bbID,
	bbExists,
	bbName[32],
	bbMessage[230],
	bbOwner,
	bbPrice,
	bbRange,
	Float:bbPos[4],
	Text3D:bbText3D
};

new BillBoardData[MAX_BILLBOARDS][billboardData];
new BillboardCheckout[MAX_PLAYERS];

enum inventoryData {
	invExists,
	invID,
	invItem[32 char],
	invModel,
	invQuantity
};

enum houseData {
	houseID,
	houseExists,
	houseOwner,
	housePrice,
	houseAddress[32],
	Float:housePos[4],
	Float:houseInt[4],
	houseInterior,
	houseExterior,
	houseExteriorVW,
	houseLocked,
	houseMoney,
	houseLocPrice,
	houseLocStatus,
	houseLocNb,
	houseFaction,
	Text3D:houseText3D,
	housePickup,
	houseLights,
	houseWeapons[10],
	houseAmmo[10]
};

enum houseStorage {
	hItemID,
	hItemExists,
	hItemName[32 char],
	hItemModel,
	hItemQuantity
};

enum businessData {
	bizID,
	bizExists,
	bizName[32],
	bizMessage[128],
	bizOwner,
	bizType,
	bizPrice,
	Float:bizPos[4],
	Float:bizInt[4],
	Float:bizSpawn[4],
	Float:bizDeliver[3],
	bizInterior,
	bizCustom,
	bizExterior,
	bizExteriorVW,
	bizLocked,
	bizVault,
	bizProducts,
	bizPickup,
	bizShipment,
	bizPrices[20],
	Text3D:bizText3D,
	Text3D:bizDeliverText3D,
	bizDeliverPickup
};

enum droppedItems {
	droppedID,
	droppedItem[32],
	droppedPlayer[24],
	droppedModel,
	droppedQuantity,
	Float:droppedPos[3],
	droppedWeapon,
	droppedAmmo,
	droppedInt,
	droppedWorld,
	droppedObject,
	Text3D:droppedText3D
};

enum entranceData {
	entranceID,
	entranceExists,
	entranceName[32],
	entrancePass[32],
	entranceIcon,
	entranceLocked,
	Float:entrancePos[4],
	Float:entranceInt[4],
	entranceInterior,
	entranceExterior,
	entranceExteriorVW,
	entranceType,
	entranceCustom,
	entranceWorld,
	entranceForklift[7],
	entrancePickup,
	entranceMapIcon,
	entranceIconType,
	Text3D:entranceText3D
};

enum dealershipCars {
	vehID,
	vehModel,
	vehPrice
};

enum carData {
	carID,
	carExists,
	carModel,
	carOwner,
	Float:carHealth_real,
	carHealth[4],
	Float:carPos[4],
	carColor1,
	carColor2,
	carPaintjob,
	carLocked,
	carMods[14],
	carImpounded,
	carImpoundPrice,
	carFaction,
	carWeapons[5],
	carAmmo[5],
	carVehicle,
	carJob,
	carLoca,
	carLocaPrice,
	carLocaID,
	carPrice,
	carDouble,
	carSabot,
	carSabPri,
	// JOB MINEUR
	carMine[5]
};

enum carStorage {
	cItemID,
	cItemExists,
	cItemName[32 char],
	cItemModel,
	cItemQuantity
};

enum pumpData {
	pumpID,
	pumpExists,
	pumpBusiness,
	Float:pumpPos[4],
	pumpFuel,
	pumpObject,
	Text3D:pumpText3D
};

enum furnitureData {
	furnitureID,
	furnitureHouse,
	furnitureExists,
	furnitureModel,
	furnitureName[32],
	Float:furniturePos[3],
	Float:furnitureRot[3],
	furnitureObject,
	furnitureActive
};

enum jobData {
	jobID,
	jobExists,
	jobType,
	Float:jobPos[3],
	Float:jobPoint[3],
	Float:jobDeliver[3],
	jobInterior,
	jobWorld,
	jobLock,
	jobPointInt,
	jobPointWorld,
	jobPickups[3],
	Text3D:jobText3D[3]
};

enum contactData {
	contactID,
	contactExists,
	contactName[32],
	contactNumber
};

enum locationData {
	locationID,
	locationExists,
	locationName[32],
	Float:locationPos[3],
};

enum crateData {
	crateID,
	crateExists,
	crateType,
	Float:cratePos[4],
	crateInterior,
	crateWorld,
	crateObject,
	crateVehicle,
	Text3D:crateText3D
};

enum plantData {
	plantID,
	plantExists,
	plantType,
	plantDrugs,
	Float:plantPos[4],
	plantInterior,
	plantWorld,
	plantObject,
	Text3D:plantText3D
};

enum factionData {
	factionID,
	factionExists,
	factionName[32],
	factionColor,
	factionType,
	factionRanks,
	Float:factionLockerPos[3],
	factionLockerInt,
	factionLockerWorld,
	factionSkins[8],
	factionWeapons[10],
	factionAmmo[10],
	Text3D:factionText3D,
	factionPickup,
	Float:SpawnX,
	Float:SpawnY,
	Float:SpawnZ,
	SpawnInterior,
	SpawnVW,
	factionArge,
	
	// UPGRADE GANG/MAFIA
	factionCredit,
	factionUpgrade[MAX_FACTION_UPGRADE],
};


enum arrestPoints {
	arrestID,
	arrestExists,
	Float:arrestPos[3],
	arrestInterior,
	arrestWorld,
	Text3D:arrestText3D,
	arrestPickup
};

enum ticketData {
	ticketID,
	ticketExists,
	ticketFee,
	ticketDate[36],
	ticketReason[64]
};

enum barricadeData {
	cadeExists,
	cadeType,
	Float:cadePos[3],
	cadeObject
};

enum gateData {
	gateID,
	gateHouseID,
	gateExists,
	gateOpened,
	gateModel,
	Float:gateSpeed,
	Float:gateRadius,
	gateTime,
	Float:gatePos[6],
	gateInterior,
	gateWorld,
	Float:gateMove[6],
	gateLinkID,
	gateFaction,
	gateJob,
	gatePass[32],
	gateTimer,
	gateObject
};

enum backpackData {
	backpackID,
	backpackExists,
	backpackPlayer,
	backpackHouse,
	backpackVehicle,
	Float:backpackPos[3],
	backpackInterior,
	backpackWorld,
	Text3D:backpackText3D,
	backpackObject
};

enum backpackItems {
	bItemID,
	bItemBackpack,
	bItemExists,
	bItemName[32],
	bItemModel,
	bItemQuantity
};

enum impoundData {
	impoundID,
	impoundExists,
	Float:impoundLot[3],
	Float:impoundRelease[4],
	Text3D:impoundText3D,
	impoundPickup
};

enum atmData {
	atmID,
	atmExists,
	Float:atmPos[4],
	atmInterior,
	atmWorld,
	atmObject,
	Text3D:atmText3D,
	atmArgen
};

enum garbageData {
	garbageID,
	garbageExists,
	garbageModel,
	garbageCapacity,
	Float:garbagePos[6],
	garbageInterior,
	garbageWorld,
	Text3D:garbageText3D,
	garbageObject
};

enum cameraData {
	cameraID,
	cameraExists,
	cameraZone[24],
	cameraLocalisation[24],
	Float:cameraPos[6],
	Float:cameraRot[3],
	cameraInterior,
	cameraWorld,
	cameraStatus,
	cameraObject
};

#define 	GYM_BIKE    	(1)
#define 	GYM_BENCH    	(2)
#define 	GYM_RUN    		(3)
#define 	GYM_DUMB    	(4)

enum gymData {
	gymID,
	gymExists,
	gymType,
	
	gymInterior,
	gymWorld,
	

	gymObject_1,
	Float:gymObjectPos_1[6],

	gymObject_2,
	Float:gymObjectPos_2[6],

	Float:gymPlayerPos[4],
	Text3D:gymText3D,

	gymUsed,
	gymPlayerUse
};

enum pickupData {
	pickupID,
	pickupExists,
	Float:pickupPos[3],
	Float:pickupRange,
	pickupText[500],
	pickupIcon,
	pickupInterior,
	pickupWorld,
	Text3D:pickupText3D,
	pickupPickup
};

enum cabineData {
	cabineID,
	cabineExists,
	cabineObject,
	Float:cabinePos[4],
	cabineInterior,
	cabineWorld,
	Text3D:cabineText3D,
	cabineNumber,
	
	cabineCallID // ID du joueur qui appel la cabine (INVALID_PLAYER_ID si invalide)
};

enum signData {
	signID,
	signExists,
	signObject,
	signModel,
	Float:signPos[4]
};

enum actorData {
	actorID,
	actorExists,
	actorSkin,
	actorBiz,
	actorName[25],
	Float:actorPos[4],
	actorWorld,
	Text3D:actorText3D,
	actorObject,
	actorText[100],

	anim_Lib[50],
	anim_Name[50],
	Float:anim_Speed,
	anim_Loop,
	anim_LockX,
	anim_LockY,
	anim_Freeze,
	anim_Time
};

enum corpseData {
	corpseObject,
	corpseExists,
	Float:corpsePos[4],
	corpseWorld,
	corpseInt,
	corpseObject_secondary,
	bool:corpseUsed,
	bool:corpseFire,
	corpseCar,

	// DATA CORPSE :
	corpsePlayer[MAX_PLAYER_NAME +1],
	corpseTimeDeath,
	corpseTimeDeath_format[50],
	corpseWeapon,
	corpseSkin,
	corpseMoney,
	corpsePhone[50],
	corpseRadio[50]
};

enum vendorData {
	vendorID,
	vendorExists,
	vendorType,
	Float:vendorPos[6],
	vendorInterior,
	vendorWorld,
	Text3D:vendorText3D,
	vendorObject
};

enum boomboxData {
	boomboxPlaced,
	Float:boomboxPos[3],
	boomboxInterior,
	boomboxWorld,
	boomboxObject,
	boomboxURL[128 char],
	Text3D:boomboxText3D
};

enum rackData {
	rackID,
	rackExists,
	rackHouse,
	Float:rackPos[4],
	rackInterior,
	rackWorld,
	rackWeapons[4],
	rackAmmo[4],
	rackObjects[5],
	Text3D:rackText3D
};

enum speedData {
	speedID,
	speedExists,
	Float:speedPos[6],
	Float:speedRange,
	Float:speedLimit,
	speedObject,
	Text3D:speedText3D
};

enum graffitiData {
	graffitiID,
	graffitiExists,
	Float:graffitiPos[6],
	graffitiObject,
	graffitiColor,
	graffitiModelID,
	graffitiFaction,
	graffitiText[64],
	graffitiFont[64],
	graffitiSize
};

enum detectorData {
	detectorID,
	detectorExists,
	Float:detectorPos[4],
	detectorInterior,
	detectorWorld,
	detectorObject[2]
};

enum tag_TempData {
	tagID,
	tagType,
	tagText[16],
	tagColor,
	tagFont[20],
	tagSize
};

new g_iHandle;
new g_StatusOOC;
new g_StatusIRC;
new g_TaxVault;
new g_ServerLocked;
new Text:gServerTextdraws[4];

new g_aFireObjects[36] = {INVALID_OBJECT_ID, ...};
new g_aFireExtinguished[36];

new GraffitiData[MAX_GRAFFITI_POINTS][graffitiData];
new MetalDetectors[MAX_METAL_DETECTORS][detectorData];
new BarricadeData[MAX_BARRICADES][barricadeData];

new VendorData[MAX_VENDORS][vendorData];
new SpeedData[MAX_SPEED_CAMERAS][speedData];

new BoomboxData[MAX_PLAYERS][boomboxData];
new RackData[MAX_WEAPON_RACKS][rackData];

new ATMData[MAX_ATM_MACHINES][atmData];
new GarbageData[MAX_GARBAGE_BINS][garbageData];
new CameraData[MAX_CAMERAS][cameraData];
new GymData[MAX_GYM][gymData];
new PickupData[MAX_DYNAMICS_PICKUPS][pickupData];
new CabineData[MAX_CABINES][cabineData];
new SignData[MAX_SIGNS][signData];
new ActorData[MAX_ACTORS][actorData];
new CorpseData[MAX_CORPSE][corpseData];
new corpseData_inventory[MAX_CORPSE][MAX_INVENTORY][inventoryData];

new BackpackData[MAX_BACKPACKS][backpackData];
new BackpackItems[MAX_BACKPACK_ITEMS][backpackItems];

new BackpackListed[MAX_PLAYERS][MAX_BACKPACK_CAPACITY];
new ImpoundData[MAX_IMPOUND_LOTS][impoundData];

new PlayerData[MAX_PLAYERS][playerData];
new Float:AccessoryData[MAX_PLAYERS][3][9];
new AstucesChallenges[MAX_PLAYERS][MAX_CHALLENGES];
new TicketData[MAX_PLAYERS][MAX_PLAYER_TICKETS][ticketData];
new ListedVehicles[MAX_PLAYERS][MAX_OWNABLE_CARS];

new InventoryData[MAX_PLAYERS][MAX_INVENTORY][inventoryData];
new ContactData[MAX_PLAYERS][MAX_CONTACTS][contactData];
new LocationData[MAX_PLAYERS][MAX_GPS_LOCATIONS][locationData];

new ListedFurniture[MAX_PLAYERS][MAX_HOUSE_FURNITURE];
new ListedDoors[MAX_PLAYERS][MAX_GATES];
new NearestItems[MAX_PLAYERS][MAX_LISTED_ITEMS];
new ListedContacts[MAX_PLAYERS][MAX_CONTACTS];

new ReportData[MAX_REPORTS][reportData];
new ArrestData[MAX_ARREST_POINTS][arrestPoints];

new BusinessData[MAX_BUSINESSES][businessData];
new PumpData[MAX_GAS_PUMPS][pumpData];
new DealershipCars[MAX_BUSINESSES][MAX_DEALERSHIP_CARS][dealershipCars];

new DroppedItems[MAX_DROPPED_ITEMS][droppedItems];
new EntranceData[MAX_ENTRANCES][entranceData];

new CarData[MAX_DYNAMIC_CARS][carData];
new CarStorage[MAX_DYNAMIC_CARS][MAX_CAR_STORAGE][carStorage];

new HouseData[MAX_HOUSES][houseData];
new HouseStorage[MAX_HOUSES][MAX_HOUSE_STORAGE][houseStorage];
new FurnitureData[MAX_FURNITURE][furnitureData];

new JobData[MAX_DYNAMIC_JOBS][jobData];
new CrateData[MAX_CRATES][crateData];
new PlantData[MAX_DRUG_PLANTS][plantData];

new FactionData[MAX_FACTIONS][factionData];
new FactionRanks[MAX_FACTIONS][15][32];
new GateData[MAX_GATES][gateData];

new TagData_temp[MAX_PLAYERS][tag_TempData];
/*
0 to 10: Character textdraws
11 to 22: ID card
23 to 33: Character customization
34 to 38: Speedometer
39: Footer textdraw
40 to 49: Stats textdraw
50 to 57: Character textdraw
58 to 61: Tutorial textdraws
62: House light
63 to 64: Hunger and thirst (percent)
65 to 66: Hunger and thirst (model icons)
67 to 68: Armor
69: GPS
*/

enum coreVehicles {
	vehFuel,
	vehWindowsDown,
	vehTemporary,
	vehLoads,
	vehLoadType,
	vehCrate,
	vehTrash,
	vehRepairing,
	vehSirenOn,
	vehSirenObject,
	vehRadio,
	vehURL[128 char],
	Float:vehLoadHealth,
	Float:vehLoadPos[3]
};

new CoreVehicles[MAX_VEHICLES][coreVehicles];

stock const g_aWeatherRotations[] = {
	14, 1, 7, 3, 5, 12, 9, 8, 15
};

enum e_InventoryItems {
	e_InventoryItem[35],
	e_InventoryModel
};

static const g_aInventoryItems[][e_InventoryItems] = {
	{"Marijuana", 1578},
	{"Cocaine", 1575},
	{"Heroine", 1577},
	{"Steroides", 1241},
	{"Graines de Marijuana", 1578},
	{"Coca", 1575}, // Graines de cocaine
	{"Opium", 1577},
	{"Burger", 2703},
	{"Pizza", 2702},
	{"Permis de conduire", 1581},
	{"Permis d'arme", 1581},
	{"Téléphone", 330},
	{"GPS", 18875},
	{"Spray Can", 365},
	{"Bouteille d'eau", 2958},
	{"Soda", 1543},
	{"Jerrican", 1650},
	{"Pied de biche", 18634},
	{"Briquet", 19998},
	{"Boombox", 2226},
	//{"Masque", 19036},
	//{"First Aid", 1580},
	{"Caisse à outils", 920},
	{"NOS", 1010},
	{"Burger", 2768},
	{"Munitions", 2358},
	{"Gilet pare balle", 19142},
	{"Bouteille vide", 1484},
	{"Bombe", 1654},
	{"Carton", 928},
	{"Viande", 2663},
	{"Sac a dos", 3026},
	{"Radio", 18868},
	{"License de taxi (1)", 19308},
	{"License de taxi (2)", 19309},
	{"License de taxi (3)", 19310},
	{"License de taxi (4)", 19311}
};

static const Float:arrHospitalDeliver[2][3] = {
    {1177.8599, -1308.3982, 13.8301},
	/*{-2692.6580, 635.4608, 14.4531},
	{-334.9757, 1063.0171, 19.7392},
	{1579.9666, 1767.1462, 10.8203},
	{1243.9304, 331.4186, 19.5547},*/
	{2024.4246, -1404.1580, 17.2020}
};

static const Float:arrHospitalSpawns[2][4] = {
    {1172.8372, -1325.3186, 15.4000, 270.0000},
	/*{-2655.1240, 638.6232, 14.4531, 180.0000},
	{-318.8799, 1049.2433, 20.3403, 0.0000},
	{1607.4869, 1816.0693, 10.8203, 0.0000},
	{1241.6802, 326.4038, 19.7555, 335.0000},*/
	{2034.0670, -1402.6815, 17.2938, 180.0000}
};

static const Float:g_arrWeaponDamage[] = {
	1.32, 1.32, 4.62, 4.62, 2.64, 4.62, 4.62, 4.62, 2.64, 13.53, // 10
	4.62, 2.64, 4.62, 2.64, 4.62, 2.64, 0.00, 0.00, 0.00, 0.00, // 20
	0.00, 0.00, 35.0, 35.0, 60.0, 40.0, 35.0, 39.6, 6.60, 20.0, // 30
	35.0, 40.0, 25.0, 40.0, 155.0, 0.00, 0.00, 0.00, 46.2, 0.00, // 40
	0.00, 2.64, 2.64, 0.00, 0.00, 0.00, 1.32
};

static Gate_Model_List[] = {
	977, 1491, 1492, 1493, 1494, 1495, 1496, 1497, 1498, 1499, 1500, 1501, 1502, 1504, 1505, 1506, 1507, 1518, 1522, 1523, 1532,
	1533, 1534, 1535, 1536, 1537, 1538,  1555, 1556, 1557, 1560, 1561, 1566, 1567, 1569, 1649, 1651, 1966, 1980, 2004, 2558,
	2664, 2634, 3352, 3294, 4084, 3354, 5422, 5043, 5340, 5779, 5856, 6400, 7927, 7930, 7931, 9093, 10182, 8948, 9625, 10154, 11313,
	10575, 13817, 11360, 1302, 1360, 14483, 14638, 11360, 11359, 11416, 13188, 11319, 17951, 14819, 17564, 16775, 16773, 17566, 18553
};

static Doors_Model_List[] = {
	2875, 2664, 1492, 2876, 2963, 2879, 14819, 1507, 2911, 1505, 1532, 1495, 19860, 1493, 19439, 2947, 3029, 2877, 2959, 2973,
	1566, 1569, 3109, 1501, 1504, 1506, 1496, 1498, 1556, 1500, 1560, 1557, 2970, 1555, 1537, 1536, 1533, 1535
};

static const g_aWeaponSlots[] = {
	0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 10, 10, 10, 10, 10, 10, 8, 8, 8, 0, 0, 0, 2, 2, 2, 3, 3, 3, 4, 4, 5, 5, 4, 6, 6, 7, 7, 7, 7, 8, 12, 9, 9, 9, 11, 11, 11
};

static const Float:spawnMine[][3] = {
    {670.500732, 926.557067, -41.475772},
    {678.838012, 925.259582, -41.473415},
    {673.852478, 922.303161, -41.548767},
    {679.489379, 917.357727, -41.276176},
    {673.862670, 914.984008, -41.207321},
    {666.973205, 921.626342, -41.613155},
    {686.447021, 913.041320, -40.560043},
    {679.475769, 910.190124, -41.048439},
    {689.223510, 906.631835, -40.269996},
    {683.865295, 905.557067, -40.672229},
    {685.984741, 899.446899, -40.296852},
    {694.975097, 902.076049, -39.668643},
    {692.622558, 896.177978, -39.817611},
    {697.621154, 891.354370, -39.355659},
    {687.311584, 891.855468, -40.107055},
    {692.106262, 887.992187, -39.684555},
    {690.451110, 879.733947, -40.143363},
    {696.097167, 882.666015, -39.491031},
    {694.623901, 872.130493, -41.227066},
    {693.549255, 862.414123, -43.129112},
    {688.462280, 868.132019, -42.136383},
    {688.172607, 857.167358, -43.610939},
    {667.181762, 819.235046, -43.610939},
    {663.166503, 811.138061, -43.610939},
    {654.977294, 812.527770, -43.610939},
    {651.793762, 805.835571, -43.610939},
    {660.028137, 820.449340, -43.610939},
    {646.762756, 814.375671, -43.610939},
    {643.352294, 808.098266, -43.610939},
    {637.106994, 812.568725, -43.610939},
    {630.459289, 810.016418, -43.610939},
    {624.303833, 813.422485, -43.610939},
    {615.880615, 812.158264, -43.610939},
    {610.537963, 815.100646, -43.603439},
    {603.759033, 817.793640, -43.646705},
    {597.451904, 822.874328, -43.579505},
    {605.012512, 823.405212, -43.728958},
    {618.658691, 818.265625, -43.603439},
    {580.120239, 931.571899, -43.610939},
    {569.243530, 928.569763, -43.610939},
    {560.821105, 926.251770, -43.610939},
    {576.770385, 923.246215, -43.610939},
    {567.994628, 919.691223, -43.610939},
    {575.571472, 916.415344, -43.664150},
    {569.872924, 912.386962, -43.610939},
    {587.315368, 913.924743, -43.796096},
    {582.004028, 910.695190, -43.892337},
    {560.253540, 909.118286, -43.610939},
    {560.626708, 917.773559, -43.610939},
    {530.954040, 909.995849, -43.610939},
    {611.991699, 933.569702, -40.581710},
    {609.077209, 922.338073, -42.479446},
    {608.724792, 927.748413, -41.762489},
    {649.643249, 928.250976, -39.830272},
    {653.457092, 922.054199, -41.079425},
    {644.637756, 922.242431, -41.463893},
    {647.455993, 914.794494, -42.107845},
    {657.229248, 914.974731, -41.061988},
    {590.929870, 838.788818, -43.386558},
    {600.051147, 841.034545, -44.017189},
    {590.187194, 846.630859, -43.336963},
    {582.725158, 843.719238, -43.011596},
    {576.576538, 849.726928, -43.056209},
    {573.548828, 844.638610, -42.740356},
    {566.613159, 843.542358, -42.616565},
    {559.421691, 840.400390, -42.141761},
    {552.358398, 837.908569, -41.532897},
    {562.215698, 848.450744, -42.990608},
    {553.209289, 843.931945, -42.226833},
    {545.759094, 836.563537, -41.645462},
    {546.358886, 844.129211, -42.148715},
    {553.752990, 849.901916, -42.900249},
    {539.853637, 845.818481, -42.563919},
    {528.839843, 843.820007, -43.529937},
    {533.157653, 848.349853, -43.296516},
    {520.944458, 846.692749, -43.610939},
    {526.440917, 850.654602, -43.610939},
    {536.822448, 852.424804, -43.107326},
    {546.298095, 850.573242, -42.897747},
    {551.512939, 879.981933, -43.265190},
    {559.212646, 886.721923, -43.916355},
    {566.831054, 885.784973, -44.073543},
    {574.826660, 883.917602, -44.008312},
    {573.601867, 877.364135, -44.474807},
    {573.405334, 865.376098, -43.900402},
    {566.972229, 867.566162, -44.025466},
    {566.110717, 875.090148, -44.276050},
    {559.155700, 867.633850, -43.972709},
    {552.657165, 871.074157, -43.586654},
    {590.525634, 884.257019, -44.786952},
    {581.356384, 885.243469, -44.612636},
    {595.025329, 891.404907, -45.047763},
    {601.949951, 893.569396, -45.066448},
    {599.344055, 887.141723, -44.512237},
    {597.956787, 880.352294, -43.925403},
    {597.799316, 872.847290, -43.639019},
    {603.701110, 881.868469, -43.749420},
    {609.776245, 877.436706, -43.610939},
    {609.780212, 888.589721, -44.169811},
    {609.496215, 894.040039, -44.493488},
    {615.364379, 883.519409, -43.610939},
    {616.436218, 866.841308, -43.610939},
    {624.843017, 869.950256, -43.603439},
    {620.875671, 875.108886, -43.603439},
    {631.959045, 874.122375, -43.603439},
    {626.006774, 879.856384, -43.610939},
    {638.100219, 880.400573, -43.610939},
    {634.172485, 885.813476, -43.610939},
    {635.576660, 893.294067, -43.603439},
    {641.967956, 898.003051, -43.558959},
    {648.679199, 897.242004, -42.743541},
    {654.830322, 895.541931, -42.002933},
    {662.546447, 893.076171, -41.048439},
    {652.472778, 889.743713, -42.355361},
    {644.680358, 887.102661, -43.205955},
    {638.895996, 888.600891, -43.603439},
    {643.382629, 892.997375, -43.376350},
    {681.386230, 863.475097, -42.681892},
    {646.588012, 860.239013, -43.376369},
    {648.004821, 851.773437, -43.610939},
    {654.417053, 855.355895, -43.610939},
    {660.318481, 849.473388, -43.610939},
    {661.591796, 861.592041, -43.277667},
    {660.899780, 867.371459, -42.788570}
};

static const g_aPreloadLibs[][] =
{
	"AIRPORT",      "ATTRACTORS",   "BAR",          "BASEBALL",     "BD_FIRE",
	"BEACH",        "BENCHPRESS",   "BF_INJECTION", "BIKE_DBZ",     "BIKED",
	"BIKEH",        "BIKELEAP",     "BIKES",        "BIKEV",        "BLOWJOBZ",
	"BMX",          "BOMBER",       "BOX",          "BSKTBALL",     "BUDDY",
	"BUS",          "CAMERA",       "CAR",          "CAR_CHAT",     "CARRY",
	"CASINO",       "CHAINSAW",     "CHOPPA",       "CLOTHES",      "COACH",
	"COLT45",       "COP_AMBIENT",  "COP_DVBYZ",    "CRACK",        "CRIB",
	"DAM_JUMP",     "DANCING",      "DEALER",       "DILDO",        "DODGE",
	"DOZER",        "DRIVEBYS",     "FAT",          "FIGHT_B",      "FIGHT_C",
	"FIGHT_D",      "FIGHT_E",      "FINALE",       "FINALE2",      "FLAME",
	"FLOWERS",      "FOOD",         "FREEWEIGHTS",  "GANGS",        "GFUNK",
	"GHANDS",       "GHETTO_DB",    "GOGGLES",      "GRAFFITI",     "GRAVEYARD",
	"GRENADE",      "GYMNASIUM",    "HAIRCUTS",     "HEIST9",       "INT_HOUSE",
	"INT_OFFICE",   "INT_SHOP",     "JST_BUISNESS", "KART",         "KISSING",
	"KNIFE",        "LAPDAN1",      "LAPDAN2",      "LAPDAN3",      "LOWRIDER",
	"MD_CHASE",     "MD_END",       "MEDIC",        "MISC",         "MTB",
	"MUSCULAR",     "NEVADA",       "ON_LOOKERS",   "OTB",          "PARACHUTE",
	"PARK",         "PAULNMAC",     "PED",          "PLAYER_DVBYS", "PLAYIDLES",
	"POLICE",       "POOL",         "POOR",         "PYTHON",       "QUAD",
	"QUAD_DBZ",     "RAPPING",      "RIFLE",        "RIOT",         "ROB_BANK",
	"ROCKET",       "RUNNINGMAN",   "RUSTLER",      "RYDER",        "SCRATCHING",
	"SEX",          "SHAMAL",       "SHOP",         "SHOTGUN",      "SILENCED",
	"SKATE",        "SMOKING",      "SNIPER",       "SNM",          "SPRAYCAN",
	"STRIP",        "SUNBATHE",     "SWAT",         "SWEET",        "SWIM",
	"SWORD",        "TANK",         "TATTOOS",      "TEC",          "TRAIN",
	"TRUCK",        "UZI",          "VAN",          "VENDING",      "VORTEX",
	"WAYFARER",     "WEAPONS",      "WOP",          "WUZI"
};

enum houseInteriors {
	eHouseInterior,
	Float:eHouseX,
	Float:eHouseY,
	Float:eHouseZ,
	Float:eHouseAngle
};

static const Float:arrHouseInteriors[20][houseInteriors] = {
	{10, 2269.8772, -1210.3240, 1047.5625, 90.0000},
	{2, 2468.2576, -1698.2361, 1013.5078, 90.0000},
	{3, 2495.8711, -1693.0996, 1014.7422, 180.0000},
	{5, 2233.7888, -1114.2689, 1050.8828, 0.0000},
	{9, 2317.8015, -1026.2113, 1050.2178, 0.0000},
	{3, 235.2923, 1187.3684, 1080.2578, 0.0000},
	{2, 226.2912, 1240.0554, 1082.1406, 90.0000},
	{1, 223.1618, 1287.5175, 1082.1406, 0.0000},
	{5, 226.9281, 1114.2813, 1080.9962, 270.0000},
	{15, 295.1485, 1473.1080, 1080.2578, 0.0000},
	{10, 23.9584, 1340.6075, 1084.3750, 0.0000},
	{4, 222.0425, 1140.7565, 1082.6094, 0.0000},
	{12, 2324.4209, -1148.9365, 1050.7101, 0.0000},
	{4, -261.1430, 1456.6396, 1084.3672, 90.0000},
	{5, 22.9676, 1403.8368, 1084.4297, 0.0000},
	{5, 140.3088, 1366.8196, 1083.8594, 0.0000},
	{6, 234.3149, 1064.2772, 1084.2114, 0.0000},
	{7, 225.7000, 1022.0012, 1084.0161, 0.0000},
	{5, 1298.9750, -796.4567, 1084.0078, 0.0000},
	{15, -283.8687, 1471.1174, 1084.3750, 90.0000}
};

static const Float:positionReleaseCar[][] = {
	{2368.9075, -2316.8652, 13.2523, 45.0000},
	{2372.3665, -2312.5286, 13.2517, 45.0000},
	{2377.4707, -2308.2632, 13.2502, 45.0000},
	{2380.7156, -2304.7795, 13.2485, 45.0000},
	{2385.6038, -2299.8972, 13.2460, 45.0000},
	{2390.1492, -2295.4585, 13.2461, 45.0000},
	{2393.4771, -2291.9709, 13.2496, 45.0000}
};

static stock g_arrVehicleNames[][] = {
	"Landstalker", "Bravura", "Buffalo", "Linerunner", "Perrenial", "Sentinel", "Dumper", "Firetruck", "Trashmaster",
	"Stretch", "Manana", "Infernus", "Voodoo", "Pony", "Mule", "Cheetah", "Ambulance", "Leviathan", "Moonbeam",
	"Esperanto", "Taxi", "Washington", "Bobcat", "Whoopee", "BF Injection", "Hunter", "Premier", "Enforcer",
	"Securicar", "Banshee", "Predator", "Bus", "Rhino", "Barracks", "Hotknife", "Trailer", "Previon", "Coach",
	"Cabbie", "Stallion", "Rumpo", "RC Bandit", "Romero", "Packer", "Monster", "Admiral", "Squalo", "Seasparrow",
	"Pizzaboy", "Tram", "Trailer", "Turismo", "Speeder", "Reefer", "Tropic", "Flatbed", "Yankee", "Caddy", "Solair",
	"Berkley's RC Van", "Skimmer", "PCJ-600", "Faggio", "Freeway", "RC Baron", "RC Raider", "Glendale", "Oceanic",
	"Sanchez", "Sparrow", "Patriot", "Quad", "Coastguard", "Dinghy", "Hermes", "Sabre", "Rustler", "ZR-350", "Walton",
	"Regina", "Comet", "BMX", "Burrito", "Camper", "Marquis", "Baggage", "Dozer", "Maverick", "News Chopper", "Rancher",
	"FBI Rancher", "Virgo", "Greenwood", "Jetmax", "Hotring", "Sandking", "Blista Compact", "Police Maverick",
	"Boxville", "Benson", "Mesa", "RC Goblin", "Hotring Racer A", "Hotring Racer B", "Bloodring Banger", "Rancher",
	"Super GT", "Elegant", "Journey", "Bike", "Mountain Bike", "Beagle", "Cropduster", "Stunt", "Tanker", "Roadtrain",
	"Nebula", "Majestic", "Buccaneer", "Shamal", "Hydra", "FCR-900", "NRG-500", "HPV1000", "Cement Truck", "Tow Truck",
	"Fortune", "Cadrona", "SWAT Truck", "Willard", "Forklift", "Tractor", "Combine", "Feltzer", "Remington", "Slamvan",
	"Blade", "Streak", "Freight", "Vortex", "Vincent", "Bullet", "Clover", "Sadler", "Firetruck", "Hustler", "Intruder",
	"Primo", "Cargobob", "Tampa", "Sunrise", "Merit", "Utility", "Nevada", "Yosemite", "Windsor", "Monster", "Monster",
	"Uranus", "Jester", "Sultan", "Stratum", "Elegy", "Raindance", "RC Tiger", "Flash", "Tahoma", "Savanna", "Bandito",
	"Freight Flat", "Streak Carriage", "Kart", "Mower", "Dune", "Sweeper", "Broadway", "Tornado", "AT-400", "DFT-30",
	"Huntley", "Stafford", "BF-400", "News Van", "Tug", "Trailer", "Emperor", "Wayfarer", "Euros", "Hotdog", "Club",
	"Freight Box", "Trailer", "Andromada", "Dodo", "RC Cam", "Launch", "LSPD Car", "SFPD Car", "LVPD Car",
	"Police Rancher", "Picador", "S.W.A.T", "Alpha", "Phoenix", "Glendale", "Sadler", "Luggage", "Luggage", "Stairs",
	"Boxville", "Tiller", "Utility Trailer"
};

enum e_InteriorData {
	e_InteriorName[32],
	e_InteriorID,
	Float:e_InteriorX,
	Float:e_InteriorY,
	Float:e_InteriorZ
};

enum _vehDat
{
        _vehModel,
        Float:_attPos
}

new attInfo[212][_vehDat] =
{
        {400, 0.85},
        {401, 0.8},
        {402, 0.79},
        {403, 2.15},
        {404, -1.0},
        {405, 0.73},
        {406, -1.0},
        {407, -1.0},
        {408, -1.0},
        {409, 0.8},
        {410, 0.899999},
        {411, 0.699999},
        {412, 0.699999},
        {413, 1.149999},
        {414, 2.4},
        {415, 0.61},
        {416, -1.0},
        {417, -1.0},
        {418, 1.1},
        {419, 0.699999},
        {420, -1.0},
        {421, 0.699999},
        {422, -1.0},
        {423, -1.0},
        {424, -1.0},
        {425, -1.0},
        {426, 0.85},
        {427, -1.0},
        {428, 1.6},
        {429, -1.0},
        {430, -1.0},
        {431, -1.0},
        {432, -1.0},
        {433, -1.0},
        {434, 0.8},
        {435, -1.0},
        {436, 0.8},
        {437, -1.0},
        {438, -1.0},
        {439, -1.0},
        {440, 1.269999},
        {441, -1.0},
        {442, 0.92},
        {443, -1.0},
        {444, -1.0},
        {445, 0.86},
        {446, -1.0},
        {447, -1.0},
        {448, -1.0},
        {449, -1.0},
        {450, -1.0},
        {451, 0.569999},
        {452, -1.0},
        {453, -1.0},
        {454, -1.0},
        {455, -1.0},
        {456, -1.0},
        {457, -1.0},
        {458, 0.759999},
        {459, -1.0},
        {460, -1.0},
        {461, -1.0},
        {462, -1.0},
        {463, -1.0},
        {464, -1.0},
        {465, -1.0},
        {466, 0.86},
        {467, 0.86},
        {468, -1.0},
        {469, -1.0},
        {470, 1.1},
        {471, -1.0},
        {472, -1.0},
        {473, -1.0},
        {474, 0.839999},
        {475, 0.699999},
        {476, -1.0},
        {477, 0.699999},
        {478, -1.0},
        {479, 1.0},
        {480, -1.0},
        {481, -1.0},
        {482, 1.0},
        {483, 1.049999},
        {484, -1.0},
        {485, -1.0},
        {486, -1.0},
        {487, -1.0},
        {488, -1.0},
        {489, 1.1},
        {490, -1.0},
        {491, 0.699999},
        {492, 0.87},
        {493, -1.0},
        {494, 0.74},
        {495, 1.039999},
        {496, 0.839999},
        {497, -1.0},
        {498, -1.0},
        {499, -1.0},
        {500, 1.0},
        {501, -1.0},
        {502, -1.0},
        {503, -1.0},
        {504, 0.899999},
        {505, -1.0},
        {506, -1.0},
        {507, 0.81},
        {508, -1.0},
        {509, -1.0},
        {510, -1.0},
        {511, -1.0},
        {512, -1.0},
        {513, -1.0},
        {514, 1.549999},
        {515, 1.47},
        {516, 0.86},
        {517, 0.86},
        {518, 0.699999},
        {519, -1.0},
        {520, -1.0},
        {521, -1.0},
        {522, -1.0},
        {523, -1.0},
        {524, -1.0},
        {525, -1.0},
        {526, 0.68},
        {527, 0.85},
        {528, 1.1},
        {529, 0.92},
        {530, -1.0},
        {531, -1.0},
        {532, -1.0},
        {533, -1.0},
        {534, 0.649999},
        {535, -1.0},
        {536, -1.0},
        {537, -1.0},
        {538, -1.0},
        {539, -1.0},
        {540, 0.73},
        {541, 0.639999},
        {542, 0.85},
        {543, -1.0},
        {544, -1.0},
        {545, 0.769999},
        {546, 0.85},
        {547, 0.899999},
        {548, -1.0},
        {549, 0.709999},
        {550, 0.74},
        {551, 0.899999},
        {552, -1.0},
        {553, -1.0},
        {554, -1.0},
        {555, -1.0},
        {556, -1.0},
        {557, -1.0},
        {558, 0.87},
        {559, 0.759999},
        {560, 0.87},
        {561, 0.87},
        {562, 0.8},
        {563, -1.0},
        {564, -1.0},
        {565, 0.699999},
        {566, 0.85},
        {567, -1.0},
        {568, -1.0},
        {569, -1.0},
        {570, -1.0},
        {571, -1.0},
        {572, -1.0},
        {573, -1.0},
        {574, -1.0},
        {575, -1.0},
        {576, 0.899999},
        {577, -1.0},
        {578, -1.0},
        {579, 1.24},
        {580, 1.059999},
        {581, -1.0},
        {582, -1.0},
        {583, -1.0},
        {584, -1.0},
        {585, 1.0},
        {586, -1.0},
        {587, 0.73},
        {588, -1.0},
        {589, 1.1},
        {590, -1.0},
        {591, -1.0},
        {592, -1.0},
        {593, -1.0},
        {594, -1.0},
        {595, -1.0},
        {596, -1.0},
        {597, -1.0},
        {598, -1.0},
        {599, -1.0},
        {600, -1.0},
        {601, -1.0},
        {602, 0.709999},
        {603, 0.68},
        {604, -1.0},
        {605, -1.0},
        {606, -1.0},
        {607, -1.0},
        {608, -1.0},
        {609, -1.0},
        {610, -1.0},
        {611, -1.0}
};

static const g_arrInteriorData[][e_InteriorData] = {
	{"24/7 1", 17, -25.884498, -185.868988, 1003.546875},
	{"24/7 2", 10, 6.091179, -29.271898, 1003.549438},
	{"24/7 3", 18, -30.946699, -89.609596, 1003.546875},
	{"24/7 4", 16, -25.132598, -139.066986, 1003.546875},
	{"24/7 5", 4, -27.312299, -29.277599, 1003.557250},
	{"24/7 6", 6, -26.691598, -55.714897, 1003.546875},
	{"Airport Ticket", 14, -1827.147338, 7.207417, 1061.143554},
	{"Airport Baggage", 14, -1861.936889, 54.908092, 1061.143554},
	{"Shamal", 1, 1.808619, 32.384357, 1199.593750},
	{"Andromada", 9, 315.745086, 984.969299, 1958.919067},
	{"Ammunation 1", 1, 286.148986, -40.644397, 1001.515625},
	{"Ammunation 2", 4, 286.800994, -82.547599, 1001.515625},
	{"Ammunation 3", 6, 296.919982, -108.071998, 1001.515625},
	{"Ammunation 4", 7, 314.820983, -141.431991, 999.601562},
	{"Ammunation 5", 6, 316.524993, -167.706985, 999.593750},
	{"Ammunation Booths", 7, 302.292877, -143.139099, 1004.062500},
	{"Ammunation Range", 7, 298.507934, -141.647048, 1004.054748},
	{"Blastin Fools Hallway", 3, 1038.531372, 0.111030, 1001.284484},
	{"Budget Inn Motel Room", 12, 444.646911, 508.239044, 1001.419494},
	{"Jefferson Motel", 15, 2215.454833, -1147.475585, 1025.796875},
	{"Off Track Betting Shop", 3, 833.269775, 10.588416, 1004.179687},
	{"Sex Shop", 3, -103.559165, -24.225606, 1000.718750},
	{"Meat Factory", 1, 963.418762, 2108.292480, 1011.030273},
	{"Zero's RC shop", 6, -2240.468505, 137.060440, 1035.414062},
	{"Dillimore Gas", 0, 663.836242, -575.605407, 16.343263},
	{"Catigula's Basement", 1, 2169.461181, 1618.798339, 999.976562},
	{"FC Janitor Room", 10, 1889.953369, 1017.438293, 31.882812},
	{"Woozie's Office", 1, -2159.122802, 641.517517, 1052.381713},
	{"Binco", 15, 207.737991, -109.019996, 1005.132812},
	{"Didier Sachs", 14, 204.332992, -166.694992, 1000.523437},
	{"Prolaps", 3, 207.054992, -138.804992, 1003.507812},
	{"Suburban", 1, 203.777999, -48.492397, 1001.804687},
	{"Victim", 5, 226.293991, -7.431529, 1002.210937},
	{"Zip", 18, 161.391006, -93.159156, 1001.804687},
	{"Club", 17, 493.390991, -22.722799, 1000.679687},
	{"Bar", 11, 501.980987, -69.150199, 998.757812},
	{"Lil' Probe Inn", 18, -227.027999, 1401.229980, 27.765625},
	{"Jay's Diner", 4, 457.304748, -88.428497, 999.554687},
	{"Gant Bridge Diner", 5, 454.973937, -110.104995, 1000.077209},
	{"Secret Valley Diner", 6, 435.271331, -80.958938, 999.554687},
	{"World of Coq", 1, 452.489990, -18.179698, 1001.132812},
	{"Welcome Pump", 1, 681.557861, -455.680053, -25.609874},
	{"Burger Shot", 10, 375.962463, -65.816848, 1001.507812},
	{"Cluckin' Bell", 9, 369.579528, -4.487294, 1001.858886},
	{"Well Stacked Pizza", 5, 373.825653, -117.270904, 1001.499511},
	{"Rusty Browns Donuts", 17, 381.169189, -188.803024, 1000.632812},
	{"Denise's Room", 1, 244.411987, 305.032989, 999.148437},
	{"Katie's Room", 2, 271.884979, 306.631988, 999.148437},
	{"Helena's Room", 3, 291.282989, 310.031982, 999.148437},
	{"Michelle's Room", 4, 302.180999, 300.722991, 999.148437},
	{"Barbara's Room", 5, 322.197998, 302.497985, 999.148437},
	{"Millie's Room", 6, 346.870025, 309.259033, 999.155700},
	{"Sherman Dam", 17, -959.564392, 1848.576782, 9.000000},
	{"Planning Dept", 3, 384.808624, 173.804992, 1008.382812},
	{"Area 51", 0, 223.431976, 1872.400268, 13.734375},
	{"LS Gym", 5, 772.111999, -3.898649, 1000.728820},
	{"SF Gym", 6, 774.213989, -48.924297, 1000.585937},
	{"LV Gym", 7, 773.579956, -77.096694, 1000.655029},
	{"B-Dup's House", 3, 1527.229980, -11.574499, 1002.097106},
	{"B-Dup's Crack Pad", 2, 1523.509887, -47.821197, 1002.130981},
	{"CJ's House", 3, 2496.049804, -1695.238159, 1014.742187},
	{"Madd Doggs Mansion", 5, 1267.663208, -781.323242, 1091.906250},
	{"OG Loc's House", 3, 513.882507, -11.269994, 1001.565307},
	{"Ryders House", 2, 2454.717041, -1700.871582, 1013.515197},
	{"Sweet's House", 1, 2527.654052, -1679.388305, 1015.498596},
	{"Crack Factory", 2, 2543.462646, -1308.379882, 1026.728393},
	{"Big Spread Ranch", 3, 1212.019897, -28.663099, 1000.953125},
	{"Fanny batters", 6, 761.412963, 1440.191650, 1102.703125},
	{"Strip Club", 2, 1204.809936, -11.586799, 1000.921875},
	{"Strip Club (Private Room)", 2, 1204.809936, 13.897239, 1000.921875},
	{"Unnamed Brothel", 3, 942.171997, -16.542755, 1000.929687},
	{"Tiger Skin Brothel", 3, 964.106994, -53.205497, 1001.124572},
	{"Pleasure Domes", 3, -2640.762939, 1406.682006, 906.460937},
	{"Liberty City Outside", 1, -729.276000, 503.086944, 1371.971801},
	{"Liberty City Inside", 1, -794.806396, 497.738037, 1376.195312},
	{"Gang House", 5, 2350.339843, -1181.649902, 1027.976562},
	{"Colonel Furhberger's", 8, 2807.619873, -1171.899902, 1025.570312},
	{"Crack Den", 5, 318.564971, 1118.209960, 1083.882812},
	{"Warehouse 1", 1, 1412.639892, -1.787510, 1000.924377},
	{"Warehouse 2", 18, 1302.519897, -1.787510, 1001.028259},
	{"Sweet's Garage", 0, 2522.000000, -1673.383911, 14.866223},
	{"Lil' Probe Inn Toilet", 18, -221.059051, 1408.984008, 27.773437},
	{"Unused Safe House", 12, 2324.419921, -1145.568359, 1050.710083},
	{"RC Battlefield", 10, -975.975708, 1060.983032, 1345.671875},
	{"Barber 1", 2, 411.625976, -21.433298, 1001.804687},
	{"Barber 2", 3, 418.652984, -82.639793, 1001.804687},
	{"Barber 3", 12, 412.021972, -52.649898, 1001.898437},
	{"Tatoo Parlor 1", 16, -204.439987, -26.453998, 1002.273437},
	{"Tatoo Parlor 2", 17, -204.439987, -8.469599, 1002.273437},
	{"Tatoo Parlor 3", 3, -204.439987, -43.652496, 1002.273437},
	{"LS Police HQ", 6, 246.783996, 63.900199, 1003.640625},
	{"SF Police HQ", 10, 246.375991, 109.245994, 1003.218750},
	{"LV Police HQ", 3, 288.745971, 169.350997, 1007.171875},
	{"Driving School", 3, -2029.798339, -106.675910, 1035.171875},
	{"8-Track", 7, -1398.065307, -217.028900, 1051.115844},
	{"Bloodbowl", 15, -1398.103515, 937.631164, 1036.479125},
	{"Dirt Track", 4, -1444.645507, -664.526000, 1053.572998},
	{"Kickstart", 14, -1465.268676, 1557.868286, 1052.531250},
	{"Vice Stadium", 1, -1401.829956, 107.051300, 1032.273437},
	{"SF Garage", 0, -1790.378295, 1436.949829, 7.187500},
	{"LS Garage", 0, 1643.839843, -1514.819580, 13.566620},
	{"SF Bomb Shop", 0, -1685.636474, 1035.476196, 45.210937},
	{"Blueberry Warehouse", 0, 76.632553, -301.156829, 1.578125},
	{"LV Warehouse 1", 0, 1059.895996, 2081.685791, 10.820312},
	{"LV Warehouse 2 (hidden part)", 0, 1059.180175, 2148.938720, 10.820312},
	{"Caligula's Hidden Room", 1, 2131.507812, 1600.818481, 1008.359375},
	{"Bank", 0,  1739.17651, -1135.70007, 24.33024},
	{"Bank (Behind Desk)", 0, 1429.1047, -986.1868, 996.1050},
	{"LS Atrium", 18, 1710.433715, -1669.379272, 20.225049}
};


#define MAX_POSITION_TAXI (5)
static const Float:arrPositionSpawnTaxi[MAX_POSITION_TAXI][4] = {
	{1270.3545, -1557.6337, 13.3451, 270.3194},
	{1270.3545, -1550.8629, 13.3451, 270.3194},
	{1270.3545, -1544.0594, 13.3451, 270.3194},
	{1270.3545, -1537.3737, 13.3451, 270.3194},
	{1270.3545, -1530.5121, 13.3451, 270.3194}
};

static const Float:g_arrLicenseTaxiCheckpoints[][] = {
	{1295.1294, -1588.0934,  13.1610},
	{1275.8347, -1709.2300,  13.1622},
	{1173.1250, -1745.9982,  13.1767},
	{1172.6425, -1843.3619,  13.1805}, // +30km/h = éliminatoire (stop)
	{1097.4196, -1849.9382,  13.1628},
	{985.4553,  -1783.5405,  13.8551},
	{757.4784,  -1738.0214,  10.8758},
	{730.5139,  -1584.2507,  14.0247},
	{600.7866,  -1582.4099,  15.7856},
	{452.7959,  -1556.2249,  26.8399},
	{459.3546,  -1454.2483,  27.3282},
	{693.7673,  -1407.9709,  13.1748},
	{1028.6903, -1407.5083,  12.8430},
	{1049.0262, -1489.5642,  13.1701},
	{1071.0824, -1574.5236,  13.1624},
	{1172.5760, -1574.3096,  13.1017},
	{1280.6105, -1541.0770,  13.3008}
};

static const Float:g_arrDrivingCheckpoints[][] = {
	{-2064.9561, -67.7125, 34.8247},
	{-2110.5261, -67.8857, 34.8247},
	{-2154.2473, -67.6854, 34.8231},
	{-2169.3850, -82.5202, 34.8302},
	{-2169.8767, -114.5743, 34.8188},
	{-2170.6482, -162.7804, 34.8249},
	{-2215.5796, -187.5162, 34.8745},
	{-2244.0376, -187.6771, 34.8235},
	{-2259.1860, -202.9163, 34.9007},
	{-2259.7864, -253.0544, 39.7875},
	{-2260.3638, -300.5378, 48.1640},
	{-2259.5361, -339.2552, 50.5190},
	{-2258.4385, -371.1333, 50.5193},
	{-2236.2454, -416.2657, 50.5155},
	{-2195.2356, -459.0606, 49.3517},
	{-2155.1711, -497.7458, 41.1217},
	{-2117.1301, -536.1792, 34.2394},
	{-2059.1565, -577.5410, 29.0998},
	{-1984.6453, -582.2720, 25.5633},
	{-1925.5862, -583.2345, 24.0926},
	{-1885.5591, -583.6432, 24.0940},
	{-1821.1207, -583.9514, 15.9855},
	{-1816.3672, -559.6774, 15.8619},
	{-1821.3180, -527.9517, 14.6263},
	{-1819.6934, -462.3056, 14.6151},
	{-1809.8923, -396.5690, 16.1884},
	{-1798.9331, -317.3351, 24.3122},
	{-1796.9186, -239.6917, 17.8804},
	{-1797.0546, -168.9667, 9.4126},
	{-1797.6467, -125.6053, 5.1712},
	{-1811.8171, -114.1203, 5.1504},
	{-1841.5179, -114.4944, 5.1483},
	{-1882.5660, -106.9792, 14.5634},
	{-1911.3077, -79.0253, 24.6949},
	{-1938.0209, -62.3110, 25.2069},
	{-1975.7996, -64.1764, 27.7167},
	{-2014.0769, -67.5033, 34.8182},
	{-2040.5736, -67.4500, 34.8250},
	{-2046.2883, -84.8129, 34.8103},
	{-2068.5259, -84.6942, 34.8201}
};

static const Float:g_arrSortingCheckpoint_foot[][] = {
	{2176.0669,-2249.8542,13.3040},
	{2171.8413,-2256.0442,13.3041},
	{2162.4700,-2251.2622,13.2992},
	{2160.6570,-2246.1675,13.2907},
	{2164.5215,-2244.5225,13.2875},
	{2161.9563,-2240.9998,13.2885},
	{2162.1860,-2236.5198,13.2938},
	{2158.6206,-2233.2622,13.3082},
	{2155.9314,-2235.6350,13.3066},
	{2154.2993,-2240.4302,13.3033},
	{2157.0100,-2243.8857,13.2969},
	{2148.8396,-2243.2090,13.3061},
	{2145.8032,-2246.2993,13.3060},
	{2151.0464,-2250.6763,13.2960},
	{2155.3884,-2249.3357,13.2969},
	{2157.4941,-2255.2964,13.3025},
	{2162.8635,-2256.5669,13.3012},
	{2163.2000,-2260.4910,13.3027},
	{2166.2300,-2263.5203,13.3048},
	{2158.4541,-2261.6274,13.3014},
	{2156.3638,-2263.6384,13.3014},
	{2155.9800,-2260.7913,13.3003},
	{2158.0061,-2267.8242,13.3034},
	{2150.9185,-2261.2061,13.3020},
	{2151.1921,-2258.7876,13.3006},
	{2150.0313,-2256.0051,13.2978},
	{2152.0229,-2255.2832,13.2987},
	{2146.9529,-2251.2766,13.2996},
	{2143.0371,-2247.5640,13.3076},
	{2128.4836,-2268.7632,14.7846},
	{2125.4167,-2271.8564,14.7836},
	{2129.9670,-2276.0364,14.7836},
	{2132.6414,-2273.2144,14.7846}
};

static const Float:g_arrSortingCheckpoint_car[][] = {
	{2201.4019,-2186.9641,13.3232},
	{2183.9221,-2204.3123,13.3128},
	{2198.9426,-2214.8469,13.3204},
	{2233.3042,-2239.0535,13.3242},
	{2227.3950,-2224.9241,13.3059},
	{2210.5942,-2227.1321,13.3065},
	{2189.7048,-2230.0154,13.2640},
	{2176.8774,-2242.4407,13.1070},
	{2222.7930,-2253.0654,13.3140},
	{2219.6035,-2244.0261,13.3127},
	{2226.9473,-2237.8418,13.3132},
	{2212.2996,-2251.6072,13.3143},
	{2205.2534,-2258.9746,13.3128},
	{2197.3455,-2266.9063,13.3136},
	{2183.9607,-2287.7051,13.3137},
	{2163.8601,-2309.1926,13.3107},
	{2176.8384,-2326.4019,13.3150},
	{2215.1599,-2288.5061,14.5249},
	{2197.4065,-2292.6743,13.3058},
	{2159.6401,-2322.2437,13.3142},
	{2175.4924,-2339.4153,13.3192},
	{2193.6169,-2256.3669,13.3064},
	{2195.0259,-2232.0674,13.3008},
	{2201.7529,-2224.2615,13.3153},
	{2210.1965,-2216.9182,13.3090},
	{2217.8235,-2210.7407,13.3108}
};

static const Float:g_arrPrisonSpawns[][] = {
	{2208.9221,2086.0242,100.4177,85.9064},
	{2208.7129,2081.4353,100.4177,84.1477},
	{2208.4436,2076.7573,100.4177,78.5626},
	{2204.4895,2072.0840,100.4177,4.9024},
	{2199.6316,2072.0789,100.4177,9.9211},
	{2194.1567,2072.3796,100.4177,5.3881},
	{2189.3679,2077.2449,100.4177,267.6650},
	{2189.2583,2081.9922,100.4177,266.3698},
	{2188.9392,2086.0720,100.4177,281.1018},
	{2193.9326,2090.8018,100.4177,172.8193},
	{2198.6929,2090.9351,100.4177,178.4046},
	{2198.5593,2090.9377,103.9159,183.5264},
	{2193.3191,2090.8994,103.9159,185.6310},
	{2189.2000,2086.9294,103.9159,276.4881},
	{2189.2542,2081.9849,103.9159,265.5605},
	{2189.0415,2077.1716,103.9159,269.9903},
	{2193.7070,2072.5317,103.9159,2.1059},
	{2198.6160,2072.1016,103.9159,357.5287},
	{2204.1494,2072.1003,103.9249,3.2758},
	{2208.7651,2076.5620,103.9459,86.0018},
	{2208.6665,2081.8140,103.9249,91.8078},
	{2208.8821,2086.8030,103.9249,90.6523}
};

static const g_aLegalMods[][] = {
	{400, 1024, 1021, 1020, 1019, 1018, 1013, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000},
	{401, 1145, 1144, 1143, 1142, 1020, 1019, 1017, 1013, 1007, 1006, 1005, 1004, 1003, 1001, 0000, 0000, 0000, 0000},
	{404, 1021, 1020, 1019, 1017, 1016, 1013, 1007, 1002, 1000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000},
	{405, 1023, 1021, 1020, 1019, 1018, 1014, 1001, 1000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000},
	{410, 1024, 1023, 1021, 1020, 1019, 1017, 1013, 1007, 1003, 1001, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000},
	{415, 1023, 1019, 1018, 1017, 1007, 1003, 1001, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000},
	{418, 1021, 1020, 1016, 1006, 1002, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000},
	{420, 1021, 1019, 1005, 1004, 1003, 1001, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000},
	{421, 1023, 1021, 1020, 1019, 1018, 1016, 1014, 1000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000},
	{422, 1021, 1020, 1019, 1017, 1013, 1007, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000},
	{426, 1021, 1019, 1006, 1005, 1004, 1003, 1001, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000},
	{436, 1022, 1021, 1020, 1019, 1017, 1013, 1007, 1006, 1003, 1001, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000},
	{439, 1145, 1144, 1143, 1142, 1023, 1017, 1013, 1007, 1003, 1001, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000},
	{477, 1021, 1020, 1019, 1018, 1017, 1007, 1006, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000},
	{478, 1024, 1022, 1021, 1020, 1013, 1012, 1005, 1004, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000},
	{489, 1024, 1020, 1019, 1018, 1016, 1013, 1006, 1005, 1004, 1002, 1000, 0000, 0000, 0000, 0000, 0000, 0000, 0000},
	{491, 1145, 1144, 1143, 1142, 1023, 1021, 1020, 1019, 1018, 1017, 1014, 1007, 1003, 0000, 0000, 0000, 0000, 0000},
	{492, 1016, 1006, 1005, 1004, 1000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000},
	{496, 1143, 1142, 1023, 1020, 1019, 1017, 1011, 1007, 1006, 1003, 1002, 1001, 0000, 0000, 0000, 0000, 0000, 0000},
	{500, 1024, 1021, 1020, 1019, 1013, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000},
	{516, 1021, 1020, 1019, 1018, 1017, 1016, 1015, 1007, 1004, 1002, 1000, 0000, 0000, 0000, 0000, 0000, 0000, 0000},
	{517, 1145, 1144, 1143, 1142, 1023, 1020, 1019, 1018, 1017, 1016, 1007, 1003, 1002, 0000, 0000, 0000, 0000, 0000},
	{518, 1145, 1144, 1143, 1142, 1023, 1020, 1018, 1017, 1013, 1007, 1006, 1005, 1003, 1001, 0000, 0000, 0000, 0000},
	{527, 1021, 1020, 1018, 1017, 1015, 1014, 1007, 1001, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000},
	{529, 1023, 1020, 1019, 1018, 1017, 1012, 1011, 1007, 1006, 1003, 1001, 0000, 0000, 0000, 0000, 0000, 0000, 0000},
	{534, 1185, 1180, 1179, 1178, 1127, 1126, 1125, 1124, 1123, 1122, 1106, 1101, 1100, 0000, 0000, 0000, 0000, 0000},
	{535, 1121, 1120, 1119, 1118, 1117, 1116, 1115, 1114, 1113, 1110, 1109, 0000, 0000, 0000, 0000, 0000, 0000, 0000},
	{536, 1184, 1183, 1182, 1181, 1128, 1108, 1107, 1105, 1104, 1103, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000},
	{540, 1145, 1144, 1143, 1142, 1024, 1023, 1020, 1019, 1018, 1017, 1007, 1006, 1004, 1001, 0000, 0000, 0000, 0000},
	{542, 1145, 1144, 1021, 1020, 1019, 1018, 1015, 1014, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000},
	{546, 1145, 1144, 1143, 1142, 1024, 1023, 1019, 1018, 1017, 1007, 1006, 1004, 1002, 1001, 0000, 0000, 0000, 0000},
	{547, 1143, 1142, 1021, 1020, 1019, 1018, 1016, 1003, 1000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000},
	{549, 1145, 1144, 1143, 1142, 1023, 1020, 1019, 1018, 1017, 1012, 1011, 1007, 1003, 1001, 0000, 0000, 0000, 0000},
	{550, 1145, 1144, 1143, 1142, 1023, 1020, 1019, 1018, 1006, 1005, 1004, 1003, 1001, 0000, 0000, 0000, 0000, 0000},
	{551, 1023, 1021, 1020, 1019, 1018, 1016, 1006, 1005, 1003, 1002, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000},
	{558, 1168, 1167, 1166, 1165, 1164, 1163, 1095, 1094, 1093, 1092, 1091, 1090, 1089, 1088, 0000, 0000, 0000, 0000},
	{559, 1173, 1162, 1161, 1160, 1159, 1158, 1072, 1071, 1070, 1069, 1068, 1067, 1066, 1065, 0000, 0000, 0000, 0000},
	{560, 1170, 1169, 1141, 1140, 1139, 1138, 1033, 1032, 1031, 1030, 1029, 1028, 1027, 1026, 0000, 0000, 0000, 0000},
	{561, 1157, 1156, 1155, 1154, 1064, 1063, 1062, 1061, 1060, 1059, 1058, 1057, 1056, 1055, 1031, 1030, 1027, 1026},
	{562, 1172, 1171, 1149, 1148, 1147, 1146, 1041, 1040, 1039, 1038, 1037, 1036, 1035, 1034, 0000, 0000, 0000, 0000},
	{565, 1153, 1152, 1151, 1150, 1054, 1053, 1052, 1051, 1050, 1049, 1048, 1047, 1046, 1045, 0000, 0000, 0000, 0000},
	{567, 1189, 1188, 1187, 1186, 1133, 1132, 1131, 1130, 1129, 1102, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000},
	{575, 1177, 1176, 1175, 1174, 1099, 1044, 1043, 1042, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000},
	{576, 1193, 1192, 1191, 1190, 1137, 1136, 1135, 1134, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000},
	{580, 1023, 1020, 1018, 1017, 1007, 1006, 1001, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000},
	{589, 1145, 1144, 1024, 1020, 1018, 1017, 1016, 1013, 1007, 1006, 1005, 1004, 1000, 0000, 0000, 0000, 0000, 0000},
	{600, 1022, 1020, 1018, 1017, 1013, 1007, 1006, 1005, 1004, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000},
	{603, 1145, 1144, 1143, 1142, 1024, 1023, 1020, 1019, 1018, 1017, 1007, 1006, 1001, 0000, 0000, 0000, 0000, 0000}
};

static g_aMaleSkins[193] = {
	1, 2, 3, 4, 5, 6, 7, 8, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29,
	30, 32, 33, 34, 35, 36, 37, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 57, 58, 59, 60,
	61, 62, 66, 68, 72, 73, 78, 79, 80, 81, 82, 83, 84, 94, 95, 96, 97, 98, 99, 100, 101, 102,
	103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120,
	121, 122, 123, 124, 125, 126, 127, 128, 132, 133, 134, 135, 136, 137, 142, 143, 144, 146,
	147, 153, 154, 155, 156, 158, 159, 160, 161, 162, 167, 168, 170, 171, 173, 174, 175, 176,
	177, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 200, 202, 203, 204, 206,
	208, 209, 210, 212, 213, 217, 220, 221, 222, 223, 228, 229, 230, 234, 235, 236, 239, 240,
	241, 242, 247, 248, 249, 250, 253, 254, 255, 258, 259, 260, 261, 262, 268, 272, 273, 289,
	290, 291, 292, 293, 294, 295, 296, 297, 299, 303, 304, 305
};

static g_aFemaleSkins[81] = {
	9, 10, 11, 12, 13, 31, 38, 39, 40, 41, 53, 54, 55, 56, 63, 64, 65, 69,
	75, 76, 77, 85, 88, 89, 90, 91, 92, 93, 129, 130, 131, 138, 140, 141,
	145, 148, 150, 151, 152, 157, 169, 178, 190, 191, 192, 193, 194, 195,
	196, 197, 198, 199, 201, 205, 207, 211, 214, 215, 216, 219, 224, 225,
	226, 231, 232, 233, 237, 238, 243, 244, 245, 246, 251, 256, 257, 263,
	298
};

enum e_FurnitureData {
	e_FurnitureType,
	e_FurnitureName[32],
	e_FurnitureModel
};

static const g_aFurnitureTypes[][] = {
	{"Cadres"},
	{"Tables"},
	{"Chaises"},
	{"Lits"},
	{"Armoires"},
	{"Television"},
	{"Électroménager"},
	{"Salle de bains"},
	{"Divers"}
};

static const g_aFurnitureData[][e_FurnitureData] = {
    {1, "Cadre 1", 2289},
	{1, "Cadre 2", 2288},
	{1, "Cadre 3", 2287},
	{1, "Cadre 4", 2286},
	{1, "Cadre 5", 2285},
	{1, "Cadre 6", 2284},
    {1, "Cadre 7", 2283},
    {1, "Cadre 8", 2282},
    {1, "Cadre 9", 2281},
    {1, "Cadre 10", 2280},
    {1, "Cadre 11", 2279},
	{1, "Cadre 12", 2278},
	{1, "Cadre 13", 2277},
	{1, "Cadre 14", 2276},
	{1, "Cadre 15", 2275},
	{1, "Cadre 16", 2274},
    {1, "Cadre 17", 2273},
    {1, "Cadre 18", 2272},
    {1, "Cadre 19", 2271},
    {1, "Cadre 20", 2270},
    {2, "Table 1", 1433},
	{2, "Table 2", 1998},
	{2, "Table 3", 2008},
	{2, "Table 4", 2180},
	{2, "Table 5", 2185},
    {2, "Table 6", 2205},
    {2, "Table 7", 2314},
    {2, "Table 8", 2635},
    {2, "Table 9", 2637},
    {2, "Table 10", 2644},
	{2, "Table 11", 2747},
	{2, "Table 12", 2764},
	{2, "Table 13", 2763},
	{2, "Table 14", 2762},
	{2, "Table 15", 936},
	{2, "Table 16", 937},
	{2, "Table 17", 941},
	{2, "Table 18", 2115},
	{2, "Table 19", 2116},
	{2, "Table 20", 2112},
	{2, "Table 21", 2111},
	{2, "Table 22", 2110},
	{2, "Table 23", 2109},
	{2, "Table 24", 2085},
	{2, "Table 25", 2032},
	{2, "Table 26", 2031},
	{2, "Table 27", 2030},
	{2, "Table 28", 2029},
    {3, "Chaise 1", 1671},
    {3, "Chaise 2", 1704},
    {3, "Chaise 3", 1705},
    {3, "Chaise 4", 1708},
    {3, "Chaise 5", 1711},
    {3, "Chaise 6", 1715},
    {3, "Chaise 7", 1721},
    {3, "Chaise 8", 1724},
    {3, "Chaise 9", 1727},
    {3, "Chaise 10", 1729},
    {3, "Chaise 11", 1735},
    {3, "Chaise 12", 1739},
    {3, "Chaise 13", 1805},
    {3, "Chaise 14", 1806},
    {3, "Chaise 15", 1810},
    {3, "Chaise 16", 1811},
    {3, "Chaise 17", 2079},
    {3, "Chaise 18", 2120},
    {3, "Chaise 19", 2124},
    {3, "Chaise 20", 2356},
    {3, "Chaise 21", 1768},
    {3, "Chaise 22", 1766},
    {3, "Chaise 23", 1764},
    {3, "Chaise 24", 1763},
    {3, "Chaise 25", 1761},
    {3, "Chaise 26", 1760},
    {3, "Chaise 27", 1757},
    {3, "Chaise 28", 1756},
    {3, "Chaise 29", 1753},
    {3, "Chaise 30", 1713},
    {3, "Chaise 31", 1712},
    {3, "Chaise 32", 1706},
    {3, "Chaise 33", 1703},
    {3, "Chaise 34", 1702},
    {3, "Chaise 35", 1754},
    {3, "Chaise 36", 1755},
    {3, "Chaise 37", 1758},
    {3, "Chaise 38", 1759},
    {3, "Chaise 39", 1762},
    {3, "Chaise 40", 1765},
    {3, "Chaise 41", 1767},
    {3, "Chaise 42", 1769},
	{4, "Lit 1", 1700},
	{4, "Lit 2", 1701},
	{4, "Lit 3", 1725},
	{4, "Lit 4", 1745},
	{4, "Lit 5", 1793},
	{4, "Lit 6", 1794},
	{4, "Lit 7", 1795},
	{4, "Lit 8", 1796},
	{4, "Lit 9", 1797},
	{4, "Lit 10", 1771},
	{4, "Lit 11", 1798},
	{4, "Lit 12", 1799},
    {4, "Lit 13", 1800},
    {4, "Lit 14", 1801},
    {4, "Lit 15", 1802},
    {4, "Lit 16", 1812},
    {4, "Lit 17", 2090},
    {4, "Lit 18", 2299},
    {5, "Armoire 1", 1416},
	{5, "Armoire 2", 1417},
	{5, "Armoire 3", 1741},
	{5, "Armoire 4", 1742},
	{5, "Armoire 5", 1743},
	{5, "Armoire 6", 2025},
	{5, "Armoire 7", 2065},
	{5, "Armoire 8", 2066},
	{5, "Armoire 9", 2067},
	{5, "Armoire 10", 2087},
    {5, "Armoire 11", 2088},
    {5, "Armoire 12", 2094},
    {5, "Armoire 13", 2095},
    {5, "Armoire 14", 2306},
    {5, "Armoire 15", 2307},
	{5, "Armoire 16", 2323},
	{5, "Armoire 17", 2328},
	{5, "Armoire 18", 2329},
	{5, "Armoire 19", 2330},
	{5, "Armoire 20", 2708},
	{6, "Television 1", 1518},
	{6, "Television 2", 1717},
	{6, "Television 3", 1747},
	{6, "Television 4", 1748},
	{6, "Television 5", 1749},
	{6, "Television 6", 1750},
	{6, "Television 7", 1752},
	{6, "Television 8", 1781},
	{6, "Television 9", 1791},
	{6, "Television 10", 1792},
    {6, "Television 11", 2312},
	{6, "Television 12", 2316},
	{6, "Television 13", 2317},
	{6, "Television 14", 2318},
	{6, "Television 15", 2320},
	{6, "Television 16", 2595},
	{6, "Television 17", 16377},
	{7, "Cuisine 1", 2013},
	{7, "Cuisine 2", 2017},
	{7, "Cuisine 3", 2127},
	{7, "Cuisine 4", 2130},
	{7, "Cuisine 5", 2131},
	{7, "Cuisine 6", 2132},
	{7, "Cuisine 7", 2135},
	{7, "Cuisine 8", 2136},
	{7, "Cuisine 9", 2144},
	{7, "Cuisine 10", 2147},
    {7, "Cuisine 11", 2149},
    {7, "Cuisine 12", 2150},
    {7, "Cuisine 13", 2415},
    {7, "Cuisine 14", 2417},
    {7, "Cuisine 15", 2421},
    {7, "Cuisine 16", 2426},
    {7, "Cuisine 17", 2014},
    {7, "Cuisine 18", 2015},
    {7, "Cuisine 19", 2016},
    {7, "Cuisine 20", 2018},
    {7, "Cuisine 21", 2019},
    {7, "Cuisine 22", 2022},
    {7, "Cuisine 23", 2133},
    {7, "Cuisine 24", 2134},
	{7, "Cuisine 25", 2137},
	{7, "Cuisine 26", 2138},
	{7, "Cuisine 27", 2139},
	{7, "Cuisine 28", 2140},
	{7, "Cuisine 29", 2141},
	{7, "Cuisine 30", 2142},
	{7, "Cuisine 31", 2143},
	{7, "Cuisine 32", 2145},
	{7, "Cuisine 33", 2148},
	{7, "Cuisine 34", 2151},
	{7, "Cuisine 35", 2152},
	{7, "Cuisine 36", 2153},
	{7, "Cuisine 37", 2154},
	{7, "Cuisine 38", 2155},
	{7, "Cuisine 39", 2156},
	{7, "Cuisine 40", 2157},
	{7, "Cuisine 41", 2158},
	{7, "Cuisine 42", 2159},
	{7, "Cuisine 43", 2160},
	{7, "Cuisine 44", 2134},
	{7, "Cuisine 45", 2135},
	{7, "Cuisine 46", 2338},
	{7, "Cuisine 47", 2341},
	{8, "Salle de bain 1", 2514},
	{8, "Salle de bain 2", 2516},
	{8, "Salle de bain 3", 2517},
	{8, "Salle de bain 4", 2518},
	{8, "Salle de bain 5", 2520},
	{8, "Salle de bain 6", 2521},
	{8, "Salle de bain 7", 2522},
	{8, "Salle de bain 8", 2523},
	{8, "Salle de bain 9", 2524},
	{8, "Salle de bain 10", 2525},
    {8, "Salle de bain 11", 2526},
    {8, "Salle de bain 12", 2527},
    {8, "Salle de bain 13", 2528},
    {8, "Salle de bain 14", 2738},
    {8, "Salle de bain 15", 2739},
	{9, "Machine à laver", 1208},
	{9, "Ventilateur de plafond", 1661},
	{9, "Tête d'animaux", 1736},
	{9, "Radiateur", 1738},
	{9, "Balai / Sceau", 1778},
	{9, "Refroidisseur d'eau", 1808},
	{9, "Refroidisseur d'eau 2", 2002},
	{9, "Coffre Fort", 1829},
	{9, "Imprimante", 2186},
	{9, "Ordinateur", 2190},
	{9, "Treadmill", 2627},
	{9, "Bench Press", 2629},
	{9, "Vélo d'appartement", 2630},
	{9, "Tapis 1", 2631},
	{9, "Tapis 2", 2632},
	{9, "Tapis 3", 2817},
	{9, "Tapis 4", 2818},
	{9, "Tapis 5", 2833},
	{9, "Tapis 6", 2834},
	{9, "Tapis 7", 2835},
	{9, "Tapis 8", 2836},
	{9, "Tapis 9", 2841},
	{9, "Tapis 10", 2842},
	{9, "Tapis 11", 2847},
	{9, "Pile de livres", 2824},
	{9, "Pile de livres 2", 2826},
	{9, "Pile de livres 3", 2827},
	{9, "Balle de Basket", 2114},
	{9, "Lampe 1", 2108},
	{9, "Lampe 2", 2106},
	{9, "Lampe 3", 2069},
	{9, "Commode 1", 2569},
	{9, "Commode 2", 2570},
	{9, "Commode 3", 2573},
	{9, "Commode 4", 2574},
	{9, "Commode 5", 2576},
	{9, "Livre", 2894}
};

native gpci(playerid, serial [], len);
native IsValidVehicle(vehicleid);
native WP_Hash(buffer[], len, const str[]);

SQL_Connect() {
	g_iHandle = mysql_connect(SQL_HOSTNAME, SQL_USERNAME, SQL_DATABASE, SQL_PASSWORD);

	if (mysql_errno(g_iHandle) == 1) {
		printf("[SQL] Connection to \"%s\" failed! Please check the connection settings...\a", SQL_HOSTNAME);
	}
	else {
		printf("[SQL] Connection to \"%s\" passed!", SQL_HOSTNAME);
	}
}

forward isLeap(y);
public isLeap(y){
    return ((y)%4==0&&((y)%100!=0||(y)%400==0));
}

new MonthTimes[12][4] =
{
        { 31, 31, 2678400, 2678400 },
        { 28, 29, 2419200, 2505600 },
        { 31, 31, 2678400, 2678400 },
        { 30, 30, 2592000, 2592000 },
        { 31, 31, 2678400, 2678400 },
        { 30, 30, 2592000, 2592000 },
        { 31, 31, 2678400, 2678400 },
        { 31, 31, 2678400, 2678400 },
        { 30, 30, 2592000, 2592000 },
        { 31, 31, 2678400, 2678400 },
        { 30, 30, 2592000, 2592000 },
        { 31, 31, 2678400, 2678400 }
};

stock IsLeapYear(year)
{
        if(year % 4 == 0) return 1;
        else return 0;
}

stock IsValidCeintureVehicle(modelid)
{
	switch(modelid)
	{
		case 448, 461, 462, 463, 468, 471, 481, 509, 510, 521, 522, 581, 586: return false;
	}
	return true;
}

stock TimestampToDate(Timestamp, &year, &month, &day, &hour, &minute, &second, HourGMT, MinuteGMT = 0)
{
        new tmp = 2;
        year = 1970;
        month = 1;
        Timestamp -= 172800; // Delete two days from the current timestamp. This is necessary, because the timestamp retrieved using gettime() includes two too many days.
        for(;;)
        {
                if(Timestamp >= 31536000)
                {
                        year ++;
                        Timestamp -= 31536000;
                        tmp ++;
                        if(tmp == 4)
                        {
                                if(Timestamp >= 31622400)
                                {
                                        tmp = 0;
                                        year ++;
                                        Timestamp -= 31622400;
                                }
                                else break;
                        }
                }
                else break;
        }
        for(new i = 0; i < 12; i ++)
        {
                if(Timestamp >= MonthTimes[i][2 + IsLeapYear(year)])
                {
                        month ++;
                        Timestamp -= MonthTimes[i][2 + IsLeapYear(year)];
                }
                else break;
        }
        day = 1 + (Timestamp / 86400);
        Timestamp %= 86400;
        hour = HourGMT + (Timestamp / 3600);
        Timestamp %= 3600;
        minute = MinuteGMT + (Timestamp / 60);
        second = (Timestamp % 60);
        if(minute > 59)
        {
                minute = 0;
                hour ++;
        }
        if(hour > 23)
        {
                hour -= 24;
                day ++;
        }
        if(day > MonthTimes[month][IsLeapYear(year)])
        {
                day = 1;
                month ++;
        }
        if(month > 12)
        {
                month = 1;
                year ++;
        }
        return 1;
}

stock unixtodate(timestamp)
{
	new rtrn[128];
    if(timestamp > 0) {
	    new year, dayInSeconds, daysInYear, daysInLYear, days, tmpDays, monthsInDays[12], month, day;
	    year = 1970;
	    dayInSeconds = 86400;
	    daysInYear = 365;
	    daysInLYear = daysInYear+1;
	    days = (timestamp/dayInSeconds);
	    tmpDays = days+1;
	    month = 11;

	    while(tmpDays>=daysInYear){
	        year++;
	        if(isLeap(year)){
	            tmpDays-=daysInLYear;
	        }
	        else{
	            tmpDays-=daysInYear;
	        }
	    }

	    if(isLeap(year)){
	        tmpDays--;
	        monthsInDays = {-1,30,59,90,120,151,181,212,243,273,304,334};
	    }
	    else{
	        monthsInDays = {0,31,59,90,120,151,181,212,243,273,304,334};
	    }

	    while(month>0){
	        if(tmpDays>monthsInDays[month]){
	            break;
	        }
	        month--;
	    }
	    day=tmpDays-monthsInDays[month];
	    month++;
		format(rtrn, sizeof(rtrn), "%02d/%02d/%02d", day, month, year);
		return rtrn;
	}
	format(rtrn, sizeof(rtrn), "Erreur date");
	return rtrn;
}

stock convert_encoding(string[])
{
	static const
		scRealChars[256] =
		{
			  0,   1,   2,   3,   4,   5,   6,   7,   8,   9,  10,  11,  12,  13,  14,  15,
			 16,  17,  18,  19,  20,  21,  22,  23,  24,  25,  26,  27,  28,  29,  30,  31,
			 32,  33,  34,  35,  36,  37,  38,  39,  40,  41,  42,  43,  44,  45,  46,  47,
			 48,  49,  50,  51,  52,  53,  54,  55,  56,  57,  58,  59,  60,  61,  62,  63,
			 64,  65,  66,  67,  68,  69,  70,  71,  72,  73,  74,  75,  76,  77,  78,  79,
			 80,  81,  82,  83,  84,  85,  86,  87,  88,  89,  90,  91,  92,  93,  94,  95,
			 96,  97,  98,  99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
			112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127,
			128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143,
			144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159,
			160,  94, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175,
			124, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 175,
			128, 129, 130, 195, 131, 197, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141,
			208, 173, 142, 143, 144, 213, 145, 215, 216, 146, 147, 148, 149, 221, 222, 150,
			151, 152, 153, 227, 154, 229, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164,
			240, 174, 165, 166, 167, 245, 168, 247, 248, 169, 170, 171, 172, 253, 254, 255
		};
	if (ispacked(string))
	{
		// In packed strings nothing is over 255.
		for (new i = 0, len = strlen(string); i != len; ++i)
		{
			string{i} = scRealChars[string{i}];
		}
	}
	else
	{
		for (new i = 0, len = strlen(string), ch; i != len; ++i)
		{
			// Check if this character is in our reduced range.
			if (0 <= (ch = string[i]) < 256)
			{
				string[i] = scRealChars[ch];
			}
		}
	}
}

RGBAToHex(r, g, b, a)
{
    return (r<<24 | g<<16 | b<<8 | a);
}


stock LearnFightstyle(playerid,cost,type,name[])
{
	PlayerPlaySound(playerid,1054, 0.0, 0.0, 0.0);
	SetPlayerFightingStyle(playerid,type);
	switch(type)
    {
        case FIGHT_STYLE_NORMAL: return SetPVarInt(playerid, "Style de Combat", 0);
        case FIGHT_STYLE_BOXING: return SetPVarInt(playerid, "Style de Combat", 1);
        case FIGHT_STYLE_KUNGFU: return SetPVarInt(playerid, "Style de Combat", 2);
	    case FIGHT_STYLE_KNEEHEAD: return SetPVarInt(playerid, "Style de Combat", 3);
	    case FIGHT_STYLE_GRABKICK: return SetPVarInt(playerid, "Style de Combat", 4);
        case FIGHT_STYLE_ELBOW: return SetPVarInt(playerid, "Style de Combat", 5);
    }
	return 1;
}

stock GetAdminRank(playerid)
{
	new
	    strings[32];
	    
	if (PlayerData[playerid][pHelper])
	    strings = "Helpeur";

	switch(PlayerData[playerid][pAdmin])
	{
		case 1: strings = "Modérateur";
		case 2: strings = "Administrateur I";
		case 3: strings = "Administrateur II";
		case 4: strings = "Administrateur HR";
		case 5: strings = "Administrateur HR";
		case 6: strings = "Leader";
	}

	return strings;
}
stock HexToInt(string[]) // Criado por Zamaroth ;
{
        if (string[0] == 0) return 0;

        new
                i,
                cur = 1,
                res = 0
        ;

        for (i = strlen(string); i > 0; i --) {
                if (string[i-1] < 58) res = res + cur * (string[i-1]-48); else res = res + cur * (string[i-1]-65+10);
                cur = cur * 16;
        }
        return res;
}

stock ShowPlayerDashCamTD(playerid, bool:helicmode = false, bool:freeze = false)
{
    if(helicmode)
	{
	    for(new i = 0; i < 20; i++)
		{
		    TextDrawShowForPlayer(playerid, DashCam_TD[i]);
		    PlayerTextDrawHide(playerid, Dashcam_PTD[playerid][0]), PlayerTextDrawHide(playerid, Dashcam_PTD[playerid][1]);
		}
 	}
    else {
	    for(new i = 0; i < 20; i++)
		{
		    TextDrawHideForPlayer(playerid, DashCam_TD[i]);
		    PlayerTextDrawShow(playerid, Dashcam_PTD[playerid][0]), PlayerTextDrawShow(playerid, Dashcam_PTD[playerid][1]);
		    
		    
			new
				dashcam_format[128];
			
			format(dashcam_format, sizeof(dashcam_format), "%s", ReturnDate());
			PlayerTextDrawSetString(playerid, Dashcam_PTD[playerid][0], dashcam_format);
			
			format(dashcam_format, sizeof(dashcam_format), "UNIT %d", PlayerData[i][pDashcam_veh]);
			PlayerTextDrawSetString(playerid, Dashcam_PTD[playerid][1], dashcam_format);
		}
	}
	if(freeze) TogglePlayerControllable(playerid, false);
	return 1;
}

stock weaponsSave(playerid)
{
	for (new i = 0; i <= 12; i++)
	{
	    GetPlayerWeaponData(playerid, i, weaponsSaving[playerid][i][0], weaponsSaving[playerid][i][1]);
	}
	skinSaving[playerid] = GetPlayerSkin(playerid);
	
	GetPlayerHealth(playerid, healthSaving[playerid]);
	GetPlayerArmour(playerid, armourSaving[playerid]);
}

stock weaponsRestore(playerid)
{
	for (new i = 0; i <= 12; i++)
	{
	    GivePlayerWeapon(playerid, weaponsSaving[playerid][i][0], weaponsSaving[playerid][i][1]);
	}
	SetPlayerSkin(playerid, skinSaving[playerid]);

	SetPlayerHealth(playerid, healthSaving[playerid]);
	SetPlayerArmour(playerid, armourSaving[playerid]);
}

stock HidePlayerDashCamTD(playerid)
{
    for(new i = 0; i < 20; i++)
	{
		TextDrawHideForPlayer(playerid, DashCam_TD[i]);
    }
    
    PlayerTextDrawHide(playerid, Dashcam_PTD[playerid][0]);
	PlayerTextDrawHide(playerid, Dashcam_PTD[playerid][1]);
	return 1;
}

stock SQL_IsLogged(playerid) {
	return (PlayerData[playerid][pLogged]);
}
stock GetPassengersInCar(vehicleid)
{
	if(vehicleid == INVALID_VEHICLE_ID) return false;

	new passengers;
	foreach(new i : Player)
	{
	    if(IsPlayerInVehicle(i, vehicleid)) passengers++;
	}
	return passengers;
}

stock FactionHasLocker(factionid)
{
	switch(FactionData[factionid][factionType])
	{
		case FACTION_POLICE, FACTION_NEWS, FACTION_GOV: return true;
	}
	return false;
}

stock Float:cache_get_field_float(row, const field_name[])
{
	static
	str[16];

	cache_get_field_content(row, field_name, str, g_iHandle, sizeof(str));
	return floatstr(str);
}
stock ViewBillboards(playerid)
{
	static
	string[128];

	format(string, sizeof(string), "SELECT * FROM `billboards` ORDER BY `bbID` DESC");
	mysql_function_query(g_iHandle, string, true, "OnViewBillboards", "d", playerid);
	return 1;
}
stock IsModelBicycle(const modelid)
{
	switch(modelid)
	{
		case 481,509,510: return true;
	}

	return false;
}
forward FlashingHeadlights(value, vehicleid);
public FlashingHeadlights(value, vehicleid)
{
	new
		engine,
		lights,
		alarm,
		doors,
		bonnet,
		boot,
		objective;

	GetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, boot, objective);

	if(lights && value == 5)
		SetVehicleParamsEx(vehicleid, engine, VEHICLE_PARAMS_OFF, VEHICLE_PARAMS_OFF, doors, bonnet, boot, objective);

	else
		SetVehicleParamsEx(vehicleid, engine, !lights, VEHICLE_PARAMS_OFF, doors, bonnet, boot, objective);

	value--;
	
	if(value == 0)
	{
		GetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, boot, objective);
		
		if(lights)
		{
  			SetVehicleParamsEx(vehicleid, engine, VEHICLE_PARAMS_OFF, VEHICLE_PARAMS_OFF, doors, bonnet, boot, objective);
		}
		return true;
	}

	return SetTimerEx("FlashingHeadlights", 100, false, "dd", value, vehicleid);
}
stock SQL_ReturnEscaped(const string[])
{
	static
	entry[256];

	mysql_real_escape_string(string, entry, g_iHandle);
	return entry;
}
SQL_SaveCharacter(playerid)
{
	if (!PlayerData[playerid][pLogged])
	return 0;

	static
	query[2048];

	if (GetPlayerState(playerid) != PLAYER_STATE_SPECTATING && !PlayerData[playerid][pDrivingTest])
	{
		PlayerData[playerid][pInterior] = GetPlayerInterior(playerid);
		PlayerData[playerid][pWorld] = GetPlayerVirtualWorld(playerid);

		GetPlayerPos(playerid, PlayerData[playerid][pPos][0], PlayerData[playerid][pPos][1], PlayerData[playerid][pPos][2]);
		GetPlayerFacingAngle(playerid, PlayerData[playerid][pPos][3]);

		GetPlayerHealth(playerid, PlayerData[playerid][pHealth]);
		GetPlayerArmour(playerid, PlayerData[playerid][pArmorStatus]);

		if (!PlayerData[playerid][pKilled] && PlayerData[playerid][pHealth] == 0.0) {
			PlayerData[playerid][pHealth] = 100.0;
		}
		UpdateWeapons(playerid);
	}

	format(query, sizeof(query), "UPDATE `characters` SET `Created` = '%d', `Level` = '%d', `Hours` = '%d', `Gender` = '%d', `Birthdate` = '%s', `Astuces` = '%d', `Origin` = '%s', `Skin` = '%d', `PosX` = '%.4f', `PosY` = '%.4f', `PosZ` = '%.4f', `PosA` = '%.4f', `Health` = '%.4f', `Interior` = '%d', `World` = '%d', `Hospital` = '%d', `HospitalInt` = '%d', `Money` = '%d', `BankMoney` = '%d', `OwnsBillboard` = '%d', `Savings` = '%d', `Admin` = '%d', `Helper` = '%d', `JailTime` = '%d', `Muted` = '%d'",
	PlayerData[playerid][pCreated],
	PlayerData[playerid][pLevel],
	PlayerData[playerid][pHours],
	PlayerData[playerid][pGender],
	PlayerData[playerid][pBirthdate],
	PlayerData[playerid][pAstuces],
	PlayerData[playerid][pOrigin],
	PlayerData[playerid][pSkin],
	PlayerData[playerid][pPos][0],
	PlayerData[playerid][pPos][1],
	PlayerData[playerid][pPos][2],
	PlayerData[playerid][pPos][3],
	PlayerData[playerid][pHealth],
	PlayerData[playerid][pInterior],
	PlayerData[playerid][pWorld],
	PlayerData[playerid][pHospital],
	PlayerData[playerid][pHospitalInt],
	PlayerData[playerid][pMoney],
	PlayerData[playerid][pBankMoney],
	PlayerData[playerid][pOwnsBillboard],
	PlayerData[playerid][pSavings],
	PlayerData[playerid][pAdmin],
	PlayerData[playerid][pHelper],
	PlayerData[playerid][pJailTime],
	PlayerData[playerid][pMuted]
	);
	for (new i = 0; i < 13; i ++) {
		format(query, sizeof(query), "%s, `Gun%d` = '%d', `Ammo%d` = '%d'", query, i + 1, PlayerData[playerid][pGuns][i], i + 1, PlayerData[playerid][pAmmo][i]);
	}
	format(query, sizeof(query), "%s, `House` = '%d', `IndiceForce` = '%.1f', `Location` = '%d', `Business` = '%d', `Entrance` = '%d', `Phone` = '%d', `Lottery` = '%d', `LotteryB` = '%d', `PlayingHours` = '%d',`PlayingHoursMax` = '%d', `Minutes` = '%d', `MinutesCount` = '%d', `ArmorStatus` = '%.4f', `Job` = '%d', `Faction` = '%d', `FactionRank` = '%d', `Prisoned` = '%d', `Warrants` = '%d', `Channel` = '%d', `Bleeding` = '%d', `AdminHide` = '%d', `SpawnPoint` = '%d',`LocaID` = '%d',`CarD` = '%d'",
	query,
	PlayerData[playerid][pHouse],
	PlayerData[playerid][pIndiceForce],
	PlayerData[playerid][pLocat],
	PlayerData[playerid][pBusiness],
	PlayerData[playerid][pEntrance],
	PlayerData[playerid][pPhone],
	PlayerData[playerid][pLottery],
	PlayerData[playerid][pLotteryB],
	PlayerData[playerid][pPlayingHours],
	PlayerData[playerid][pPlayingHoursMax],
	PlayerData[playerid][pMinutes],
	PlayerData[playerid][pMinutesCount],
	PlayerData[playerid][pArmorStatus],
	PlayerData[playerid][pJob],
	PlayerData[playerid][pFactionID],
	PlayerData[playerid][pFactionRank],
	PlayerData[playerid][pPrisoned],
	PlayerData[playerid][pWarrants],
	PlayerData[playerid][pChannel],
	PlayerData[playerid][pBleeding],
	PlayerData[playerid][pAdminHide],
	PlayerData[playerid][pSpawnPoint],
	PlayerData[playerid][pLocaID],
	PlayerData[playerid][pCarD]
	);
	format(query, sizeof(query), "%s, `PaVal` = '%d',`PaVen` = '%d', `Annuary` = '%d', `RedList` = '%d', `Warnings` = '%d', `Warn1` = '%s', `Warn2` = '%s', `MaskID` = '%d', `Capacity` = '%d', `Bracelet` = '%d', `AstucesChallenges` = '%d|%d|%d|%d|%d|%d' WHERE `ID` = '%d'",
	query,
	PlayerData[playerid][pPaVal],
	PlayerData[playerid][pPaVen],
	PlayerData[playerid][pAnnuary],
	PlayerData[playerid][pRedList],
	PlayerData[playerid][pWarnings],
	SQL_ReturnEscaped(PlayerData[playerid][pWarn1]),
	SQL_ReturnEscaped(PlayerData[playerid][pWarn2]),
	PlayerData[playerid][pMaskID],
	PlayerData[playerid][pCapacity],
	PlayerData[playerid][pBracelet],
	AstucesChallenges[playerid][0],
	AstucesChallenges[playerid][1],
	AstucesChallenges[playerid][2],
	AstucesChallenges[playerid][3],
	AstucesChallenges[playerid][4],
	AstucesChallenges[playerid][5],
	PlayerData[playerid][pID]
	);
	mysql_function_query(g_iHandle, query, false, "", "");

	SQL_SaveAccessories(playerid);
	SQL_setConnection(playerid, 0);
	return 1;
}

SQL_SaveAccessories(playerid)
{
	if (!PlayerData[playerid][pLogged])
	return 0;

	static
	query[768];

	format(query, sizeof(query), "UPDATE `characters` SET `Glasses` = '%d', `Hat` = '%d', `Bandana` = '%d', `GlassesPos` = '%.4f|%.4f|%.4f|%.4f|%.4f|%.4f|%.4f|%.4f|%.4f'",
	PlayerData[playerid][pGlasses],
	PlayerData[playerid][pHat],
	PlayerData[playerid][pBandana],
	AccessoryData[playerid][0][0],
	AccessoryData[playerid][0][1],
	AccessoryData[playerid][0][2],
	AccessoryData[playerid][0][3],
	AccessoryData[playerid][0][4],
	AccessoryData[playerid][0][5],
	AccessoryData[playerid][0][6],
	AccessoryData[playerid][0][7],
	AccessoryData[playerid][0][8]
	);
	format(query, sizeof(query), "%s, `HatPos` = '%.4f|%.4f|%.4f|%.4f|%.4f|%.4f|%.4f|%.4f|%.4f'",
	query,
	AccessoryData[playerid][1][0],
	AccessoryData[playerid][1][1],
	AccessoryData[playerid][1][2],
	AccessoryData[playerid][1][3],
	AccessoryData[playerid][1][4],
	AccessoryData[playerid][1][5],
	AccessoryData[playerid][1][6],
	AccessoryData[playerid][1][7],
	AccessoryData[playerid][1][8]
	);
	format(query, sizeof(query), "%s, `BandanaPos` = '%.4f|%.4f|%.4f|%.4f|%.4f|%.4f|%.4f|%.4f|%.4f' WHERE `ID` = '%d'",
	query,
	AccessoryData[playerid][2][0],
	AccessoryData[playerid][2][1],
	AccessoryData[playerid][2][2],
	AccessoryData[playerid][2][3],
	AccessoryData[playerid][2][4],
	AccessoryData[playerid][2][5],
	AccessoryData[playerid][2][6],
	AccessoryData[playerid][2][7],
	AccessoryData[playerid][2][8],
	PlayerData[playerid][pID]
	);
	mysql_function_query(g_iHandle, query, false, "", "");
	return 1;
}

stock strreplace(string[], const search[], const replacement[], bool:ignorecase = false, pos = 0, limit = -1, maxlength = sizeof(string))
{
    if (limit == 0)
        return 0;

    new
		sublen = strlen(search),
		replen = strlen(replacement),
		bool:packed = ispacked(string),
		maxlen = maxlength,
		len = strlen(string),
		count = 0;

    if (packed)
        maxlen *= 4;

    if (!sublen)
        return 0;

    while (-1 != (pos = strfind(string, search, ignorecase, pos))) {
        strdel(string, pos, pos + sublen);

        len -= sublen;

        if (replen && len + replen < maxlen) {
            strins(string, replacement, pos, maxlength);

            pos += replen;
            len += replen;
        }

        if (limit != -1 && ++count >= limit)
            break;
    }
    return count;
}

stock GetPriceFurniture(itemid)
{
	new
		bizPrices_furniture;

	switch(itemid)
	{
	    case 0: bizPrices_furniture = 75;
	    case 1: bizPrices_furniture = 115;
	    case 2: bizPrices_furniture = 15;
	    case 3: bizPrices_furniture = 95;
	    case 4: bizPrices_furniture = 3;
	    case 5: bizPrices_furniture = 2;
	    case 6: bizPrices_furniture = 10;
	    case 7: bizPrices_furniture = 1000;
	    case 8: bizPrices_furniture = 20;
	    case 9: bizPrices_furniture = 10;
	    case 10: bizPrices_furniture = 140;
	    case 11: bizPrices_furniture = 190;
	    case 12: bizPrices_furniture = 150;
	    case 13: bizPrices_furniture = 60;
	    case 14: bizPrices_furniture = 50;
	    case 15: bizPrices_furniture = 5;
	    case 16: bizPrices_furniture = 10;
	    case 17: bizPrices_furniture = 5;
	}
	return bizPrices_furniture;
}

forward DUMB_START(playerid);
public DUMB_START(playerid)
{
	gainPower[playerid] = 0;
	BAR_CAN_BE_USED[playerid]=true;

	//SET ATATCH OBJECTS
	SetPlayerAttachedObject(playerid,1, 3072, 5);//left hand
	SetPlayerAttachedObject(playerid,2, 3071, 6);//right hand

	//SHOW PROGRESS BAR
	player_gym_progress[playerid] = CreateProgressBar(503.00, 384.00, 112.50, 8.50, -1, 100.0);
	ShowProgressBarForPlayer(playerid, player_gym_progress[playerid]);
	
	for(new i=0; i<3; i++) PlayerTextDrawShow(playerid, GYM_TD[playerid][i]);

	new
	    string[10];
	    
	format(string, sizeof(string), "%d", PLAYER_DUMB_COUNT[playerid]);
	PlayerTextDrawSetString(playerid, GYM_TD[playerid][2], string);
	
	PLAYER_DUMB_TIMER[playerid] = SetTimerEx("GYM_CHECK", 500, true, "i", playerid);
}

forward BIKE_START(playerid);
public BIKE_START(playerid)
{
	gainPower[playerid] = 0;
	BAR_CAN_BE_USED[playerid]=true;
	ApplyAnimation( playerid, "GYMNASIUM", "bike_start", 1, 1, 0, 0, 1, 0, 1);

	//SHOW PROGRESS BAR
	player_gym_progress[playerid] = CreateProgressBar(503.00, 384.00, 112.50, 8.50, -1, 100.0);
	ShowProgressBarForPlayer(playerid, player_gym_progress[playerid]);
	for(new i=0; i<3; i++) PlayerTextDrawShow(playerid, GYM_TD[playerid][i]);

	new
	    string[10];
	    
	format(string, sizeof(string), "%d", PLAYER_DUMB_COUNT[playerid]);
	PlayerTextDrawSetString(playerid, GYM_TD[playerid][2], string);

	//Created Second Timer For Check
	PLAYER_BIKE_TIMER[playerid] = SetTimerEx("GYM_CHECK", 500, 1, "i", playerid);
}

forward TREAM_START(playerid);
public TREAM_START(playerid)
{
	gainPower[playerid] = 0;
	BAR_CAN_BE_USED[playerid]=true;

	//Make Player Run
	ApplyAnimation( playerid, "GYMNASIUM", "gym_tread_sprint", 1, 1, 0, 0, 1, 0, 1);

	//SHOW PROGRESS BAR
	player_gym_progress[playerid] = CreateProgressBar(503.00, 384.00, 112.50, 8.50, -1, 100.0);
	ShowProgressBarForPlayer(playerid, player_gym_progress[playerid]);
	for(new i=0; i<3; i++) PlayerTextDrawShow(playerid, GYM_TD[playerid][i]);

	new
	    string[10];
	    
	format(string, sizeof(string), "%d", PLAYER_DUMB_COUNT[playerid]);
	PlayerTextDrawSetString(playerid, GYM_TD[playerid][2], string);

	//Created Second Timer For Check
	PLAYER_TREAD_TIMER[playerid] = SetTimerEx("GYM_CHECK", 500, 1, "i", playerid);
}

forward BENCH_START(playerid);
public BENCH_START(playerid)
{
	gainPower[playerid] = 0;
	BAR_CAN_BE_USED[playerid]=true;

	//SET ATATCH OBJECTS
	SetPlayerAttachedObject(playerid, 1, 2913, 6);

	//SHOW PROGRESS BAR
	player_gym_progress[playerid] = CreateProgressBar(503.00, 384.00, 112.50, 8.50, -1, 100.0);
	ShowProgressBarForPlayer(playerid, player_gym_progress[playerid]);
	for(new i=0; i<3; i++) PlayerTextDrawShow(playerid, GYM_TD[playerid][i]);

	new
	    string[10];
	    
	format(string, sizeof(string), "%d", PLAYER_DUMB_COUNT[playerid]);
	PlayerTextDrawSetString(playerid, GYM_TD[playerid][2], string);
	
	PLAYER_BENCH_TIMER[playerid] = SetTimerEx("GYM_CHECK", 500, true, "i", playerid);
}

forward GYM_CHECK(playerid);
public GYM_CHECK(playerid)
{
	if(PlayerData[playerid][pGymnase] != -1)
	{
	    new
	        gymid = PlayerData[playerid][pGymnase];
	        
		if(!GymData[gymid][gymExists]) return 1;

		switch(GymData[gymid][gymType])
		{
			case GYM_BIKE: BIKE_CHECK(playerid);
			case GYM_BENCH: BENCH_CHECK(playerid);
			case GYM_RUN: TREAM_CHECK(playerid);
			case GYM_DUMB: DUMB_CHECK(playerid);
		}
	}
	return 1;
}

stock CheckGainPower(playerid)
{
	gainPower[playerid]++;
    if(gainPower[playerid] >= 200)
    {
        new
            rand = random(3);
            
        switch(rand)
        {
            case 1:
			{
				PlayerData[playerid][pIndiceForce] += 0.1;
				GameTextForPlayer(playerid, "~g~+0.1 FORCE", 2500, 6);
			}
        }
        gainPower[playerid] = 0;
    }
}

DUMB_CHECK(playerid)
{
	new
	    Float:value = GetProgressBarValue(player_gym_progress[playerid]),
		string[10];
	    
	if(value < 2)
		SetProgressBarValue(player_gym_progress[playerid], 0);
	else
		SetProgressBarValue(player_gym_progress[playerid], value-2);
		
	UpdateProgressBar(player_gym_progress[playerid], playerid);

	if(GetProgressBarValue(player_gym_progress[playerid]) >=90)
	{

		//random select a amation for player
		switch(random(2))
		{
			case 0: ApplyAnimation(playerid, "freeweights", "gym_free_A", 1, 0, 0, 0, 1, 0, 1);
  			case 1: ApplyAnimation(playerid, "freeweights", "gym_free_B", 1, 0, 0, 0, 1, 0, 1);
		}
		
		PLAYER_DUMB_COUNT[playerid]++;

		format(string, sizeof(string), "%d", PLAYER_DUMB_COUNT[playerid]);
		PlayerTextDrawSetString(playerid, GYM_TD[playerid][2], string);

		SetProgressBarValue(player_gym_progress[playerid], 0);
		SetTimerEx("DUMB_SET_AIMSTOP", 2000, false, "i", playerid);
	}
}

BENCH_CHECK(playerid)
{
	new
	    Float:value = GetProgressBarValue(player_gym_progress[playerid]),
	    string[10];

	if(value < 2)
		SetProgressBarValue(player_gym_progress[playerid], 0);
	else
		SetProgressBarValue(player_gym_progress[playerid], value-2);
		
	UpdateProgressBar(player_gym_progress[playerid], playerid);

	if(GetProgressBarValue(player_gym_progress[playerid]) >=90)
	{

		//random select a amation for player
		switch(random(2))
		{
			case 0: ApplyAnimation( playerid, "benchpress", "gym_bp_up_A", 1, 0, 0, 0, 1, 0, 1 );
  			case 1: ApplyAnimation( playerid, "benchpress", "gym_bp_up_B", 1, 0, 0, 0, 1, 0, 1 );
		}
		PLAYER_BENCH_COUNT[playerid]++;

		format(string,sizeof(string), "%d", PLAYER_BENCH_COUNT[playerid]);
		PlayerTextDrawSetString(playerid, GYM_TD[playerid][2], string);

		SetProgressBarValue(player_gym_progress[playerid], 0);
		SetTimerEx("BENCH_SET_AIMSTOP",2000, false, "i", playerid);
	}
}

forward DUMB_SET_AIMSTOP(playerid);
public DUMB_SET_AIMSTOP(playerid)
{
	//Apply Player pull down aim
	ApplyAnimation( playerid, "freeweights", "gym_free_down", 1, 0, 0, 0, 1, 0, 1 );

	//Reset the progress bar values
	UpdateProgressBar(player_gym_progress[playerid], playerid);
}

forward BENCH_SET_AIMSTOP(playerid);
public BENCH_SET_AIMSTOP(playerid)
{
	//Apply Player pull down aim
	ApplyAnimation(playerid, "benchpress", "gym_bp_down", 1, 0, 0, 0, 1, 0, 1);

	//Reset the progress bar values
	UpdateProgressBar(player_gym_progress[playerid], playerid);
}

BIKE_CHECK(playerid)
{
	new
	    Float:value = GetProgressBarValue(player_gym_progress[playerid]);

	if(value < 8)
		SetProgressBarValue(player_gym_progress[playerid], 0);
	else
		SetProgressBarValue(player_gym_progress[playerid], value-8);
		
	UpdateProgressBar(player_gym_progress[playerid], playerid);

	if(GetProgressBarValue(player_gym_progress[playerid]) <=0)
	{
		ApplyAnimation( playerid, "GYMNASIUM", "gym_bike_still", 1, 1, 0, 0, 1, 0, 1);
	}
	else
	{
		ApplyAnimation( playerid, "GYMNASIUM", "gym_bike_fast", 1, 1, 0, 0, 1, 0, 1 );
	}


}
TREAM_CHECK(playerid)
{
	new
	    Float:value = GetProgressBarValue(player_gym_progress[playerid]);

	if(value < 8)
		SetProgressBarValue(player_gym_progress[playerid], 0);
	else
		SetProgressBarValue(player_gym_progress[playerid], value-8);
		
	UpdateProgressBar(player_gym_progress[playerid], playerid);

	//Check If Player Gonna Fall
	if(GetProgressBarValue(player_gym_progress[playerid]) <= 0)
	{
		KillTimer(PLAYER_TREAD_TIMER[playerid]);

		//then we can use our custom function
		FallOffTread(playerid);
	}
}

FallOffTread(playerid)
{
	gainPower[playerid] = 0;
	//Disabled Bar
	BAR_CAN_BE_USED[playerid]=false;
	//This one is for when player fall off the machine (when power < 0)
	ApplyAnimation(playerid, "GYMNASIUM", "gym_tread_falloff", 1, 0, 0, 0, 1, 0, 1 );

	HideProgressBarForPlayer(playerid, player_gym_progress[playerid]);
	DestroyProgressBar(player_gym_progress[playerid]);
	
	for(new i=0; i<3; i++) PlayerTextDrawHide(playerid, GYM_TD[playerid][i]);
	
	SetTimerEx("REST_PLAYER", 2000, false, "i", playerid);
}
GetOffTread(playerid)
{
	gainPower[playerid] = 0;
	BAR_CAN_BE_USED[playerid]=false;
	ApplyAnimation( playerid, "GYMNASIUM", "gym_tread_getoff", 1, 0, 0, 0, 1, 0, 1 );

	HideProgressBarForPlayer(playerid, player_gym_progress[playerid]);
	DestroyProgressBar(player_gym_progress[playerid]);

	for(new i=0; i<3; i++) PlayerTextDrawHide(playerid, GYM_TD[playerid][i]);

	SetTimerEx("REST_PLAYER", 3500, false, "i", playerid);
}

GetOffBENCH(playerid)
{
	gainPower[playerid] = 0;
	BAR_CAN_BE_USED[playerid]=false;
	ApplyAnimation(playerid, "benchpress", "gym_bp_getoff", 1, 0, 0, 0, 1, 0, 1 );

	HideProgressBarForPlayer(playerid, player_gym_progress[playerid]);
	DestroyProgressBar(player_gym_progress[playerid]);

	for(new i=0; i<3; i++) PlayerTextDrawHide(playerid, GYM_TD[playerid][i]);
	
    SetTimerEx("REST_PLAYER", 5000, false, "i", playerid);
}

PutDownDUMB(playerid)
{
	gainPower[playerid] = 0;
	BAR_CAN_BE_USED[playerid]=false;
	ApplyAnimation(playerid, "freeweights", "gym_free_putdown", 1, 0, 0, 0, 1, 0, 1 );

	HideProgressBarForPlayer(playerid, player_gym_progress[playerid]);
	DestroyProgressBar(player_gym_progress[playerid]);

	for(new i=0; i<3; i++) PlayerTextDrawHide(playerid, GYM_TD[playerid][i]);
	
    SetTimerEx("REST_PLAYER",3000, false, "i", playerid);

}
GetOffBIKE(playerid)
{
	gainPower[playerid] = 0;
	BAR_CAN_BE_USED[playerid]=false;
	ApplyAnimation( playerid, "GYMNASIUM", "gym_bike_getoff", 1, 0, 0, 0, 1, 0, 1 );

	HideProgressBarForPlayer(playerid, player_gym_progress[playerid]);
	DestroyProgressBar(player_gym_progress[playerid]);

	for(new i=0; i<3; i++) PlayerTextDrawHide(playerid, GYM_TD[playerid][i]);
	
	SetTimerEx("REST_PLAYER", 2000, false, "i", playerid);
}

forward REST_PLAYER(playerid);
public REST_PLAYER(playerid)
{

	//Rest Staus
	ClearAnimations( playerid, 1 );
	SetCameraBehindPlayer( playerid );
	TogglePlayerControllable( playerid, 1 );
	BAR_CAN_BE_USED[playerid]=false;
	gainPower[playerid] = 0;
	//Reset Bool

	if(PlayerData[playerid][pGymnase] != -1)
	{
	    new
	        gymid = PlayerData[playerid][pGymnase];
	        
		if(!GymData[gymid][gymExists]) return 1;
		
		switch(GymData[gymid][gymType])
		{
		    case GYM_RUN:
		    {
				GymData[gymid][gymUsed] = false;
				GymData[gymid][gymPlayerUse] = INVALID_PLAYER_ID;
				
				PlayerData[playerid][pGymnase] = -1;
			}
		    case GYM_BIKE:
		    {
				GymData[gymid][gymUsed] = false;
				GymData[gymid][gymPlayerUse] = INVALID_PLAYER_ID;

				PlayerData[playerid][pGymnase] = -1;
			}
		    case GYM_BENCH:
		    {
				GymData[gymid][gymUsed] = false;
				GymData[gymid][gymPlayerUse] = INVALID_PLAYER_ID;
				
			 	//barbell_objects[PLAYER_CURRECT_BENCH[playerid]] = CreateObject(2913, barbell_pos[PLAYER_CURRECT_BENCH[playerid]][ 0 ], barbell_pos[PLAYER_CURRECT_BENCH[playerid]][ 1 ], barbell_pos[PLAYER_CURRECT_BENCH[playerid]][ 2 ], barbell_pos[PLAYER_CURRECT_BENCH[playerid]][ 3 ], barbell_pos[PLAYER_CURRECT_BENCH[playerid]][ 4 ], barbell_pos[PLAYER_CURRECT_BENCH[playerid]][ 5 ]);
			    RemovePlayerAttachedObject(playerid, 1);

				PlayerData[playerid][pGymnase] = -1;
			}
		    case GYM_DUMB:
		    {
				GymData[gymid][gymUsed] = false;
				GymData[gymid][gymPlayerUse] = INVALID_PLAYER_ID;
			  	
			 	//dumbell_right_objects[PLAYER_CURRECT_DUMB[playerid]] = CreateObject(3071,dumb_bell_right_pos[PLAYER_CURRECT_DUMB[playerid]][0],dumb_bell_right_pos[PLAYER_CURRECT_DUMB[playerid]][1],dumb_bell_right_pos[PLAYER_CURRECT_DUMB[playerid]][2],dumb_bell_right_pos[PLAYER_CURRECT_DUMB[playerid]][3],dumb_bell_right_pos[PLAYER_CURRECT_DUMB[playerid]][4],dumb_bell_right_pos[PLAYER_CURRECT_DUMB[playerid]][5]);
			//	dumbell_left_objects[PLAYER_CURRECT_DUMB[playerid]] = CreateObject(3072,dumb_bell_left_pos[PLAYER_CURRECT_DUMB[playerid]][0],dumb_bell_left_pos[PLAYER_CURRECT_DUMB[playerid]][1],dumb_bell_left_pos[PLAYER_CURRECT_DUMB[playerid]][2],dumb_bell_left_pos[PLAYER_CURRECT_DUMB[playerid]][3],dumb_bell_left_pos[PLAYER_CURRECT_DUMB[playerid]][4],dumb_bell_left_pos[PLAYER_CURRECT_DUMB[playerid]][5]);

				RemovePlayerAttachedObject(playerid, 1);
			    RemovePlayerAttachedObject(playerid, 2);

				PlayerData[playerid][pGymnase] = -1;
			}
		}
 	}
  	return 1;
}


stock GetBillboardByID(sqlid)
{
	for (new i = 0; i != MAX_BILLBOARDS; i ++) if (BillBoardData[i][bbExists] && BillBoardData[i][bbID] == sqlid)
	return i;

	return -1;
}


stock GetInitials(const string[])
{
	new
	ret[32],
	index = 0;

	for (new i = 0, l = strlen(string); i != l; i ++)
	{
		if (('A' <= string[i] <= 'Z') && (i == 0 || string[i - 1] == ' '))
		ret[index++] = string[i];
	}
	return ret;
}

stock GetDistance(Float:x1, Float:y1, Float:z1, Float:x2, Float:y2, Float:z2)
{
	return floatround(floatsqroot(((x1 - x2) * (x1 - x2)) + ((y1 - y2) * (y1 - y2)) + ((z1 - z2) * (z1 - z2))));
}

stock Float:DistanceCameraTargetToLocation(Float:fCameraX, Float:fCameraY, Float:fCameraZ, Float:fObjectX, Float:fObjectY, Float:fObjectZ, Float:fVectorX, Float:fVectorY, Float:fVectorZ)
{
	new
	Float:fX,
	Float:fY,
	Float:fZ,
	Float:fDistance;

	fDistance = GetDistance(fCameraX, fCameraY, fCameraZ, fObjectX, fObjectY, fObjectZ);

	fX = fVectorX * fDistance + fCameraX;
	fY = fVectorY * fDistance + fCameraY;
	fZ = fVectorZ * fDistance + fCameraZ;

	return floatsqroot((fX - fObjectX) * (fX - fObjectX) + (fY - fObjectY) * (fY - fObjectY) + (fZ - fObjectZ) * (fZ - fObjectZ));
}
stock CheckSobeit(playerid)
{
	TogglePlayerControllable(playerid,false);
	SobeitCheckTimer[playerid] = SetTimerEx("sobeitdetected",5000,0,"i",playerid);
	return 1;
}

stock BannedCheat(cheatid)
{
	switch(cheatid)
	{
		case 51, 50: return true;
	}
	return false;
}

stock AC_GetName(code)
{
	new
	    cheatName[50];
	    
	switch(code)
	{
	    case 0: cheatName = "Airbreak (a pied)";
	    case 1: cheatName = "Airbreak (en vehicule)";
	    case 2: cheatName = "Téléportation (a pied)";
	    case 3: cheatName = "Téléportation (en véhicule)";
	    case 4: cheatName = "Téléportation";
	    case 5: cheatName = "Téléportation (pickup)";
	    case 6: cheatName = "Téléportation véhicule";
	    case 7: cheatName = "FlyHack (a pied)";
	    case 8: cheatName = "FlyHack (en véhicule)";
	    case 9: cheatName = "Speed Hack (a pied)";
	    case 10: cheatName = "Speed Hack (en véhicule)";
	    case 11: cheatName = "HealthCar Hack";
	    case 12: cheatName = "Health Hack";
	    case 13: cheatName = "Armour Hack";
	    //case 14: cheatName = "Money Hack";
	    //case 15: cheatName = "Weapon Hack";
	    case 16: cheatName = "Ammo Hack (1)";
	    case 17: cheatName = "Ammo Hack (2)";
	    //case 18: cheatName = "Special Action hack";
	    case 19: cheatName = "Invincible Hack (a pied)";
	    case 20: cheatName = "Invincible Hack (en véhicule)";
	    case 21: cheatName = "Invisible Hack";
	    //case 22: cheatName = "LagComp Spoof";
	    case 23: cheatName = "Tuning Hack";
	    //case 24: cheatName = "Parkour mod";
	    //case 25: cheatName = "Quick turn";
	    case 26: cheatName = "Rapid fire";
	    //case 27: cheatName = "Fake spawn";
	    case 28: cheatName = "Fake kill";
	    //case 29: cheatName = "Pro Aim";
	    //case 30: cheatName = "CJ Run";
	    //case 31: cheatName = "CarShot";
	    //case 32: cheatName = "CarJack";
	    //case 33: cheatName = "Unfreeze Hack";
	    //case 34: cheatName = "AFK Ghost";
	    //case 35: cheatName = "Full Aiming";
	    case 50: cheatName = "Jetpack";
	    case 51: cheatName = "Weapon Hack";
	}
	
	return cheatName;
}

forward DisableAnticheatForPlayer(playerid);
public DisableAnticheatForPlayer(playerid)
{
	for(new i=0; i<36; i++) EnableAntiCheatForPlayer(playerid, i, 0);
}

forward EnableAnticheatForPlayer(playerid);
public EnableAnticheatForPlayer(playerid)
{
	for(new i=0; i<36; i++) EnableAntiCheatForPlayer(playerid, i, 1);
}

forward DisableCheatIDTemporary(playerid, cheatid, time);
public DisableCheatIDTemporary(playerid, cheatid, time)
{
	EnableAntiCheatForPlayer(playerid, cheatid, 0);
	SetTimerEx("EnableCheatIDTemporary", time, false, "ii", playerid, cheatid);
}

forward EnableCheatIDTemporary(playerid, cheatid);
public EnableCheatIDTemporary(playerid, cheatid)
{
	EnableAntiCheatForPlayer(playerid, cheatid, 1);

}



forward OnCheatDetected(playerid, ip_address[], type, code);
public OnCheatDetected(playerid, ip_address[], type, code)
{
	if(!PlayerData[playerid][pLogged]) return 1;
	
	new
	    reasonString[50];
	    
	format(reasonString, sizeof(reasonString), "%s", AC_GetName(code));
	
	if(BannedCheat(code))
	{
		SendClientMessageEx(playerid, COLOR_ADMIN, "Vous avez été banni par l'anticheat, raison: %s.", reasonString);
		SendAdminAlert(COLOR_ADMINGROUP, "%s a été banni par l'anticheat, raison: %s", ReturnName(playerid, 0), reasonString);

		Log_Write("logs/rcon_log.txt", "[%s] %s (%s) was banned by anticheat for reason: %s.", ReturnDate(), ReturnName(playerid, 0), PlayerData[playerid][pIP]);

		Blacklist_Add(PlayerData[playerid][pIP], PlayerData[playerid][pUsername], "Anticheat", reasonString);
		KickEx(playerid);
	}
	else if(!isnull(reasonString) && gettime() > PlayerData[playerid][pLastWarnCheat])
	{
		SendAdminAlert(COLOR_ADMINGROUP, "%s(%d) est soupçonné de %s. (PING: %dms | P.L: %.2f)", ReturnName(playerid, 0), playerid, reasonString, GetPlayerPing(playerid), NetStats_PacketLossPercent(playerid));
		PlayerData[playerid][pLastWarnCheat] = gettime() + 2;
	}
	return 1;
}

forward AFK();
public AFK()
{
	new Float:x,Float:y,Float:z;
	foreach(new i:Player)
	{
	    if(PlayerData[i][pAFK]) continue;
	        
		GetPlayerPos(i,x,y,z);
		if(AFKPos[i][1] == 0)
    	{
         	AFKPos[i][0] = x;
		  	AFKPos[i][1] = y;
	  		AFKPos[i][2] = z;
	  		
  			PlayerData[i][pAFK] = false;
		}
		else if(x == AFKPos[i][0] && y == AFKPos[i][1] && z == AFKPos[i][2])
		{
		    AFKMin[i]++;
		    
		    if(AFKMin[i] == AFKMAXMIN)
		    {
     			SendClientMessageEx(i, COLOR_INFO, "Vous avez été détecté comme absent. Bougez votre personnage pour ne pas être déconnecté.", AFKMAXMIN);
		    }
		    /*else if(AFKMin[i] > AFKMAXMIN)
		    {
     			SendClientMessageEx(i, COLOR_INFO, "Vous avez été absent pendant plus de %d minutes, vous avez été kické du serveur.", AFKMAXMIN);
     			SendNearbyMessage(i, 20.0, COLOR_GREY, "ANTI-AFK: %s a été kick du serveur par l'ANTI-AFK.", ReturnName(i));
				Log_Write("logs/kick_log.txt", "[%s] %s has kicked %s for: AFK.", ReturnDate(), ReturnName(i));
				KickEx(i);
			}*/
		    else if(AFKMin[i] > AFKMAXMIN)
		    {
     			PlayerData[i][pAFK] = true;
     			
     			PlayerData[i][pAFK_vw] = GetPlayerVirtualWorld(i);
     			SetPlayerVirtualWorld(i, i+WORLD_AFK);
     			
     			TogglePlayerControllable(i, false);
     			Dialog_Show(i, DIALOG_AFK, DIALOG_STYLE_MSGBOX, "Vous êtes absent", "Vous avez été détecté comme absent du serveur.\nVotre compte est suspendu et vous êtes mit en sécurité. Cliquez sur \"Revenir\" pour sortir du mode AFK.", "Revenir", "");
			}
		}
		AFKPos[i][0] = x;
		AFKPos[i][1] = y;
  		AFKPos[i][2] = z;
	}
}

Dialog:DIALOG_AFK(playerid, response, listitem, inputtext[])
{
	TogglePlayerControllable(playerid, true);
	SetPlayerVirtualWorld(playerid, PlayerData[playerid][pAFK_vw]);

	AFKMin[playerid] = 0;
	
	PlayerData[playerid][pAFK] = false;
	PlayerData[playerid][pAFK_vw] = 0;
	return 1;
}

public OnQueryError(errorid, error[], callback[], query[], connectionHandle)
{
	switch(errorid)
	{
		case CR_SERVER_GONE_ERROR:
		{
			printf("Lost connection to server, trying reconnect...");
			mysql_reconnect(connectionHandle);
		}
		case ER_SYNTAX_ERROR:
		{
			printf("Something is wrong in your syntax, query: %s",query);
		}
	}
	return 1;
}


forward sobeitdetected(playerid);
public sobeitdetected(playerid)
{
	new Float:aX, Float:aY, Float:aZ;
	GetPlayerCameraFrontVector(playerid, aX, aY, aZ);
	#pragma unused aX
	#pragma unused aY
	if(aZ < -0.7)
	{
		CallLocalFunction("OnPlayerSobeitDetected","ii",playerid, 1);
	}
	else
	{
		CallLocalFunction("OnPlayerSobeitDetected","ii",playerid, 0);
	}
	TogglePlayerControllable(playerid, true);
	KillTimer(SobeitCheckTimer[playerid]);
	return 1;
}

forward OnPlayerSobeitDetected(playerid,detected);
public OnPlayerSobeitDetected(playerid,detected)
{
	Blacklist_Add(PlayerData[playerid][pIP], PlayerData[playerid][pUsername], "SOBEIT ANTI", "CheatSobeit");
	KickEx(playerid);
	return 1;
}

forward OnJailAccount(index);
public OnJailAccount(index)
{
	new string[128], name[24];
	static
	rows,
	fields;

	cache_get_data(rows, fields, g_iHandle);
	GetPVarString(index, "OnJailAccount", name, 24);

	if(cache_num_rows(g_iHandle)) {
		format(string, sizeof(string), "Vous avez placé en jail %s avec succès.", name);
		SendClientMessageEx(index, COLOR_WHITE, string);

	}
	else {
		format(string, sizeof(string), "Le nom %s n'existe pas", name);
		SendClientMessageEx(index, COLOR_WHITE, string);
	}

	DeletePVar(index, "OnJailAccount");

	return 1;
}
forward OnBillboardCreated(bizid);
public OnBillboardCreated(bizid)
{
	if (bizid == -1 || !BillBoardData[bizid][bbExists])
	return 0;

	BillBoardData[bizid][bbID] = cache_insert_id();
	Billboard_Save(bizid);

	return 1;
}
//Publicautre
forward Demar(playerid,carid);
public Demar(playerid,carid)
{
	if(IsPlayerConnected(playerid) && IsPlayerInAnyVehicle(playerid))
	{
		SetEngineStatus(carid, true);
		TogglePlayerControllable(playerid, true);
		ShowPlayerFooter(playerid, "Vous avez ~g~démarré~w~ le moteur");
		//SendNearbyMessage(playerid, 5.0, COLOR_LIGHTRED, "%s a demarré son véhicule ", ReturnName(playerid, 1));
	}
	return 1;
}

//==============TimerOnGameModInit==================//
forward RespawnCar();
public RespawnCar() //RespawnCar
{
	new count;
	for(new i = 0; i < MAX_DYNAMIC_CARS; i ++)
 	{
		new id = Car_GetID(i);
		if(EntreCar[i] == 0 && CarData[id][carJob] > 0 || EntreCar[i] == 0 && CarData[id][carFaction] > 0)
		{
			RespawnVehicle(i);
			count++;
			EntreCar[i] = 1;
		}
		else if(EntreCar[i] == 1 && CarData[i][carJob] > 0 || EntreCar[i] == 1 && CarData[id][carFaction] > 0)
		{
			EntreCar[i] = 0;
		}
	}
	return 1;
}

forward Billboard_Load();
public Billboard_Load()
{
	static
	rows,
	fields;

	cache_get_data(rows, fields, g_iHandle);

	for (new i = 0; i < rows; i ++) if (i < MAX_BILLBOARDS)
	{
		BillBoardData[i][bbExists] = true;
		BillBoardData[i][bbID] = cache_get_field_int(i, "bbID");

		cache_get_field_content(i, "bbName", BillBoardData[i][bbName], g_iHandle, 32);
		cache_get_field_content(i, "bbMessage", BillBoardData[i][bbMessage], g_iHandle, 230);

		BillBoardData[i][bbOwner] = cache_get_field_int(i, "bbOwner");
		BillBoardData[i][bbPrice] = cache_get_field_int(i, "bbPrice");
		BillBoardData[i][bbRange] = cache_get_field_int(i, "bbRange");
		BillBoardData[i][bbPos][0] = cache_get_field_float(i, "bbPosX");
		BillBoardData[i][bbPos][1] = cache_get_field_float(i, "bbPosY");
		BillBoardData[i][bbPos][2] = cache_get_field_float(i, "bbPosZ");
		Billboard_Refresh(i);
	}
	return 1;
}

forward OnViewBillboards(extraid, name[]);
public OnViewBillboards(extraid, name[])
{
	static
	rows,
	fields;

	cache_get_data(rows, fields, g_iHandle);

	if (!rows)
	return SendClientMessageEx(extraid, COLOR_ERROR, "Aucun panneau publicitaire n'a été trouvé.");

	static
	string[1024],
	desc[128];

	string[0] = 0;

	for (new i = 0; i < rows; i ++) {
		cache_get_field_content(i, "bbName", desc, g_iHandle, 32);

		//format(string, sizeof(string), "%s{FFFFFF}%s ({C4E5FF}%i{FFFFFF})\n", string, desc, i);
		format(string, sizeof(string), "%s{FFFFFF}Billboard ({C4E5FF}%i{FFFFFF}) | %s | $%d\n", string, i, desc, BillBoardData[i][bbPrice]);
	}
	format(desc, sizeof(desc), "Los Santos Billboards Agency", name);
	Dialog_Show(extraid, Billboards, DIALOG_STYLE_LIST, desc, string, "Fermer", "");
	return 1;
}

forward DestroyWater(objectid);
public DestroyWater(objectid)
{
	if (IsValidDynamicObject(objectid))
	DestroyDynamicObject(objectid);

	return 0;
}
forward RandomFire();
public RandomFire()
{
	for (new i = 0; i < sizeof(g_aFireObjects); i ++)
	{
		g_aFireExtinguished[i] = 0;

		if (IsValidDynamicObject(g_aFireObjects[i]))
		DestroyDynamicObject(g_aFireObjects[i]);
	}
	switch (random(5))
	{
		case 0:
		{
			g_aFireObjects[0] = CreateDynamicObject(18691, 1930.4942, -1784.1799, 10.9368, 0.0, 0.0, 0.0);
			g_aFireObjects[1] = CreateDynamicObject(18691, 1930.5037, -1782.1473, 10.9368, 0.0, 0.0, 0.0);
			g_aFireObjects[2] = CreateDynamicObject(18691, 1930.5136, -1779.6364, 10.9368, 0.0, 0.0, 0.0);
			g_aFireObjects[3] = CreateDynamicObject(18691, 1930.5238, -1777.1058, 10.9368, 0.0, 0.0, 0.0);
			g_aFireObjects[4] = CreateDynamicObject(18691, 1930.5346, -1774.5141, 10.9368, 0.0, 0.0, 0.0);
			g_aFireObjects[5] = CreateDynamicObject(18691, 1930.5428, -1772.4306, 10.9368, 0.0, 0.0, 0.0);
			g_aFireObjects[6] = CreateDynamicObject(18691, 1930.5507, -1770.4219, 10.9368, 0.0, 0.0, 0.0);
			g_aFireObjects[7] = CreateDynamicObject(18691, 1930.5588, -1768.3559, 10.9368, 0.0, 0.0, 0.0);
			g_aFireObjects[8] = CreateDynamicObject(18691, 1929.1459, -1767.9173, 14.3093, 0.0, 0.0, 0.0);
			g_aFireObjects[9] = CreateDynamicObject(18691, 1928.8776, -1769.5853, 14.3093, 0.0, 0.0, 0.0);
			g_aFireObjects[10] = CreateDynamicObject(18691, 1928.8422, -1772.0158, 14.3093, 0.0, 0.0, 0.0);
			g_aFireObjects[11] = CreateDynamicObject(18691, 1928.8189, -1773.6047, 14.3093, 0.0, 0.0, 0.0);
			g_aFireObjects[12] = CreateDynamicObject(18691, 1928.8001, -1774.8883, 14.3093, 0.0, 0.0, 0.0);
			g_aFireObjects[13] = CreateDynamicObject(18691, 1928.7772, -1776.4462, 14.3093, 0.0, 0.0, 0.0);
			g_aFireObjects[14] = CreateDynamicObject(18691, 1928.7534, -1778.0637, 14.3093, 0.0, 0.0, 0.0);
			g_aFireObjects[15] = CreateDynamicObject(18691, 1928.7347, -1779.3225, 14.3093, 0.0, 0.0, 0.0);
			g_aFireObjects[16] = CreateDynamicObject(18691, 1928.7145, -1780.7152, 14.3093, 0.0, 0.0, 0.0);
			g_aFireObjects[17] = CreateDynamicObject(18691, 1928.6938, -1782.1208, 14.3093, 0.0, 0.0, 0.0);
			g_aFireObjects[18] = CreateDynamicObject(18691, 1928.6655, -1784.0491, 14.3093, 0.0, 0.0, 0.0);
			g_aFireObjects[19] = CreateDynamicObject(18691, 1935.3200, -1783.8045, 10.7728, 0.0, 0.0, 0.0);
			g_aFireObjects[20] = CreateDynamicObject(18691, 1935.2098, -1781.6428, 10.7728, 0.0, 0.0, 0.0);
			g_aFireObjects[21] = CreateDynamicObject(18691, 1935.0748, -1778.9934, 10.7728, 0.0, 0.0, 0.0);
			g_aFireObjects[22] = CreateDynamicObject(18691, 1934.9506, -1776.5572, 10.7728, 0.0, 0.0, 0.0);
			g_aFireObjects[23] = CreateDynamicObject(18691, 1934.8343, -1774.2791, 10.7728, 0.0, 0.0, 0.0);
			g_aFireObjects[24] = CreateDynamicObject(18691, 1934.7189, -1772.0156, 10.7728, 0.0, 0.0, 0.0);
			g_aFireObjects[25] = CreateDynamicObject(18691, 1934.6302, -1770.2773, 10.7728, 0.0, 0.0, 0.0);
			g_aFireObjects[26] = CreateDynamicObject(18691, 1934.5228, -1768.1666, 10.7728, 0.0, 0.0, 0.0);
		}
		case 1:
		{
			g_aFireObjects[0] = CreateDynamicObject(18691, 1238.8894, -1563.0980, 10.9999, 0.0, 0.0, 0.0);
			g_aFireObjects[1] = CreateDynamicObject(18691, 1241.6730, -1562.6481, 11.0068, 0.0, 0.0, 0.0);
			g_aFireObjects[2] = CreateDynamicObject(18691, 1243.2508, -1561.0845, 10.9444, 0.0, 0.0, 0.0);
			g_aFireObjects[3] = CreateDynamicObject(18691, 1245.5793, -1560.6265, 10.9450, 0.0, 0.0, 0.0);
			g_aFireObjects[4] = CreateDynamicObject(18691, 1247.4980, -1560.4841, 10.9455, 0.0, 0.0, 0.0);
			g_aFireObjects[5] = CreateDynamicObject(18691, 1249.9790, -1560.3701, 10.9539, 0.0, 0.0, 0.0);
			g_aFireObjects[6] = CreateDynamicObject(18691, 1249.5944, -1562.7432, 11.0053, 0.0, 0.0, 0.0);
			g_aFireObjects[7] = CreateDynamicObject(18691, 1247.4562, -1562.7996, 11.0045, 0.0, 0.0, 0.0);
			g_aFireObjects[8] = CreateDynamicObject(18691, 1245.7386, -1563.1572, 10.9990, 0.0, 0.0, 0.0);
			g_aFireObjects[9] = CreateDynamicObject(18691, 1243.7620, -1563.7636, 10.9896, 0.0, 0.0, 0.0);
			g_aFireObjects[10] = CreateDynamicObject(18691, 1242.2908, -1563.0959, 10.9999, 0.0, 0.0, 0.0);
			g_aFireObjects[11] = CreateDynamicObject(18691, 1242.3502, -1564.7818, 10.9740, 0.0, 0.0, 0.0);
			g_aFireObjects[12] = CreateDynamicObject(18691, 1244.8713, -1564.6507, 10.9760, 0.0, 0.0, 0.0);
			g_aFireObjects[13] = CreateDynamicObject(18691, 1246.8665, -1564.5694, 10.9772, 0.0, 0.0, 0.0);
			g_aFireObjects[14] = CreateDynamicObject(18691, 1249.1672, -1563.8638, 10.9881, 0.0, 0.0, 0.0);
			g_aFireObjects[15] = CreateDynamicObject(18691, 1250.8759, -1563.9959, 10.9861, 0.0, 0.0, 0.0);
			g_aFireObjects[16] = CreateDynamicObject(18691, 1252.2437, -1562.3538, 11.0113, 0.0, 0.0, 0.0);
			g_aFireObjects[17] = CreateDynamicObject(18691, 1252.4475, -1561.7529, 13.6369, 0.0, 0.0, 0.0);
			g_aFireObjects[18] = CreateDynamicObject(18691, 1250.9642, -1561.7822, 13.6519, 0.0, 0.0, 0.0);
			g_aFireObjects[19] = CreateDynamicObject(18691, 1248.5258, -1561.3541, 13.8278, 0.0, 0.0, 0.0);
			g_aFireObjects[20] = CreateDynamicObject(18691, 1245.9611, -1561.1191, 13.5507, 0.0, 0.0, 0.0);
			g_aFireObjects[21] = CreateDynamicObject(18691, 1242.7899, -1561.6608, 13.7519, 0.0, 0.0, 0.0);
			g_aFireObjects[22] = CreateDynamicObject(18691, 1250.3793, -1561.5445, 10.9462, 0.0, 0.0, 0.0);
			g_aFireObjects[23] = CreateDynamicObject(18691, 1252.8653, -1561.6358, 10.9468, 0.0, 0.0, 0.0);
			g_aFireObjects[24] = CreateDynamicObject(18691, 1252.9653, -1563.4675, 10.9942, 0.0, 0.0, 0.0);
			g_aFireObjects[25] = CreateDynamicObject(18691, 1252.5823, -1563.9747, 10.9864, 0.0, 0.0, 0.0);
		}
		case 2:
		{
			g_aFireObjects[0] = CreateDynamicObject(18691, 1786.4844, -1164.2786, 21.2181, 0.0, 0.0, 0.0);
			g_aFireObjects[1] = CreateDynamicObject(18691, 1787.8876, -1164.3374, 21.2181, 0.0, 0.0, 0.0);
			g_aFireObjects[2] = CreateDynamicObject(18691, 1790.0416, -1164.8181, 21.2181, 0.0, 0.0, 0.0);
			g_aFireObjects[3] = CreateDynamicObject(18691, 1791.7430, -1165.1977, 21.2181, 0.0, 0.0, 0.0);
			g_aFireObjects[4] = CreateDynamicObject(18691, 1793.3637, -1165.5594, 21.2181, 0.0, 0.0, 0.0);
			g_aFireObjects[5] = CreateDynamicObject(18691, 1794.8229, -1165.8847, 21.2181, 0.0, 0.0, 0.0);
			g_aFireObjects[6] = CreateDynamicObject(18691, 1796.5830, -1166.2770, 21.2181, 0.0, 0.0, 0.0);
			g_aFireObjects[7] = CreateDynamicObject(18691, 1798.3182, -1166.6638, 21.2181, 0.0, 0.0, 0.0);
			g_aFireObjects[8] = CreateDynamicObject(18691, 1798.2283, -1166.9202, 22.1465, 0.0, 0.0, 0.0);
			g_aFireObjects[9] = CreateDynamicObject(18691, 1797.1246, -1166.2222, 22.5881, 0.0, 0.0, 0.0);
			g_aFireObjects[10] = CreateDynamicObject(18691, 1796.1480, -1165.5697, 22.5401, 0.0, 0.0, 0.0);
			g_aFireObjects[11] = CreateDynamicObject(18691, 1795.4377, -1165.1295, 22.1495, 0.0, 0.0, 0.0);
			g_aFireObjects[12] = CreateDynamicObject(18691, 1794.7139, -1164.6824, 21.4488, 0.0, 0.0, 0.0);
			g_aFireObjects[13] = CreateDynamicObject(18691, 1789.6914, -1164.0892, 22.3047, 0.0, 0.0, 0.0);
			g_aFireObjects[14] = CreateDynamicObject(18691, 1788.5687, -1163.1995, 22.3698, 0.0, 0.0, 0.0);
			g_aFireObjects[15] = CreateDynamicObject(18691, 1788.0295, -1162.8452, 21.9937, 0.0, 0.0, 0.0);
			g_aFireObjects[16] = CreateDynamicObject(18691, 1786.2319, -1163.1064, 21.8608, 0.0, 0.0, 0.0);
			g_aFireObjects[17] = CreateDynamicObject(18691, 1785.3194, -1163.1263, 21.9294, 0.0, 0.0, 0.0);
			g_aFireObjects[18] = CreateDynamicObject(18691, 1791.5643, -1163.1118, 21.3996, 0.0, 0.0, 0.0);
			g_aFireObjects[19] = CreateDynamicObject(18691, 1791.8800, -1164.3983, 22.2759, 0.0, 0.0, 0.0);
			g_aFireObjects[20] = CreateDynamicObject(18691, 1791.8519, -1165.1618, 22.5094, 0.0, 0.0, 0.0);
			g_aFireObjects[21] = CreateDynamicObject(18691, 1788.8287, -1163.4260, 22.0600, 0.0, 0.0, 0.0);
			g_aFireObjects[22] = CreateDynamicObject(18691, 1790.2512, -1164.0129, 21.2942, 0.0, 0.0, 0.0);
		}
		case 3:
		{
			g_aFireObjects[0] = CreateDynamicObject(18691, 1315.0238, -1368.2282, 10.9438, 0.0, 0.0, 0.0);
			g_aFireObjects[1] = CreateDynamicObject(18691, 1314.0100, -1368.2265, 10.9438, 0.0, 0.0, 0.0);
			g_aFireObjects[2] = CreateDynamicObject(18691, 1312.6562, -1368.2235, 10.9399, 0.0, 0.0, 0.0);
			g_aFireObjects[3] = CreateDynamicObject(18691, 1311.8308, -1367.5294, 10.9296, 0.0, 0.0, 0.0);
			g_aFireObjects[4] = CreateDynamicObject(18691, 1310.9281, -1367.4926, 10.9273, 0.0, 0.0, 0.0);
			g_aFireObjects[5] = CreateDynamicObject(18691, 1309.7708, -1367.4902, 10.9252, 0.0, 0.0, 0.0);
			g_aFireObjects[6] = CreateDynamicObject(18691, 1308.6425, -1367.4877, 10.9232, 0.0, 0.0, 0.0);
			g_aFireObjects[7] = CreateDynamicObject(18691, 1307.3302, -1368.0213, 10.9332, 0.0, 0.0, 0.0);
			g_aFireObjects[8] = CreateDynamicObject(18691, 1306.0062, -1368.3232, 10.9355, 0.0, 0.0, 0.0);
			g_aFireObjects[9] = CreateDynamicObject(18691, 1304.3460, -1368.3197, 10.9354, 0.0, 0.0, 0.0);
			g_aFireObjects[10] = CreateDynamicObject(18691, 1304.4842, -1369.0036, 10.9451, 0.0, 0.0, 0.0);
			g_aFireObjects[11] = CreateDynamicObject(18691, 1305.8629, -1369.4384, 10.9513, 0.0, 0.0, 0.0);
			g_aFireObjects[12] = CreateDynamicObject(18691, 1307.2315, -1369.3804, 10.9512, 0.0, 0.0, 0.0);
			g_aFireObjects[13] = CreateDynamicObject(18691, 1309.0936, -1369.7593, 10.9550, 0.0, 0.0, 0.0);
			g_aFireObjects[14] = CreateDynamicObject(18691, 1310.8515, -1369.5230, 10.9544, 0.0, 0.0, 0.0);
			g_aFireObjects[15] = CreateDynamicObject(18691, 1312.0820, -1369.2214, 10.9522, 0.0, 0.0, 0.0);
			g_aFireObjects[16] = CreateDynamicObject(18691, 1309.4581, -1367.9462, 13.2241, 0.0, 0.0, 0.0);
			g_aFireObjects[17] = CreateDynamicObject(18691, 1307.8933, -1367.5498, 13.5101, 0.0, 0.0, 0.0);
			g_aFireObjects[18] = CreateDynamicObject(18691, 1307.3311, -1369.9162, 13.0364, 0.0, 0.0, 0.0);
			g_aFireObjects[19] = CreateDynamicObject(18691, 1306.5539, -1370.5288, 12.7001, 0.0, 0.0, 0.0);
			g_aFireObjects[20] = CreateDynamicObject(18691, 1310.9852, -1369.3835, 12.2585, 0.0, 0.0, 0.0);
			g_aFireObjects[21] = CreateDynamicObject(18691, 1310.3361, -1370.6992, 12.9585, 0.0, 0.0, 0.0);
			g_aFireObjects[22] = CreateDynamicObject(18691, 1313.2864, -1370.2733, 10.9708, 0.0, 0.0, 0.0);
			g_aFireObjects[23] = CreateDynamicObject(18691, 1313.3056, -1371.2634, 10.9838, 0.0, 0.0, 0.0);
			g_aFireObjects[24] = CreateDynamicObject(18691, 1311.6168, -1370.8870, 10.9735, 0.0, 0.0, 0.0);
			g_aFireObjects[25] = CreateDynamicObject(18691, 1308.9244, -1371.1181, 10.9726, 0.0, 0.0, 0.0);
			g_aFireObjects[26] = CreateDynamicObject(18691, 1306.5335, -1370.7678, 10.9712, 0.0, 0.0, 0.0);
		}
		case 4:
		{
			g_aFireObjects[0] = CreateDynamicObject(18691, 997.7821, -910.8650, 39.5696, 0.0, 0.0, 0.0);
			g_aFireObjects[1] = CreateDynamicObject(18691, 998.0914, -911.5863, 39.5696, 0.0, 0.0, 0.0);
			g_aFireObjects[2] = CreateDynamicObject(18691, 998.2116, -913.0366, 39.5696, 0.0, 0.0, 0.0);
			g_aFireObjects[3] = CreateDynamicObject(18691, 998.3492, -914.6963, 39.5696, 0.0, 0.0, 0.0);
			g_aFireObjects[4] = CreateDynamicObject(18691, 998.4992, -916.5079, 39.5696, 0.0, 0.0, 0.0);
			g_aFireObjects[5] = CreateDynamicObject(18691, 998.6508, -918.3324, 39.5696, 0.0, 0.0, 0.0);
			g_aFireObjects[6] = CreateDynamicObject(18691, 998.7961, -920.0861, 39.5696, 0.0, 0.0, 0.0);
			g_aFireObjects[7] = CreateDynamicObject(18691, 998.9600, -922.0629, 39.5696, 0.0, 0.0, 0.0);
			g_aFireObjects[8] = CreateDynamicObject(18691, 999.1196, -923.9867, 39.5696, 0.0, 0.0, 0.0);
			g_aFireObjects[9] = CreateDynamicObject(18691, 999.2616, -925.7003, 39.5696, 0.0, 0.0, 0.0);
			g_aFireObjects[10] = CreateDynamicObject(18691, 999.4187, -927.5945, 39.5696, 0.0, 0.0, 0.0);
			g_aFireObjects[11] = CreateDynamicObject(18691, 999.5601, -929.3013, 39.5696, 0.0, 0.0, 0.0);
			g_aFireObjects[12] = CreateDynamicObject(18691, 1000.5933, -931.6047, 39.5696, 0.0, 0.0, 0.0);
			g_aFireObjects[13] = CreateDynamicObject(18691, 1002.6428, -931.3463, 39.5696, 0.0, 0.0, 0.0);
			g_aFireObjects[14] = CreateDynamicObject(18691, 1004.6893, -931.3514, 39.5696, 0.0, 0.0, 0.0);
			g_aFireObjects[15] = CreateDynamicObject(18691, 1007.2104, -931.1424, 39.5696, 0.0, 0.0, 0.0);
			g_aFireObjects[16] = CreateDynamicObject(18691, 1009.8325, -930.9251, 39.5696, 0.0, 0.0, 0.0);
			g_aFireObjects[17] = CreateDynamicObject(18691, 1012.1341, -930.7343, 39.5696, 0.0, 0.0, 0.0);
			g_aFireObjects[18] = CreateDynamicObject(18691, 1014.4911, -930.5388, 39.5696, 0.0, 0.0, 0.0);
			g_aFireObjects[19] = CreateDynamicObject(18691, 1014.4734, -932.3157, 39.5696, 0.0, 0.0, 0.0);
			g_aFireObjects[20] = CreateDynamicObject(18691, 1013.0949, -932.3657, 39.5696, 0.0, 0.0, 0.0);
			g_aFireObjects[21] = CreateDynamicObject(18691, 1011.4746, -932.4245, 39.5696, 0.0, 0.0, 0.0);
			g_aFireObjects[22] = CreateDynamicObject(18691, 1009.7496, -932.4875, 39.5696, 0.0, 0.0, 0.0);
			g_aFireObjects[23] = CreateDynamicObject(18691, 1008.1029, -932.5473, 39.5696, 0.0, 0.0, 0.0);
			g_aFireObjects[24] = CreateDynamicObject(18691, 1006.0109, -932.6234, 39.5696, 0.0, 0.0, 0.0);
			g_aFireObjects[25] = CreateDynamicObject(18691, 1003.9039, -932.7000, 39.5696, 0.0, 0.0, 0.0);
			g_aFireObjects[26] = CreateDynamicObject(18691, 1002.0654, -932.7668, 39.5696, 0.0, 0.0, 0.0);
			g_aFireObjects[27] = CreateDynamicObject(18691, 1002.6585, -933.5130, 39.5696, 0.0, 0.0, 0.0);
			g_aFireObjects[28] = CreateDynamicObject(18691, 1004.5731, -933.4433, 39.5696, 0.0, 0.0, 0.0);
			g_aFireObjects[29] = CreateDynamicObject(18691, 1006.4688, -933.3743, 39.5696, 0.0, 0.0, 0.0);
			g_aFireObjects[30] = CreateDynamicObject(18691, 1008.4611, -933.3016, 39.5696, 0.0, 0.0, 0.0);
			g_aFireObjects[31] = CreateDynamicObject(18691, 1010.4176, -933.2304, 39.5696, 0.0, 0.0, 0.0);
			g_aFireObjects[32] = CreateDynamicObject(18691, 1012.0813, -933.1698, 39.5696, 0.0, 0.0, 0.0);
			g_aFireObjects[33] = CreateDynamicObject(18691, 1013.1374, -933.1314, 39.5696, 0.0, 0.0, 0.0);
			g_aFireObjects[34] = CreateDynamicObject(18691, 1015.3114, -933.0523, 39.5696, 0.0, 0.0, 0.0);
		}
	}
	static
	Float:fX,
	Float:fY,
	Float:fZ;

	GetDynamicObjectPos(g_aFireObjects[0], fX, fY, fZ);

	foreach (new i : Player)
	{
		if (PlayerData[i][pJob] == JOB_MEDIC)
		{
			Waypoint_Set(i, "Fire Scene", fX, fY, fZ);
		}
	}
	//CreateExplosion(fX, fY, fZ, 12, 5.0);
	SendJobMessage(JOB_MEDIC, COLOR_RADIO, "RADIO: Un incendie a été repéré à %s ! (marqué sur votre mini-map).", GetLocation(fX, fY, fZ));
	return 1;
}
//============================================================================//
forward AttachArme(playerid, gun);
public AttachArme(playerid, gun)
{
	switch(gun)
	{
	    case 0: if(IsPlayerAttachedObjectSlotUsed(playerid, 8)) RemovePlayerAttachedObject(playerid, 8);
		case 2: SetPlayerAttachedObject(playerid, 8,333,1,0.3,-0.1,0.1,0.0,230.0,0.0);
		case 3: SetPlayerAttachedObject(playerid, 8,334,7,0.0,-0.0,-0.0,0.0,90.0,0.0);
		case 4: SetPlayerAttachedObject(playerid, 8,335,7,0.0,-0.1,-0.1,0.0,90.0,90.0);
		case 5: SetPlayerAttachedObject(playerid, 8,336,1,0.3,-0.1,0.1,0.0,230.0,0.0);
		case 7: SetPlayerAttachedObject(playerid, 8,338,1,0.3,-0.1,0.1,0.0,230.0,0.0);
		case 8: SetPlayerAttachedObject(playerid, 4,339,1,0.3,-0.1,0.1,0.0,230.0,0.0);
		case 10: SetPlayerAttachedObject(playerid, 8,321,7,0.3,-0.0,-0.2,0.0,280.0,0.0);
		case 11: SetPlayerAttachedObject(playerid, 8,322,7,0.2,-0.0,-0.0,0.0,90.0,0.0);
		case 12: SetPlayerAttachedObject(playerid, 8,323,7,0.3,-0.0,-0.2,0.0,280.0,0.0);
		case 13: SetPlayerAttachedObject(playerid, 8,324,7,0.2,-0.0,-0.0,0.0,90.0,0.0);
		case 15: SetPlayerAttachedObject(playerid, 8,326,1,0.3,-0.1,0.1,0.0,230.0,0.0);
		case 16: SetPlayerAttachedObject(playerid, 8,342,7,0.0,0.0,-0.1,0.0,270.0,0.0);
		case 17: SetPlayerAttachedObject(playerid, 8,343,7,0.0,0.0,-0.1,0.0,270.0,0.0);
		case 18: SetPlayerAttachedObject(playerid, 8,343,7,0.0,0.0,-0.1,0.0,270.0,0.0);
		case 22: SetPlayerAttachedObject(playerid, 8,346,8,-0.1,0.0,0.1,270.0,0.0,0.0);
		case 23: SetPlayerAttachedObject(playerid, 8,347,8,-0.1,0.0,0.1,270.0,0.0,0.0);
		case 24: SetPlayerAttachedObject(playerid, 8,348,8,-0.1,0.0,0.1,270.0,0.0,0.0);
		case 25: SetPlayerAttachedObject(playerid, 8,349,1,0.2,-0.1,0.2,180.0,40.0,180.0);
		case 26: SetPlayerAttachedObject(playerid, 8,350,8,-0.1,0.0,0.1,270.0,0.0,0.0);
		case 27: SetPlayerAttachedObject(playerid, 8,351,1,0.2,-0.1,0.3,180.0,40.0,186.0);
		case 28: SetPlayerAttachedObject(playerid, 8,372,8,0.1,0.0,0.1,270.0,270.0,0.0);
		case 29: SetPlayerAttachedObject(playerid, 8,353,8,0.1,-0.1,0.1,270.0,0.0,0.0);
		case 30: SetPlayerAttachedObject(playerid, 8,355,1,0.2,-0.1,0.2,180.0,40.0,180.0);
		case 31: SetPlayerAttachedObject(playerid, 8,356,1,0.2,-0.1,0.2,180.0,40.0,180.0);
		case 32: SetPlayerAttachedObject(playerid, 8,372,8,0.1,0.0,0.1,270.0,270.0,0.0);
		case 33: SetPlayerAttachedObject(playerid, 8,357,1,0.2,-0.1,0.2,180.0,40.0,180.0);
		case 34: SetPlayerAttachedObject(playerid, 8,358,1,0.2,-0.1,0.2,180.0,40.0,180.0);
		case 35: SetPlayerAttachedObject(playerid, 8,359,1,0.1,-0.2,-0.2,0.0,50.0,0.0);
		case 41: SetPlayerAttachedObject(playerid, 8,365,7,0.0,0.0,-0.1,0.0,270.0,0.0);
		case 42: SetPlayerAttachedObject(playerid, 8,366,1,0.4,-0.2,0.1,180.0,50.0,180.0);
		case 99:
		{
			RemovePlayerAttachedObject(playerid,8);
			if(GetFactionType(playerid) == FACTION_POLICE && PlayerData[playerid][pOnDuty] == 1)
			{
				if(PlayerData[playerid][pTazer])
				{
					AttachArme(playerid, 24);
				}
				else
				{
					AttachArme(playerid, 23);
				}
			}
			RemovePlayerAttachedObject(playerid,4);
		}
	}
	
	
	return 1;
}
//arme

forward garbage_Decharge(playerid);
public garbage_Decharge(playerid)
{
	TogglePlayerControllable(playerid, true);
	
	GiveMoney(playerid, garbageDecharge[playerid][0]);
	
	SendClientMessageEx(playerid, COLOR_INFO, "Vous avez gagné la somme de $%d pour avoir livrer %d sacs d'ordures.", garbageDecharge[playerid][0], garbageDecharge[playerid][1]);
	
	garbageDecharge[playerid][0] = 0;
	garbageDecharge[playerid][1] = 0;
	return 1;
}

forward BreakCuffs(playerid, userid);
public BreakCuffs(playerid, userid)
{
	if (PlayerData[playerid][pCuffed] || PlayerData[playerid][pInjured] || !IsPlayerSpawned(playerid) || !Inventory_HasItem(playerid, "Pied de biche") || !IsPlayerNearPlayer(playerid, userid, 6.0) || !PlayerData[userid][pCuffed])
	return 1;

	if (random(2))
	{
		SendNearbyMessage(playerid, 15.0, COLOR_PURPLE, "%s n'a pas réussi à menotter l'individu.", ReturnName(playerid, 1));
	}
	else
	{
		PlayerData[userid][pCuffed] = 0;
		SetPlayerSpecialAction(userid, SPECIAL_ACTION_NONE);

		SendNearbyMessage(playerid, 15.0, COLOR_PURPLE, "%s récupère ses menottes puis menotte %s.", ReturnName(playerid, 1), ReturnName(userid, 1));
	}
	return 1;
}

forward SpawnTimer(playerid);
public SpawnTimer(playerid)
{
	if (SQL_IsLogged(playerid))
	{
		TogglePlayerControllable(playerid, 1);
	}
	return 1;
}

forward RemoveAttachedObject(playerid, slot);
public RemoveAttachedObject(playerid, slot)
{
	if (IsPlayerConnected(playerid) && IsPlayerAttachedObjectSlotUsed(playerid, slot))
	{
		RemovePlayerAttachedObject(playerid, slot);
	}
	return 1;
}

#define 	MAX_MINES   	(500)
#define     MAX_ORE_TYPES   (6)

enum mineData {
	mineExists,
	mineObject,
	mineType,
	Text3D:mineText3D,
	Float:minePos[3]
};
new MineData[MAX_MINES][mineData];

enum e_ores
{
    Name[16], // Nom de la pierre
    Color, // Couleur de la pierre
    Value, // Valeur de revente
    MiningTime // Temps de minage (en secondes)
}

new OreData[MAX_ORE_TYPES][e_ores] = {
    {"Cuivre", 0xB87333FF, 30, 10},
    {"Améthyste", 0x9B59B6FF, 60, 20},
    {"Émeraude", 0x2ECC71FF, 90, 30},
    {"Rubis", 0xD10056FF, 120, 40},
    {"Saphir", 0x0F52BAFF, 150, 50},
    {"Or", 0xFFD700FF, 180, 60}
};

stock CreateAllMine()
{
	for(new i=0; i<sizeof(spawnMine); i++)
	{
	    Mine_Create(i);
	}
	return 1;
}

stock DeleteAllMine()
{
	for(new i=0; i<MAX_MINES; i++)
	{
	    Mine_Delete(i);
	}
	return 1;
}

stock Mine_Create(mineid)
{
    for(new j=0; j<MAX_MINES; j++) if(!MineData[j][mineExists])
    {
        new
			type = random(MAX_ORE_TYPES);

		MineData[j][mineExists] = true;
		MineData[j][mineType] = type;

		MineData[j][minePos][0] = spawnMine[mineid][0];
		MineData[j][minePos][1] = spawnMine[mineid][1];
		MineData[j][minePos][2] = spawnMine[mineid][2];
		
		Mine_Refresh(j);
		return j;
    }
	return -1;
}

stock Mine_Delete(mineid)
{
    if(MineData[mineid][mineExists])
    {
		if (IsValidDynamic3DTextLabel(MineData[mineid][mineText3D]))
		DestroyDynamic3DTextLabel(MineData[mineid][mineText3D]);

		if (IsValidDynamicObject(MineData[mineid][mineObject]))
		DestroyDynamicObject(MineData[mineid][mineObject]);
		
		MineData[mineid][mineExists] = false;
		return 1;
    }
	return -1;
}

stock Mine_Refresh(mineid)
{
	if (mineid != -1 && MineData[mineid][mineExists])
	{
   		#define RGBAToARGB(%0)				((((%0) << 24) & 0xFF000000) | (((%0) >>> 8) & 0xFFFFFF))
   		
		if (IsValidDynamic3DTextLabel(MineData[mineid][mineText3D]))
		DestroyDynamic3DTextLabel(MineData[mineid][mineText3D]);

		if (IsValidDynamicObject(MineData[mineid][mineObject]))
		DestroyDynamicObject(MineData[mineid][mineObject]);

		MineData[mineid][mineObject] = CreateDynamicObject(867, MineData[mineid][minePos][0], MineData[mineid][minePos][1], MineData[mineid][minePos][2], 0.0, 0.0, random(360));
		SetDynamicObjectMaterial(MineData[mineid][mineObject], 0, 2936, "kmb_rckx", "larock256", RGBAToARGB(OreData[ MineData[mineid][mineType] ][Color]));

		new
		    string[50];

		format(string, sizeof(string), "%s{FFFFFF}\n/j(ob) miner | /j(ob) infomine", OreData[ MineData[mineid][mineType] ][Name]);
		MineData[mineid][mineText3D] = CreateDynamic3DTextLabel(string, OreData[ MineData[mineid][mineType] ][Color], MineData[mineid][minePos][0], MineData[mineid][minePos][1], MineData[mineid][minePos][2], 5.0);
	}
	return 1;
}


Mine_Nearest(playerid)
{
	for (new i = 0; i != MAX_MINES; i ++) if (MineData[i][mineExists] && IsPlayerInRangeOfPoint(playerid, 3.0, MineData[i][minePos][0], MineData[i][minePos][1], MineData[i][minePos][2]))
	{
		return i;
	}
	return -1;
}

forward ExpireMarker(playerid);
public ExpireMarker(playerid)
{
	DisablePlayerCheckpoint(playerid);
	if (!PlayerData[playerid][pMarker])
	return 0;

	if (GetFactionType(playerid) == FACTION_GANG || (GetFactionType(playerid) != FACTION_GANG && PlayerData[playerid][pOnDuty]))
	SetFactionColor(playerid);


	else SetPlayerColor(playerid, COLOR_WHITE);
	return 1;
}

forward HidePlayerBox(playerid, PlayerText:boxid);
public HidePlayerBox(playerid, PlayerText:boxid)
{
	if (!IsPlayerConnected(playerid) || !SQL_IsLogged(playerid))
	return 0;

	PlayerTextDrawHide(playerid, boxid);
	PlayerTextDrawDestroy(playerid, boxid);

	return 1;
}

forward Advertise(playerid);
public Advertise(playerid)
{
	if (!SQL_IsLogged(playerid) || !strlen(PlayerData[playerid][pAdvertise]))
	return 0;

	static
	text[128];

	strunpack(text, PlayerData[playerid][pAdvertise]);

	foreach (new i : Player) if (!PlayerData[i][pDisableBC]) {
		SendClientMessageEx(i, COLOR_ADMINCHAT, "PUB: %s - Numéro: %d - %s", text, PlayerData[playerid][pPhone], ReturnName(playerid));
	}
	PlayerData[playerid][pAdvertise][0] = 0;
	return 1;
}

forward KickHouse(playerid, id);
public KickHouse(playerid, id)
{
	if (GetFactionType(playerid) != FACTION_POLICE || House_Nearest(playerid) != id)
	return 0;

	switch (random(6))
	{
		case 0..2:
		{

			ShowPlayerFooter(playerid, "Vous avez ~r~échoué~w~");
			SendNearbyMessage(playerid, 15.0, COLOR_PURPLE, "%s ne parvient pas à enfoncer la porte.", ReturnName(playerid, 1));
		}
		default:
		{
			HouseData[id][houseLocked] = 0;
			House_Save(id);

			SendNearbyMessage(playerid, 15.0, COLOR_PURPLE, "%s a réussi à enfoncer la porte.", ReturnName(playerid, 1));
			ShowPlayerFooter(playerid, "Utilisez ~y~/entrer~w~ pour entrer");
		}
	}

	PlayerData[playerid][pKickDoor] = false;
	return 1;
}

forward KickBusiness(playerid, id);
public KickBusiness(playerid, id)
{
	if (GetFactionType(playerid) != FACTION_POLICE || Business_Nearest(playerid) != id)
	return 0;

	switch (random(6))
	{
		case 0..2:
		{


			ShowPlayerFooter(playerid, "Vous avez ~r~échoué~w~");
			SendNearbyMessage(playerid, 15.0, COLOR_PURPLE, "%s ne parvient pas à enfoncer la porte.", ReturnName(playerid, 1));
		}
		default:
		{
			BusinessData[id][bizLocked] = 0;
			Business_Save(id);


			SendNearbyMessage(playerid, 15.0, COLOR_PURPLE, "%s a réussi à enfoncer la porte.", ReturnName(playerid, 1));
			ShowPlayerFooter(playerid, "Utilisez ~y~/entrer~w~ pour entrer");
		}
	}
	
	PlayerData[playerid][pKickDoor] = false;
	return 1;
}

GetRandomHouse()
{
	new
	    count = 0,
	    arrayStack[MAX_HOUSES];

	for(new i=0; i<MAX_HOUSES; i++)
	{
		if(HouseData[i][houseExists])
		{
		    arrayStack[count] = i;
		    count++;
		}
	}
	if(count <= 0) return -1;

	new houseRandom = random(count);
	houseRandom = arrayStack[houseRandom];
	return houseRandom;
}

stock PlayerHasTazer(playerid)
{
	return (GetPlayerWeapon(playerid) == 23 && PlayerData[playerid][pTazer]);
}

stock PlayerHasBeanBag(playerid)
{
	return (GetPlayerWeapon(playerid) == 25 && PlayerData[playerid][pBeanBag]);
}

stock SetPlayerToFacePlayer(playerid, targetid)
{
	static
	Float:x[2],
	Float:y[2],
	Float:z[2],
	Float:angle;

	GetPlayerPos(targetid, x[0], y[0], z[0]);
	GetPlayerPos(playerid, x[1], y[1], z[1]);

	angle = (180.0 - atan2(x[1] - x[0], y[1] - y[0]));
	SetPlayerFacingAngle(playerid, angle + (5.0 * -1));
}

stock DisableWaypoint(playerid)
{
	if (PlayerData[playerid][pWaypoint])
	{
		PlayerData[playerid][pWaypoint] = 0;

		DisablePlayerCheckpoint(playerid);
		PlayerTextDrawHide(playerid, PlayerData[playerid][pTextdraws][69]);
	}
	return 1;
}

stock ClearChat(playerid, line = 100)
{
	for (new i = 0; i < line; i ++) {
		SendClientMessage(playerid, -1, "");
	}
}

stock TerminateConnection(playerid)
{
	if (PlayerData[playerid][pDrinking])
	DestroyProgressBar(PlayerData[playerid][pDrinkBar]);

	if (BoomboxData[playerid][boomboxPlaced])
	Boombox_Destroy(playerid);

	if (PlayerData[playerid][pFirstAid])
	KillTimer(PlayerData[playerid][pAidTimer]);

	if (PlayerData[playerid][pDrivingTest] || PlayerData[playerid][pTaxiTest])
	DestroyVehicle(PlayerData[playerid][pTestCar]);

	if (PlayerData[playerid][pShowFooter])
	KillTimer(PlayerData[playerid][pFooterTimer]);

	if (PlayerData[playerid][pTaxiPlayer] != INVALID_PLAYER_ID)
	LeaveTaxi(playerid, PlayerData[playerid][pTaxiPlayer]);

	if (PlayerData[playerid][pDragged])
	KillTimer(PlayerData[playerid][pDragTimer]);

	if (PlayerData[playerid][pFreeze])
	KillTimer(PlayerData[playerid][pFreezeTimer]);

	foreach (new i : Player)
	{
		if (PlayerData[i][pLastShot] == playerid) {
			PlayerData[i][pLastShot] = INVALID_PLAYER_ID;
		}
		if (PlayerData[i][pHouseSeller] == playerid) {
			PlayerData[i][pHouseSeller] = INVALID_PLAYER_ID;
			PlayerData[i][pHouseOffered] = -1;
		}
		if (PlayerData[i][pBusinessSeller] == playerid) {
			PlayerData[i][pBusinessSeller] = INVALID_PLAYER_ID;
			PlayerData[i][pBusinessOffered] = -1;
		}
		if (PlayerData[i][pCarSeller] == playerid) {
			PlayerData[i][pCarSeller] = INVALID_PLAYER_ID;
			PlayerData[i][pCarOffered] = -1;
		}
		if (PlayerData[i][pShakeOffer] == playerid) {
			PlayerData[i][pShakeOffer] = INVALID_PLAYER_ID;
			PlayerData[i][pShakeType] = 0;
		}
		if (PlayerData[i][pFriskOffer] == playerid) {
			PlayerData[i][pFriskOffer] = INVALID_PLAYER_ID;
		}
		if (PlayerData[i][pFoodSeller] == playerid) {
			PlayerData[i][pFoodSeller] = INVALID_PLAYER_ID;
			PlayerData[i][pFoodType] = 0;
		}
		if (PlayerData[i][pFactionOffer] == playerid) {
			PlayerData[i][pFactionOffer] = INVALID_PLAYER_ID;
			PlayerData[i][pFactionOffered] = -1;
		}
		if (PlayerData[i][pDraggedBy] == playerid) {
			KillTimer(PlayerData[i][pDragTimer]);

			PlayerData[i][pDragged] = 0;
			PlayerData[i][pDraggedBy] = INVALID_PLAYER_ID;
		}
		if (PlayerData[i][pMDCPlayer] == playerid) {
			PlayerData[i][pMDCPlayer] = INVALID_PLAYER_ID;
			PlayerData[i][pTrackTime] = 0;
		}
		if (PlayerData[i][pNewsGuest] == playerid) {
			PlayerData[i][pNewsGuest] = INVALID_PLAYER_ID;
		}
		if (PlayerData[i][pGiveItem] == playerid) {
			PlayerData[i][pGiveItem] = INVALID_PLAYER_ID;
		}
		if (PlayerData[i][pTakeItems] == playerid) {
			PlayerData[i][pTakeItems] = INVALID_PLAYER_ID;
		}
	}
	SQL_SaveCharacter(playerid);
	ResetNameTag(playerid);
	ResetStatistics(playerid);
	return 1;
}

stock IsTaskCompleted(playerid)
{
	if ((PlayerData[playerid][pTask] > 0) && (PlayerData[playerid][pBankTask] > 0 && PlayerData[playerid][pStoreTask] > 0 && PlayerData[playerid][pTestTask] > 0))
	return 1;

	return 0;
}

stock IsTaskActive(playerid)
{
	if ((PlayerData[playerid][pTask] > 0) && (!PlayerData[playerid][pBankTask] || !PlayerData[playerid][pStoreTask] || !PlayerData[playerid][pTestTask]))
	return 1;

	return 0;
}

stock GetWeapon(playerid)
{
	new weaponid = GetPlayerWeapon(playerid);

	if (1 <= weaponid <= 46 && PlayerData[playerid][pGuns][g_aWeaponSlots[weaponid]] == weaponid)
	return weaponid;

	return 0;
}

stock IsBleedableWeapon(weaponid)
{
	switch (weaponid) {
		case 4, 8, 9, 22..38: return 1;
	}
	return 0;
}

stock PlayerText:ShowPlayerBox(playerid, color)
{
	static
	PlayerText:textid;

	textid = CreatePlayerTextDraw(playerid, 0.000000, 0.000000, "_");
	PlayerTextDrawFont(playerid, textid, 1);
	PlayerTextDrawLetterSize(playerid, textid, 0.500000, 50.000000);
	PlayerTextDrawColor(playerid, textid, -1);
	PlayerTextDrawUseBox(playerid, textid, 1);
	PlayerTextDrawBoxColor(playerid, textid, color);
	PlayerTextDrawTextSize(playerid, textid, 640.000000, 30.000000);
	PlayerTextDrawShow(playerid, textid);

	return textid;
}

stock Graffiti_Refresh(id)
{
	if (id != -1 && GraffitiData[id][graffitiExists])
	{
		if (IsValidDynamicObject(GraffitiData[id][graffitiObject]))
		DestroyDynamicObject(GraffitiData[id][graffitiObject]);

		if(GraffitiData[id][graffitiModelID] == -1)
		{
			GraffitiData[id][graffitiObject] = CreateDynamicObject(19482, GraffitiData[id][graffitiPos][0], GraffitiData[id][graffitiPos][1], GraffitiData[id][graffitiPos][2], GraffitiData[id][graffitiPos][3], GraffitiData[id][graffitiPos][4], GraffitiData[id][graffitiPos][5]);
            
			SetDynamicObjectMaterial(GraffitiData[id][graffitiObject], 0, 0, "none", "none", 0);
			SetDynamicObjectMaterialText(GraffitiData[id][graffitiObject], 0, GraffitiData[id][graffitiText], OBJECT_MATERIAL_SIZE_512x512, GraffitiData[id][graffitiFont], GraffitiData[id][graffitiSize], 1, GraffitiData[id][graffitiColor], 0, 0);
		}
		else
		{
			GraffitiData[id][graffitiObject] = CreateDynamicObject(GraffitiData[id][graffitiModelID], GraffitiData[id][graffitiPos][0], GraffitiData[id][graffitiPos][1], GraffitiData[id][graffitiPos][2], GraffitiData[id][graffitiPos][3], GraffitiData[id][graffitiPos][4], GraffitiData[id][graffitiPos][5]);
		}
	}
	return GraffitiData[id][graffitiObject];
}

stock IsSprayingInProgress(id)
{
	foreach (new i : Player)
	{
		if (PlayerData[i][pGraffiti] == id && IsPlayerInRangeOfPoint(i, 5.0, GraffitiData[id][graffitiPos][0], GraffitiData[id][graffitiPos][1], GraffitiData[id][graffitiPos][2]))
		return 1;
	}
	return 0;
}

stock Graffiti_Nearest(playerid)
{
	for (new i = 0; i < MAX_GRAFFITI_POINTS; i ++) if (GraffitiData[i][graffitiExists] && IsPlayerInRangeOfPoint(playerid, 5.0, GraffitiData[i][graffitiPos][0], GraffitiData[i][graffitiPos][1], GraffitiData[i][graffitiPos][2]))
	return i;

	return -1;
}

stock Graffiti_Delete(id)
{
	if (id != -1 && GraffitiData[id][graffitiExists])
	{
		static
		string[64];

		//if (IsValidDynamicMapIcon(GraffitiData[id][graffitiIcon]))
		//DestroyDynamicMapIcon(GraffitiData[id][graffitiIcon]);

		if (IsValidDynamicObject(GraffitiData[id][graffitiObject]))
		DestroyDynamicObject(GraffitiData[id][graffitiObject]);

		format(string, sizeof(string), "DELETE FROM `graffiti` WHERE `graffitiID` = '%d'", GraffitiData[id][graffitiID]);
		mysql_function_query(g_iHandle, string, false, "", "");

		GraffitiData[id][graffitiExists] = false;
		GraffitiData[id][graffitiText][0] = 0;
		GraffitiData[id][graffitiFont][0] = 0;
		GraffitiData[id][graffitiID] = 0;
	}
	return 1;
}

stock Graffiti_Save(id)
{
	static
	query[384];

	format(query, sizeof(query), "UPDATE `graffiti` SET `graffitiX` = '%.4f', `graffitiY` = '%.4f', `graffitiZ` = '%.4f', `graffitiRX` = '%.4f', `graffitiRY` = '%.4f', `graffitiRZ` = '%.4f', `graffitiColor` = '%d', `graffitiSize` = '%d', `graffitiModelID` = '%d', `graffitiText` = '%s', `graffitiFont` = '%s', `graffitiFaction` = '%d' WHERE `graffitiID` = '%d'",
	GraffitiData[id][graffitiPos][0],
	GraffitiData[id][graffitiPos][1],
	GraffitiData[id][graffitiPos][2],
	GraffitiData[id][graffitiPos][3],
	GraffitiData[id][graffitiPos][4],
	GraffitiData[id][graffitiPos][5],
	GraffitiData[id][graffitiColor],
	GraffitiData[id][graffitiSize],
	GraffitiData[id][graffitiModelID],
	SQL_ReturnEscaped(GraffitiData[id][graffitiText]),
	SQL_ReturnEscaped(GraffitiData[id][graffitiFont]),
	GraffitiData[id][graffitiFaction],
	GraffitiData[id][graffitiID]
	);
	return mysql_function_query(g_iHandle, query, false, "", "");
}

stock Graffiti_Create(playerid, modelid, Float:x, Float:y, Float:z, Float:angle, colorID, text[], font[], size)
{
	for (new i = 0; i < MAX_GRAFFITI_POINTS; i ++)
	{
		if (!GraffitiData[i][graffitiExists])
		{
			GraffitiData[i][graffitiExists] = 1;
			
			GraffitiData[i][graffitiModelID] = modelid;
			
			GraffitiData[i][graffitiPos][0] = x;
			GraffitiData[i][graffitiPos][1] = y;
			GraffitiData[i][graffitiPos][2] = z;

			GraffitiData[i][graffitiPos][3] = 0.0;
			GraffitiData[i][graffitiPos][4] = 0.0;
			
			if(modelid == -1) GraffitiData[i][graffitiPos][5] = angle - 90.0;
			else GraffitiData[i][graffitiPos][5] = angle + 90.0;

			#define RGBAToARGB(%0)				((((%0) << 24) & 0xFF000000) | (((%0) >>> 8) & 0xFFFFFF))
			// COULEUR :
			switch(colorID)
			{
			    case 0: GraffitiData[i][graffitiColor] = RGBAToARGB(0xFFFFFFFF); //Blanc
			    case 1: GraffitiData[i][graffitiColor] = RGBAToARGB(0xFF8C8CFF); //Rouge clair
			    case 2: GraffitiData[i][graffitiColor] = RGBAToARGB(0x8C90FFFF); //Bleu clair
			    case 3: GraffitiData[i][graffitiColor] = RGBAToARGB(0xABFF8CFF); //Vert clair
			    case 4: GraffitiData[i][graffitiColor] = RGBAToARGB(0xFF0000FF); //Rouge
			    case 5: GraffitiData[i][graffitiColor] = RGBAToARGB(0x0059FFFF); //Bleu
			    case 6: GraffitiData[i][graffitiColor] = RGBAToARGB(0x2CB000FF); //Vert
			    case 7: GraffitiData[i][graffitiColor] = RGBAToARGB(0xCA61EDFF); //Violet
			    case 8: GraffitiData[i][graffitiColor] = RGBAToARGB(0xF1FF78FF); //Jaune
			    case 9: GraffitiData[i][graffitiColor] = RGBAToARGB(0xBA0000FF); //Rouge foncé
			    case 10: GraffitiData[i][graffitiColor] = RGBAToARGB(0x001AABFF); // Bleu foncé
			    case 11: GraffitiData[i][graffitiColor] = RGBAToARGB(0x1F7D00FF); // Vert foncé
			}
			
			GraffitiData[i][graffitiSize] = size;
			GraffitiData[i][graffitiFaction] = PlayerData[playerid][pFaction];

			format(GraffitiData[i][graffitiText], 32, text);
			format(GraffitiData[i][graffitiFont], 32, font);

			PlayerData[playerid][pEditGraffiti] = Graffiti_Refresh(i);
			PlayerData[playerid][pEditGraffitiID] = i;
			EditDynamicObject(playerid, PlayerData[playerid][pEditGraffiti]);
			
			mysql_function_query(g_iHandle, "INSERT INTO `graffiti` (`graffitiColor`) VALUES(0)", false, "OnGraffitiCreated", "d", i);

			return i;
		}
	}
	return -1;
}

stock Speed_Refresh(speedid)
{
	if (speedid != -1 && SpeedData[speedid][speedExists])
	{
		static
		string[64];

		if (IsValidDynamicObject(SpeedData[speedid][speedObject]))
		DestroyDynamicObject(SpeedData[speedid][speedObject]);

		if (IsValidDynamic3DTextLabel(SpeedData[speedid][speedText3D]))
		DestroyDynamic3DTextLabel(SpeedData[speedid][speedText3D]);

		format(string, sizeof(string), "{FFFFFF}Limite de vitesse: %.0f km/h", SpeedData[speedid][speedLimit]);

		SpeedData[speedid][speedText3D] = CreateDynamic3DTextLabel(string, COLOR_DEFAULT, SpeedData[speedid][speedPos][0], SpeedData[speedid][speedPos][1], SpeedData[speedid][speedPos][2], 5.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0);
		SpeedData[speedid][speedObject] = CreateDynamicObject(18880, SpeedData[speedid][speedPos][0], SpeedData[speedid][speedPos][1], SpeedData[speedid][speedPos][2], SpeedData[speedid][speedPos][3], SpeedData[speedid][speedPos][4], SpeedData[speedid][speedPos][5]);
	}
	return 1;
}

stock Speed_Save(speedid)
{
	static
	query[255];

	format(query, sizeof(query), "UPDATE `speedcameras` SET `speedRange` = '%.4f', `speedLimit` = '%.4f', `speedX` = '%.4f', `speedY` = '%.4f', `speedZ` = '%.4f', `speedRX` = '%.4f', `speedRY` = '%.4f', `speedRZ` = '%.4f' WHERE `speedID` = '%d'",
	SpeedData[speedid][speedRange],
	SpeedData[speedid][speedLimit],
	SpeedData[speedid][speedPos][0],
	SpeedData[speedid][speedPos][1],
	SpeedData[speedid][speedPos][2],
	SpeedData[speedid][speedPos][3],
	SpeedData[speedid][speedPos][4],
	SpeedData[speedid][speedPos][5],
	SpeedData[speedid][speedID]
	);
	return mysql_function_query(g_iHandle, query, false, "", "");

}

stock Speed_Nearest(playerid)
{
	for (new i = 0; i < MAX_SPEED_CAMERAS; i ++) if (SpeedData[i][speedExists] && IsPlayerInRangeOfPoint(playerid, SpeedData[i][speedRange], SpeedData[i][speedPos][0], SpeedData[i][speedPos][1], SpeedData[i][speedPos][2]))
	return i;

	return -1;
}

stock Speed_Delete(speedid)
{
	if (speedid != -1 && SpeedData[speedid][speedExists])
	{
		static
		string[64];

		if (IsValidDynamicObject(SpeedData[speedid][speedObject]))
		DestroyDynamicObject(SpeedData[speedid][speedObject]);

		if (IsValidDynamic3DTextLabel(SpeedData[speedid][speedText3D]))
		DestroyDynamic3DTextLabel(SpeedData[speedid][speedText3D]);

		format(string, sizeof(string), "DELETE FROM `speedcameras` WHERE `speedID` = '%d'", SpeedData[speedid][speedID]);
		mysql_function_query(g_iHandle, string, false, "", "");

		SpeedData[speedid][speedExists] = false;
		SpeedData[speedid][speedLimit] = 0.0;
		SpeedData[speedid][speedRange] = 0.0;
		SpeedData[speedid][speedID] = 0;
	}
	return 1;
}

stock Speed_Create(playerid, Float:limit, Float:range)
{
	static
		Float:x,
		Float:y,
		Float:z,
		Float:angle;

	GetPlayerPos(playerid, x, y, z);
	GetPlayerFacingAngle(playerid, angle);

	for (new i = 0; i < MAX_SPEED_CAMERAS; i ++) if (!SpeedData[i][speedExists])
	{
		SpeedData[i][speedExists] = true;
		SpeedData[i][speedRange] = range;
		SpeedData[i][speedLimit] = limit;

		SpeedData[i][speedPos][0] = x + (1.5 * floatsin(-angle, degrees));
		SpeedData[i][speedPos][1] = y + (1.5 * floatcos(-angle, degrees));
		SpeedData[i][speedPos][2] = z - 1.2;
		SpeedData[i][speedPos][5] = angle;

		Speed_Refresh(i);
		mysql_function_query(g_iHandle, "INSERT INTO `speedcameras` (`speedRange`) VALUES (0.0)", false, "OnSpeedCreated", "d", i);
		return i;
	}
	return -1;
}

stock IsPlayerOnPhone(playerid)
{
	if (PlayerData[playerid][pEmergency] > 0 || PlayerData[playerid][pPlaceAd] > 0 || PlayerData[playerid][pCallLine] != INVALID_PLAYER_ID)
	return 1;

	return 0;
}

stock FlipVehicle(vehicleid)
{
	static
	Float:fAngle;

	GetVehicleZAngle(vehicleid, fAngle);

	SetVehicleZAngle(vehicleid, fAngle);
	SetVehicleVelocity(vehicleid, 0.0, 0.0, 0.0);
}

stock StopVehicleRadio(vehicleid)
{
	if ((IsValidVehicle(vehicleid) && IsEngineVehicle(vehicleid)) && CoreVehicles[vehicleid][vehRadio])
	{
		CoreVehicles[vehicleid][vehRadio] = 0;

		foreach (new i : Player)
		{
			if (IsPlayerInVehicle(i, vehicleid))
			{
				StopAudioStreamForPlayer(i);
				PlayerData[i][pPlayRadio] = 0;
			}
		}
	}
	return 1;
}

stock SetVehicleRadio(vehicleid, url[])
{
	if (IsValidVehicle(vehicleid) && IsEngineVehicle(vehicleid))
	{
		CoreVehicles[vehicleid][vehRadio] = 1;
		strpack(CoreVehicles[vehicleid][vehURL], url, 128 char);

		foreach (new i : Player)
		{
			if (IsPlayerInVehicle(i, vehicleid))
			{
				PlayerData[i][pPlayRadio] = 1;

				StopAudioStreamForPlayer(i);
				PlayAudioStreamForPlayer(i, url);
			}
		}
	}
	return 1;
}
stock randomEx(min, max)
{
    //Credits à Y_Less
    new rand = random(max-min)+min;
    return rand;
}
stock ResetVehicle(vehicleid)
{
	if (1 <= vehicleid <= MAX_VEHICLES)
	{
		if (CoreVehicles[vehicleid][vehSirenOn] && IsValidDynamicObject(CoreVehicles[vehicleid][vehSirenObject]))
		DestroyDynamicObject(CoreVehicles[vehicleid][vehSirenObject]);

		CoreVehicles[vehicleid][vehWindowsDown] = false;
		CoreVehicles[vehicleid][vehTemporary] = 0;
		CoreVehicles[vehicleid][vehLoads] = 0;
		CoreVehicles[vehicleid][vehLoadType] = 0;
		CoreVehicles[vehicleid][vehCrate] = INVALID_OBJECT_ID;
		CoreVehicles[vehicleid][vehTrash] = 0;
		CoreVehicles[vehicleid][vehRepairing] = 0;
		CoreVehicles[vehicleid][vehSirenOn] = 0;
		CoreVehicles[vehicleid][vehRadio] = 0;
	}
	return 1;
}

stock RespawnVehicle(vehicleid)
{
	new id = Car_GetID(vehicleid);

	if (id != -1)
		Car_Spawn(id);
	else
		SetVehicleToRespawn(vehicleid);

	if(CarData[id][carLoca] == 1 || CarData[id][carJob] != -1 || CarData[id][carFaction] != -1)
	{
	    CoreVehicles[vehicleid][vehFuel] = 100;
	}
	
	ResetVehicle(vehicleid);
	return 1;
}

stock GetWeaponCount(playerid)
{
	new
	count,
	weapon,
	ammo;

	for (new i = 0; i < 12; i ++)
	{
		GetPlayerWeaponData(playerid, i, weapon, ammo);

		if (weapon > 0 && ammo > 0) count++;
	}
	return count;
}

stock Boombox_Place(playerid)
{
	static
	Float:angle;

	GetPlayerFacingAngle(playerid, angle);

	strpack(BoomboxData[playerid][boomboxURL], "", 128 char);
	GetPlayerPos(playerid, BoomboxData[playerid][boomboxPos][0], BoomboxData[playerid][boomboxPos][1], BoomboxData[playerid][boomboxPos][2]);

	BoomboxData[playerid][boomboxPlaced] = true;
	BoomboxData[playerid][boomboxInterior] = GetPlayerInterior(playerid);
	BoomboxData[playerid][boomboxWorld] = GetPlayerVirtualWorld(playerid);

	BoomboxData[playerid][boomboxObject] = CreateDynamicObject(2103, BoomboxData[playerid][boomboxPos][0], BoomboxData[playerid][boomboxPos][1], BoomboxData[playerid][boomboxPos][2] - 0.9, 0.0, 0.0, angle, BoomboxData[playerid][boomboxWorld], BoomboxData[playerid][boomboxInterior]);

	return 1;
}

stock Boombox_Nearest(playerid)
{
	foreach (new i : Player) if (BoomboxData[i][boomboxPlaced] && GetPlayerInterior(playerid) == BoomboxData[i][boomboxInterior] && GetPlayerVirtualWorld(playerid) == BoomboxData[i][boomboxWorld] && IsPlayerInRangeOfPoint(playerid, 30.0, BoomboxData[i][boomboxPos][0], BoomboxData[i][boomboxPos][1], BoomboxData[i][boomboxPos][2])) {
		return i;
	}
	return INVALID_PLAYER_ID;
}

stock Boombox_SetURL(playerid, url[])
{
	if (BoomboxData[playerid][boomboxPlaced])
	{
		strpack(BoomboxData[playerid][boomboxURL], url, 128 char);

		foreach (new i : Player) if (PlayerData[i][pBoombox] == playerid) {
			StopAudioStreamForPlayer(i);
			PlayAudioStreamForPlayer(i, url, BoomboxData[playerid][boomboxPos][0], BoomboxData[playerid][boomboxPos][1], BoomboxData[playerid][boomboxPos][2], 30.0, 1);
		}
	}
	return 1;
}

stock Boombox_Destroy(playerid)
{
	if (BoomboxData[playerid][boomboxPlaced])
	{
		if (IsValidDynamicObject(BoomboxData[playerid][boomboxObject]))
		DestroyDynamicObject(BoomboxData[playerid][boomboxObject]);

		if (IsValidDynamic3DTextLabel(BoomboxData[playerid][boomboxText3D]))
		DestroyDynamic3DTextLabel(BoomboxData[playerid][boomboxText3D]);

		foreach (new i : Player) if (PlayerData[i][pBoombox] == playerid) {
			StopAudioStreamForPlayer(i);
		}
		BoomboxData[playerid][boomboxPlaced] = false;
		BoomboxData[playerid][boomboxInterior] = 0;
		BoomboxData[playerid][boomboxWorld] = 0;
	}
	return 1;
}


Dialog:DIALOG_RENTCAR(playerid, response, listitem, inputtext[])
{
	if(!response)
	{
		RemovePlayerFromVehicle(playerid);
		return 1;
	}
		
	new
		voicar = GetPlayerVehicleID(playerid),
		id = Car_GetID(voicar);

	if (DernieVehLoc[playerid] > 0)
	return SendClientMessage(playerid, COLOR_GREY, "Vous louez déjà un véhicule (/v delouer)");

	if (GetMoney(playerid) < 200)
	return SendClientMessage(playerid, COLOR_GREY, "Vous devez avoir $200 pour louer un véhicule.");

	if(CarData[id][carLoca] == 0)
	return SendClientMessage(playerid, COLOR_GREY, "Ce véhicule n'est pas louable.");

	if(CarData[id][carLocaID] > 0)
	return SendClientMessage(playerid, COLOR_GREY, "Ce véhicule a été louer par une autre personne.");

	PlayerData[playerid][pLocaID] = CarData[id][carID];
	CarData[id][carLocaID] = PlayerData[playerid][pID];

	PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
	SendClientMessageEx(playerid, COLOR_INFO, "Félicitation pour votre location! Utilisez \"/v delouer\" pour delouer votre véhicule.");

	GiveMoney(playerid, -CarData[id][carLocaPrice]);

    DernieVehLoc[playerid]=voicar;
    DernieVehLocID[playerid]=id;

	Car_Save(id);

	if(!AstucesChallenges[playerid][0] && PlayerData[playerid][pAstuces])
	{
	    ValidChallenges(playerid, 0);
	    SendClientMessage(playerid, COLOR_GREEN, "Vous avez débloqué le challenge \"{33CC33}Loue un véhicule ou appeler un taxi{FFFFFF}\". +1 point respect (/challenges)");
	}
	return 1;
}

Dialog:AcceptTaxi(playerid, response, listitem, inputtext[])
{
	if (response)
	{
		if (PlayerData[playerid][pTaxiPNJ] != -1)
		{
			Reset_TaxiCalls(PlayerData[playerid][pTaxiPNJ]);
			PlayerData[playerid][pTaxiPNJ] = -1;
			DisableWaypoint(playerid);
		}
		
	    new
	        null_contents[9],
	        targetid;
	       
		if(!sscanf(inputtext, "d", targetid))
		{
			//	new targetid = strval(inputtext);

			if (!IsPlayerConnected(targetid))
			return SendClientMessageEx(playerid, COLOR_ERROR, "Ce joueur est déconnecté.");

			if (!PlayerData[targetid][pTaxiCalled])
			return SendClientMessageEx(playerid, COLOR_ERROR, "Cet appel a été prit en charge par un autre taximan.");

			static
			Float:x,
			Float:y,
			Float:z;

			GetPlayerLocationEx(targetid, x, y, z);

			PlayerData[targetid][pTaxiCalled] = 0;
			Waypoint_Set(playerid, GetPlayerLocation(targetid), x, y, z);

			SendClientMessageEx(playerid, COLOR_INFO, "Vous avez accepté l'appel de %s.", ReturnName(targetid, 0));
			SendClientMessageEx(targetid, COLOR_INFO, "Le taximan %s a accepté votre appel, ne bougez pas.", ReturnName(playerid));
		}
		else if(!sscanf(inputtext, "s[6]d", null_contents, targetid))
		{
			if(!TaxiData[targetid][tExists])
			return SendClientMessageEx(playerid, COLOR_ERROR, "Cet appel a été prit en charge par un autre taximan.");
			
			TaxiData[targetid][tExists] = false;
			PlayerData[playerid][pTaxiPNJ] = targetid;
			PlayerData[playerid][pTaxiStep] = 1;
			
			Waypoint_Set(playerid, GetLocation(TaxiData[targetid][tPos][0], TaxiData[targetid][tPos][1], TaxiData[targetid][tPos][2]), TaxiData[targetid][tPos][0], TaxiData[targetid][tPos][1], TaxiData[targetid][tPos][2], 3.0);

			SendClientMessageEx(playerid, COLOR_INFO, "Vous avez accepté l'appel de %s.", TaxiData[targetid][tName]);
		}
	}
	return 1;
}

stock Taxi_ShowCalls(playerid)
{
	static
	string[2048];

	string[0] = 0;

	foreach (new i : Player) if (PlayerData[i][pTaxiCalled]) {
		format(string, sizeof(string), "%s%d - %s (%s)\n", string, i, ReturnName(i, 0), GetPlayerLocation(i));
	}
	
	for(new i=0; i<MAX_TAXIS_CALLS; i++) if(TaxiData[i][tExists])
	{
		format(string, sizeof(string), "%s(PNJ) %d - %s (%s)\n", string, i, TaxiData[i][tName], GetLocation(TaxiData[i][tPos][0], TaxiData[i][tPos][1], TaxiData[i][tPos][2]));
	}
	
	if (!strlen(string)) {
		SendClientMessageEx(playerid, COLOR_ERROR, "Il n'y a aucun appel à prendre en charge.");
	}
	else Dialog_Show(playerid, AcceptTaxi, DIALOG_STYLE_LIST, "Appel taxi", string, "Accepter", "X");
	return 1;
}

stock IsShipmentAccepted(businessid)
{
	foreach (new i : Player) if (PlayerData[i][pJob] == JOB_COURIER && PlayerData[i][pShipment] == businessid) {
		return 1;
	}
	return 0;
}

stock CancelShipment(playerid)
{
	PlayerData[playerid][pShipment] = -1;

	if (PlayerData[playerid][pDeliverShipment])
	{
		PlayerData[playerid][pDeliverShipment] = 0;
		DisablePlayerCheckpoint(playerid);
	}
	return 1;
}

stock ShowShipments(playerid)
{
	static
	string[2048],
	type[24];

	string[0] = 0;

	for (new i = 0; i < MAX_BUSINESSES; i ++) if (BusinessData[i][bizExists] && BusinessData[i][bizShipment] && !IsShipmentAccepted(i))
	{
		switch (BusinessData[i][bizType]) {
			case 1: type = "24/7";
			case 2: type = "Ammunation";
			case 3: type = "Vetements";
			case 4: type = "Fast Food";
			case 6: type = "Station Essence";
		}
		format(string, sizeof(string), "%s%d: %s (%s)\n", string, i, BusinessData[i][bizName], type);
	}
	if (!strlen(string)) {
		SendClientMessageEx(playerid, COLOR_ERROR, "Il n'y a aucune livraison à accepter.");
	}
	else Dialog_Show(playerid, AcceptShipment, DIALOG_STYLE_LIST, "Livraison", string, "Accepter", "X");
	return 1;
}

stock GetWheelName(componentid)
{
	static
	name[12];

	enum g_eWheelData {
		g_eWheelModel,
		g_eWheelName[12 char]
	};

	static const g_aWheelData[][g_eWheelData] = {
		{1025, !"Offroad"},
		{1073, !"Shadow"},
		{1074, !"Mega"},
		{1075, !"Rimshine"},
		{1076, !"Wires"},
		{1077, !"Classic"},
		{1078, !"Twist"},
		{1079, !"Cutter"},
		{1080, !"Switch"},
		{1081, !"Grove"},
		{1082, !"Import"},
		{1083, !"Dollar"},
		{1084, !"Trance"},
		{1085, !"Atomic"},
		{1096, !"Ahab"},
		{1097, !"Virtual"},
		{1098, !"Access"}
	};
	for (new i = 0; i < sizeof(g_aWheelData); i ++) if (g_aWheelData[i][g_eWheelModel] == componentid) {
		strunpack(name, g_aWheelData[i][g_eWheelName]);

		return name;
	}
	strunpack(name, !"Unknown");
	return name;
}

stock SetVehicleColor(vehicleid, color1, color2)
{
	new id = Car_GetID(vehicleid);

	if (id != -1)
	{
		CarData[id][carColor1] = color1;
		CarData[id][carColor2] = color2;
		Car_Save(id);
	}
	return ChangeVehicleColor(vehicleid, color1, color2);
}
stock SetVehicleSabot(vehicleid, prix)
{
	new id = Car_GetID(vehicleid);

	if (id != -1)
	{
		CarData[id][carSabot] = 1;
		CarData[id][carSabPri] = prix;
		Car_Save(id);
	}
	return 1;
}
stock RemoveVehicleSabot(vehicleid)
{
	new id = Car_GetID(vehicleid);

	if (id != -1)
	{
		CarData[id][carSabot] = 0;
		CarData[id][carSabPri] = 0;
		Car_Save(id);
	}
	return 1;
}

stock SetVehiclePaintjob(vehicleid, paintjobid)
{
	new id = Car_GetID(vehicleid);

	if (id != -1)
	{
		CarData[id][carPaintjob] = paintjobid;
		Car_Save(id);
	}
	return ChangeVehiclePaintjob(vehicleid, paintjobid);
}

stock RemoveComponent(vehicleid, componentid)
{
	if (!IsValidVehicle(vehicleid) || (componentid < 1000 || componentid > 1193))
	return 0;

	new
	id = Car_GetID(vehicleid);

	if (id != -1)
	{
		CarData[id][carMods][GetVehicleComponentType(componentid)] = 0;
		Car_Save(id);
	}
	return RemoveVehicleComponent(vehicleid, componentid);
}

stock AddComponent(vehicleid, componentid)
{
	if (!IsValidVehicle(vehicleid) || (componentid < 1000 || componentid > 1193))
	return 0;

	new
	id = Car_GetID(vehicleid);

	if (id != -1)
	{
		CarData[id][carMods][GetVehicleComponentType(componentid)] = componentid;
		Car_Save(id);
	}
	return AddVehicleComponent(vehicleid, componentid);
}

stock ApplyAnimationEx(playerid, animlib[], animname[], Float:fDelta, loop, lockx, locky, freeze, time, forcesync = 0)
{
	ApplyAnimation(playerid, animlib, animname, fDelta, loop, lockx, locky, freeze, time, forcesync);

	PlayerData[playerid][pLoopAnim] = true;
	ShowPlayerFooter(playerid, "Utilisez ~y~ESPACE~w~ pour stopper l'animation.");

	return 1;
}

stock AnimationCheck(playerid)
{
	return (GetPlayerState(playerid) == PLAYER_STATE_ONFOOT && !PlayerData[playerid][pKilled] && !PlayerData[playerid][pFreeze] && !PlayerData[playerid][pCuffed] && !PlayerData[playerid][pStunned] && !PlayerData[playerid][pFirstAid] && !PlayerData[playerid][pCrafting] && PlayerData[playerid][pGraffiti] == -1 && PlayerData[playerid][pGymnase] == -1 && !PlayerData[playerid][pInjured]);
}

stock PreloadAnimations(playerid)
{
	for (new i = 0; i < sizeof(g_aPreloadLibs); i ++) {
		ApplyAnimation(playerid, g_aPreloadLibs[i], "null", 4.0, 0, 0, 0, 0, 0, 1);
	}
	return 1;
}

stock Vendor_Create(playerid, type)
{
	for (new i = 0; i != MAX_VENDORS; i ++) if (!VendorData[i][vendorExists])
	{
		VendorData[i][vendorExists] = true;
		VendorData[i][vendorType] = type;

		GetPlayerPos(playerid, VendorData[i][vendorPos][0], VendorData[i][vendorPos][1], VendorData[i][vendorPos][2]);
		GetPlayerFacingAngle(playerid, VendorData[i][vendorPos][5]);

		VendorData[i][vendorPos][0] = VendorData[i][vendorPos][0] + (1.5 * floatsin(-VendorData[i][vendorPos][5], degrees));
		VendorData[i][vendorPos][1] = VendorData[i][vendorPos][1] + (1.5 * floatcos(-VendorData[i][vendorPos][5], degrees));

		VendorData[i][vendorInterior] = GetPlayerInterior(playerid);
		VendorData[i][vendorWorld] = GetPlayerVirtualWorld(playerid);

		Vendor_Refresh(i);
		mysql_function_query(g_iHandle, "INSERT INTO `vendors` (`vendorType`) VALUES(0)", false, "OnVendorCreated", "d", i);
		return i;
	}
	return -1;
}

stock Vendor_Delete(vendorid)
{
	if (vendorid != -1 && VendorData[vendorid][vendorExists])
	{
		new
		string[64];

		format(string, sizeof(string), "DELETE FROM `vendors` WHERE `vendorID` = '%d'", VendorData[vendorid][vendorID]);
		mysql_function_query(g_iHandle, string, false, "", "");

		if (IsValidDynamic3DTextLabel(VendorData[vendorid][vendorText3D]))
		DestroyDynamic3DTextLabel(VendorData[vendorid][vendorText3D]);

		if (IsValidDynamicObject(VendorData[vendorid][vendorObject]))
		DestroyDynamicObject(VendorData[vendorid][vendorObject]);

		VendorData[vendorid][vendorExists] = false;
		VendorData[vendorid][vendorType] = 0;
		VendorData[vendorid][vendorID] = 0;
	}
	return 1;
}

Vendor_Nearest(playerid)
{
	for (new i = 0; i != MAX_VENDORS; i ++) if (VendorData[i][vendorExists] && IsPlayerInRangeOfPoint(playerid, 2.0, VendorData[i][vendorPos][0], VendorData[i][vendorPos][1], VendorData[i][vendorPos][2]))
	{
		if (GetPlayerInterior(playerid) == VendorData[i][vendorInterior] && GetPlayerVirtualWorld(playerid) == VendorData[i][vendorWorld])
		return i;
	}
	return -1;
}

stock Vendor_Refresh(vendorid)
{
	if (vendorid != -1 && VendorData[vendorid][vendorExists])
	{
		if (IsValidDynamic3DTextLabel(VendorData[vendorid][vendorText3D]))
		DestroyDynamic3DTextLabel(VendorData[vendorid][vendorText3D]);

		if (IsValidDynamicObject(VendorData[vendorid][vendorObject]))
		DestroyDynamicObject(VendorData[vendorid][vendorObject]);

		static
		string[64];

		format(string, sizeof(string), "{FFFFFF}Utilisez 'F' pour acheter");
		VendorData[vendorid][vendorText3D] = CreateDynamic3DTextLabel(string, COLOR_DEFAULT, VendorData[vendorid][vendorPos][0], VendorData[vendorid][vendorPos][1], VendorData[vendorid][vendorPos][2], 5.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, VendorData[vendorid][vendorWorld], VendorData[vendorid][vendorInterior]);

		switch (VendorData[vendorid][vendorType]) {
			case 1: VendorData[vendorid][vendorObject] = CreateDynamicObject(1340, VendorData[vendorid][vendorPos][0], VendorData[vendorid][vendorPos][1], VendorData[vendorid][vendorPos][2], VendorData[vendorid][vendorPos][3], VendorData[vendorid][vendorPos][4], VendorData[vendorid][vendorPos][5], VendorData[vendorid][vendorWorld], VendorData[vendorid][vendorInterior]);
			case 2: VendorData[vendorid][vendorObject] = CreateDynamicObject(1342, VendorData[vendorid][vendorPos][0], VendorData[vendorid][vendorPos][1], VendorData[vendorid][vendorPos][2], VendorData[vendorid][vendorPos][3], VendorData[vendorid][vendorPos][4], VendorData[vendorid][vendorPos][5], VendorData[vendorid][vendorWorld], VendorData[vendorid][vendorInterior]);
			case 3: VendorData[vendorid][vendorObject] = CreateDynamicObject(1209, VendorData[vendorid][vendorPos][0], VendorData[vendorid][vendorPos][1], VendorData[vendorid][vendorPos][2], VendorData[vendorid][vendorPos][3], VendorData[vendorid][vendorPos][4], VendorData[vendorid][vendorPos][5], VendorData[vendorid][vendorWorld], VendorData[vendorid][vendorInterior]);
			case 6: VendorData[vendorid][vendorObject] = CreateDynamicObject(1341, VendorData[vendorid][vendorPos][0], VendorData[vendorid][vendorPos][1], VendorData[vendorid][vendorPos][2], VendorData[vendorid][vendorPos][3], VendorData[vendorid][vendorPos][4], VendorData[vendorid][vendorPos][5], VendorData[vendorid][vendorWorld], VendorData[vendorid][vendorInterior]);
		}
	}
	return 1;
}

stock Vendor_Save(vendorid)
{
	static
	query[300];

	format(query, sizeof(query), "UPDATE `vendors` SET `vendorType` = '%d', `vendorX` = '%.4f', `vendorY` = '%.4f', `vendorZ` = '%.4f', `vendorRX` = '%.4f', `vendorRY` = '%.4f', `vendorRZ` = '%.4f', `vendorInterior` = '%d', `vendorWorld` = '%d' WHERE `vendorID` = '%d'",
	VendorData[vendorid][vendorType],
	VendorData[vendorid][vendorPos][0],
	VendorData[vendorid][vendorPos][1],
	VendorData[vendorid][vendorPos][2],
	VendorData[vendorid][vendorPos][3],
	VendorData[vendorid][vendorPos][4],
	VendorData[vendorid][vendorPos][5],
	VendorData[vendorid][vendorInterior],
	VendorData[vendorid][vendorWorld],
	VendorData[vendorid][vendorID]
	);
	return mysql_function_query(g_iHandle, query, false, "", "");
}

stock Cabine_Create(playerid)
{
	for (new i = 0; i != MAX_CABINES; i ++) if (!CabineData[i][cabineExists])
	{
		new
		    Float:pos[4];
		    
		GetPlayerPos(playerid, pos[0], pos[1], pos[2]);
		GetPlayerFacingAngle(playerid, pos[3]);
		
		CabineData[i][cabineExists] = true;

		CabineData[i][cabineInterior] = GetPlayerInterior(playerid);
		CabineData[i][cabineWorld] = GetPlayerVirtualWorld(playerid);

		pos[0] += 1.5 * floatsin(-pos[3], degrees);
		pos[1] += 1.5 * floatcos(-pos[3], degrees);

		CabineData[i][cabinePos][0] = pos[0];
		CabineData[i][cabinePos][1] = pos[1];
		CabineData[i][cabinePos][2] = pos[2];
		CabineData[i][cabinePos][3] = pos[3];

		CabineData[i][cabineNumber] = random(90000) + 10000;
		CabineData[i][cabineCallID] = INVALID_PLAYER_ID;

		Cabine_Refresh(i);
		mysql_function_query(g_iHandle, "INSERT INTO `cabine` (`cabineNumber`) VALUES(0)", false, "OnCabineCreated", "d", i);
	    return i;
	}
	return -1;
}

stock Cabine_Refresh(cabineid)
{
	if (cabineid != -1 && CabineData[cabineid][cabineExists])
	{
		if (IsValidDynamic3DTextLabel(CabineData[cabineid][cabineText3D]))
		DestroyDynamic3DTextLabel(CabineData[cabineid][cabineText3D]);

		if (IsValidDynamicObject(CabineData[cabineid][cabineObject]))
		DestroyDynamicObject(CabineData[cabineid][cabineObject]);
		
		static
		string[64];

		format(string, sizeof(string), "Numéro: %d\n{FFFFFF}/cabine", CabineData[cabineid][cabineNumber]);

		CabineData[cabineid][cabineText3D] = CreateDynamic3DTextLabel(string, COLOR_DEFAULT, CabineData[cabineid][cabinePos][0], CabineData[cabineid][cabinePos][1], CabineData[cabineid][cabinePos][2], 5.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, CabineData[cabineid][cabineWorld], CabineData[cabineid][cabineInterior]);
		CabineData[cabineid][cabineObject] = CreateDynamicObject(1216, CabineData[cabineid][cabinePos][0], CabineData[cabineid][cabinePos][1], CabineData[cabineid][cabinePos][2], 0.0, 0.0, CabineData[cabineid][cabinePos][3], CabineData[cabineid][cabineWorld], CabineData[cabineid][cabineInterior]);
	}
	return 1;
}

stock Cabine_Delete(cabineid)
{
	if (cabineid != -1 && CabineData[cabineid][cabineExists])
	{
		static
		string[150];
		
		format(string, sizeof(string), "DELETE FROM `cabine` WHERE `cabineID` = '%d'", CabineData[cabineid][cabineID]);
		mysql_function_query(g_iHandle, string, false, "", "");

		if (IsValidDynamic3DTextLabel(CabineData[cabineid][cabineText3D]))
		DestroyDynamic3DTextLabel(CabineData[cabineid][cabineText3D]);

		if (IsValidDynamicObject(CabineData[cabineid][cabineObject]))
		DestroyDynamicObject(CabineData[cabineid][cabineObject]);

		CabineData[cabineid][cabineExists] = false;
		CabineData[cabineid][cabineID] = 0;
	}
	return 1;
}

stock IsCabineNumber(number)
{
	for (new i = 0; i != MAX_CABINES; i ++) if (CabineData[i][cabineExists] && CabineData[i][cabineNumber] == number)
	{
	    return i;
	}
	return -1;
}

Cabine_Nearest(playerid)
{
	for (new i = 0; i != MAX_CABINES; i ++) if (CabineData[i][cabineExists] && IsPlayerInRangeOfPoint(playerid, 3.0, CabineData[i][cabinePos][0], CabineData[i][cabinePos][1], CabineData[i][cabinePos][2]))
	{
		if (GetPlayerInterior(playerid) == CabineData[i][cabineInterior] && GetPlayerVirtualWorld(playerid) == CabineData[i][cabineWorld])
		return i;
	}
	return -1;
}

stock Cabine_Save(cabineid)
{
	static
	query[700];

	format(query, sizeof(query), "UPDATE `cabine` SET `cabineX` = '%.4f', `cabineY` = '%.4f', `cabineZ` = '%.4f', `cabineRX` = '%.4f', `cabineInterior` = '%d', `cabineWorld` = '%d', `cabineNumber` = '%d' WHERE `cabineID` = '%d'",
	CabineData[cabineid][cabinePos][0],
	CabineData[cabineid][cabinePos][1],
	CabineData[cabineid][cabinePos][2],
	CabineData[cabineid][cabinePos][3],
	CabineData[cabineid][cabineInterior],
	CabineData[cabineid][cabineWorld],
	CabineData[cabineid][cabineNumber],
	CabineData[cabineid][cabineID]
	);
	return mysql_function_query(g_iHandle, query, false, "", "");
}

stock Pickup_Create(playerid, icon, Float:range, text[])
{
	for (new i = 0; i != MAX_DYNAMICS_PICKUPS; i ++) if (!PickupData[i][pickupExists])
	{
		PickupData[i][pickupExists] = true;
		
		GetPlayerPos(playerid, PickupData[i][pickupPos][0], PickupData[i][pickupPos][1], PickupData[i][pickupPos][2]);
		PickupData[i][pickupInterior] = GetPlayerInterior(playerid);
		PickupData[i][pickupWorld] = GetPlayerVirtualWorld(playerid);
		PickupData[i][pickupRange] = range;

		strreplace(text, "((", "{", false, 0, -1, 150);
		strreplace(text, "))", "}", false, 0, -1, 150);
		strreplace(text, "(n)", "\n", false, 0, -1, 150);
		format(PickupData[i][pickupText], 500, text);
		PickupData[i][pickupIcon] = icon;
		
  		Pickup_Refresh(i);
		mysql_function_query(g_iHandle, "INSERT INTO `pickups` (`pickupIcon`) VALUES(0)", false, "OnPickupCreated", "d", i);
		return i;
	}
	return -1;
}

stock Pickup_Delete(pickupid)
{
	if (pickupid != -1 && PickupData[pickupid][pickupExists])
	{
		new
			string[64];

		format(string, sizeof(string), "DELETE FROM `pickups` WHERE `pickupID` = '%d'", PickupData[pickupid][pickupID]);
		mysql_function_query(g_iHandle, string, false, "", "");

		if (IsValidDynamic3DTextLabel(PickupData[pickupid][pickupText3D]))
		DestroyDynamic3DTextLabel(PickupData[pickupid][pickupText3D]);

		if (IsValidDynamicPickup(PickupData[pickupid][pickupPickup]))
		DestroyDynamicPickup(PickupData[pickupid][pickupPickup]);
		
		PickupData[pickupid][pickupExists] = false;
		PickupData[pickupid][pickupID] = 0;
	}
	return 1;
}

Pickup_Nearest(playerid)
{
	for (new i = 0; i != MAX_DYNAMICS_PICKUPS; i ++) if (PickupData[i][pickupExists] && IsPlayerInRangeOfPoint(playerid, 3.0, PickupData[i][pickupPos][0], PickupData[i][pickupPos][1], PickupData[i][pickupPos][2]))
	{
		if (GetPlayerInterior(playerid) == PickupData[i][pickupInterior] && GetPlayerVirtualWorld(playerid) == PickupData[i][pickupWorld])
		return i;
	}
	return -1;
}

stock Pickup_Refresh(pickupid)
{
	if (pickupid != -1 && GarbageData[pickupid][garbageExists])
	{
		if (IsValidDynamic3DTextLabel(PickupData[pickupid][pickupText3D]))
		DestroyDynamic3DTextLabel(PickupData[pickupid][pickupText3D]);

		if (IsValidDynamicPickup(PickupData[pickupid][pickupPickup]))
		DestroyDynamicPickup(PickupData[pickupid][pickupPickup]);

		PickupData[pickupid][pickupText3D] = CreateDynamic3DTextLabel(PickupData[pickupid][pickupText], COLOR_DEFAULT, PickupData[pickupid][pickupPos][0], PickupData[pickupid][pickupPos][1], PickupData[pickupid][pickupPos][2], PickupData[pickupid][pickupRange], INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, PickupData[pickupid][pickupWorld], PickupData[pickupid][pickupInterior]);
		PickupData[pickupid][pickupPickup] = CreateDynamicPickup(PickupData[pickupid][pickupIcon], 23, PickupData[pickupid][pickupPos][0], PickupData[pickupid][pickupPos][1], PickupData[pickupid][pickupPos][2]);
	}
	return 1;
}

stock Pickup_Save(pickupid)
{
	static
	query[350];

	format(query, sizeof(query), "UPDATE `pickups` SET `pickupX` = '%.4f', `pickupY` = '%.4f', `pickupZ` = '%.4f', `pickupRange` = '%.2f', `pickupText` = '%s', `pickupIcon` = '%d', `pickupInterior` = '%d', `pickupWorld` = '%d' WHERE `pickupID` = '%d'",
	PickupData[pickupid][pickupPos][0],
	PickupData[pickupid][pickupPos][1],
	PickupData[pickupid][pickupPos][2],
	PickupData[pickupid][pickupRange],
	PickupData[pickupid][pickupText],
	PickupData[pickupid][pickupIcon],
	PickupData[pickupid][pickupInterior],
	PickupData[pickupid][pickupWorld],
	PickupData[pickupid][pickupID]
	);
	return mysql_function_query(g_iHandle, query, false, "", "");
}

stock Gym_Create(playerid, type)
{
	for (new i = 0; i != MAX_GYM; i ++) if (!GymData[i][gymExists])
	{

		GymData[i][gymExists] = true;
		GymData[i][gymType] = type;
		
		GymData[i][gymUsed] = false;
		GymData[i][gymPlayerUse] = INVALID_PLAYER_ID;

		GetPlayerPos(playerid, GymData[i][gymObjectPos_1][0], GymData[i][gymObjectPos_1][1], GymData[i][gymObjectPos_1][2]);
		GetPlayerFacingAngle(playerid, GymData[i][gymObjectPos_1][3]);
		
		GymData[i][gymObjectPos_1][2] = GymData[i][gymObjectPos_1][2]+2;
		
		if(type == GYM_BENCH || type == GYM_DUMB)
		{
			GetPlayerPos(playerid, GymData[i][gymObjectPos_2][0], GymData[i][gymObjectPos_2][1], GymData[i][gymObjectPos_2][2]);
			GetPlayerFacingAngle(playerid, GymData[i][gymObjectPos_2][3]);

			GymData[i][gymObjectPos_2][2] = GymData[i][gymObjectPos_2][2]+2;
		}

		GetPlayerPos(playerid, GymData[i][gymPlayerPos][0], GymData[i][gymPlayerPos][1], GymData[i][gymPlayerPos][2]);
		GetPlayerFacingAngle(playerid, GymData[i][gymPlayerPos][3]);
		
		GymData[i][gymInterior] = GetPlayerInterior(playerid);
		GymData[i][gymWorld] = GetPlayerVirtualWorld(playerid);

		Gym_Refresh(i);
		mysql_function_query(g_iHandle, "INSERT INTO `gym` (`gymWorld`) VALUES(0)", false, "OnGymCreated", "d", i);
		return i;
	}
	return -1;
}

stock Gym_Delete(gymid)
{
	if (gymid != -1 && GymData[gymid][gymExists])
	{
		new
		string[64];

		format(string, sizeof(string), "DELETE FROM `gym` WHERE `gymID` = '%d'", GymData[gymid][gymID]);
		mysql_function_query(g_iHandle, string, false, "", "");

		if (IsValidDynamic3DTextLabel(GymData[gymid][gymText3D]))
		DestroyDynamic3DTextLabel(GymData[gymid][gymText3D]);

		if (IsValidDynamicObject(GymData[gymid][gymObject_1]))
		DestroyDynamicObject(GymData[gymid][gymObject_1]);

		if (IsValidDynamicObject(GymData[gymid][gymObject_2]))
		DestroyDynamicObject(GymData[gymid][gymObject_2]);

		GymData[gymid][gymExists] = false;
		GymData[gymid][gymInterior] = 0;
		GymData[gymid][gymWorld] = 0;

		GymData[gymid][gymUsed] = false;
		GymData[gymid][gymPlayerUse] = INVALID_PLAYER_ID;
	}
	return 1;
}

Gym_Nearest(playerid)
{
	for (new i = 0; i != MAX_GYM; i ++) if (GymData[i][gymExists] && IsPlayerInRangeOfPoint(playerid, 3.0, GymData[i][gymObjectPos_1][0], GymData[i][gymObjectPos_1][1], GymData[i][gymObjectPos_1][2]))
	{
		if (GetPlayerInterior(playerid) == GymData[i][gymInterior] && GetPlayerVirtualWorld(playerid) == GymData[i][gymWorld])
		return i;
	}
	return -1;
}

stock Gym_Refresh(gymid)
{
	if (gymid != -1 && GymData[gymid][gymExists])
	{
		if (IsValidDynamic3DTextLabel(GymData[gymid][gymText3D]))
		DestroyDynamic3DTextLabel(GymData[gymid][gymText3D]);

		if (IsValidDynamicObject(GymData[gymid][gymObject_1]))
		DestroyDynamicObject(GymData[gymid][gymObject_1]);

		if (IsValidDynamicObject(GymData[gymid][gymObject_2]))
		DestroyDynamicObject(GymData[gymid][gymObject_2]);
		
		GymData[gymid][gymText3D] = CreateDynamic3DTextLabel("Appuyez sur \"F\" pour commencer votre exercice", COLOR_DEFAULT, GymData[gymid][gymObjectPos_1][0], GymData[gymid][gymObjectPos_1][1], GymData[gymid][gymObjectPos_1][2], 5.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, GymData[gymid][gymWorld], GymData[gymid][gymInterior]);

		switch(GymData[gymid][gymType])
		{
		    case GYM_BIKE: // VELO
			{
				GymData[gymid][gymObject_1] =
				CreateDynamicObject(2630, GymData[gymid][gymObjectPos_1][0], GymData[gymid][gymObjectPos_1][1], GymData[gymid][gymObjectPos_1][2], GymData[gymid][gymObjectPos_1][3], GymData[gymid][gymObjectPos_1][4], GymData[gymid][gymObjectPos_1][5], GymData[gymid][gymWorld], GymData[gymid][gymInterior]);

				GymData[gymid][gymObject_2] = INVALID_OBJECT_ID;
			}
		    case GYM_BENCH: // BARRE DE TRACTION
			{
				GymData[gymid][gymObject_1] =
				CreateDynamicObject(2629, GymData[gymid][gymObjectPos_1][0], GymData[gymid][gymObjectPos_1][1], GymData[gymid][gymObjectPos_1][2], GymData[gymid][gymObjectPos_1][3], GymData[gymid][gymObjectPos_1][4], GymData[gymid][gymObjectPos_1][5], GymData[gymid][gymWorld], GymData[gymid][gymInterior]);

				GymData[gymid][gymObject_2] =
				CreateDynamicObject(2913, GymData[gymid][gymObjectPos_2][0], GymData[gymid][gymObjectPos_2][1], GymData[gymid][gymObjectPos_2][2], GymData[gymid][gymObjectPos_2][3], GymData[gymid][gymObjectPos_2][4], GymData[gymid][gymObjectPos_2][5], GymData[gymid][gymWorld], GymData[gymid][gymInterior]);

			}
		    case GYM_RUN: // TAPIS DE COURSE
			{
				GymData[gymid][gymObject_1] =
				CreateDynamicObject(2627, GymData[gymid][gymObjectPos_1][0], GymData[gymid][gymObjectPos_1][1], GymData[gymid][gymObjectPos_1][2], GymData[gymid][gymObjectPos_1][3], GymData[gymid][gymObjectPos_1][4], GymData[gymid][gymObjectPos_1][5], GymData[gymid][gymWorld], GymData[gymid][gymInterior]);

				GymData[gymid][gymObject_2] = INVALID_OBJECT_ID;
			}
		    case GYM_DUMB: // ALTERES
			{
				GymData[gymid][gymObject_1] =
				CreateDynamicObject(3071, GymData[gymid][gymObjectPos_1][0], GymData[gymid][gymObjectPos_1][1], GymData[gymid][gymObjectPos_1][2], GymData[gymid][gymObjectPos_1][3], GymData[gymid][gymObjectPos_1][4], GymData[gymid][gymObjectPos_1][5], GymData[gymid][gymWorld], GymData[gymid][gymInterior]);

				GymData[gymid][gymObject_2] =
				CreateDynamicObject(3072, GymData[gymid][gymObjectPos_2][0], GymData[gymid][gymObjectPos_2][1], GymData[gymid][gymObjectPos_2][2], GymData[gymid][gymObjectPos_2][3], GymData[gymid][gymObjectPos_2][4], GymData[gymid][gymObjectPos_2][5], GymData[gymid][gymWorld], GymData[gymid][gymInterior]);
			}
		}
	}
	return 1;
}

stock Gym_Save(gymid)
{
	static
	query[650];

	format(query, sizeof(query), "UPDATE `gym` SET `gymType` = '%d', `gymInterior` = '%d', `gymWorld` = '%d', `gymObjectPos_1_X` = '%.4f', `gymObjectPos_1_Y` = '%.4f', `gymObjectPos_1_Z` = '%.4f', `gymObjectPos_1_RX` = '%.4f', `gymObjectPos_1_RY` = '%.4f', `gymObjectPos_1_RZ` = '%.4f' WHERE `gymID` = '%d'",
	GymData[gymid][gymType],
	GymData[gymid][gymInterior],
	GymData[gymid][gymWorld],
	GymData[gymid][gymObjectPos_1][0],
	GymData[gymid][gymObjectPos_1][1],
	GymData[gymid][gymObjectPos_1][2],
	GymData[gymid][gymObjectPos_1][3],
	GymData[gymid][gymObjectPos_1][4],
	GymData[gymid][gymObjectPos_1][5],
	GymData[gymid][gymID]
	);
	mysql_function_query(g_iHandle, query, false, "", "");
	
	format(query, sizeof(query), "UPDATE `gym` SET `gymObjectPos_2_X` = '%.4f', `gymObjectPos_2_Y` = '%.4f', `gymObjectPos_2_Z` = '%.4f', `gymObjectPos_2_RX` = '%.4f', `gymObjectPos_2_RY` = '%.4f', `gymObjectPos_2_RZ` = '%.4f', `gymPlayerPos_X` = '%.4f', `gymPlayerPos_Y` = '%.4f', `gymPlayerPos_Z` = '%.4f', `gymPlayerPos_RX` = '%.4f' WHERE `gymID` = '%d'",
	GymData[gymid][gymObjectPos_2][0],
	GymData[gymid][gymObjectPos_2][1],
	GymData[gymid][gymObjectPos_2][2],
	GymData[gymid][gymObjectPos_2][3],
	GymData[gymid][gymObjectPos_2][4],
	GymData[gymid][gymObjectPos_2][5],
	GymData[gymid][gymPlayerPos][0],
	GymData[gymid][gymPlayerPos][1],
	GymData[gymid][gymPlayerPos][2],
	GymData[gymid][gymPlayerPos][3],
	GymData[gymid][gymID]
	);
    return mysql_function_query(g_iHandle, query, false, "", "");
}

stock Camera_Create(playerid, localisation[])
{
	for (new i = 0; i != MAX_CAMERAS; i ++) if (!CameraData[i][cameraExists])
	{
		CameraData[i][cameraExists] = true;
		CameraData[i][cameraStatus] = true;

		GetPlayerPos(playerid, CameraData[i][cameraPos][0], CameraData[i][cameraPos][1], CameraData[i][cameraPos][2]);
		GetPlayerPos(playerid, CameraData[i][cameraPos][3], CameraData[i][cameraPos][4], CameraData[i][cameraPos][5]);

		CameraData[i][cameraRot][0] = 0.0;
		CameraData[i][cameraRot][1] = 0.0;
		CameraData[i][cameraRot][2] = 0.0;
		
		CameraData[i][cameraInterior] = GetPlayerInterior(playerid);
		CameraData[i][cameraWorld] = GetPlayerVirtualWorld(playerid);

		format(CameraData[i][cameraZone], 24, "%s", GetLocation(CameraData[i][cameraPos][0], CameraData[i][cameraPos][1], CameraData[i][cameraPos][2]));
		format(CameraData[i][cameraLocalisation], 24, "%s", localisation);

		Camera_Refresh(i);
		mysql_function_query(g_iHandle, "INSERT INTO `camera` (`cameraInterior`) VALUES(0)", false, "OnCameraCreated", "d", i);
		return i;
	}
	return -1;
}

stock Camera_Delete(cameraid)
{
	if (cameraid != -1 && CameraData[cameraid][cameraExists])
	{
		if (IsValidDynamicObject(CameraData[cameraid][cameraObject]))
		DestroyDynamicObject(CameraData[cameraid][cameraObject]);
		
		new
		string[64];

		format(string, sizeof(string), "DELETE FROM `camera` WHERE `cameraID` = '%d'", CameraData[cameraid][cameraID]);
		mysql_function_query(g_iHandle, string, false, "", "");

		CameraData[cameraid][cameraExists] = false;
	}
	return 1;
}

stock Camera_Nearest(playerid)
{
	for (new i = 0; i != MAX_CAMERAS; i ++) if (CameraData[i][cameraExists] && IsPlayerInRangeOfPoint(playerid, 3.0, CameraData[i][cameraPos][0], CameraData[i][cameraPos][1], CameraData[i][cameraPos][2]))
	{
		if (GetPlayerInterior(playerid) == CameraData[i][cameraInterior] && GetPlayerVirtualWorld(playerid) == CameraData[i][cameraWorld])
		return i;
	}
	return -1;
}

stock Camera_Refresh(cameraid)
{
	if (cameraid != -1 && CameraData[cameraid][cameraExists])
	{
		if (IsValidDynamicObject(CameraData[cameraid][cameraObject]))
		DestroyDynamicObject(CameraData[cameraid][cameraObject]);

		CameraData[cameraid][cameraObject] =
		CreateDynamicObject(2921, CameraData[cameraid][cameraPos][0], CameraData[cameraid][cameraPos][1], CameraData[cameraid][cameraPos][2], CameraData[cameraid][cameraRot][0], CameraData[cameraid][cameraRot][1], CameraData[cameraid][cameraRot][2], CameraData[cameraid][cameraWorld], CameraData[cameraid][cameraInterior]);
	}
	return 1;
}

stock Camera_Save(cameraid)
{
	static
	query[600];

	format(query, sizeof(query), "UPDATE `camera` SET `cameraZone` = '%s', `cameraLocalisation` = '%s', `cameraPosX_1` = '%.4f', `cameraPosY_1` = '%.4f', `cameraPosZ_1` = '%.4f', `cameraPosX_2` = '%.4f', `cameraPosY_2` = '%.4f', `cameraPosZ_2` = '%.4f',, `cameraRX` = '%.4f', `cameraRY` = '%.4f', `cameraRZ` = '%.4f', `cameraInterior` = '%d', `cameraWorld` = '%d', `cameraStatus` = '%d' WHERE `cameraID` = '%d'",
	CameraData[cameraid][cameraZone],
	CameraData[cameraid][cameraLocalisation],
	CameraData[cameraid][cameraPos][0],
	CameraData[cameraid][cameraPos][1],
	CameraData[cameraid][cameraPos][2],
	CameraData[cameraid][cameraPos][3],
	CameraData[cameraid][cameraPos][4],
	CameraData[cameraid][cameraPos][5],
	CameraData[cameraid][cameraRot][0],
	CameraData[cameraid][cameraRot][1],
	CameraData[cameraid][cameraRot][2],
	CameraData[cameraid][cameraInterior],
	CameraData[cameraid][cameraWorld],
	CameraData[cameraid][cameraStatus],
	CameraData[cameraid][cameraID]
	);
	return mysql_function_query(g_iHandle, query, false, "", "");
}

stock Garbage_Create(playerid, type)
{
	for (new i = 0; i != MAX_GARBAGE_BINS; i ++) if (!GarbageData[i][garbageExists])
	{
		switch (type) {
			case 1: GarbageData[i][garbageModel] = 1236;
			case 2: GarbageData[i][garbageModel] = 1300;
			case 3: GarbageData[i][garbageModel] = 1328;
			case 4: GarbageData[i][garbageModel] = 1343;
		}
		GarbageData[i][garbageExists] = true;
		GarbageData[i][garbageCapacity] = 0;

		GetPlayerPos(playerid, GarbageData[i][garbagePos][0], GarbageData[i][garbagePos][1], GarbageData[i][garbagePos][2]);
		GetPlayerFacingAngle(playerid, GarbageData[i][garbagePos][5]);

		switch (type) {
			case 1: {
				GarbageData[i][garbagePos][0] = GarbageData[i][garbagePos][0] + (1.8 * floatsin(-GarbageData[i][garbagePos][5], degrees));
				GarbageData[i][garbagePos][1] = GarbageData[i][garbagePos][1] + (1.8 * floatcos(-GarbageData[i][garbagePos][5], degrees));
			}
			case 2: {
				GarbageData[i][garbagePos][0] = GarbageData[i][garbagePos][0] + (1.0 * floatsin(-GarbageData[i][garbagePos][5], degrees));
				GarbageData[i][garbagePos][1] = GarbageData[i][garbagePos][1] + (1.0 * floatcos(-GarbageData[i][garbagePos][5], degrees));
			}
		}
		GarbageData[i][garbageInterior] = GetPlayerInterior(playerid);
		GarbageData[i][garbageWorld] = GetPlayerVirtualWorld(playerid);

		Garbage_Refresh(i);
		mysql_function_query(g_iHandle, "INSERT INTO `garbage` (`garbageCapacity`) VALUES(0)", false, "OnGarbageCreated", "d", i);
		return i;
	}
	return -1;
}

stock Garbage_Delete(garbageid)
{
	if (garbageid != -1 && GarbageData[garbageid][garbageExists])
	{
		new
		string[64];

		format(string, sizeof(string), "DELETE FROM `garbage` WHERE `garbageID` = '%d'", GarbageData[garbageid][garbageID]);
		mysql_function_query(g_iHandle, string, false, "", "");

		if (IsValidDynamic3DTextLabel(GarbageData[garbageid][garbageText3D]))
		DestroyDynamic3DTextLabel(GarbageData[garbageid][garbageText3D]);

		if (IsValidDynamicObject(GarbageData[garbageid][garbageObject]))
		DestroyDynamicObject(GarbageData[garbageid][garbageObject]);

		GarbageData[garbageid][garbageExists] = false;
		GarbageData[garbageid][garbageCapacity] = 0;
		GarbageData[garbageid][garbageID] = 0;
	}
	return 1;
}

Garbage_Nearest(playerid)
{
	for (new i = 0; i != MAX_GARBAGE_BINS; i ++) if (GarbageData[i][garbageExists] && IsPlayerInRangeOfPoint(playerid, 3.0, GarbageData[i][garbagePos][0], GarbageData[i][garbagePos][1], GarbageData[i][garbagePos][2]))
	{
		if (GetPlayerInterior(playerid) == GarbageData[i][garbageInterior] && GetPlayerVirtualWorld(playerid) == GarbageData[i][garbageWorld])
		return i;
	}
	return -1;
}

stock Garbage_Refresh(garbageid)
{
	if (garbageid != -1 && GarbageData[garbageid][garbageExists])
	{
		if (IsValidDynamic3DTextLabel(GarbageData[garbageid][garbageText3D]))
		DestroyDynamic3DTextLabel(GarbageData[garbageid][garbageText3D]);

		if (IsValidDynamicObject(GarbageData[garbageid][garbageObject]))
		DestroyDynamicObject(GarbageData[garbageid][garbageObject]);

		static
		string[64];

		format(string, sizeof(string), "{FFFFFF}Capacité d'ordures: %d/20", GarbageData[garbageid][garbageCapacity]);

		GarbageData[garbageid][garbageText3D] = CreateDynamic3DTextLabel(string, COLOR_DEFAULT, GarbageData[garbageid][garbagePos][0], GarbageData[garbageid][garbagePos][1], GarbageData[garbageid][garbagePos][2], 5.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, GarbageData[garbageid][garbageWorld], GarbageData[garbageid][garbageInterior]);

		GarbageData[garbageid][garbageObject] =
		CreateDynamicObject(GarbageData[garbageid][garbageModel], GarbageData[garbageid][garbagePos][0], GarbageData[garbageid][garbagePos][1], GarbageData[garbageid][garbagePos][2], GarbageData[garbageid][garbagePos][3], GarbageData[garbageid][garbagePos][4], GarbageData[garbageid][garbagePos][5], GarbageData[garbageid][garbageWorld], GarbageData[garbageid][garbageInterior]);
	}
	return 1;
}

stock Garbage_Save(garbageid)
{
	static
	query[300];

	format(query, sizeof(query), "UPDATE `garbage` SET `garbageModel` = '%d', `garbageCapacity` = '%d', `garbageX` = '%.4f', `garbageY` = '%.4f', `garbageZ` = '%.4f', `garbageRX` = '%.4f', `garbageRY` = '%.4f', `garbageRZ` = '%.4f', `garbageInterior` = '%d', `garbageWorld` = '%d' WHERE `garbageID` = '%d'",
	GarbageData[garbageid][garbageModel],
	GarbageData[garbageid][garbageCapacity],
	GarbageData[garbageid][garbagePos][0],
	GarbageData[garbageid][garbagePos][1],
	GarbageData[garbageid][garbagePos][2],
	GarbageData[garbageid][garbagePos][3],
	GarbageData[garbageid][garbagePos][4],
	GarbageData[garbageid][garbagePos][5],
	GarbageData[garbageid][garbageInterior],
	GarbageData[garbageid][garbageWorld],
	GarbageData[garbageid][garbageID]
	);
	return mysql_function_query(g_iHandle, query, false, "", "");
}

/* SIGNS */

stock Sign_Create(modelid, Float:x, Float:y, Float:z, Float:rx)
{
	for (new i = 0; i != MAX_SIGNS; i ++) if (!SignData[i][signExists])
	{
		x += 1.5 * floatsin(-rx, degrees);
		y += 1.5 * floatcos(-rx, degrees);
			
		SignData[i][signModel] = modelid;
		SignData[i][signExists] = true;
		
		SignData[i][signPos][0] = x;
		SignData[i][signPos][1] = y;
		SignData[i][signPos][2] = z-1.7;
		SignData[i][signPos][3] = rx-180;

		Sign_Refresh(i);
		mysql_function_query(g_iHandle, "INSERT INTO `sign` (`signModel`) VALUES(0)", false, "OnSignCreated", "d", i);
		
		return i;
	}
	return -1;
}

stock Sign_Delete(signid)
{
	if (signid != -1 && SignData[signid][signExists])
	{
		new
		string[64];

		format(string, sizeof(string), "DELETE FROM `sign` WHERE `signID` = '%d'", SignData[signid][signID]);
		mysql_function_query(g_iHandle, string, false, "", "");

		if (IsValidDynamicObject(SignData[signid][signObject]))
		DestroyDynamicObject(SignData[signid][signObject]);

		SignData[signid][signExists] = false;
		SignData[signid][signModel] = 0;
	}
	return 1;
}

Sign_Nearest(playerid)
{
	for (new i = 0; i != MAX_SIGNS; i ++) if (SignData[i][signExists] && IsPlayerInRangeOfPoint(playerid, 3.0, SignData[i][signPos][0], SignData[i][signPos][1], SignData[i][signPos][2]))
	{
		return i;
	}
	return -1;
}

stock Sign_Refresh(signid)
{
	if (signid != -1 && SignData[signid][signExists])
	{
		if (IsValidDynamicObject(SignData[signid][signObject]))
		DestroyDynamicObject(SignData[signid][signObject]);

		SignData[signid][signObject] =
		CreateDynamicObject(SignData[signid][signModel], SignData[signid][signPos][0], SignData[signid][signPos][1], SignData[signid][signPos][2], 0.0, 0.0, SignData[signid][signPos][3]);
	}
	return 1;
}

stock Sign_Save(signid)
{
	static
	query[300];

	format(query, sizeof(query), "UPDATE `sign` SET `signModel` = '%d', `signX` = '%.4f', `signY` = '%.4f', `signZ` = '%.4f', `signRX` = '%.4f' WHERE `signID` = '%d'",
	SignData[signid][signModel],
	SignData[signid][signPos][0],
	SignData[signid][signPos][1],
	SignData[signid][signPos][2],
	SignData[signid][signPos][3],
	SignData[signid][signID]
	);
	return mysql_function_query(g_iHandle, query, false, "", "");
}

stock UpdateWeapons(playerid)
{
	for (new i = 0; i < 13; i ++) if (PlayerData[playerid][pGuns][i])
	{
		if ((i == 2 && PlayerData[playerid][pTazer]) || (i == 3 && PlayerData[playerid][pBeanBag]))
		continue;

		GetPlayerWeaponData(playerid, i, PlayerData[playerid][pGuns][i], PlayerData[playerid][pAmmo][i]);

		if (PlayerData[playerid][pGuns][i] != 0 && !PlayerData[playerid][pAmmo][i]) {
			PlayerData[playerid][pGuns][i] = 0;
		}
	}
	return 1;
}

stock ATM_Delete(atmid)
{
	if (atmid != -1 && ATMData[atmid][atmExists])
	{
		new
		string[64];

		format(string, sizeof(string), "DELETE FROM `atm` WHERE `atmID` = '%d'", ATMData[atmid][atmID]);
		mysql_function_query(g_iHandle, string, false, "", "");

		if (IsValidDynamicObject(ATMData[atmid][atmObject]))
		DestroyDynamicObject(ATMData[atmid][atmObject]);

		if (IsValidDynamic3DTextLabel(ATMData[atmid][atmText3D]))
		DestroyDynamic3DTextLabel(ATMData[atmid][atmText3D]);

		ATMData[atmid][atmExists] = false;
		ATMData[atmid][atmID] = 0;
	}
	return 1;
}

ATM_Nearest(playerid)
{
	for (new i = 0; i != MAX_ATM_MACHINES; i ++) if (ATMData[i][atmExists] && IsPlayerInRangeOfPoint(playerid, 2.5, ATMData[i][atmPos][0], ATMData[i][atmPos][1], ATMData[i][atmPos][2]))
	{
		if (GetPlayerInterior(playerid) == ATMData[i][atmInterior] && GetPlayerVirtualWorld(playerid) == ATMData[i][atmWorld])
		return i;
	}
	return -1;
}

ATM_Create(playerid,argent)
{
	static
	Float:x,
	Float:y,
	Float:z,
	Float:angle;

	if (GetPlayerPos(playerid, x, y, z) && GetPlayerFacingAngle(playerid, angle))
	{
		for (new i = 0; i < MAX_ATM_MACHINES; i ++)
		{
		 if (!ATMData[i][atmExists])
			{
			ATMData[i][atmExists] = 1;

			x += 1.0 * floatsin(-angle, degrees);
			y += 1.0 * floatcos(-angle, degrees);

			ATMData[i][atmPos][0] = x;
			ATMData[i][atmPos][1] = y;
			ATMData[i][atmPos][2] = z-0.6;
			ATMData[i][atmPos][3] = angle;

			ATMData[i][atmInterior] = GetPlayerInterior(playerid);
			ATMData[i][atmWorld] = GetPlayerVirtualWorld(playerid);
			ATMData[i][atmArgen] = argent;


			ATM_Refresh(i);
			mysql_function_query(g_iHandle, "INSERT INTO `atm` (`atmInterior`) VALUES(0)", false, "OnATMCreated", "d", i);
			return i;
			}
		}
	}
	return -1;
}
ATM_Refresh(atmid)
{
	if (atmid != -1 && ATMData[atmid][atmExists])
	{
		if (IsValidDynamicObject(ATMData[atmid][atmObject]))
		DestroyDynamicObject(ATMData[atmid][atmObject]);

		if (IsValidDynamic3DTextLabel(ATMData[atmid][atmText3D]))
		DestroyDynamic3DTextLabel(ATMData[atmid][atmText3D]);

		//new argent = ATMData[atmid][atmArgen];
		static
		string[94];

		//format(string, sizeof(string), "ATM %d\n{FFFFFF}/retirer pour plus d'informations\n{16D98B}%d$", atmid,argent);
		format(string, sizeof(string), "{FFFFFF}/retirer pour plus d'informations");

		//2942
		ATMData[atmid][atmObject] = CreateDynamicObject(19526, ATMData[atmid][atmPos][0], ATMData[atmid][atmPos][1], ATMData[atmid][atmPos][2], 0.0, 0.0, ATMData[atmid][atmPos][3], ATMData[atmid][atmWorld], ATMData[atmid][atmInterior]);
		ATMData[atmid][atmText3D] = CreateDynamic3DTextLabel(string, COLOR_DEFAULT, ATMData[atmid][atmPos][0], ATMData[atmid][atmPos][1], ATMData[atmid][atmPos][2], 8.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, ATMData[atmid][atmWorld], ATMData[atmid][atmInterior]);

		return 1;
	}
	return 0;
}

ATM_Save(atmid)
{
	static
	query[200];

	format(query, sizeof(query), "UPDATE `atm` SET `atmX` = '%.4f', `atmY` = '%.4f', `atmZ` = '%.4f', `atmA` = '%.4f', `atmInterior` = '%d', `atmWorld` = '%d', `atmArgen` = '%d' WHERE `atmID` = '%d'",
	ATMData[atmid][atmPos][0],
	ATMData[atmid][atmPos][1],
	ATMData[atmid][atmPos][2],
	ATMData[atmid][atmPos][3],
	ATMData[atmid][atmInterior],
	ATMData[atmid][atmWorld],
	ATMData[atmid][atmArgen],
	ATMData[atmid][atmID]
	);
	return mysql_function_query(g_iHandle, query, false, "", "");
}
stock IsVehicleImpounded(vehicleid)
{
	new id = Car_GetID(vehicleid);

	if (id != -1 && CarData[id][carImpounded] != -1 && CarData[id][carImpoundPrice] > 0)
	return 1;

	return 0;
}

stock Impound_Delete(impoundid)
{
	if (impoundid != -1 && ImpoundData[impoundid][impoundExists])
	{
		static
		query[64];

		format(query, sizeof(query), "DELETE FROM `impoundlots` WHERE `impoundID` = '%d'", ImpoundData[impoundid][impoundID]);
		mysql_function_query(g_iHandle, query, false, "", "");

		if (IsValidDynamic3DTextLabel(ImpoundData[impoundid][impoundText3D]))
		DestroyDynamic3DTextLabel(ImpoundData[impoundid][impoundText3D]);

		if (IsValidDynamicPickup(ImpoundData[impoundid][impoundPickup]))
		DestroyDynamicPickup(ImpoundData[impoundid][impoundPickup]);

		for (new i = 0; i < MAX_DYNAMIC_CARS; i ++) if (CarData[i][carExists] && CarData[i][carImpounded] == ImpoundData[impoundid][impoundID]) {
			CarData[i][carImpounded] = 0;
			CarData[i][carImpoundPrice] = 0;
			Car_Save(i);
		}
		ImpoundData[impoundid][impoundExists] = false;
		ImpoundData[impoundid][impoundID] = 0;
	}
	return 1;
}

stock GetImpoundByID(sqlid)
{
	for (new i = 0; i < MAX_IMPOUND_LOTS; i ++) if (ImpoundData[i][impoundExists] && ImpoundData[i][impoundID] == sqlid) {
		return i;
	}
	return -1;
}

stock Impound_Nearest(playerid)
{
	for (new i = 0; i < MAX_IMPOUND_LOTS; i ++) if (ImpoundData[i][impoundExists] && IsPlayerInRangeOfPoint(playerid, 20.0, ImpoundData[i][impoundLot][0], ImpoundData[i][impoundLot][1], ImpoundData[i][impoundLot][2])) {
		return i;
	}
	return -1;
}

stock Impound_Create(Float:x, Float:y, Float:z)
{
	for (new i = 0; i != MAX_IMPOUND_LOTS; i ++) if (!ImpoundData[i][impoundExists])
	{
		ImpoundData[i][impoundExists] = true;
		ImpoundData[i][impoundLot][0] = x;
		ImpoundData[i][impoundLot][1] = y;
		ImpoundData[i][impoundLot][2] = z;
		ImpoundData[i][impoundRelease][0] = 0.0;
		ImpoundData[i][impoundRelease][1] = 0.0;
		ImpoundData[i][impoundRelease][2] = 0.0;

		mysql_function_query(g_iHandle, "INSERT INTO `impoundlots` (`impoundLotX`) VALUES('0.0')", false, "OnImpoundCreated", "d", i);
		Impound_Refresh(i);

		return i;
	}
	return -1;
}

stock Impound_Refresh(impoundid)
{
	if (impoundid != -1 && ImpoundData[impoundid][impoundExists])
	{
		static
		string[64];

		if (IsValidDynamic3DTextLabel(ImpoundData[impoundid][impoundText3D]))
		DestroyDynamic3DTextLabel(ImpoundData[impoundid][impoundText3D]);

		if (IsValidDynamicPickup(ImpoundData[impoundid][impoundPickup]))
		DestroyDynamicPickup(ImpoundData[impoundid][impoundPickup]);

		format(string, sizeof(string), "Fourrière\n{FFFFFF}Utilisez \"/p(olice) fourriere\"");
		ImpoundData[impoundid][impoundText3D] = CreateDynamic3DTextLabel(string, COLOR_DEFAULT, ImpoundData[impoundid][impoundLot][0], ImpoundData[impoundid][impoundLot][1], ImpoundData[impoundid][impoundLot][2], 20.0);
		ImpoundData[impoundid][impoundPickup] = CreateDynamicPickup(1239, 23, ImpoundData[impoundid][impoundLot][0], ImpoundData[impoundid][impoundLot][1], ImpoundData[impoundid][impoundLot][2]);
	}
	return 1;
}

stock Impound_Save(impoundid)
{
	static
	query[300];

	format(query, sizeof(query), "UPDATE `impoundlots` SET `impoundLotX` = '%.4f', `impoundLotY` = '%.4f', `impoundLotZ` = '%.4f', `impoundReleaseX` = '%.4f', `impoundReleaseY` = '%.4f', `impoundReleaseZ` = '%.4f', `impoundReleaseA` = '%.4f' WHERE `impoundID` = '%d'",
	ImpoundData[impoundid][impoundLot][0],
	ImpoundData[impoundid][impoundLot][1],
	ImpoundData[impoundid][impoundLot][2],
	ImpoundData[impoundid][impoundRelease][0],
	ImpoundData[impoundid][impoundRelease][1],
	ImpoundData[impoundid][impoundRelease][2],
	ImpoundData[impoundid][impoundRelease][3],
	ImpoundData[impoundid][impoundID]
	);
	return mysql_function_query(g_iHandle, query, false, "", "");
}

stock Backpack_Items(playerid, id)
{
	if (id != -1 && BackpackData[id][backpackExists])
	{
		new
		string[MAX_BACKPACK_CAPACITY * 32],
		count = 0;

		for (new i = 0; i < MAX_BACKPACK_ITEMS; i ++) if (BackpackItems[i][bItemExists] && BackpackItems[i][bItemBackpack] == id)
		{
			if (BackpackItems[i][bItemQuantity] == 1)
			format(string, sizeof(string), "%s%s\n", string, BackpackItems[i][bItemName]);

			else format(string, sizeof(string), "%s%s (%d)\n", string, BackpackItems[i][bItemName], BackpackItems[i][bItemQuantity]);

			BackpackListed[playerid][count++] = i;
		}
		strcat(string, "{A9C4E4}Récuperer le sac au sol");

		PlayerData[playerid][pBackpackLoot] = id;
		Dialog_Show(playerid, BackpackLoot, DIALOG_STYLE_LIST, "Sac à dos", string, "Ok", "X");
	}
	return 1;
}

stock Backpack_Open(playerid)
{
	new id = GetPlayerBackpack(playerid);

	if (id != -1)
	{
		new
		string[MAX_BACKPACK_CAPACITY * 32],
		count = 0;

		string = "{A9C4E4}Déposer un objet dans le sac\n{A9C4E4}Déposer son arme dans le sac\n";

		for (new i = 0; i < MAX_BACKPACK_ITEMS; i ++) if (BackpackItems[i][bItemExists] && BackpackItems[i][bItemBackpack] == id)
		{
			if (BackpackItems[i][bItemQuantity] == 1)
			format(string, sizeof(string), "%s%s\n", string, BackpackItems[i][bItemName]);

			else format(string, sizeof(string), "%s%s (%d)\n", string, BackpackItems[i][bItemName], BackpackItems[i][bItemQuantity]);

			BackpackListed[playerid][count++] = i;
		}
		Dialog_Show(playerid, Backpack, DIALOG_STYLE_LIST, "Sac à dos", string, "Ok", "X");
	}
	return 1;
}

stock Backpack_GetItems(id)
{
	new count;

	for (new i = 0; i != MAX_BACKPACK_ITEMS; i ++) if (BackpackItems[i][bItemExists] && BackpackItems[i][bItemBackpack] == id) {
		count++;
	}
	return count;
}

stock Backpack_GetFreeID()
{
	for (new i = 0; i != MAX_BACKPACKS; i ++) if (!BackpackData[i][backpackExists]) {
		return i;
	}
	return -1;
}

stock Backpack_Refresh(id)
{
	if (id != -1 && BackpackData[id][backpackExists])
	{
		if (IsValidDynamicObject(BackpackData[id][backpackObject]))
		DestroyDynamicObject(BackpackData[id][backpackObject]);

		if (IsValidDynamic3DTextLabel(BackpackData[id][backpackText3D]))
		DestroyDynamic3DTextLabel(BackpackData[id][backpackText3D]);

		if (!BackpackData[id][backpackPlayer]) {
			BackpackData[id][backpackObject] = CreateDynamicObject(3026, BackpackData[id][backpackPos][0], BackpackData[id][backpackPos][1], BackpackData[id][backpackPos][2] - 0.8, -90.0, 0.0, 0.0, BackpackData[id][backpackWorld], BackpackData[id][backpackInterior]);
			BackpackData[id][backpackText3D] = CreateDynamic3DTextLabel("Sac à dos\n{FFFFFF}Utilisez 'N' pour voir les items", COLOR_DEFAULT, BackpackData[id][backpackPos][0], BackpackData[id][backpackPos][1], BackpackData[id][backpackPos][2] - 0.8, 10.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, BackpackData[id][backpackWorld], BackpackData[id][backpackInterior]);
		}
	}
	return 1;
}

stock Backpack_GetItemID(id, name[])
{
	for (new i = 0; i != MAX_BACKPACK_ITEMS; i ++) if (BackpackItems[i][bItemExists] && BackpackItems[i][bItemBackpack] == id && !strcmp(BackpackItems[i][bItemName], name, true)) {
		return i;
	}
	return -1;
}

stock Backpack_GetFreeItem()
{
	for (new i = 0; i != MAX_BACKPACK_ITEMS; i ++) if (!BackpackItems[i][bItemExists]) {
		return i;
	}
	return -1;
}

stock Backpack_HasItem(id, name[])
{
	if (id != -1 && BackpackData[id][backpackExists])
	return Backpack_GetItemID(id, name) != -1;

	return 0;
}

stock Backpack_Count(id, name[])
{
	new itemid;

	if (id != -1 && BackpackData[id][backpackExists])
	{
		itemid = Backpack_GetItemID(id, name);

		if (itemid != -1)
		return BackpackItems[itemid][bItemQuantity];
	}
	return 0;
}

stock Backpack_Add(id, name[], model, quantity = 1)
{
	static
	query[128];

	if (id != -1 && BackpackData[id][backpackExists])
	{
		new itemid = Backpack_GetItemID(id, name);

		if (itemid != -1 && !IsWeaponItem(model))
		{
			format(query, sizeof(query), "UPDATE `backpackitems` SET `itemQuantity` = `itemQuantity` + %d WHERE `itemID` = '%d'", quantity, BackpackItems[itemid][bItemID]);
			mysql_function_query(g_iHandle, query, false, "", "");

			return BackpackItems[itemid][bItemQuantity] += quantity;
		}
		else if ((itemid = Backpack_GetFreeItem()) != -1)
		{
			format(BackpackItems[itemid][bItemName], 32, name);

			BackpackItems[itemid][bItemBackpack] = id;
			BackpackItems[itemid][bItemExists] = true;
			BackpackItems[itemid][bItemModel] = model;
			BackpackItems[itemid][bItemQuantity] = quantity;

			format(query, sizeof(query), "INSERT INTO `backpackitems` (`ID`, `itemName`, `itemModel`, `itemQuantity`) VALUES('%d', '%s', '%d', '%d')", BackpackData[id][backpackID], name, model, quantity);
			mysql_function_query(g_iHandle, query, false, "OnBackpackAdd", "dd", id, itemid);

			return 1;
		}
	}
	return 0;
}

stock Backpack_Remove(id, name[], quantity = 1)
{
	static
	query[128];

	if (id != -1 && BackpackData[id][backpackExists])
	{
		new itemid = Backpack_GetItemID(id, name);

		if (itemid != -1)
		{
			if (BackpackItems[itemid][bItemQuantity] > 0)
			{
				BackpackItems[itemid][bItemQuantity] -= quantity;
			}
			if (BackpackItems[itemid][bItemQuantity] < 1)
			{
				format(query, sizeof(query), "DELETE FROM `backpackitems` WHERE `itemID` = '%d'", BackpackItems[itemid][bItemID]);
				mysql_function_query(g_iHandle, query, false, "", "");

				BackpackItems[itemid][bItemBackpack] = -1;
				BackpackItems[itemid][bItemExists] = false;
				BackpackItems[itemid][bItemModel] = 0;
				BackpackItems[itemid][bItemQuantity] = 0;
			}
			else
			{
				format(query, sizeof(query), "UPDATE `backpackitems` SET `itemQuantity` = `itemQuantity` - %d WHERE `itemID` = '%d'", quantity, BackpackItems[itemid][bItemID]);
				mysql_function_query(g_iHandle, query, false, "", "");
			}
			return 1;
		}
	}
	return 0;
}

stock GetHouseBackpack(houseid)
{
	for (new i = 0; i != MAX_BACKPACKS; i ++) if (BackpackData[i][backpackExists] && BackpackData[i][backpackHouse] == HouseData[houseid][houseID]) {
		return i;
	}
	return -1;
}

stock GetVehicleBackpack(carid)
{
	for (new i = 0; i != MAX_BACKPACKS; i ++) if (BackpackData[i][backpackExists] && BackpackData[i][backpackVehicle] == CarData[carid][carID]) {
		return i;
	}
	return -1;
}

stock GetPlayerBackpack(playerid)
{
	for (new i = 0; i != MAX_BACKPACKS; i ++) if (BackpackData[i][backpackExists] && BackpackData[i][backpackPlayer] == PlayerData[playerid][pID]) {
		return i;
	}
	return -1;
}

Backpack_Nearest(playerid)
{
	for (new i = 0; i != MAX_BACKPACKS; i ++) if (BackpackData[i][backpackExists] && !BackpackData[i][backpackPlayer] && IsPlayerInRangeOfPoint(playerid, 2.0, BackpackData[i][backpackPos][0], BackpackData[i][backpackPos][1], BackpackData[i][backpackPos][2]))
	{
		return i;
	}
	return -1;
}


stock Backpack_Create(playerid)
{
	new id = Backpack_GetFreeID();

	if (id != -1)
	{
		BackpackData[id][backpackExists] = true;
		BackpackData[id][backpackPlayer] = PlayerData[playerid][pID];
		BackpackData[id][backpackHouse] = 0;
		BackpackData[id][backpackVehicle] = 0;
		BackpackData[id][backpackPos][0] = 0.0;
		BackpackData[id][backpackPos][1] = 0.0;
		BackpackData[id][backpackPos][2] = 0.0;

		mysql_function_query(g_iHandle, "INSERT INTO `backpacks` (`backpackInterior`) VALUES(0)", false, "OnBackpackCreated", "d", id);
		return id;
	}
	return -1;
}

stock Backpack_Delete(id)
{
	if (id != -1 && BackpackData[id][backpackExists])
	{
		static
		str[64];

		format(str, sizeof(str), "DELETE FROM `backpacks` WHERE `backpackID` = '%d'", BackpackData[id][backpackID]);
		mysql_function_query(g_iHandle, str, false, "", "");
		
		if (IsValidDynamicObject(BackpackData[id][backpackObject]))
		DestroyDynamicObject(BackpackData[id][backpackObject]);

		if (IsValidDynamic3DTextLabel(BackpackData[id][backpackText3D]))
		DestroyDynamic3DTextLabel(BackpackData[id][backpackText3D]);

		BackpackData[id][backpackExists] = false;
		BackpackData[id][backpackID] = 0;
		BackpackData[id][backpackPlayer] = 0;
		BackpackData[id][backpackHouse] = 0;
		BackpackData[id][backpackVehicle] = 0;
	}
	return 1;
}

stock Backpack_Save(id)
{
	static
	query[256];

	format(query, sizeof(query), "UPDATE `backpacks` SET `backpackPlayer` = '%d', `backpackHouse` = '%d', `backpackVehicle` = '%d', `backpackX` = '%.4f', `backpackY` = '%.4f', `backpackZ` = '%.4f', `backpackInterior` = '%d', `backpackWorld` = '%d' WHERE `backpackID` = '%d'",
	BackpackData[id][backpackPlayer],
	BackpackData[id][backpackHouse],
	BackpackData[id][backpackVehicle],
	BackpackData[id][backpackPos][0],
	BackpackData[id][backpackPos][1],
	BackpackData[id][backpackPos][2],
	BackpackData[id][backpackInterior],
	BackpackData[id][backpackWorld],
	BackpackData[id][backpackID]
	);
	return mysql_function_query(g_iHandle, query, false, "", "");
}

stock IsValidObjectModel(modelid)
{
	if (modelid < 0 || modelid > 20000)
	return 0;

	switch (modelid)
	{
		case 18632..18645, 18646..18658, 18659..18667, 18668..19299, 19301..19515, 18631, 331, 333..339, 318..321, 325, 326, 341..344, 346..353, 355..370, 372:
			return 1;
	}
	static const g_arrModelData[] =
	{
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -128,
		-515899393, -134217729, -1, -1, 33554431, -1, -1, -1, -14337, -1, -33,
		127, 0, 0, 0, 0, 0, -8388608, -1, -1, -1, -16385, -1, -1, -1, -1, -1,
		-1, -1, -33, -1, -771751937, -1, -9, -1, -1, -1, -1, -1, -1, -1, -1, -1,
		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
		-1, -1, -1, -1, -1, -1, -1, -1, 33554431, -25, -1, -1, -1, -1, -1, -1,
		-1073676289, -2147483648, 34079999, 2113536, -4825600, -5, -1, -3145729,
		-1, -16777217, -63, -1, -1, -1, -1, -201326593, -1, -1, -1, -1, -1,
		-257, -1, 1073741823, -133122, -1, -1, -65, -1, -1, -1, -1, -1, -1,
		-2146435073, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1073741823, -64, -1,
		-1, -1, -1, -2635777, 134086663, 0, -64, -1, -1, -1, -1, -1, -1, -1,
		-536870927, -131069, -1, -1, -1, -1, -1, -1, -1, -1, -16384, -1,
		-33554433, -1, -1, -1, -1, -1, -1610612737, 524285, -128, -1,
		2080309247, -1, -1, -1114113, -1, -1, -1, 66977343, -524288, -1, -1, -1,
		-1, -2031617, -1, 114687, -256, -1, -4097, -1, -4097, -1, -1,
		1010827263, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -32768, -1, -1, -1, -1, -1,
		2147483647, -33554434, -1, -1, -49153, -1148191169, 2147483647,
		-100781080, -262145, -57, 134217727, -8388608, -1, -1, -1, -1, -1, -1,
		-1, -1, -1, -1, -1, -1, -1, -1, -1048577, -1, -449, -1017, -1, -1, -1,
		-1, -1, -1, -1, -1, -1, -1, -1, -1835009, -2049, -1, -1, -1, -1, -1, -1,
		-8193, -1, -536870913, -1, -1, -1, -1, -1, -87041, -1, -1, -1, -1, -1,
		-1, -209860, -1023, -8388609, -2096897, -1, -1048577, -1, -1, -1, -1,
		-1, -1, -897, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1610612737,
		-3073, -28673, -1, -1, -1, -1537, -1, -1, -13, -1, -1, -1, -1, -1985,
		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1056964609, -1, -1, -1,
		-1, -1, -1, -1, -2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
		-236716037, -1, -1, -1, -1, -1, -1, -1, -536870913, 3, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
		-1, -1, -1, -1, -1, -2097153, -2109441, -1, 201326591, -4194304, -1, -1,
		-241, -1, -1, -1, -1, -1, -1, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, -32768, -1, -1, -1, -2, -671096835, -1, -8388609, -66323585, -13,
		-1793, -32257, -247809, -1, -1, -513, 16252911, 0, 0, 0, -131072,
		33554383, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 8356095, 0, 0, 0, 0, 0,
		0, -256, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
		-268435449, -1, -1, -2049, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
		92274627, -65536, -2097153, -268435457, 591191935, 1, 0, -16777216, -1,
		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 127
	};
	return ((modelid >= 0) && ((modelid / 32) < sizeof(g_arrModelData)) && (g_arrModelData[modelid / 32] & (1 << (modelid % 32))));
}

forward CloseGate(gateid, linkid, Float:fX, Float:fY, Float:fZ, Float:speed, Float:fRotX, Float:fRotY, Float:fRotZ);
public CloseGate(gateid, linkid, Float:fX, Float:fY, Float:fZ, Float:speed, Float:fRotX, Float:fRotY, Float:fRotZ)
{
	new id = -1;

	if (GateData[gateid][gateExists] && GateData[gateid][gateOpened])
	{
		MoveDynamicObject(GateData[gateid][gateObject], fX, fY, fZ, speed, fRotX, fRotY, fRotZ);

		if ((id = GetGateByID(linkid)) != -1)
		MoveDynamicObject(GateData[id][gateObject], GateData[id][gatePos][0], GateData[id][gatePos][1], GateData[id][gatePos][2], speed, GateData[id][gatePos][3], GateData[id][gatePos][4], GateData[id][gatePos][5]);

		GateData[id][gateOpened] = 0;
		return 1;
	}
	return 0;
}

stock Gate_Operate(gateid)
{
	if (gateid != -1 && GateData[gateid][gateExists])
	{
		new id = -1;

		if (!GateData[gateid][gateOpened])
		{
			GateData[gateid][gateOpened] = true;
			MoveDynamicObject(GateData[gateid][gateObject], GateData[gateid][gateMove][0], GateData[gateid][gateMove][1], GateData[gateid][gateMove][2], GateData[gateid][gateSpeed], GateData[gateid][gateMove][3], GateData[gateid][gateMove][4], GateData[gateid][gateMove][5]);

			if (GateData[gateid][gateTime] > 0) {
				GateData[gateid][gateTimer] = SetTimerEx("CloseGate", GateData[gateid][gateTime], false, "ddfffffff", gateid, GateData[gateid][gateLinkID], GateData[gateid][gatePos][0], GateData[gateid][gatePos][1], GateData[gateid][gatePos][2], GateData[gateid][gateSpeed], GateData[gateid][gatePos][3], GateData[gateid][gatePos][4], GateData[gateid][gatePos][5]);
			}
			if (GateData[gateid][gateLinkID] != -1 && (id = GetGateByID(GateData[gateid][gateLinkID])) != -1)
			{
				GateData[id][gateOpened] = true;
				MoveDynamicObject(GateData[id][gateObject], GateData[id][gateMove][0], GateData[id][gateMove][1], GateData[id][gateMove][2], GateData[id][gateSpeed], GateData[id][gateMove][3], GateData[id][gateMove][4], GateData[id][gateMove][5]);
			}
		}
		else if (GateData[gateid][gateOpened])
		{
			GateData[gateid][gateOpened] = false;
			MoveDynamicObject(GateData[gateid][gateObject], GateData[gateid][gatePos][0], GateData[gateid][gatePos][1], GateData[gateid][gatePos][2], GateData[gateid][gateSpeed], GateData[gateid][gatePos][3], GateData[gateid][gatePos][4], GateData[gateid][gatePos][5]);

			if (GateData[gateid][gateTime] > 0) {
				KillTimer(GateData[gateid][gateTimer]);
			}
			if (GateData[gateid][gateLinkID] != -1 && (id = GetGateByID(GateData[gateid][gateLinkID])) != -1)
			{
				GateData[id][gateOpened] = false;
				MoveDynamicObject(GateData[id][gateObject], GateData[id][gatePos][0], GateData[id][gatePos][1], GateData[id][gatePos][2], GateData[id][gateSpeed], GateData[id][gatePos][3], GateData[id][gatePos][4], GateData[id][gatePos][5]);
			}
		}
	}
	return 1;
}

stock Gate_Create(playerid)
{
	static
	Float:x,
	Float:y,
	Float:z,
	Float:angle;

	if (GetPlayerPos(playerid, x, y, z) && GetPlayerFacingAngle(playerid, angle))
	{
		for (new i = 0; i < MAX_GATES; i ++) if (!GateData[i][gateExists])
		{
			GateData[i][gateExists] = true;
			GateData[i][gateModel] = 980;
			GateData[i][gateHouseID] = -1;
			GateData[i][gateSpeed] = 3.0;
			GateData[i][gateRadius] = 5.0;
			GateData[i][gateOpened] = 0;
			GateData[i][gateTime] = 0;

			GateData[i][gatePos][0] = x + (3.0 * floatsin(-angle, degrees));
			GateData[i][gatePos][1] = y + (3.0 * floatcos(-angle, degrees));
			GateData[i][gatePos][2] = z;
			GateData[i][gatePos][3] = 0.0;
			GateData[i][gatePos][4] = 0.0;
			GateData[i][gatePos][5] = angle;

			GateData[i][gateMove][0] = x + (3.0 * floatsin(-angle, degrees));
			GateData[i][gateMove][1] = y + (3.0 * floatcos(-angle, degrees));
			GateData[i][gateMove][2] = z - 10.0;
			GateData[i][gateMove][3] = -1000.0;
			GateData[i][gateMove][4] = -1000.0;
			GateData[i][gateMove][5] = -1000.0;

			GateData[i][gateInterior] = GetPlayerInterior(playerid);
			GateData[i][gateWorld] = GetPlayerVirtualWorld(playerid);

			GateData[i][gateLinkID] = -1;
			GateData[i][gateFaction] = -1;
			GateData[i][gateJob] = -1;

			GateData[i][gatePass][0] = '\0';
			GateData[i][gateObject] = CreateDynamicObject(GateData[i][gateModel], GateData[i][gatePos][0], GateData[i][gatePos][1], GateData[i][gatePos][2], GateData[i][gatePos][3], GateData[i][gatePos][4], GateData[i][gatePos][5], GateData[i][gateWorld], GateData[i][gateInterior]);

			mysql_function_query(g_iHandle, "INSERT INTO `gates` (`gateModel`) VALUES(980)", false, "OnGateCreated", "d", i);
			return i;
		}
	}
	return -1;
}

stock Gate_Delete(gateid)
{
	if (gateid != -1 && GateData[gateid][gateExists])
	{
		static
		query[64];

		format(query, sizeof(query), "DELETE FROM `gates` WHERE `gateID` = '%d'", GateData[gateid][gateID]);
		mysql_function_query(g_iHandle, query, false, "", "");

		if (IsValidDynamicObject(GateData[gateid][gateObject]))
		DestroyDynamicObject(GateData[gateid][gateObject]);

		for (new i = 0; i != MAX_GATES; i ++) if (GateData[i][gateExists] && GateData[i][gateLinkID] == GateData[gateid][gateID]) {
			GateData[i][gateLinkID] = -1;
			Gate_Save(i);
		}
		if (GateData[gateid][gateOpened] && GateData[gateid][gateTime] > 0) {
			KillTimer(GateData[gateid][gateTimer]);
		}
		GateData[gateid][gateExists] = false;
		GateData[gateid][gateID] = 0;
		GateData[gateid][gateOpened] = 0;
	}
	return 1;
}

stock Gate_Save(gateid)
{
	static
	query[850];

	format(query, sizeof(query), "UPDATE `gates` SET `gateModel` = '%d', `gateSpeed` = '%.4f', `gateHouseID` = '%d', `gateRadius` = '%.4f', `gateTime` = '%d', `gateX` = '%.4f', `gateY` = '%.4f', `gateZ` = '%.4f', `gateRX` = '%.4f', `gateRY` = '%.4f', `gateRZ` = '%.4f' WHERE `gateID` = '%d'",
	GateData[gateid][gateModel],
	GateData[gateid][gateSpeed],
	GateData[gateid][gateHouseID],
	GateData[gateid][gateRadius],
	GateData[gateid][gateTime],
	GateData[gateid][gatePos][0],
	GateData[gateid][gatePos][1],
	GateData[gateid][gatePos][2],
	GateData[gateid][gatePos][3],
	GateData[gateid][gatePos][4],
	GateData[gateid][gatePos][5],
	GateData[gateid][gateID]
	);
	mysql_function_query(g_iHandle, query, false, "", "");

	format(query, sizeof(query), "UPDATE `gates` SET `gateInterior` = '%d', `gateWorld` = '%d', `gateMoveX` = '%.4f', `gateMoveY` = '%.4f', `gateMoveZ` = '%.4f', `gateMoveRX` = '%.4f', `gateMoveRY` = '%.4f', `gateMoveRZ` = '%.4f', `gateLinkID` = '%d', `gateFaction` = '%d', `gateJob` = '%d', `gatePass` = '%s' WHERE `gateID` = '%d'",
	GateData[gateid][gateInterior],
	GateData[gateid][gateWorld],
	GateData[gateid][gateMove][0],
	GateData[gateid][gateMove][1],
	GateData[gateid][gateMove][2],
	GateData[gateid][gateMove][3],
	GateData[gateid][gateMove][4],
	GateData[gateid][gateMove][5],
	GateData[gateid][gateLinkID],
	GateData[gateid][gateFaction],
	GateData[gateid][gateJob],
	SQL_ReturnEscaped(GateData[gateid][gatePass]),
	GateData[gateid][gateID]
	);
	return mysql_function_query(g_iHandle, query, false, "", "");
}

stock Tax_Percent(price)
{
	return floatround((float(price) / 100) * 85);
}

stock Tax_AddMoney(amount)
{
	g_TaxVault = g_TaxVault + amount;

	Server_Save();

	return 0;
}

stock Tax_AddPercent(price)
{
	new money = (price - Tax_Percent(price));

	g_TaxVault = g_TaxVault + money;

	Server_Save();
	return 1;
}

stock file_parse_int(File:handle, const field[])
{
	static
	str[16];

	return (file_parse(handle, field, str), strval(str));
}

stock file_parse(File:handle, const field[], dest[], size = sizeof(dest))
{
	if (!handle)
	return 0;

	new
	str[128],
	pos = strlen(field);

	fseek(handle, 0, seek_start);

	while (fread(handle, str)) if (strfind(str, field, true) == 0 && (str[pos] == '=' || str[pos] == ' '))
	{
		strmid(dest, str, (str[pos] == '=') ? (pos + 1) : (pos + 3), strlen(str), size);

		if ((pos = strfind(dest, "\r")) != -1)
		dest[pos] = '\0';
		else if ((pos = strfind(dest, "\n")) != -1)
		dest[pos] = '\0';

		return 1;
	}
	return 0;
}

cache_get_field_int(row, const field_name[])
{
	static
	str[12];

	cache_get_field_content(row, field_name, str, g_iHandle);
	return strval(str);
}

Ticket_Add(suspectid, price, reason[])
{
	static
	string[160];

	for (new i = 0; i != MAX_PLAYER_TICKETS; i ++) if (!TicketData[suspectid][i][ticketExists])
	{
		TicketData[suspectid][i][ticketExists] = true;
		TicketData[suspectid][i][ticketFee] = price;

		format(TicketData[suspectid][i][ticketDate], 36, ReturnDate());
		format(TicketData[suspectid][i][ticketReason], 64, reason);

		format(string, sizeof(string), "INSERT INTO `tickets` (`ID`, `ticketFee`, `ticketDate`, `ticketReason`) VALUES('%d', '%d', '%s', '%s')", PlayerData[suspectid][pID], price, TicketData[suspectid][i][ticketDate], SQL_ReturnEscaped(reason));
		mysql_function_query(g_iHandle, string, false, "OnTicketCreated", "dd", suspectid, i);

		return i;
	}
	return -1;
}

Ticket_Remove(playerid, ticketid)
{
	if (ticketid != -1 && TicketData[playerid][ticketid][ticketExists])
	{
		static
		string[90];

		format(string, sizeof(string), "DELETE FROM `tickets` WHERE `ID` = '%d' AND `ticketID` = '%d'", PlayerData[playerid][pID], TicketData[playerid][ticketid][ticketID]);
		mysql_function_query(g_iHandle, string, false, "", "");

		TicketData[playerid][ticketid][ticketExists] = false;
		TicketData[playerid][ticketid][ticketID] = 0;
		TicketData[playerid][ticketid][ticketFee] = 0;
	}
	return 1;
}

Waypoint_Set(playerid, name[], Float:x, Float:y, Float:z, Float:radius = 3.0)
{
	format(PlayerData[playerid][pLocation], 32, name);

	PlayerData[playerid][pWaypoint] = 1;
	PlayerData[playerid][pWaypointPos][0] = x;
	PlayerData[playerid][pWaypointPos][1] = y;
	PlayerData[playerid][pWaypointPos][2] = z;

	SetPlayerCheckpoint(playerid, x, y, z, radius);
	PlayerTextDrawShow(playerid, PlayerData[playerid][pTextdraws][69]);

	return 1;
}

Location_Add(playerid, name[], Float:x, Float:y, Float:z)
{
	static
	query[192];

	for (new i = 0; i != MAX_GPS_LOCATIONS; i ++) if (!LocationData[playerid][i][locationExists])
	{
		LocationData[playerid][i][locationExists] = true;
		format(LocationData[playerid][i][locationName], 32, name);

		LocationData[playerid][i][locationPos][0] = x;
		LocationData[playerid][i][locationPos][1] = y;
		LocationData[playerid][i][locationPos][2] = z;

		format(query, sizeof(query), "INSERT INTO `gps` (`ID`, `locationName`, `locationX`, `locationY`, `locationZ`) VALUES('%d', '%s', '%.4f', '%.4f', '%.4f')", PlayerData[playerid][pID], SQL_ReturnEscaped(name), x, y, z);
		mysql_function_query(g_iHandle, query, false, "OnLocationCreated", "dd", playerid, i);

		return i;
	}
	return -1;
}

Location_GetID(playerid, name[])
{
	for (new i = 0; i != MAX_GPS_LOCATIONS; i ++) if (LocationData[playerid][i][locationExists] && !strcmp(LocationData[playerid][i][locationName], name, true)) {
		return i;
	}
	return -1;
}

Location_Delete(playerid, name[])
{
	static
	query[96];

	for (new i = 0; i != MAX_GPS_LOCATIONS; i ++) if (LocationData[playerid][i][locationExists] && !strcmp(LocationData[playerid][i][locationName], name))
	{
		LocationData[playerid][i][locationExists] = false;

		LocationData[playerid][i][locationPos][0] = 0.0;
		LocationData[playerid][i][locationPos][1] = 0.0;
		LocationData[playerid][i][locationPos][2] = 0.0;

		format(query, sizeof(query), "DELETE FROM `gps` WHERE `ID` = '%d' AND `locationID` = '%d'", PlayerData[playerid][pID], LocationData[playerid][i][locationID]);
		mysql_function_query(g_iHandle, query, false, "", "");
		return 1;
	}
	return 0;
}

stock SetPlayerPosEx(playerid, Float:x, Float:y, Float:z, time = 2000)
{
	if (PlayerData[playerid][pFreeze])
	{
		KillTimer(PlayerData[playerid][pFreezeTimer]);

		PlayerData[playerid][pFreeze] = 0;
		TogglePlayerControllable(playerid, 1);
	}
	SetPlayerPos(playerid, x, y, z + 0.5);
	TogglePlayerControllable(playerid, 0);

	PlayerData[playerid][pFreeze] = 1;
	PlayerData[playerid][pFreezeTimer] = SetTimerEx("SetPlayerToUnfreeze", time, false, "dfff", playerid, x, y, z);
	return 1;
}

forward SetPlayerToUnfreeze(playerid, Float:x, Float:y, Float:z);
public SetPlayerToUnfreeze(playerid, Float:x, Float:y, Float:z)
{
	if (!IsPlayerInRangeOfPoint(playerid, 15.0, x, y, z))
	return 0;

	PlayerData[playerid][pFreeze] = 0;

	SetPlayerPos(playerid, x, y, z);
	TogglePlayerControllable(playerid, 1);
	return 1;
}

forward RefillUpdate(playerid, vehicleid);
public RefillUpdate(playerid, vehicleid)
{
	if (!PlayerData[playerid][pFuelCan] || GetNearestVehicle(playerid) != vehicleid)
	return 0;

	CoreVehicles[vehicleid][vehFuel] = (CoreVehicles[vehicleid][vehFuel] + 15 >= 100) ? (100) : (CoreVehicles[vehicleid][vehFuel] + 15);

	PlayerData[playerid][pFuelCan] = 0;
	SendClientMessageEx(playerid, COLOR_INFO, "Vous avez rempli votre véhicule avec un Jerrican.");
	return 1;
}

stock SetPlayerInPrison(playerid)
{
	new idx = random(sizeof(g_arrPrisonSpawns));

	SetPlayerPosEx(playerid, g_arrPrisonSpawns[idx][0], g_arrPrisonSpawns[idx][1], g_arrPrisonSpawns[idx][2] + 0.3);
	SetPlayerFacingAngle(playerid, g_arrPrisonSpawns[idx][3]);

	SetPlayerInterior(playerid, 0);

	#define 	PRISON_WORLD    	(7003)
	#define 	PRISON_INTERIOR    	(3)
	SetPlayerVirtualWorld(playerid, PRISON_WORLD);
	SetPlayerInterior(playerid, PRISON_INTERIOR);

	SetCameraBehindPlayer(playerid);
}
stock ViewInfo(playerid, id)
{
	new
		Float:pos[3];

	SendClientMessage(playerid, -1, " ");
	SendClientMessage(playerid, -1, " ");
	
	SendClientMessageEx(playerid, COLOR_INFO, "FICHE DE RENSEIGNEMENT: %s", ReturnName(id));
	
	SendClientMessage(playerid, -1, " ");

	SendClientMessageEx(playerid, COLOR_DEFAULT, "Sexe:{FFFFFF} %s", (PlayerData[id][pGender] == 2) ? ("Femme") : ("Homme"));
	SendClientMessageEx(playerid, COLOR_DEFAULT, "Date de naissance:{FFFFFF} %s", PlayerData[id][pBirthdate]);
	SendClientMessageEx(playerid, COLOR_DEFAULT, "Origine:{FFFFFF} %s", PlayerData[id][pOrigin]);
	SendClientMessageEx(playerid, COLOR_DEFAULT, "Numéro:{FFFFFF} %d", PlayerData[id][pPhone]);
	SendClientMessageEx(playerid, COLOR_DEFAULT, "Emploi:{FFFFFF} %d", Job_GetName(PlayerData[id][pJob]));

	for (new k = 0; k < MAX_BUSINESSES; k ++) if (Business_GetCount(id) && Business_IsOwner(id,k)) {
		SendClientMessageEx(playerid, COLOR_DEFAULT, "Propriétaire du bizness %s à %s", BusinessData[k][bizName], GetLocation(BusinessData[k][bizPos][0], BusinessData[k][bizPos][1], BusinessData[k][bizPos][2]));
	}

	for (new i = 0; i < MAX_DYNAMIC_CARS; i ++) if (Car_IsOwner(id, i)) {
		GetVehiclePos(CarData[i][carVehicle], pos[0], pos[1], pos[2]);
		SendClientMessageEx(playerid, COLOR_DEFAULT, "Propriétaire d'une voiture %s à %s", ReturnVehicleModelName(CarData[i][carModel]), GetLocation(pos[0], pos[1], pos[2]));
	}
	
	for (new i = 0; i < MAX_HOUSES; i ++)
	{
		if (House_IsOwner(id, i))
		{
			SendClientMessageEx(playerid, COLOR_DEFAULT, "Propriétaire de la maison à %s (%s)", HouseData[i][houseAddress], GetLocation(HouseData[i][housePos][0], HouseData[i][housePos][1], HouseData[i][housePos][2]));
		}

		if (PlayerData[id][pLocat] != -1)
		{
			if(PlayerData[id][pLocat] == i)
				SendClientMessageEx(playerid, COLOR_DEFAULT, "Locataire de la maison à %s (%s)", HouseData[i][houseAddress], GetLocation(HouseData[i][housePos][0], HouseData[i][housePos][1], HouseData[i][housePos][2]));
		}
	}
	return 1;
}
stock ViewCharges(playerid, name[])
{
	static
	string[128];

	format(string, sizeof(string), "SELECT * FROM `warrants` WHERE `Suspect` = '%s' ORDER BY `ID` DESC", SQL_ReturnEscaped(name));
	mysql_function_query(g_iHandle, string, true, "OnViewCharges", "ds", playerid, name);
	return 1;
}

stock AddWarrant(targetid, playerid, const description[])
{
	static
	string[255];

	format(string, sizeof(string), "INSERT INTO `warrants` (`Suspect`, `Username`, `Date`, `Description`) VALUES('%s', '%s', '%s', '%s')", ReturnName(targetid), ReturnName(playerid), ReturnDate(), SQL_ReturnEscaped(description));
	mysql_function_query(g_iHandle, string, false, "", "");
}

stock GetPlayerLocationEx(playerid, &Float:fX, &Float:fY, &Float:fZ)
{
	static
	id = -1;

	if ((id = House_Inside(playerid)) != -1)
	{
		fX = HouseData[id][housePos][0];
		fY = HouseData[id][housePos][1];
		fZ = HouseData[id][housePos][2];
	}
	else if ((id = Business_Inside(playerid)) != -1)
	{
		fX = BusinessData[id][bizPos][0];
		fY = BusinessData[id][bizPos][1];
		fZ = BusinessData[id][bizPos][2];
	}
	else if ((id = Entrance_Inside(playerid)) != -1)
	{
		fX = EntranceData[id][entrancePos][0];
		fY = EntranceData[id][entrancePos][1];
		fZ = EntranceData[id][entrancePos][2];
	}
	else GetPlayerPos(playerid, fX, fY, fZ);
	return 1;
}

stock GetPlayerLocation(playerid)
{
	static
	Float:fX,
	Float:fY,
	Float:fZ,
	string[32],
	id = -1;

	if ((id = House_Inside(playerid)) != -1)
	{
		fX = HouseData[id][housePos][0];
		fY = HouseData[id][housePos][1];
		fZ = HouseData[id][housePos][2];
	}
	else if ((id = Business_Inside(playerid)) != -1)
	{
		fX = BusinessData[id][bizPos][0];
		fY = BusinessData[id][bizPos][1];
		fZ = BusinessData[id][bizPos][2];
	}
	else if ((id = Entrance_Inside(playerid)) != -1)
	{
		fX = EntranceData[id][entrancePos][0];
		fY = EntranceData[id][entrancePos][1];
		fZ = EntranceData[id][entrancePos][2];
	}
	else GetPlayerPos(playerid, fX, fY, fZ);

	format(string, 32, GetLocation(fX, fY, fZ));
	return string;
}

stock GetLocation(Float:fX, Float:fY, Float:fZ)
{
	enum e_ZoneData
	{
		e_ZoneName[32 char],
		Float:e_ZoneArea[6]
	};
	static const g_arrZoneData[][e_ZoneData] =
	{
		{!"The Big Ear", 	              {-410.00, 1403.30, -3.00, -137.90, 1681.20, 200.00}},
		{!"Aldea Malvada",                {-1372.10, 2498.50, 0.00, -1277.50, 2615.30, 200.00}},
		{!"Angel Pine",                   {-2324.90, -2584.20, -6.10, -1964.20, -2212.10, 200.00}},
		{!"Arco del Oeste",               {-901.10, 2221.80, 0.00, -592.00, 2571.90, 200.00}},
		{!"Avispa Country Club",          {-2646.40, -355.40, 0.00, -2270.00, -222.50, 200.00}},
		{!"Avispa Country Club",          {-2831.80, -430.20, -6.10, -2646.40, -222.50, 200.00}},
		{!"Avispa Country Club",          {-2361.50, -417.10, 0.00, -2270.00, -355.40, 200.00}},
		{!"Avispa Country Club",          {-2667.80, -302.10, -28.80, -2646.40, -262.30, 71.10}},
		{!"Avispa Country Club",          {-2470.00, -355.40, 0.00, -2270.00, -318.40, 46.10}},
		{!"Avispa Country Club",          {-2550.00, -355.40, 0.00, -2470.00, -318.40, 39.70}},
		{!"Back o Beyond",                {-1166.90, -2641.10, 0.00, -321.70, -1856.00, 200.00}},
		{!"Battery Point",                {-2741.00, 1268.40, -4.50, -2533.00, 1490.40, 200.00}},
		{!"Bayside",                      {-2741.00, 2175.10, 0.00, -2353.10, 2722.70, 200.00}},
		{!"Bayside Marina",               {-2353.10, 2275.70, 0.00, -2153.10, 2475.70, 200.00}},
		{!"Beacon Hill",                  {-399.60, -1075.50, -1.40, -319.00, -977.50, 198.50}},
		{!"Blackfield",                   {964.30, 1203.20, -89.00, 1197.30, 1403.20, 110.90}},
		{!"Blackfield",                   {964.30, 1403.20, -89.00, 1197.30, 1726.20, 110.90}},
		{!"Blackfield Chapel",            {1375.60, 596.30, -89.00, 1558.00, 823.20, 110.90}},
		{!"Blackfield Chapel",            {1325.60, 596.30, -89.00, 1375.60, 795.00, 110.90}},
		{!"Blackfield Intersection",      {1197.30, 1044.60, -89.00, 1277.00, 1163.30, 110.90}},
		{!"Blackfield Intersection",      {1166.50, 795.00, -89.00, 1375.60, 1044.60, 110.90}},
		{!"Blackfield Intersection",      {1277.00, 1044.60, -89.00, 1315.30, 1087.60, 110.90}},
		{!"Blackfield Intersection",      {1375.60, 823.20, -89.00, 1457.30, 919.40, 110.90}},
		{!"Blueberry",                    {104.50, -220.10, 2.30, 349.60, 152.20, 200.00}},
		{!"Blueberry",                    {19.60, -404.10, 3.80, 349.60, -220.10, 200.00}},
		{!"Blueberry Acres",              {-319.60, -220.10, 0.00, 104.50, 293.30, 200.00}},
		{!"Caligula's Palace",            {2087.30, 1543.20, -89.00, 2437.30, 1703.20, 110.90}},
		{!"Caligula's Palace",            {2137.40, 1703.20, -89.00, 2437.30, 1783.20, 110.90}},
		{!"Calton Heights",               {-2274.10, 744.10, -6.10, -1982.30, 1358.90, 200.00}},
		{!"Chinatown",                    {-2274.10, 578.30, -7.60, -2078.60, 744.10, 200.00}},
		{!"City Hall",                    {-2867.80, 277.40, -9.10, -2593.40, 458.40, 200.00}},
		{!"Come-A-Lot",                   {2087.30, 943.20, -89.00, 2623.10, 1203.20, 110.90}},
		{!"Commerce",                     {1323.90, -1842.20, -89.00, 1701.90, -1722.20, 110.90}},
		{!"Commerce",                     {1323.90, -1722.20, -89.00, 1440.90, -1577.50, 110.90}},
		{!"Commerce",                     {1370.80, -1577.50, -89.00, 1463.90, -1384.90, 110.90}},
		{!"Commerce",                     {1463.90, -1577.50, -89.00, 1667.90, -1430.80, 110.90}},
		{!"Commerce",                     {1583.50, -1722.20, -89.00, 1758.90, -1577.50, 110.90}},
		{!"Commerce",                     {1667.90, -1577.50, -89.00, 1812.60, -1430.80, 110.90}},
		{!"Conference Center",            {1046.10, -1804.20, -89.00, 1323.90, -1722.20, 110.90}},
		{!"Conference Center",            {1073.20, -1842.20, -89.00, 1323.90, -1804.20, 110.90}},
		{!"Cranberry Station",            {-2007.80, 56.30, 0.00, -1922.00, 224.70, 100.00}},
		{!"Creek",                        {2749.90, 1937.20, -89.00, 2921.60, 2669.70, 110.90}},
		{!"Dillimore",                    {580.70, -674.80, -9.50, 861.00, -404.70, 200.00}},
		{!"Doherty",                      {-2270.00, -324.10, -0.00, -1794.90, -222.50, 200.00}},
		{!"Doherty",                      {-2173.00, -222.50, -0.00, -1794.90, 265.20, 200.00}},
		{!"Downtown",                     {-1982.30, 744.10, -6.10, -1871.70, 1274.20, 200.00}},
		{!"Downtown",                     {-1871.70, 1176.40, -4.50, -1620.30, 1274.20, 200.00}},
		{!"Downtown",                     {-1700.00, 744.20, -6.10, -1580.00, 1176.50, 200.00}},
		{!"Downtown",                     {-1580.00, 744.20, -6.10, -1499.80, 1025.90, 200.00}},
		{!"Downtown",                     {-2078.60, 578.30, -7.60, -1499.80, 744.20, 200.00}},
		{!"Downtown",                     {-1993.20, 265.20, -9.10, -1794.90, 578.30, 200.00}},
		{!"Downtown Los Santos",          {1463.90, -1430.80, -89.00, 1724.70, -1290.80, 110.90}},
		{!"Downtown Los Santos",          {1724.70, -1430.80, -89.00, 1812.60, -1250.90, 110.90}},
		{!"Downtown Los Santos",          {1463.90, -1290.80, -89.00, 1724.70, -1150.80, 110.90}},
		{!"Downtown Los Santos",          {1370.80, -1384.90, -89.00, 1463.90, -1170.80, 110.90}},
		{!"Downtown Los Santos",          {1724.70, -1250.90, -89.00, 1812.60, -1150.80, 110.90}},
		{!"Downtown Los Santos",          {1370.80, -1170.80, -89.00, 1463.90, -1130.80, 110.90}},
		{!"Downtown Los Santos",          {1378.30, -1130.80, -89.00, 1463.90, -1026.30, 110.90}},
		{!"Downtown Los Santos",          {1391.00, -1026.30, -89.00, 1463.90, -926.90, 110.90}},
		{!"Downtown Los Santos",          {1507.50, -1385.20, 110.90, 1582.50, -1325.30, 335.90}},
		{!"East Beach",                   {2632.80, -1852.80, -89.00, 2959.30, -1668.10, 110.90}},
		{!"East Beach",                   {2632.80, -1668.10, -89.00, 2747.70, -1393.40, 110.90}},
		{!"East Beach",                   {2747.70, -1668.10, -89.00, 2959.30, -1498.60, 110.90}},
		{!"East Beach",                   {2747.70, -1498.60, -89.00, 2959.30, -1120.00, 110.90}},
		{!"East Los Santos",              {2421.00, -1628.50, -89.00, 2632.80, -1454.30, 110.90}},
		{!"East Los Santos",              {2222.50, -1628.50, -89.00, 2421.00, -1494.00, 110.90}},
		{!"East Los Santos",              {2266.20, -1494.00, -89.00, 2381.60, -1372.00, 110.90}},
		{!"East Los Santos",              {2381.60, -1494.00, -89.00, 2421.00, -1454.30, 110.90}},
		{!"East Los Santos",              {2281.40, -1372.00, -89.00, 2381.60, -1135.00, 110.90}},
		{!"East Los Santos",              {2381.60, -1454.30, -89.00, 2462.10, -1135.00, 110.90}},
		{!"East Los Santos",              {2462.10, -1454.30, -89.00, 2581.70, -1135.00, 110.90}},
		{!"Easter Basin",                 {-1794.90, 249.90, -9.10, -1242.90, 578.30, 200.00}},
		{!"Easter Basin",                 {-1794.90, -50.00, -0.00, -1499.80, 249.90, 200.00}},
		{!"Easter Bay Airport",           {-1499.80, -50.00, -0.00, -1242.90, 249.90, 200.00}},
		{!"Easter Bay Airport",           {-1794.90, -730.10, -3.00, -1213.90, -50.00, 200.00}},
		{!"Easter Bay Airport",           {-1213.90, -730.10, 0.00, -1132.80, -50.00, 200.00}},
		{!"Easter Bay Airport",           {-1242.90, -50.00, 0.00, -1213.90, 578.30, 200.00}},
		{!"Easter Bay Airport",           {-1213.90, -50.00, -4.50, -947.90, 578.30, 200.00}},
		{!"Easter Bay Airport",           {-1315.40, -405.30, 15.40, -1264.40, -209.50, 25.40}},
		{!"Easter Bay Airport",           {-1354.30, -287.30, 15.40, -1315.40, -209.50, 25.40}},
		{!"Easter Bay Airport",           {-1490.30, -209.50, 15.40, -1264.40, -148.30, 25.40}},
		{!"Easter Bay Chemicals",         {-1132.80, -768.00, 0.00, -956.40, -578.10, 200.00}},
		{!"Easter Bay Chemicals",         {-1132.80, -787.30, 0.00, -956.40, -768.00, 200.00}},
		{!"El Castillo del Diablo",       {-464.50, 2217.60, 0.00, -208.50, 2580.30, 200.00}},
		{!"El Castillo del Diablo",       {-208.50, 2123.00, -7.60, 114.00, 2337.10, 200.00}},
		{!"El Castillo del Diablo",       {-208.50, 2337.10, 0.00, 8.40, 2487.10, 200.00}},
		{!"El Corona",                    {1812.60, -2179.20, -89.00, 1970.60, -1852.80, 110.90}},
		{!"El Corona",                    {1692.60, -2179.20, -89.00, 1812.60, -1842.20, 110.90}},
		{!"El Quebrados",                 {-1645.20, 2498.50, 0.00, -1372.10, 2777.80, 200.00}},
		{!"Esplanade East",               {-1620.30, 1176.50, -4.50, -1580.00, 1274.20, 200.00}},
		{!"Esplanade East",               {-1580.00, 1025.90, -6.10, -1499.80, 1274.20, 200.00}},
		{!"Esplanade East",               {-1499.80, 578.30, -79.60, -1339.80, 1274.20, 20.30}},
		{!"Esplanade North",              {-2533.00, 1358.90, -4.50, -1996.60, 1501.20, 200.00}},
		{!"Esplanade North",              {-1996.60, 1358.90, -4.50, -1524.20, 1592.50, 200.00}},
		{!"Esplanade North",              {-1982.30, 1274.20, -4.50, -1524.20, 1358.90, 200.00}},
		{!"Fallen Tree",                  {-792.20, -698.50, -5.30, -452.40, -380.00, 200.00}},
		{!"Fallow Bridge",                {434.30, 366.50, 0.00, 603.00, 555.60, 200.00}},
		{!"Fern Ridge",                   {508.10, -139.20, 0.00, 1306.60, 119.50, 200.00}},
		{!"Financial",                    {-1871.70, 744.10, -6.10, -1701.30, 1176.40, 300.00}},
		{!"Fisher's Lagoon",              {1916.90, -233.30, -100.00, 2131.70, 13.80, 200.00}},
		{!"Flint Intersection",           {-187.70, -1596.70, -89.00, 17.00, -1276.60, 110.90}},
		{!"Flint Range",                  {-594.10, -1648.50, 0.00, -187.70, -1276.60, 200.00}},
		{!"Fort Carson",                  {-376.20, 826.30, -3.00, 123.70, 1220.40, 200.00}},
		{!"Foster Valley",                {-2270.00, -430.20, -0.00, -2178.60, -324.10, 200.00}},
		{!"Foster Valley",                {-2178.60, -599.80, -0.00, -1794.90, -324.10, 200.00}},
		{!"Foster Valley",                {-2178.60, -1115.50, 0.00, -1794.90, -599.80, 200.00}},
		{!"Foster Valley",                {-2178.60, -1250.90, 0.00, -1794.90, -1115.50, 200.00}},
		{!"Frederick Bridge",             {2759.20, 296.50, 0.00, 2774.20, 594.70, 200.00}},
		{!"Gant Bridge",                  {-2741.40, 1659.60, -6.10, -2616.40, 2175.10, 200.00}},
		{!"Gant Bridge",                  {-2741.00, 1490.40, -6.10, -2616.40, 1659.60, 200.00}},
		{!"Ganton",                       {2222.50, -1852.80, -89.00, 2632.80, -1722.30, 110.90}},
		{!"Ganton",                       {2222.50, -1722.30, -89.00, 2632.80, -1628.50, 110.90}},
		{!"Garcia",                       {-2411.20, -222.50, -0.00, -2173.00, 265.20, 200.00}},
		{!"Garcia",                       {-2395.10, -222.50, -5.30, -2354.00, -204.70, 200.00}},
		{!"Garver Bridge",                {-1339.80, 828.10, -89.00, -1213.90, 1057.00, 110.90}},
		{!"Garver Bridge",                {-1213.90, 950.00, -89.00, -1087.90, 1178.90, 110.90}},
		{!"Garver Bridge",                {-1499.80, 696.40, -179.60, -1339.80, 925.30, 20.30}},
		{!"Glen Park",                    {1812.60, -1449.60, -89.00, 1996.90, -1350.70, 110.90}},
		{!"Glen Park",                    {1812.60, -1100.80, -89.00, 1994.30, -973.30, 110.90}},
		{!"Glen Park",                    {1812.60, -1350.70, -89.00, 2056.80, -1100.80, 110.90}},
		{!"Green Palms",                  {176.50, 1305.40, -3.00, 338.60, 1520.70, 200.00}},
		{!"Greenglass College",           {964.30, 1044.60, -89.00, 1197.30, 1203.20, 110.90}},
		{!"Greenglass College",           {964.30, 930.80, -89.00, 1166.50, 1044.60, 110.90}},
		{!"Hampton Barns",                {603.00, 264.30, 0.00, 761.90, 366.50, 200.00}},
		{!"Hankypanky Point",             {2576.90, 62.10, 0.00, 2759.20, 385.50, 200.00}},
		{!"Harry Gold Parkway",           {1777.30, 863.20, -89.00, 1817.30, 2342.80, 110.90}},
		{!"Hashbury",                     {-2593.40, -222.50, -0.00, -2411.20, 54.70, 200.00}},
		{!"Hilltop Farm",                 {967.30, -450.30, -3.00, 1176.70, -217.90, 200.00}},
		{!"Hunter Quarry",                {337.20, 710.80, -115.20, 860.50, 1031.70, 203.70}},
		{!"Idlewood",                     {1812.60, -1852.80, -89.00, 1971.60, -1742.30, 110.90}},
		{!"Idlewood",                     {1812.60, -1742.30, -89.00, 1951.60, -1602.30, 110.90}},
		{!"Idlewood",                     {1951.60, -1742.30, -89.00, 2124.60, -1602.30, 110.90}},
		{!"Idlewood",                     {1812.60, -1602.30, -89.00, 2124.60, -1449.60, 110.90}},
		{!"Idlewood",                     {2124.60, -1742.30, -89.00, 2222.50, -1494.00, 110.90}},
		{!"Idlewood",                     {1971.60, -1852.80, -89.00, 2222.50, -1742.30, 110.90}},
		{!"Jefferson",                    {1996.90, -1449.60, -89.00, 2056.80, -1350.70, 110.90}},
		{!"Jefferson",                    {2124.60, -1494.00, -89.00, 2266.20, -1449.60, 110.90}},
		{!"Jefferson",                    {2056.80, -1372.00, -89.00, 2281.40, -1210.70, 110.90}},
		{!"Jefferson",                    {2056.80, -1210.70, -89.00, 2185.30, -1126.30, 110.90}},
		{!"Jefferson",                    {2185.30, -1210.70, -89.00, 2281.40, -1154.50, 110.90}},
		{!"Jefferson",                    {2056.80, -1449.60, -89.00, 2266.20, -1372.00, 110.90}},
		{!"Julius Thruway East",          {2623.10, 943.20, -89.00, 2749.90, 1055.90, 110.90}},
		{!"Julius Thruway East",          {2685.10, 1055.90, -89.00, 2749.90, 2626.50, 110.90}},
		{!"Julius Thruway East",          {2536.40, 2442.50, -89.00, 2685.10, 2542.50, 110.90}},
		{!"Julius Thruway East",          {2625.10, 2202.70, -89.00, 2685.10, 2442.50, 110.90}},
		{!"Julius Thruway North",         {2498.20, 2542.50, -89.00, 2685.10, 2626.50, 110.90}},
		{!"Julius Thruway North",         {2237.40, 2542.50, -89.00, 2498.20, 2663.10, 110.90}},
		{!"Julius Thruway North",         {2121.40, 2508.20, -89.00, 2237.40, 2663.10, 110.90}},
		{!"Julius Thruway North",         {1938.80, 2508.20, -89.00, 2121.40, 2624.20, 110.90}},
		{!"Julius Thruway North",         {1534.50, 2433.20, -89.00, 1848.40, 2583.20, 110.90}},
		{!"Julius Thruway North",         {1848.40, 2478.40, -89.00, 1938.80, 2553.40, 110.90}},
		{!"Julius Thruway North",         {1704.50, 2342.80, -89.00, 1848.40, 2433.20, 110.90}},
		{!"Julius Thruway North",         {1377.30, 2433.20, -89.00, 1534.50, 2507.20, 110.90}},
		{!"Julius Thruway South",         {1457.30, 823.20, -89.00, 2377.30, 863.20, 110.90}},
		{!"Julius Thruway South",         {2377.30, 788.80, -89.00, 2537.30, 897.90, 110.90}},
		{!"Julius Thruway West",          {1197.30, 1163.30, -89.00, 1236.60, 2243.20, 110.90}},
		{!"Julius Thruway West",          {1236.60, 2142.80, -89.00, 1297.40, 2243.20, 110.90}},
		{!"Juniper Hill",                 {-2533.00, 578.30, -7.60, -2274.10, 968.30, 200.00}},
		{!"Juniper Hollow",               {-2533.00, 968.30, -6.10, -2274.10, 1358.90, 200.00}},
		{!"K.A.C.C. Military Fuels",      {2498.20, 2626.50, -89.00, 2749.90, 2861.50, 110.90}},
		{!"Kincaid Bridge",               {-1339.80, 599.20, -89.00, -1213.90, 828.10, 110.90}},
		{!"Kincaid Bridge",               {-1213.90, 721.10, -89.00, -1087.90, 950.00, 110.90}},
		{!"Kincaid Bridge",               {-1087.90, 855.30, -89.00, -961.90, 986.20, 110.90}},
		{!"King's",                       {-2329.30, 458.40, -7.60, -1993.20, 578.30, 200.00}},
		{!"King's",                       {-2411.20, 265.20, -9.10, -1993.20, 373.50, 200.00}},
		{!"King's",                       {-2253.50, 373.50, -9.10, -1993.20, 458.40, 200.00}},
		{!"LVA Freight Depot",            {1457.30, 863.20, -89.00, 1777.40, 1143.20, 110.90}},
		{!"LVA Freight Depot",            {1375.60, 919.40, -89.00, 1457.30, 1203.20, 110.90}},
		{!"LVA Freight Depot",            {1277.00, 1087.60, -89.00, 1375.60, 1203.20, 110.90}},
		{!"LVA Freight Depot",            {1315.30, 1044.60, -89.00, 1375.60, 1087.60, 110.90}},
		{!"LVA Freight Depot",            {1236.60, 1163.40, -89.00, 1277.00, 1203.20, 110.90}},
		{!"Las Barrancas",                {-926.10, 1398.70, -3.00, -719.20, 1634.60, 200.00}},
		{!"Las Brujas",                   {-365.10, 2123.00, -3.00, -208.50, 2217.60, 200.00}},
		{!"Las Colinas",                  {1994.30, -1100.80, -89.00, 2056.80, -920.80, 110.90}},
		{!"Las Colinas",                  {2056.80, -1126.30, -89.00, 2126.80, -920.80, 110.90}},
		{!"Las Colinas",                  {2185.30, -1154.50, -89.00, 2281.40, -934.40, 110.90}},
		{!"Las Colinas",                  {2126.80, -1126.30, -89.00, 2185.30, -934.40, 110.90}},
		{!"Las Colinas",                  {2747.70, -1120.00, -89.00, 2959.30, -945.00, 110.90}},
		{!"Las Colinas",                  {2632.70, -1135.00, -89.00, 2747.70, -945.00, 110.90}},
		{!"Las Colinas",                  {2281.40, -1135.00, -89.00, 2632.70, -945.00, 110.90}},
		{!"Las Payasadas",                {-354.30, 2580.30, 2.00, -133.60, 2816.80, 200.00}},
		{!"Las Venturas Airport",         {1236.60, 1203.20, -89.00, 1457.30, 1883.10, 110.90}},
		{!"Las Venturas Airport",         {1457.30, 1203.20, -89.00, 1777.30, 1883.10, 110.90}},
		{!"Las Venturas Airport",         {1457.30, 1143.20, -89.00, 1777.40, 1203.20, 110.90}},
		{!"Las Venturas Airport",         {1515.80, 1586.40, -12.50, 1729.90, 1714.50, 87.50}},
		{!"Last Dime Motel",              {1823.00, 596.30, -89.00, 1997.20, 823.20, 110.90}},
		{!"Leafy Hollow",                 {-1166.90, -1856.00, 0.00, -815.60, -1602.00, 200.00}},
		{!"Liberty City",                 {-1000.00, 400.00, 1300.00, -700.00, 600.00, 1400.00}},
		{!"Lil' Probe Inn",               {-90.20, 1286.80, -3.00, 153.80, 1554.10, 200.00}},
		{!"Linden Side",                  {2749.90, 943.20, -89.00, 2923.30, 1198.90, 110.90}},
		{!"Linden Station",               {2749.90, 1198.90, -89.00, 2923.30, 1548.90, 110.90}},
		{!"Linden Station",               {2811.20, 1229.50, -39.50, 2861.20, 1407.50, 60.40}},
		{!"Little Mexico",                {1701.90, -1842.20, -89.00, 1812.60, -1722.20, 110.90}},
		{!"Little Mexico",                {1758.90, -1722.20, -89.00, 1812.60, -1577.50, 110.90}},
		{!"Los Flores",                   {2581.70, -1454.30, -89.00, 2632.80, -1393.40, 110.90}},
		{!"Los Flores",                   {2581.70, -1393.40, -89.00, 2747.70, -1135.00, 110.90}},
		{!"Los Santos International",     {1249.60, -2394.30, -89.00, 1852.00, -2179.20, 110.90}},
		{!"Los Santos International",     {1852.00, -2394.30, -89.00, 2089.00, -2179.20, 110.90}},
		{!"Los Santos International",     {1382.70, -2730.80, -89.00, 2201.80, -2394.30, 110.90}},
		{!"Los Santos International",     {1974.60, -2394.30, -39.00, 2089.00, -2256.50, 60.90}},
		{!"Los Santos International",     {1400.90, -2669.20, -39.00, 2189.80, -2597.20, 60.90}},
		{!"Los Santos International",     {2051.60, -2597.20, -39.00, 2152.40, -2394.30, 60.90}},
		{!"Marina",                       {647.70, -1804.20, -89.00, 851.40, -1577.50, 110.90}},
		{!"Marina",                       {647.70, -1577.50, -89.00, 807.90, -1416.20, 110.90}},
		{!"Marina",                       {807.90, -1577.50, -89.00, 926.90, -1416.20, 110.90}},
		{!"Market",                       {787.40, -1416.20, -89.00, 1072.60, -1310.20, 110.90}},
		{!"Market",                       {952.60, -1310.20, -89.00, 1072.60, -1130.80, 110.90}},
		{!"Market",                       {1072.60, -1416.20, -89.00, 1370.80, -1130.80, 110.90}},
		{!"Market",                       {926.90, -1577.50, -89.00, 1370.80, -1416.20, 110.90}},
		{!"Market Station",               {787.40, -1410.90, -34.10, 866.00, -1310.20, 65.80}},
		{!"Martin Bridge",                {-222.10, 293.30, 0.00, -122.10, 476.40, 200.00}},
		{!"Missionary Hill",              {-2994.40, -811.20, 0.00, -2178.60, -430.20, 200.00}},
		{!"Montgomery",                   {1119.50, 119.50, -3.00, 1451.40, 493.30, 200.00}},
		{!"Montgomery",                   {1451.40, 347.40, -6.10, 1582.40, 420.80, 200.00}},
		{!"Montgomery Intersection",      {1546.60, 208.10, 0.00, 1745.80, 347.40, 200.00}},
		{!"Montgomery Intersection",      {1582.40, 347.40, 0.00, 1664.60, 401.70, 200.00}},
		{!"Mulholland",                   {1414.00, -768.00, -89.00, 1667.60, -452.40, 110.90}},
		{!"Mulholland",                   {1281.10, -452.40, -89.00, 1641.10, -290.90, 110.90}},
		{!"Mulholland",                   {1269.10, -768.00, -89.00, 1414.00, -452.40, 110.90}},
		{!"Mulholland",                   {1357.00, -926.90, -89.00, 1463.90, -768.00, 110.90}},
		{!"Mulholland",                   {1318.10, -910.10, -89.00, 1357.00, -768.00, 110.90}},
		{!"Mulholland",                   {1169.10, -910.10, -89.00, 1318.10, -768.00, 110.90}},
		{!"Mulholland",                   {768.60, -954.60, -89.00, 952.60, -860.60, 110.90}},
		{!"Mulholland",                   {687.80, -860.60, -89.00, 911.80, -768.00, 110.90}},
		{!"Mulholland",                   {737.50, -768.00, -89.00, 1142.20, -674.80, 110.90}},
		{!"Mulholland",                   {1096.40, -910.10, -89.00, 1169.10, -768.00, 110.90}},
		{!"Mulholland",                   {952.60, -937.10, -89.00, 1096.40, -860.60, 110.90}},
		{!"Mulholland",                   {911.80, -860.60, -89.00, 1096.40, -768.00, 110.90}},
		{!"Mulholland",                   {861.00, -674.80, -89.00, 1156.50, -600.80, 110.90}},
		{!"Mulholland Intersection",      {1463.90, -1150.80, -89.00, 1812.60, -768.00, 110.90}},
		{!"North Rock",                   {2285.30, -768.00, 0.00, 2770.50, -269.70, 200.00}},
		{!"Ocean Docks",                  {2373.70, -2697.00, -89.00, 2809.20, -2330.40, 110.90}},
		{!"Ocean Docks",                  {2201.80, -2418.30, -89.00, 2324.00, -2095.00, 110.90}},
		{!"Ocean Docks",                  {2324.00, -2302.30, -89.00, 2703.50, -2145.10, 110.90}},
		{!"Ocean Docks",                  {2089.00, -2394.30, -89.00, 2201.80, -2235.80, 110.90}},
		{!"Ocean Docks",                  {2201.80, -2730.80, -89.00, 2324.00, -2418.30, 110.90}},
		{!"Ocean Docks",                  {2703.50, -2302.30, -89.00, 2959.30, -2126.90, 110.90}},
		{!"Ocean Docks",                  {2324.00, -2145.10, -89.00, 2703.50, -2059.20, 110.90}},
		{!"Ocean Flats",                  {-2994.40, 277.40, -9.10, -2867.80, 458.40, 200.00}},
		{!"Ocean Flats",                  {-2994.40, -222.50, -0.00, -2593.40, 277.40, 200.00}},
		{!"Ocean Flats",                  {-2994.40, -430.20, -0.00, -2831.80, -222.50, 200.00}},
		{!"Octane Springs",               {338.60, 1228.50, 0.00, 664.30, 1655.00, 200.00}},
		{!"Old Venturas Strip",           {2162.30, 2012.10, -89.00, 2685.10, 2202.70, 110.90}},
		{!"Palisades",                    {-2994.40, 458.40, -6.10, -2741.00, 1339.60, 200.00}},
		{!"Palomino Creek",               {2160.20, -149.00, 0.00, 2576.90, 228.30, 200.00}},
		{!"Paradiso",                     {-2741.00, 793.40, -6.10, -2533.00, 1268.40, 200.00}},
		{!"Pershing Square",              {1440.90, -1722.20, -89.00, 1583.50, -1577.50, 110.90}},
		{!"Pilgrim",                      {2437.30, 1383.20, -89.00, 2624.40, 1783.20, 110.90}},
		{!"Pilgrim",                      {2624.40, 1383.20, -89.00, 2685.10, 1783.20, 110.90}},
		{!"Pilson Intersection",          {1098.30, 2243.20, -89.00, 1377.30, 2507.20, 110.90}},
		{!"Pirates in Men's Pants",       {1817.30, 1469.20, -89.00, 2027.40, 1703.20, 110.90}},
		{!"Playa del Seville",            {2703.50, -2126.90, -89.00, 2959.30, -1852.80, 110.90}},
		{!"Prickle Pine",                 {1534.50, 2583.20, -89.00, 1848.40, 2863.20, 110.90}},
		{!"Prickle Pine",                 {1117.40, 2507.20, -89.00, 1534.50, 2723.20, 110.90}},
		{!"Prickle Pine",                 {1848.40, 2553.40, -89.00, 1938.80, 2863.20, 110.90}},
		{!"Prickle Pine",                 {1938.80, 2624.20, -89.00, 2121.40, 2861.50, 110.90}},
		{!"Queens",                       {-2533.00, 458.40, 0.00, -2329.30, 578.30, 200.00}},
		{!"Queens",                       {-2593.40, 54.70, 0.00, -2411.20, 458.40, 200.00}},
		{!"Queens",                       {-2411.20, 373.50, 0.00, -2253.50, 458.40, 200.00}},
		{!"Randolph Industrial Estate",   {1558.00, 596.30, -89.00, 1823.00, 823.20, 110.90}},
		{!"Redsands East",                {1817.30, 2011.80, -89.00, 2106.70, 2202.70, 110.90}},
		{!"Redsands East",                {1817.30, 2202.70, -89.00, 2011.90, 2342.80, 110.90}},
		{!"Redsands East",                {1848.40, 2342.80, -89.00, 2011.90, 2478.40, 110.90}},
		{!"Redsands West",                {1236.60, 1883.10, -89.00, 1777.30, 2142.80, 110.90}},
		{!"Redsands West",                {1297.40, 2142.80, -89.00, 1777.30, 2243.20, 110.90}},
		{!"Redsands West",                {1377.30, 2243.20, -89.00, 1704.50, 2433.20, 110.90}},
		{!"Redsands West",                {1704.50, 2243.20, -89.00, 1777.30, 2342.80, 110.90}},
		{!"Regular Tom",                  {-405.70, 1712.80, -3.00, -276.70, 1892.70, 200.00}},
		{!"Richman",                      {647.50, -1118.20, -89.00, 787.40, -954.60, 110.90}},
		{!"Richman",                      {647.50, -954.60, -89.00, 768.60, -860.60, 110.90}},
		{!"Richman",                      {225.10, -1369.60, -89.00, 334.50, -1292.00, 110.90}},
		{!"Richman",                      {225.10, -1292.00, -89.00, 466.20, -1235.00, 110.90}},
		{!"Richman",                      {72.60, -1404.90, -89.00, 225.10, -1235.00, 110.90}},
		{!"Richman",                      {72.60, -1235.00, -89.00, 321.30, -1008.10, 110.90}},
		{!"Richman",                      {321.30, -1235.00, -89.00, 647.50, -1044.00, 110.90}},
		{!"Richman",                      {321.30, -1044.00, -89.00, 647.50, -860.60, 110.90}},
		{!"Richman",                      {321.30, -860.60, -89.00, 687.80, -768.00, 110.90}},
		{!"Richman",                      {321.30, -768.00, -89.00, 700.70, -674.80, 110.90}},
		{!"Robada Intersection",          {-1119.00, 1178.90, -89.00, -862.00, 1351.40, 110.90}},
		{!"Roca Escalante",               {2237.40, 2202.70, -89.00, 2536.40, 2542.50, 110.90}},
		{!"Roca Escalante",               {2536.40, 2202.70, -89.00, 2625.10, 2442.50, 110.90}},
		{!"Rockshore East",               {2537.30, 676.50, -89.00, 2902.30, 943.20, 110.90}},
		{!"Rockshore West",               {1997.20, 596.30, -89.00, 2377.30, 823.20, 110.90}},
		{!"Rockshore West",               {2377.30, 596.30, -89.00, 2537.30, 788.80, 110.90}},
		{!"Rodeo",                        {72.60, -1684.60, -89.00, 225.10, -1544.10, 110.90}},
		{!"Rodeo",                        {72.60, -1544.10, -89.00, 225.10, -1404.90, 110.90}},
		{!"Rodeo",                        {225.10, -1684.60, -89.00, 312.80, -1501.90, 110.90}},
		{!"Rodeo",                        {225.10, -1501.90, -89.00, 334.50, -1369.60, 110.90}},
		{!"Rodeo",                        {334.50, -1501.90, -89.00, 422.60, -1406.00, 110.90}},
		{!"Rodeo",                        {312.80, -1684.60, -89.00, 422.60, -1501.90, 110.90}},
		{!"Rodeo",                        {422.60, -1684.60, -89.00, 558.00, -1570.20, 110.90}},
		{!"Rodeo",                        {558.00, -1684.60, -89.00, 647.50, -1384.90, 110.90}},
		{!"Rodeo",                        {466.20, -1570.20, -89.00, 558.00, -1385.00, 110.90}},
		{!"Rodeo",                        {422.60, -1570.20, -89.00, 466.20, -1406.00, 110.90}},
		{!"Rodeo",                        {466.20, -1385.00, -89.00, 647.50, -1235.00, 110.90}},
		{!"Rodeo",                        {334.50, -1406.00, -89.00, 466.20, -1292.00, 110.90}},
		{!"Royal Casino",                 {2087.30, 1383.20, -89.00, 2437.30, 1543.20, 110.90}},
		{!"San Andreas Sound",            {2450.30, 385.50, -100.00, 2759.20, 562.30, 200.00}},
		{!"Santa Flora",                  {-2741.00, 458.40, -7.60, -2533.00, 793.40, 200.00}},
		{!"Santa Maria Beach",            {342.60, -2173.20, -89.00, 647.70, -1684.60, 110.90}},
		{!"Santa Maria Beach",            {72.60, -2173.20, -89.00, 342.60, -1684.60, 110.90}},
		{!"Shady Cabin",                  {-1632.80, -2263.40, -3.00, -1601.30, -2231.70, 200.00}},
		{!"Shady Creeks",                 {-1820.60, -2643.60, -8.00, -1226.70, -1771.60, 200.00}},
		{!"Shady Creeks",                 {-2030.10, -2174.80, -6.10, -1820.60, -1771.60, 200.00}},
		{!"Sobell Rail Yards",            {2749.90, 1548.90, -89.00, 2923.30, 1937.20, 110.90}},
		{!"Spinybed",                     {2121.40, 2663.10, -89.00, 2498.20, 2861.50, 110.90}},
		{!"Starfish Casino",              {2437.30, 1783.20, -89.00, 2685.10, 2012.10, 110.90}},
		{!"Starfish Casino",              {2437.30, 1858.10, -39.00, 2495.00, 1970.80, 60.90}},
		{!"Starfish Casino",              {2162.30, 1883.20, -89.00, 2437.30, 2012.10, 110.90}},
		{!"Temple",                       {1252.30, -1130.80, -89.00, 1378.30, -1026.30, 110.90}},
		{!"Temple",                       {1252.30, -1026.30, -89.00, 1391.00, -926.90, 110.90}},
		{!"Temple",                       {1252.30, -926.90, -89.00, 1357.00, -910.10, 110.90}},
		{!"Temple",                       {952.60, -1130.80, -89.00, 1096.40, -937.10, 110.90}},
		{!"Temple",                       {1096.40, -1130.80, -89.00, 1252.30, -1026.30, 110.90}},
		{!"Temple",                       {1096.40, -1026.30, -89.00, 1252.30, -910.10, 110.90}},
		{!"The Camel's Toe",              {2087.30, 1203.20, -89.00, 2640.40, 1383.20, 110.90}},
		{!"The Clown's Pocket",           {2162.30, 1783.20, -89.00, 2437.30, 1883.20, 110.90}},
		{!"The Emerald Isle",             {2011.90, 2202.70, -89.00, 2237.40, 2508.20, 110.90}},
		{!"The Farm",                     {-1209.60, -1317.10, 114.90, -908.10, -787.30, 251.90}},
		{!"The Four Dragons Casino",      {1817.30, 863.20, -89.00, 2027.30, 1083.20, 110.90}},
		{!"The High Roller",              {1817.30, 1283.20, -89.00, 2027.30, 1469.20, 110.90}},
		{!"The Mako Span",                {1664.60, 401.70, 0.00, 1785.10, 567.20, 200.00}},
		{!"The Panopticon",               {-947.90, -304.30, -1.10, -319.60, 327.00, 200.00}},
		{!"The Pink Swan",                {1817.30, 1083.20, -89.00, 2027.30, 1283.20, 110.90}},
		{!"The Sherman Dam",              {-968.70, 1929.40, -3.00, -481.10, 2155.20, 200.00}},
		{!"The Strip",                    {2027.40, 863.20, -89.00, 2087.30, 1703.20, 110.90}},
		{!"The Strip",                    {2106.70, 1863.20, -89.00, 2162.30, 2202.70, 110.90}},
		{!"The Strip",                    {2027.40, 1783.20, -89.00, 2162.30, 1863.20, 110.90}},
		{!"The Strip",                    {2027.40, 1703.20, -89.00, 2137.40, 1783.20, 110.90}},
		{!"The Visage",                   {1817.30, 1863.20, -89.00, 2106.70, 2011.80, 110.90}},
		{!"The Visage",                   {1817.30, 1703.20, -89.00, 2027.40, 1863.20, 110.90}},
		{!"Unity Station",                {1692.60, -1971.80, -20.40, 1812.60, -1932.80, 79.50}},
		{!"Valle Ocultado",               {-936.60, 2611.40, 2.00, -715.90, 2847.90, 200.00}},
		{!"Verdant Bluffs",               {930.20, -2488.40, -89.00, 1249.60, -2006.70, 110.90}},
		{!"Verdant Bluffs",               {1073.20, -2006.70, -89.00, 1249.60, -1842.20, 110.90}},
		{!"Verdant Bluffs",               {1249.60, -2179.20, -89.00, 1692.60, -1842.20, 110.90}},
		{!"Verdant Meadows",              {37.00, 2337.10, -3.00, 435.90, 2677.90, 200.00}},
		{!"Verona Beach",                 {647.70, -2173.20, -89.00, 930.20, -1804.20, 110.90}},
		{!"Verona Beach",                 {930.20, -2006.70, -89.00, 1073.20, -1804.20, 110.90}},
		{!"Verona Beach",                 {851.40, -1804.20, -89.00, 1046.10, -1577.50, 110.90}},
		{!"Verona Beach",                 {1161.50, -1722.20, -89.00, 1323.90, -1577.50, 110.90}},
		{!"Verona Beach",                 {1046.10, -1722.20, -89.00, 1161.50, -1577.50, 110.90}},
		{!"Vinewood",                     {787.40, -1310.20, -89.00, 952.60, -1130.80, 110.90}},
		{!"Vinewood",                     {787.40, -1130.80, -89.00, 952.60, -954.60, 110.90}},
		{!"Vinewood",                     {647.50, -1227.20, -89.00, 787.40, -1118.20, 110.90}},
		{!"Vinewood",                     {647.70, -1416.20, -89.00, 787.40, -1227.20, 110.90}},
		{!"Whitewood Estates",            {883.30, 1726.20, -89.00, 1098.30, 2507.20, 110.90}},
		{!"Whitewood Estates",            {1098.30, 1726.20, -89.00, 1197.30, 2243.20, 110.90}},
		{!"Willowfield",                  {1970.60, -2179.20, -89.00, 2089.00, -1852.80, 110.90}},
		{!"Willowfield",                  {2089.00, -2235.80, -89.00, 2201.80, -1989.90, 110.90}},
		{!"Willowfield",                  {2089.00, -1989.90, -89.00, 2324.00, -1852.80, 110.90}},
		{!"Willowfield",                  {2201.80, -2095.00, -89.00, 2324.00, -1989.90, 110.90}},
		{!"Willowfield",                  {2541.70, -1941.40, -89.00, 2703.50, -1852.80, 110.90}},
		{!"Willowfield",                  {2324.00, -2059.20, -89.00, 2541.70, -1852.80, 110.90}},
		{!"Willowfield",                  {2541.70, -2059.20, -89.00, 2703.50, -1941.40, 110.90}},
		{!"Yellow Bell Station",          {1377.40, 2600.40, -21.90, 1492.40, 2687.30, 78.00}},
		{!"Los Santos",                   {44.60, -2892.90, -242.90, 2997.00, -768.00, 900.00}},
		{!"Las Venturas",                 {869.40, 596.30, -242.90, 2997.00, 2993.80, 900.00}},
		{!"Bone County",                  {-480.50, 596.30, -242.90, 869.40, 2993.80, 900.00}},
		{!"Tierra Robada",                {-2997.40, 1659.60, -242.90, -480.50, 2993.80, 900.00}},
		{!"Tierra Robada",                {-1213.90, 596.30, -242.90, -480.50, 1659.60, 900.00}},
		{!"San Fierro",                   {-2997.40, -1115.50, -242.90, -1213.90, 1659.60, 900.00}},
		{!"Red County",                   {-1213.90, -768.00, -242.90, 2997.00, 596.30, 900.00}},
		{!"Flint County",                 {-1213.90, -2892.90, -242.90, 44.60, -768.00, 900.00}},
		{!"Whetstone",                    {-2997.40, -2892.90, -242.90, -1213.90, -1115.50, 900.00}}
	};
	new
	name[32] = "San Andreas";

	for (new i = 0; i != sizeof(g_arrZoneData); i ++) if ((fX >= g_arrZoneData[i][e_ZoneArea][0] && fX <= g_arrZoneData[i][e_ZoneArea][3]) && (fY >= g_arrZoneData[i][e_ZoneArea][1] && fY <= g_arrZoneData[i][e_ZoneArea][4]) && (fZ >= g_arrZoneData[i][e_ZoneArea][2] && fZ <= g_arrZoneData[i][e_ZoneArea][5])) {
		strunpack(name, g_arrZoneData[i][e_ZoneName]);

		break;
	}
	return name;
}

stock Float:GetPlayerDistanceFromPlayer(playerid, targetid)
{
	static
	Float:x,
	Float:y,
	Float:z;

	GetPlayerPos(targetid, x, y, z);
	return GetPlayerDistanceFromPoint(playerid, x, y, z);
}

/*CREATE TABLE `detectors` (
`detectorID` INT(12) AUTO_INCREMENT,
`detectorX` FLOAT DEFAULT 0.0,
`detectorY` FLOAT DEFAULT 0.0,
`detectorZ` FLOAT DEFAULT 0.0,
`detectorAngle` FLOAT DEFAULT 0.0,
`detectorInterior` INT(12) DEFAULT 0,
`detectorWorld` INT(12) DEFAULT 0,
PRIMARY KEY(`detectorID`)
);*/

stock Detector_Delete(id)
{
	if (id != -1 && MetalDetectors[id][detectorExists])
	{
		static
		query[64];

		DestroyDynamicObject(MetalDetectors[id][detectorObject][0]);
		DestroyDynamicObject(MetalDetectors[id][detectorObject][1]);

		format(query, sizeof(query), "DELETE FROM `detectors` WHERE `detectorID` = '%d'", MetalDetectors[id][detectorID]);
		mysql_function_query(g_iHandle, query, false, "", "");

		MetalDetectors[id][detectorID] = 0;
		MetalDetectors[id][detectorExists] = 0;
	}
	return 1;
}

stock Detector_Refresh(id)
{
	if (id != -1 && MetalDetectors[id][detectorExists])
	{
		MetalDetectors[id][detectorObject][0] = CreateDynamicObject(2412, MetalDetectors[id][detectorPos][0], MetalDetectors[id][detectorPos][1], MetalDetectors[id][detectorPos][2] - 0.9, 0.0, 0.0, MetalDetectors[id][detectorPos][3], MetalDetectors[id][detectorWorld], MetalDetectors[id][detectorInterior]);
		MetalDetectors[id][detectorObject][1] = CreateDynamicObject(2412, MetalDetectors[id][detectorPos][0] + (1.0 * floatsin(-(MetalDetectors[id][detectorPos][3] - 90), degrees)), MetalDetectors[id][detectorPos][1] + (1.0 * floatcos(-(MetalDetectors[id][detectorPos][3] - 90), degrees)), MetalDetectors[id][detectorPos][2] - 0.9, 0.0, 0.0, MetalDetectors[id][detectorPos][3], MetalDetectors[id][detectorWorld], MetalDetectors[id][detectorInterior]);
	}
	return 1;
}

stock Detector_Nearest(playerid)
{
	for (new i = 0; i < MAX_METAL_DETECTORS; i ++) if (MetalDetectors[i][detectorExists])
	{
		if (IsPlayerInRangeOfPoint(playerid, 1.0, MetalDetectors[i][detectorPos][0], MetalDetectors[i][detectorPos][1], MetalDetectors[i][detectorPos][2]) && GetPlayerInterior(playerid) == MetalDetectors[i][detectorInterior] && GetPlayerVirtualWorld(playerid) == MetalDetectors[i][detectorWorld])
		return i;
	}
	return -1;
}

stock IsPlayerArmed(playerid)
{
	static
	weapon,
	ammo;

	for (new i = 0; i < 13; i ++) {
		GetPlayerWeaponData(playerid, i, weapon, ammo);

		if (ammo > 0) {
			switch (weapon) {
				case 1, 2, 4, 6, 8, 9, 15, 22..38: return 1;
			}
		}
	}
	return 0;
}

stock PlayerPlaySoundEx(playerid, sound)
{
	static
	Float:x,
	Float:y,
	Float:z;

	GetPlayerPos(playerid, x, y, z);

	foreach (new i : Player) if (IsPlayerInRangeOfPoint(i, 20.0, x, y, z)) {
		PlayerPlaySound(i, sound, x, y, z);
	}
	return 1;
}

stock GetNearestPlayerInView(playerid, Float:distance = 2.0)
{
	static
	Float:fAngle,
	Float:fPosX,
	Float:fPosY,
	Float:fPosZ;

	GetPlayerFacingAngle(playerid, fAngle);
	GetPlayerPos(playerid, fPosX, fPosY, fPosZ);

	fPosX += distance * floatsin(-fAngle, degrees);
	fPosY += distance * floatcos(-fAngle, degrees);

	foreach (new i : Player) if (IsPlayerInRangeOfPoint(i, 2.0, fPosX, fPosY, fPosZ)) {
		return i;
	}
	return INVALID_PLAYER_ID;
}

stock CancelCall(playerid)
{
	if (PlayerData[playerid][pCallLine] != INVALID_PLAYER_ID || PlayerData[playerid][pCallLineCabine] != INVALID_PLAYER_ID)
	{
		PlayerData[PlayerData[playerid][pCallLine]][pCallLine] = INVALID_PLAYER_ID;
		PlayerData[PlayerData[playerid][pCallLine]][pIncomingCall] = 0;

		PlayerData[playerid][pCallLine] = INVALID_PLAYER_ID;
		
		if(PlayerData[playerid][pCallLineCabine] != INVALID_PLAYER_ID)
		{
		    CabineData[ PlayerData[playerid][pCallLineCabine] ][cabineCallID] = INVALID_PLAYER_ID;
		    PlayerData[playerid][pCallLineCabine] = INVALID_PLAYER_ID;
		}
		
		PlayerData[playerid][pIncomingCall] = 0;
	}
	return 1;
}

stock PlayReloadAnimation(playerid, weaponid)
{
	switch (weaponid)
	{
		case 22: ApplyAnimation(playerid, "COLT45", "colt45_reload", 4.0, 0, 0, 0, 0, 0);
		case 23: ApplyAnimation(playerid, "SILENCED", "Silence_reload", 4.0, 0, 0, 0, 0, 0);
		case 24: ApplyAnimation(playerid, "PYTHON", "python_reload", 4.0, 0, 0, 0, 0, 0);
		case 25, 27: ApplyAnimation(playerid, "BUDDY", "buddy_reload", 4.0, 0, 0, 0, 0, 0);
		case 26: ApplyAnimation(playerid, "COLT45", "sawnoff_reload", 4.0, 0, 0, 0, 0, 0);
		case 29..31, 33, 34: ApplyAnimation(playerid, "RIFLE", "rifle_load", 4.0, 0, 0, 0, 0, 0);
		case 28, 32: ApplyAnimation(playerid, "TEC", "tec_reload", 4.0, 0, 0, 0, 0, 0);
	}
	return 1;
}

stock LeaveTaxi(playerid, driverid)
{
	if (driverid != INVALID_PLAYER_ID && IsPlayerConnected(driverid))
	{
		GiveMoney(playerid, -PlayerData[playerid][pTaxiFee]);
		GiveMoney(driverid, PlayerData[playerid][pTaxiFee]);

		SendNearbyMessage(playerid, 15.0, COLOR_PURPLE, "%s vien de donner la somme de $%d au conducteur de taxi.", ReturnName(playerid, 1), PlayerData[playerid][pTaxiFee]);

		PlayerData[playerid][pTaxiFee] = 0;
		PlayerData[playerid][pTaxiTime] = 0;
		PlayerData[playerid][pTaxiPlayer] = INVALID_PLAYER_ID;
	}
	return 1;
}

stock IsFurnitureItem(item[])
{
    for (new i = 0; i < sizeof(g_aFurnitureData); i ++) if (!strcmp(g_aFurnitureData[i][e_FurnitureName], item)) {
        return 1;
	}
	return 0;
}

stock GetFurnitureNameByModel(model)
{
	new
	name[32];

	for (new i = 0; i < sizeof(g_aFurnitureData); i ++) if (g_aFurnitureData[i][e_FurnitureModel] == model) {
		strcat(name, g_aFurnitureData[i][e_FurnitureName]);

		break;
	}
	return name;
}

stock PlayerHasWeapon(playerid, weaponid)
{
	new
	weapon,
	ammo;

	for (new i = 0; i < 13; i ++) if (PlayerData[playerid][pGuns][i] == weaponid) {
		GetPlayerWeaponData(playerid, i, weapon, ammo);

		if (weapon == weaponid && ammo > 0) return 1;
	}
	return 0;
}

stock IsPumpOccupied(pumpid)
{
	foreach (new i : Player) if (PlayerData[i][pRefill] != INVALID_VEHICLE_ID) {
		if (PlayerData[i][pGasPump] == pumpid) return 1;
	}
	return 0;
}

stock IsWheelModel(modelid)
{
	switch (modelid) {
		case 1025, 1073..1085, 1096..1098: return 1;
	}
	return 0;
}

stock IsNOSCompatible(modelid)
{
	switch (modelid) {
		case 581, 523, 462, 521, 463, 522, 461, 448, 468, 586, 509, 481, 510, 472, 473, 493, 595, 484, 430, 453, 452, 446, 454, 590, 569, 537, 538, 570, 449: return 0;
	}
	return 1;
}

stock IsLegalComponent(modelid, componentid)
{
	if (IsWheelModel(componentid) || (1086 <= componentid <= 1087) || (componentid >= 1008 && componentid <= 1010))
	{
		if (!IsNOSCompatible(modelid))
		return 1;
	}
	else
	{
		for (new i = 0; i < sizeof(g_aLegalMods); i ++)
		{
			if (g_aLegalMods[i][0] != modelid)
			continue;

			else for (new l = 1; l < 22; l ++) if (g_aLegalMods[i][l] == componentid) {
				return 1;
			}
		}
	}
	return 0;
}

SendPlayerToPlayer(playerid, targetid)
{
	static
	Float:x,
	Float:y,
	Float:z;

	GetPlayerPos(targetid, x, y, z);

	if (IsPlayerInAnyVehicle(playerid))
	{
		SetVehiclePos(GetPlayerVehicleID(playerid), x, y + 2, z);
		LinkVehicleToInterior(GetPlayerVehicleID(playerid), GetPlayerInterior(targetid));
	}
	else
		SetPlayerPos(playerid, x + 1, y, z);

	SetPlayerInterior(playerid, GetPlayerInterior(targetid));
	SetPlayerVirtualWorld(playerid, GetPlayerVirtualWorld(targetid));

	PlayerData[playerid][pHouse] = PlayerData[targetid][pHouse];
	PlayerData[playerid][pBusiness] = PlayerData[targetid][pBusiness];
	PlayerData[playerid][pEntrance] = PlayerData[targetid][pEntrance];
	PlayerData[playerid][pHospitalInt]  = PlayerData[targetid][pHospitalInt];
}

StopRefilling(playerid)
{
	PlayerData[playerid][pGasPump] = -1;
	PlayerData[playerid][pGasStation] = -1;
	PlayerData[playerid][pRefill] = INVALID_VEHICLE_ID;
	PlayerData[playerid][pRefillPrice] = 0;
	
	DestroyProgressBar(PlayerData[playerid][pRefillBar]);
	ClearAnimations(playerid);
}

SetWeapons(playerid)
{
	ResetPlayerWeapons(playerid);

	if (GetFactionType(playerid) != FACTION_POLICE)
	{
		for (new i = 0; i < 13; i ++) if (PlayerData[playerid][pGuns][i] > 0 && PlayerData[playerid][pAmmo][i] > 0) {
			GivePlayerWeapon(playerid, PlayerData[playerid][pGuns][i], PlayerData[playerid][pAmmo][i]);
		}
	}
	return 1;
}

SetAccessories(playerid)
{
	for (new i = 0; i != MAX_PLAYER_ATTACHED_OBJECTS; i ++) {
		RemovePlayerAttachedObject(playerid, i);
	}
	if (PlayerData[playerid][pToggleGlasses]) RemovePlayerAttachedObject(playerid, 0);
	else if (PlayerData[playerid][pGlasses] != 0) SetPlayerAttachedObject(playerid, 0, PlayerData[playerid][pGlasses], 2, AccessoryData[playerid][0][0], AccessoryData[playerid][0][1], AccessoryData[playerid][0][2], AccessoryData[playerid][0][3], AccessoryData[playerid][0][4], AccessoryData[playerid][0][5], AccessoryData[playerid][0][6], AccessoryData[playerid][0][7], AccessoryData[playerid][0][8]);

	if (PlayerData[playerid][pToggleHat]) RemovePlayerAttachedObject(playerid, 1);
	else if (PlayerData[playerid][pHat] != 0) SetPlayerAttachedObject(playerid, 1, PlayerData[playerid][pHat], 2, AccessoryData[playerid][1][0], AccessoryData[playerid][1][1], AccessoryData[playerid][1][2], AccessoryData[playerid][1][3], AccessoryData[playerid][1][4], AccessoryData[playerid][1][5], AccessoryData[playerid][1][6], AccessoryData[playerid][1][7], AccessoryData[playerid][1][8]);

	if (PlayerData[playerid][pToggleBandana]) RemovePlayerAttachedObject(playerid, 2);
	else if (PlayerData[playerid][pBandana] != 0) SetPlayerAttachedObject(playerid, 2, PlayerData[playerid][pBandana], 2, AccessoryData[playerid][2][0], AccessoryData[playerid][2][1], AccessoryData[playerid][2][2], AccessoryData[playerid][2][3], AccessoryData[playerid][2][4], AccessoryData[playerid][2][5], AccessoryData[playerid][2][6], AccessoryData[playerid][2][7], AccessoryData[playerid][2][8]);

	if (Inventory_HasItem(playerid, "Sac a dos"))
	{
		SetPlayerAttachedObject(playerid, 5, 3026, 1, -0.134207, -0.093048, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000);
		PlayerData[playerid][pSac] = 1;
	}
	else RemovePlayerAttachedObject(playerid, 5);
}

GetClosestGarbage(playerid)
{
	new
	Float:fDistance[2] = {99999.0, 0.0},
	iIndex = -1
	;
	for (new i = 0; i < MAX_GARBAGE_BINS; i ++) if (GarbageData[i][garbageExists] && GarbageData[i][garbageCapacity] > 0 && GetPlayerInterior(playerid) == GarbageData[i][garbageInterior] && GetPlayerVirtualWorld(playerid) == GarbageData[i][garbageWorld])
	{
		fDistance[1] = GetPlayerDistanceFromPoint(playerid, GarbageData[i][garbagePos][0], GarbageData[i][garbagePos][1], GarbageData[i][garbagePos][2]);

		if (fDistance[1] < fDistance[0])
		{
			fDistance[0] = fDistance[1];
			iIndex = i;
		}
	}
	return iIndex;
}

GetClosestBusiness(playerid, type)
{
	new
	Float:fDistance[2] = {99999.0, 0.0},
	iIndex = -1
	;
	for (new i = 0; i < MAX_BUSINESSES; i ++) if (BusinessData[i][bizExists] && BusinessData[i][bizType] == type && GetPlayerInterior(playerid) == BusinessData[i][bizExterior] && GetPlayerVirtualWorld(playerid) == BusinessData[i][bizExteriorVW])
	{
		fDistance[1] = GetPlayerDistanceFromPoint(playerid, BusinessData[i][bizPos][0], BusinessData[i][bizPos][1], BusinessData[i][bizPos][2]);

		if (fDistance[1] < fDistance[0])
		{
			fDistance[0] = fDistance[1];
			iIndex = i;
		}
	}
	return iIndex;
}

GetClosestEntrance(playerid, type)
{
	new
	Float:fDistance[2] = {99999.0, 0.0},
	iIndex = -1
	;
	for (new i = 0; i < MAX_ENTRANCES; i ++) if (EntranceData[i][entranceExists] && EntranceData[i][entranceType] == type && GetPlayerInterior(playerid) == EntranceData[i][entranceExterior] && GetPlayerVirtualWorld(playerid) == EntranceData[i][entranceExteriorVW])
	{
		fDistance[1] = GetPlayerDistanceFromPoint(playerid, EntranceData[i][entrancePos][0], EntranceData[i][entrancePos][1], EntranceData[i][entrancePos][2]);

		if (fDistance[1] < fDistance[0])
		{
			fDistance[0] = fDistance[1];
			iIndex = i;
		}
	}
	return iIndex;
}

GetClosestJobPoint(playerid, type)
{
	new
	Float:fDistance[2] = {99999.0, 0.0},
	iIndex = -1
	;
	for (new i = 0; i < MAX_DYNAMIC_JOBS; i ++) if (JobData[i][jobExists] && JobData[i][jobType] == type && GetPlayerInterior(playerid) == JobData[i][jobInterior] && GetPlayerVirtualWorld(playerid) == JobData[i][jobWorld])
	{
		fDistance[1] = GetPlayerDistanceFromPoint(playerid, JobData[i][jobPoint][0], JobData[i][jobPoint][1], JobData[i][jobPoint][2]);

		if (fDistance[1] < fDistance[0])
		{
			fDistance[0] = fDistance[1];
			iIndex = i;
		}
	}
	return iIndex;
}

GetClosestJobDeliver(playerid, type)
{
	new
	Float:fDistance[2] = {99999.0, 0.0},
	iIndex = -1
	;
	for (new i = 0; i < MAX_DYNAMIC_JOBS; i ++) if (JobData[i][jobExists] && JobData[i][jobType] == type)
	{
		fDistance[1] = GetPlayerDistanceFromPoint(playerid, JobData[i][jobDeliver][0], JobData[i][jobDeliver][1], JobData[i][jobDeliver][2]);

		if (fDistance[1] < fDistance[0])
		{
			fDistance[0] = fDistance[1];
			iIndex = i;
		}
	}
	return iIndex;
}

GetClosestJob(playerid, type)
{
	new
	Float:fDistance[2] = {99999.0, 0.0},
	iIndex = -1
	;
	for (new i = 0; i < MAX_DYNAMIC_JOBS; i ++) if (JobData[i][jobExists] && JobData[i][jobType] == type && GetPlayerInterior(playerid) == JobData[i][jobInterior] && GetPlayerVirtualWorld(playerid) == JobData[i][jobWorld])
	{
		fDistance[1] = GetPlayerDistanceFromPoint(playerid, JobData[i][jobPos][0], JobData[i][jobPos][1], JobData[i][jobPos][2]);

		if (fDistance[1] < fDistance[0])
		{
			fDistance[0] = fDistance[1];
			iIndex = i;
		}
	}
	return iIndex;
}

GetClosestHospital(playerid)
{
	new
	Float:fDistance[2] = {99999.0, 0.0},
	iIndex = -1
	;
	for (new i = 0; i < sizeof(arrHospitalSpawns); i ++)
	{
		fDistance[1] = GetPlayerDistanceFromPoint(playerid, arrHospitalSpawns[i][0], arrHospitalSpawns[i][1], arrHospitalSpawns[i][2]);

		if (fDistance[1] < fDistance[0])
		{
			fDistance[0] = fDistance[1];
			iIndex = i;
		}
	}
	return iIndex;
}

IsWeaponModel(model) {
	static const g_aWeaponModels[] = {
		0, 331, 333, 334, 335, 336, 337, 338, 339, 341, 321, 322, 323, 324,
		325, 326, 342, 343, 344, 0, 0, 0, 346, 347, 348, 349, 350, 351, 352,
		353, 355, 356, 372, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366,
		367, 368, 368, 371
	};
	for (new i = 0; i < sizeof(g_aWeaponModels); i ++) if (g_aWeaponModels[i] == model) {
		return 1;
	}
	return 0;
}

IsWeaponItem(item)
{
	switch(item)
	{
		case 1..46: return true;
	}
	return false;
}

GetWeaponModel(weaponid) {
	static const g_aWeaponModels[] = {
		0, 331, 333, 334, 335, 336, 337, 338, 339, 341, 321, 322, 323, 324,
		325, 326, 342, 343, 344, 0, 0, 0, 346, 347, 348, 349, 350, 351, 352,
		353, 355, 356, 372, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366,
		367, 368, 368, 371
	};
	if (1 <= weaponid <= 46)
	return g_aWeaponModels[weaponid];

	return 0;
}

DropPlayerItem(playerid, itemid, quantity = 1)
{
	if (itemid == -1 || !InventoryData[playerid][itemid][invExists])
	return 0;

	static
	Float:x,
	Float:y,
	Float:z,
	Float:angle,
	string[32];

	strunpack(string, InventoryData[playerid][itemid][invItem]);
	
	GetPlayerPos(playerid, x, y, z);
	GetPlayerFacingAngle(playerid, angle);

	DropItem(string, ReturnName(playerid), InventoryData[playerid][itemid][invModel], quantity, x, y, z - 0.9, GetPlayerInterior(playerid), GetPlayerVirtualWorld(playerid));
	Inventory_Remove(playerid, string, quantity);

	ApplyAnimation(playerid, "GRENADE", "WEAPON_throwu", 4.1, 0, 0, 0, 0, 0, 1);
//	SendNearbyMessage(playerid, 15.0, COLOR_PURPLE, "%s pose un(e) \"%s\" au sol.", ReturnName(playerid), string);
	return 1;
}

DropItem(item[], player[], model, quantity, Float:x, Float:y, Float:z, interior, world, weaponid = 0, ammo = 0)
{
	static
	query[300];

	for (new i = 0; i != MAX_DROPPED_ITEMS; i ++) if (!DroppedItems[i][droppedModel])
	{
		format(DroppedItems[i][droppedItem], 32, item);
		format(DroppedItems[i][droppedPlayer], 24, player);

		DroppedItems[i][droppedModel] = model;
		DroppedItems[i][droppedQuantity] = quantity;
		DroppedItems[i][droppedWeapon] = weaponid;
		DroppedItems[i][droppedAmmo] = ammo;
		DroppedItems[i][droppedPos][0] = x;
		DroppedItems[i][droppedPos][1] = y;
		DroppedItems[i][droppedPos][2] = z;

		DroppedItems[i][droppedInt] = interior;
		DroppedItems[i][droppedWorld] = world;

		if (IsWeaponModel(model)) {
			DroppedItems[i][droppedObject] = CreateDynamicObject(model, x, y, z, 93.7, 120.0, 120.0, world, interior);
			} else {
			DroppedItems[i][droppedObject] = CreateDynamicObject(model, x, y, z, 0.0, 0.0, 0.0, world, interior);
		}
	//	DroppedItems[i][droppedText3D] = CreateDynamic3DTextLabel(item, COLOR_GREY, x, y, z, 10.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, world, interior);


		format(query, sizeof(query), "INSERT INTO `dropped` (`itemName`, `itemPlayer`, `itemModel`, `itemQuantity`, `itemWeapon`, `itemAmmo`, `itemX`, `itemY`, `itemZ`, `itemInt`, `itemWorld`) VALUES('%s', '%s', '%d', '%d', '%d', '%d', '%.4f', '%.4f', '%.4f', '%d', '%d')", item, player, model, quantity, weaponid, ammo, x, y, z, interior, world);
		mysql_function_query(g_iHandle, query, false, "OnDroppedItem", "d", i);

		return i;
	}
	return -1;
}

Item_Nearest(playerid)
{
	for (new i = 0; i != MAX_DROPPED_ITEMS; i ++) if (DroppedItems[i][droppedModel] && IsPlayerInRangeOfPoint(playerid, 1.5, DroppedItems[i][droppedPos][0], DroppedItems[i][droppedPos][1], DroppedItems[i][droppedPos][2]))
	{
		if (GetPlayerInterior(playerid) == DroppedItems[i][droppedInt] && GetPlayerVirtualWorld(playerid) == DroppedItems[i][droppedWorld])
		return i;
	}
	return -1;
}

Item_SetQuantity(itemid, amount)
{
	static
	string[64];

	if (itemid != -1 && DroppedItems[itemid][droppedModel])
	{
		DroppedItems[itemid][droppedQuantity] = amount;

		format(string, sizeof(string), "UPDATE `dropped` SET `itemQuantity` = %d WHERE `ID` = '%d'", amount, DroppedItems[itemid][droppedID]);
		mysql_function_query(g_iHandle, string, false, "", "");
	}
	return 1;
}

Item_Delete(itemid)
{
	static
	query[64];

	if (itemid != -1 && DroppedItems[itemid][droppedModel])
	{
		DroppedItems[itemid][droppedModel] = 0;
		DroppedItems[itemid][droppedQuantity] = 0;
		DroppedItems[itemid][droppedPos][0] = 0.0;
		DroppedItems[itemid][droppedPos][1] = 0.0;
		DroppedItems[itemid][droppedPos][2] = 0.0;
		DroppedItems[itemid][droppedInt] = 0;
		DroppedItems[itemid][droppedWorld] = 0;

		DestroyDynamicObject(DroppedItems[itemid][droppedObject]);
		DestroyDynamic3DTextLabel(DroppedItems[itemid][droppedText3D]);

		format(query, sizeof(query), "DELETE FROM `dropped` WHERE `ID` = '%d'", DroppedItems[itemid][droppedID]);
		mysql_function_query(g_iHandle, query, false, "", "");
	}
	return 1;
}

PickupItem(playerid, itemid)
{
	if (itemid != -1 && DroppedItems[itemid][droppedModel])
	{
		new id = Inventory_Add(playerid, DroppedItems[itemid][droppedItem], DroppedItems[itemid][droppedModel], DroppedItems[itemid][droppedQuantity]);

		if (id == -1)
		return SendClientMessageEx(playerid, COLOR_ERROR, "Vous n'avez plus de place dans votre sac à dos.");

		Item_Delete(itemid);
	}
	return 1;
}

SetFactionMarker(playerid, type, color)
{
	static
	Float:x,
	Float:y,
	Float:z;
	#pragma unused color

	GetPlayerPos(playerid, x, y, z);
	foreach (new i : Player) if (GetFactionType(i) == type) {
		SetPlayerCheckpoint(i, x, y, z, 4.0);
		SetPlayerMarkerForPlayer(i, playerid, COLOR_YELLOW);
	}
	PlayerData[playerid][pMarker] = 1;
	SetTimerEx("ExpireMarker", 300000, false, "d", playerid);
	return 1;
}

SetFactionMarkerBraquage(playerid, type, Float:x, Float:y, Float:z)
{
	foreach (new i : Player) if (GetFactionType(i) == type) {
		SetPlayerCheckpoint(i, x, y, z, 4.0);
	}
	PlayerData[playerid][pMarker] = 1;
	SetTimerEx("ExpireMarker", 300000, false, "d", playerid);
	return 1;
}
Faction_GetName(playerid)
{
	new
	factionid = PlayerData[playerid][pFaction],
	name[32] = "Aucun";

	if (factionid == -1)
	return name;

	format(name, 32, FactionData[factionid][factionName]);
	return name;
}

Faction_GetRank(playerid)
{
	new
	factionid = PlayerData[playerid][pFaction],
	rank[32] = "Aucun";

	if (factionid == -1)
	return rank;

	format(rank, 32, FactionRanks[factionid][PlayerData[playerid][pFactionRank] - 1]);
	return rank;
}

Arrest_Delete(arrestid)
{
	if (arrestid != -1 && ArrestData[arrestid][arrestExists])
	{
		static
		string[64];

		if (IsValidDynamicPickup(ArrestData[arrestid][arrestPickup]))
		DestroyDynamicPickup(ArrestData[arrestid][arrestPickup]);

		if (IsValidDynamic3DTextLabel(ArrestData[arrestid][arrestText3D]))
		DestroyDynamic3DTextLabel(ArrestData[arrestid][arrestText3D]);

		format(string, sizeof(string), "DELETE FROM `arrestpoints` WHERE `arrestID` = '%d'", ArrestData[arrestid][arrestID]);
		mysql_function_query(g_iHandle, string, false, "", "");

		ArrestData[arrestid][arrestExists] = false;
		ArrestData[arrestid][arrestID] = 0;
	}
	return 1;
}

Arrest_Create(Float:x, Float:y, Float:z, interior, world)
{
	for (new i = 0; i < MAX_ARREST_POINTS; i ++) if (!ArrestData[i][arrestExists])
	{
		ArrestData[i][arrestExists] = true;
		ArrestData[i][arrestPos][0] = x;
		ArrestData[i][arrestPos][1] = y;
		ArrestData[i][arrestPos][2] = z;
		ArrestData[i][arrestInterior] = interior;
		ArrestData[i][arrestWorld] = world;

		mysql_function_query(g_iHandle, "INSERT INTO `arrestpoints` (`arrestInterior`) VALUES(0)", false, "OnArrestCreated", "d", i);
		Arrest_Refresh(i);
		return i;
	}
	return -1;
}

Arrest_Save(arrestid)
{
	static
	query[220];

	format(query, sizeof(query), "UPDATE `arrestpoints` SET `arrestX` = '%.4f', `arrestY` = '%.4f', `arrestZ` = '%.4f', `arrestInterior` = '%d', `arrestWorld` = '%d' WHERE `arrestID` = '%d'",
	ArrestData[arrestid][arrestPos][0],
	ArrestData[arrestid][arrestPos][1],
	ArrestData[arrestid][arrestPos][2],
	ArrestData[arrestid][arrestInterior],
	ArrestData[arrestid][arrestWorld],
	ArrestData[arrestid][arrestID]
	);
	return mysql_function_query(g_iHandle, query, false, "", "");
}

Arrest_Refresh(arrestid)
{
	if (arrestid != -1 && ArrestData[arrestid][arrestExists])
	{
		static
		string[64];

		if (IsValidDynamicPickup(ArrestData[arrestid][arrestPickup]))
		DestroyDynamicPickup(ArrestData[arrestid][arrestPickup]);

		if (IsValidDynamic3DTextLabel(ArrestData[arrestid][arrestText3D]))
		DestroyDynamic3DTextLabel(ArrestData[arrestid][arrestText3D]);

		format(string, sizeof(string), "Arrestation\n{FFFFFF}\"/police arreter\" pour arrêter le suspect.");

		ArrestData[arrestid][arrestPickup] = CreateDynamicPickup(1247, 23, ArrestData[arrestid][arrestPos][0], ArrestData[arrestid][arrestPos][1], ArrestData[arrestid][arrestPos][2], ArrestData[arrestid][arrestWorld], ArrestData[arrestid][arrestInterior]);
		ArrestData[arrestid][arrestText3D] = CreateDynamic3DTextLabel(string, COLOR_DEFAULT, ArrestData[arrestid][arrestPos][0], ArrestData[arrestid][arrestPos][1], ArrestData[arrestid][arrestPos][2], 1.3, INVALID_VEHICLE_ID, INVALID_PLAYER_ID, 0, ArrestData[arrestid][arrestWorld], ArrestData[arrestid][arrestInterior]);
	}
	return 1;
}

Rack_Save(rackid)
{
	static
	query[512];

	format(query, sizeof(query), "UPDATE `gunracks` SET `rackHouse` = '%d', `rackX` = '%.4f', `rackY` = '%.4f', `rackZ` = '%.4f', `rackA` = '%.4f', `rackInterior` = '%d', `rackWorld` = '%d', `rackWeapon1` = '%d', `rackWeapon2` = '%d', `rackWeapon3` = '%d', `rackWeapon4` = '%d', `rackAmmo1` = '%d', `rackAmmo2` = '%d', `rackAmmo3` = '%d', `rackAmmo4` = '%d' WHERE `rackID` = '%d'",
	RackData[rackid][rackHouse],
	RackData[rackid][rackPos][0],
	RackData[rackid][rackPos][1],
	RackData[rackid][rackPos][2],
	RackData[rackid][rackPos][3],
	RackData[rackid][rackInterior],
	RackData[rackid][rackWorld],
	RackData[rackid][rackWeapons][0],
	RackData[rackid][rackWeapons][1],
	RackData[rackid][rackWeapons][2],
	RackData[rackid][rackWeapons][3],
	RackData[rackid][rackAmmo][0],
	RackData[rackid][rackAmmo][1],
	RackData[rackid][rackAmmo][2],
	RackData[rackid][rackAmmo][3],
	RackData[rackid][rackID]
	);
	return mysql_function_query(g_iHandle, query, false, "", "");
}

Rack_Nearest(playerid)
{
	for (new i = 0; i != MAX_WEAPON_RACKS; i ++) if (RackData[i][rackExists] && IsPlayerInRangeOfPoint(playerid, 3.0, RackData[i][rackPos][0], RackData[i][rackPos][1], RackData[i][rackPos][2]))
	{
		if (GetPlayerInterior(playerid) == RackData[i][rackInterior] && GetPlayerVirtualWorld(playerid) == RackData[i][rackWorld])
		return i;
	}
	return -1;
}

Rack_Count(houseid)
{
	new count;

	for (new i = 0; i != MAX_WEAPON_RACKS; i ++) if (RackData[i][rackExists] && RackData[i][rackHouse] == HouseData[houseid][houseID]) {
		count++;
	}
	return count;
}

Rack_ShowGuns(playerid, rackid)
{
	if (rackid != -1 && RackData[rackid][rackExists])
	{
		new
		string[128];

		for (new i = 0; i < 4; i ++)
		{
			if (!RackData[rackid][rackWeapons][i])
			format(string, sizeof(string), "%s%d: Slot vide\n", string, i + 1);

			else format(string, sizeof(string), "%s%d: %s - %d munitions\n", string, i + 1, ReturnWeaponName(RackData[rackid][rackWeapons][i]), RackData[rackid][rackAmmo][i]);
		}
		Dialog_Show(playerid, RackWeapons, DIALOG_STYLE_LIST, "Étagère", string, "Ok", "X");
	}
	return 1;
}

Rack_Delete(rackid)
{
	if (rackid != -1 && RackData[rackid][rackExists])
	{
		static
		string[64];

		format(string, sizeof(string), "DELETE FROM `gunracks` WHERE `rackID` = '%d'", RackData[rackid][rackID]);
		mysql_function_query(g_iHandle, string, false, "", "");

		for (new i = 0; i < 5; i ++) if (IsValidDynamicObject(RackData[rackid][rackObjects][i])) {
			DestroyDynamicObject(RackData[rackid][rackObjects][i]);
		}
		if (IsValidDynamic3DTextLabel(RackData[rackid][rackText3D])) {
			DestroyDynamic3DTextLabel(RackData[rackid][rackText3D]);
		}
		RackData[rackid][rackExists] = false;
		RackData[rackid][rackID] = 0;
		RackData[rackid][rackHouse] = 0;
	}
	return 1;
}

Rack_Create(playerid, houseid)
{
	new
		Float:x,
		Float:y,
		Float:z,
		Float:angle;

	if (GetPlayerPos(playerid, x, y, z) && GetPlayerFacingAngle(playerid, angle))
	{
		for (new i = 0; i != MAX_WEAPON_RACKS; i ++) if (!RackData[i][rackExists])
		{
			x += 1.5 * floatsin(-angle, degrees);
			y += 1.5 * floatcos(-angle, degrees);

			RackData[i][rackExists] = true;
			RackData[i][rackHouse] = (houseid == -1) ? (-1) : (HouseData[houseid][houseID]);

			RackData[i][rackPos][0] = x;
			RackData[i][rackPos][1] = y;
			RackData[i][rackPos][2] = z;
			RackData[i][rackPos][3] = angle;
			RackData[i][rackInterior] = GetPlayerInterior(playerid);
			RackData[i][rackWorld] = GetPlayerVirtualWorld(playerid);

			Rack_Refresh(i);
			mysql_function_query(g_iHandle, "INSERT INTO `gunracks` (`rackHouse`) VALUES(0)", false, "OnRackCreated", "d", i);

			return i;
		}
	}
	return -1;
}

Rack_RefreshGuns(rackid)
{
	if (rackid != -1 && RackData[rackid][rackExists])
	{
		new
			Float:x,
			Float:y,
			Float:z;

		z = RackData[rackid][rackPos][2] + 2.19;

		for (new i = 0; i < 4; i ++) if (IsValidDynamicObject(RackData[rackid][rackObjects][i])) {
			DestroyDynamicObject(RackData[rackid][rackObjects][i]);

			RackData[rackid][rackObjects][i] = INVALID_OBJECT_ID;
		}
		for (new i = 0; i < 4; i ++)
		{
			if (RackData[rackid][rackWeapons][i])
			{
				x = RackData[rackid][rackPos][0] - (0.2 * floatsin(-RackData[rackid][rackPos][3], degrees) + (0.45 * floatsin(-RackData[rackid][rackPos][3] - 90, degrees)));
				y = RackData[rackid][rackPos][1] - (0.2 * floatcos(-RackData[rackid][rackPos][3], degrees) + (0.45 * floatcos(-RackData[rackid][rackPos][3] - 90, degrees)));

				RackData[rackid][rackObjects][i] = CreateDynamicObject(GetWeaponModel(RackData[rackid][rackWeapons][i]), x, y, z, 94.7, 93.7, (22 <= RackData[rackid][rackWeapons][i] <= 38) ? (RackData[rackid][rackPos][3] + 90.0) : (RackData[rackid][rackPos][3]), RackData[rackid][rackWorld], RackData[rackid][rackInterior]);
			}
			else
			{
				RackData[rackid][rackObjects][i] = INVALID_OBJECT_ID;
			}
			z = z - 0.69;
		}
	}
	return 1;
}

Rack_Refresh(rackid)
{
	if (rackid != -1 && RackData[rackid][rackExists])
	{
		static
		str[64];

		if (IsValidDynamicObject(RackData[rackid][rackObjects][4])) {
			DestroyDynamicObject(RackData[rackid][rackObjects][4]);
		}
		if (IsValidDynamic3DTextLabel(RackData[rackid][rackText3D])) {
			DestroyDynamic3DTextLabel(RackData[rackid][rackText3D]);
		}
		format(str, sizeof(str), "{FFFFFF}/etagere pour plus d'informations");
		RackData[rackid][rackText3D] = CreateDynamic3DTextLabel(str, COLOR_DEFAULT, RackData[rackid][rackPos][0], RackData[rackid][rackPos][1], RackData[rackid][rackPos][2] + 1.2, 5.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, RackData[rackid][rackWorld], RackData[rackid][rackInterior]);

		Rack_RefreshGuns(rackid);
		RackData[rackid][rackObjects][4] = CreateDynamicObject(2475, RackData[rackid][rackPos][0], RackData[rackid][rackPos][1], RackData[rackid][rackPos][2], 0.0, 0.0, RackData[rackid][rackPos][3], RackData[rackid][rackWorld], RackData[rackid][rackInterior]);
	}
	return 1;
}

forward Teleportations_Load(playerid);
public Teleportations_Load(playerid)
{

	new
		rows,
		fields,
		string[150*MAX_TELEPORTATIONS_CUSTOM],
		name[50],
		id_telep;

	cache_get_data(rows, fields, g_iHandle);

	format(string, sizeof(string), "{FF0000}Créer un nouveau point\n{FFFFFF}");
	
	for (new i = 0; i < rows; i ++) if (i < MAX_TELEPORTATIONS_CUSTOM)
	{
		cache_get_field_content(i, "Name", name, g_iHandle, 50);
		id_telep = cache_get_field_int(i, "ID");

	    format(string, sizeof(string), "%s%d - %s\n", string, id_telep, name);
	}

	Dialog_Show(playerid, DIALOG_TP_CUSTOM, DIALOG_STYLE_LIST, "Liste des téléportations", string, "Ok", "Annuler");
	return 1;
}

Dialog:DIALOG_TP_CUSTOM(playerid, response, listitem, inputtext[])
{
	if (!response)
		return 1;

	switch(listitem)
	{
		case 0:
		{
			Dialog_Show(playerid, DIALOG_TP_CREATE, DIALOG_STYLE_INPUT, "Liste des téléportations", "Entrez le nom désiré pour le nouveau point", "Ok", "Annuler");
		}
		default:
		{
			new
			    id_teleportation;

			sscanf(inputtext, "d", id_teleportation);
			SetPVarInt(playerid, "TP_CUSTOM", id_teleportation);

			if(PlayerData[playerid][pAdmin] >= 4) Dialog_Show(playerid, DIALOG_TP_CUSTOM2, DIALOG_STYLE_LIST, "Liste des téléportations", "- Se téléporter au point\n- Supprimer le point", "Ok", "Annuler");
			else Dialog_Show(playerid, DIALOG_TP_CUSTOM2, DIALOG_STYLE_LIST, "Liste des téléportations", "- Se téléporter au point", "Ok", "Annuler");
		}
	}

	return 1;
}

Dialog:DIALOG_TP_CREATE(playerid, response, listitem, inputtext[])
{
	if(!response)
	{
		mysql_function_query(g_iHandle, "SELECT * FROM `teleportations`", true, "Teleportations_Load", "d", playerid);
	    return 1;
	}
	
	new
	    query[250],
	    Float:pos[3],
	    interior,
	    virtualworld;

	GetPlayerPos(playerid, pos[0], pos[1], pos[2]);
	interior = GetPlayerInterior(playerid);
	virtualworld = GetPlayerVirtualWorld(playerid);

	mysql_format(g_iHandle, query, sizeof(query), "INSERT INTO teleportations (ID, Name, PosX, PosY, PosZ, Interior, VirtualWorld) VALUES (NULL, '%s', %f, %f, %f, %d, %d);",

	inputtext,
	pos[0],
	pos[1],
	pos[2],

	interior,
	virtualworld);

	mysql_query(g_iHandle, query);

	SendClientMessageEx(playerid, COLOR_INFO, "Vous avez créé le point de téléportation \"%s\". {FFFFFF}(/goto mapcustom).", inputtext);
	return 1;
}

Dialog:DIALOG_TP_CUSTOM2(playerid, response, listitem, inputtext[])
{
	if (!response)
		return 1;

	new
	    id_teleportation = GetPVarInt(playerid, "TP_CUSTOM"),
	    query[300];
	    
	switch(listitem)
	{
		case 0:
		{
			new
				Float:pos[3],
				interior,
				virtualworld,
				title[50];

			format(query, sizeof(query), "SELECT * FROM `teleportations` WHERE `ID` = '%d'", id_teleportation);
			mysql_query(g_iHandle, query);

			if(cache_num_rows())
			{
			    pos[0] = cache_get_row_float(0, 2, g_iHandle);
			    pos[1] = cache_get_row_float(0, 3, g_iHandle);
			    pos[2] = cache_get_row_float(0, 4, g_iHandle);

			    interior = cache_get_row_int(0, 5, g_iHandle);
			    virtualworld = cache_get_row_int(0, 6, g_iHandle);
			    
				cache_get_field_content(0, "Name", title, g_iHandle, sizeof(title));

			    SetPlayerPos(playerid, pos[0], pos[1], pos[2]);
			    SetPlayerInterior(playerid, interior);
			    SetPlayerVirtualWorld(playerid, virtualworld);
			}
			SendClientMessageEx(playerid, COLOR_INFO, "Vous avez été téléporté au point \"%s\". {FFFFFF}(/goto mapcustom).", title);
		}
		case 1:
		{
		    mysql_format(g_iHandle, query, sizeof(query), "DELETE FROM teleportations WHERE ID = %d", id_teleportation);
			mysql_query(g_iHandle, query);

			SendClientMessageEx(playerid, COLOR_INFO, "Vous avez supprimer le point de téléportation ID : %d. {FFFFFF}(/goto mapcustom).", id_teleportation);
		}
	}
	

	return 1;
}

forward Detector_Load();
public Detector_Load()
{
	static
	rows,
	fields;

	cache_get_data(rows, fields, g_iHandle);

	for (new i = 0; i < rows; i ++) if (i < MAX_METAL_DETECTORS)
	{
		MetalDetectors[i][detectorExists] = 1;
		MetalDetectors[i][detectorID] = cache_get_field_int(i, "detectorID");
		MetalDetectors[i][detectorPos][0] = cache_get_field_float(i, "detectorX");
		MetalDetectors[i][detectorPos][1] = cache_get_field_float(i, "detectorY");
		MetalDetectors[i][detectorPos][2] = cache_get_field_float(i, "detectorZ");
		MetalDetectors[i][detectorPos][3] = cache_get_field_float(i, "detectorAngle");
		MetalDetectors[i][detectorInterior] = cache_get_field_int(i, "detectorInterior");
		MetalDetectors[i][detectorWorld] = cache_get_field_int(i, "detectorWorld");

		Detector_Refresh(i);
	}
	return 1;
}

forward Graffiti_Load();
public Graffiti_Load()
{
	static
	rows,
	fields;

	cache_get_data(rows, fields, g_iHandle);

	for (new i = 0; i < rows; i ++) if (i < MAX_GRAFFITI_POINTS)
	{
		cache_get_field_content(i, "graffitiText", GraffitiData[i][graffitiText], g_iHandle, 64);
		cache_get_field_content(i, "graffitiFont", GraffitiData[i][graffitiFont], g_iHandle, 64);

		GraffitiData[i][graffitiExists] = 1;
		GraffitiData[i][graffitiID] = cache_get_field_int(i, "graffitiID");
		GraffitiData[i][graffitiPos][0] = cache_get_field_float(i, "graffitiX");
		GraffitiData[i][graffitiPos][1] = cache_get_field_float(i, "graffitiY");
		GraffitiData[i][graffitiPos][2] = cache_get_field_float(i, "graffitiZ");
		GraffitiData[i][graffitiPos][3] = cache_get_field_float(i, "graffitiRX");
		GraffitiData[i][graffitiPos][4] = cache_get_field_float(i, "graffitiRY");
		GraffitiData[i][graffitiPos][5] = cache_get_field_float(i, "graffitiRZ");
		GraffitiData[i][graffitiColor] = cache_get_field_int(i, "graffitiColor");
		GraffitiData[i][graffitiSize] = cache_get_field_int(i, "graffitiSize");
		GraffitiData[i][graffitiModelID] = cache_get_field_int(i, "graffitiModelID");
		GraffitiData[i][graffitiFaction] = cache_get_field_int(i, "graffitiFaction");

		Graffiti_Refresh(i);
	}
	return 1;
}

forward Speed_Load();
public Speed_Load()
{
	static
	rows,
	fields;

	cache_get_data(rows, fields, g_iHandle);

	for (new i = 0; i < rows; i ++) if (i < MAX_SPEED_CAMERAS)
	{
		SpeedData[i][speedExists] = true;
		SpeedData[i][speedID] = cache_get_field_int(i, "speedID");
		SpeedData[i][speedRange] = cache_get_field_float(i, "speedRange");
		SpeedData[i][speedLimit] = cache_get_field_float(i, "speedLimit");
		SpeedData[i][speedPos][0] = cache_get_field_float(i, "speedX");
		SpeedData[i][speedPos][1] = cache_get_field_float(i, "speedY");
		SpeedData[i][speedPos][2] = cache_get_field_float(i, "speedZ");
		SpeedData[i][speedPos][3] = cache_get_field_float(i, "speedRX");
		SpeedData[i][speedPos][4] = cache_get_field_float(i, "speedRY");
		SpeedData[i][speedPos][5] = cache_get_field_float(i, "speedRZ");

		Speed_Refresh(i);
	}
	return 1;
}

forward Rack_Load();
public Rack_Load()
{
	static
	rows,
	fields,
	str[24];

	cache_get_data(rows, fields, g_iHandle);

	for (new i = 0; i < rows; i ++) if (i < MAX_WEAPON_RACKS)
	{
		RackData[i][rackExists] = true;
		RackData[i][rackID] = cache_get_field_int(i, "rackID");
		RackData[i][rackHouse] = cache_get_field_int(i, "rackHouse");
		RackData[i][rackPos][0] = cache_get_field_float(i, "rackX");
		RackData[i][rackPos][1] = cache_get_field_float(i, "rackY");
		RackData[i][rackPos][2] = cache_get_field_float(i, "rackZ");
		RackData[i][rackPos][3] = cache_get_field_float(i, "rackA");
		RackData[i][rackInterior] = cache_get_field_int(i, "rackInterior");
		RackData[i][rackWorld] = cache_get_field_int(i, "rackWorld");

		for (new j = 0; j < 4; j ++) {
			format(str, 24, "rackWeapon%d", j + 1);
			RackData[i][rackWeapons][j] = cache_get_field_int(i, str);

			format(str, 24, "rackAmmo%d", j + 1);
			RackData[i][rackAmmo][j] = cache_get_field_int(i, str);
		}
		Rack_Refresh(i);
	}
	return 1;
}

forward Vendor_Load();
public Vendor_Load()
{
	static
	rows,
	fields;

	cache_get_data(rows, fields, g_iHandle);

	for (new i = 0; i < rows; i ++) if (i < MAX_VENDORS)
	{
		VendorData[i][vendorExists] = true;
		VendorData[i][vendorID] = cache_get_field_int(i, "vendorID");
		VendorData[i][vendorType] = cache_get_field_int(i, "vendorType");
		VendorData[i][vendorPos][0] = cache_get_field_float(i, "vendorX");
		VendorData[i][vendorPos][1] = cache_get_field_float(i, "vendorY");
		VendorData[i][vendorPos][2] = cache_get_field_float(i, "vendorZ");
		VendorData[i][vendorPos][3] = cache_get_field_float(i, "vendorRX");
		VendorData[i][vendorPos][4] = cache_get_field_float(i, "vendorRY");
		VendorData[i][vendorPos][5] = cache_get_field_float(i, "vendorRZ");
		VendorData[i][vendorInterior] = cache_get_field_int(i, "vendorInterior");
		VendorData[i][vendorWorld] = cache_get_field_int(i, "vendorWorld");

		Vendor_Refresh(i);
	}
	return 1;
}

forward Garbage_Load();
public Garbage_Load()
{
	static
	rows,
	fields;

	cache_get_data(rows, fields, g_iHandle);

	for (new i = 0; i < rows; i ++) if (i < MAX_GARBAGE_BINS)
	{
		GarbageData[i][garbageExists] = true;
		GarbageData[i][garbageID] = cache_get_field_int(i, "garbageID");
		GarbageData[i][garbageModel] = cache_get_field_int(i, "garbageModel");
		GarbageData[i][garbageCapacity] = cache_get_field_int(i, "garbageCapacity");
		GarbageData[i][garbagePos][0] = cache_get_field_float(i, "garbageX");
		GarbageData[i][garbagePos][1] = cache_get_field_float(i, "garbageY");
		GarbageData[i][garbagePos][2] = cache_get_field_float(i, "garbageZ");
		GarbageData[i][garbagePos][3] = cache_get_field_float(i, "garbageRX");
		GarbageData[i][garbagePos][4] = cache_get_field_float(i, "garbageRY");
		GarbageData[i][garbagePos][5] = cache_get_field_float(i, "garbageRZ");
		GarbageData[i][garbageInterior] = cache_get_field_int(i, "garbageInterior");
		GarbageData[i][garbageWorld] = cache_get_field_int(i, "garbageWorld");

		Garbage_Refresh(i);
	}
	return 1;
}

forward Camera_Load();
public Camera_Load()
{
	static
	rows,
	fields;

	cache_get_data(rows, fields, g_iHandle);

	for (new i = 0; i < rows; i ++) if (i < MAX_CAMERAS)
	{
		CameraData[i][cameraExists] = true;
		CameraData[i][cameraID] = cache_get_field_int(i, "garbageID");

		cache_get_field_content(i, "cameraZone", CameraData[i][cameraZone], g_iHandle, 24);
		cache_get_field_content(i, "cameraLocalisation", CameraData[i][cameraLocalisation], g_iHandle, 24);
		
		CameraData[i][cameraPos][0] = cache_get_field_float(i, "cameraPosX_1");
		CameraData[i][cameraPos][1] = cache_get_field_float(i, "cameraPosY_1");
		CameraData[i][cameraPos][2] = cache_get_field_float(i, "cameraPosZ_1");
		CameraData[i][cameraPos][3] = cache_get_field_float(i, "cameraPosX_2");
		CameraData[i][cameraPos][4] = cache_get_field_float(i, "cameraPosY_2");
		CameraData[i][cameraPos][5] = cache_get_field_float(i, "cameraPosZ_2");
		
		CameraData[i][cameraRot][0] = cache_get_field_float(i, "cameraRX");
		CameraData[i][cameraRot][1] = cache_get_field_float(i, "cameraRY");
		CameraData[i][cameraRot][2] = cache_get_field_float(i, "cameraRZ");
		
		CameraData[i][cameraInterior] = cache_get_field_int(i, "cameraInterior");
		CameraData[i][cameraWorld] = cache_get_field_int(i, "cameraWorld");
		
		CameraData[i][cameraStatus] = cache_get_field_int(i, "cameraStatus");

		Camera_Refresh(i);
	}
	return 1;
}

forward Gym_Load();
public Gym_Load()
{
	static
	rows,
	fields;

	cache_get_data(rows, fields, g_iHandle);

	for (new i = 0; i < rows; i ++) if (i < MAX_GYM)
	{
		GymData[i][gymExists] = true;
		GymData[i][gymID] = cache_get_field_int(i, "gymID");
		GymData[i][gymType] = cache_get_field_int(i, "gymType");
		GymData[i][gymInterior] = cache_get_field_int(i, "gymInterior");
		GymData[i][gymWorld] = cache_get_field_int(i, "gymWorld");

		GymData[i][gymObjectPos_1][0] = cache_get_field_float(i, "gymObjectPos_1_X");
		GymData[i][gymObjectPos_1][1] = cache_get_field_float(i, "gymObjectPos_1_Y");
		GymData[i][gymObjectPos_1][2] = cache_get_field_float(i, "gymObjectPos_1_Z");
		GymData[i][gymObjectPos_1][3] = cache_get_field_float(i, "gymObjectPos_1_RX");
		GymData[i][gymObjectPos_1][4] = cache_get_field_float(i, "gymObjectPos_1_RY");
		GymData[i][gymObjectPos_1][5] = cache_get_field_float(i, "gymObjectPos_1_RZ");

		GymData[i][gymObjectPos_2][0] = cache_get_field_float(i, "gymObjectPos_2_X");
		GymData[i][gymObjectPos_2][1] = cache_get_field_float(i, "gymObjectPos_2_Y");
		GymData[i][gymObjectPos_2][2] = cache_get_field_float(i, "gymObjectPos_2_Z");
		GymData[i][gymObjectPos_2][3] = cache_get_field_float(i, "gymObjectPos_2_RX");
		GymData[i][gymObjectPos_2][4] = cache_get_field_float(i, "gymObjectPos_2_RY");
		GymData[i][gymObjectPos_2][5] = cache_get_field_float(i, "gymObjectPos_2_RZ");

		GymData[i][gymPlayerPos][0] = cache_get_field_float(i, "gymPlayerPos_X");
		GymData[i][gymPlayerPos][1] = cache_get_field_float(i, "gymPlayerPos_Y");
		GymData[i][gymPlayerPos][2] = cache_get_field_float(i, "gymPlayerPos_Z");
		GymData[i][gymPlayerPos][3] = cache_get_field_float(i, "gymPlayerPos_RX");

		GymData[i][gymUsed] = false;
		GymData[i][gymPlayerUse] = INVALID_PLAYER_ID;
		
		Gym_Refresh(i);
	}
	return 1;
}

forward Pickup_Load();
public Pickup_Load()
{
	static
	rows,
	fields;

	cache_get_data(rows, fields, g_iHandle);

	for (new i = 0; i < rows; i ++) if (i < MAX_DYNAMICS_PICKUPS)
	{
		PickupData[i][pickupExists] = true;
		PickupData[i][pickupID] = cache_get_field_int(i, "pickupID");
		PickupData[i][pickupPos][0] = cache_get_field_float(i, "pickupX");
		PickupData[i][pickupPos][1] = cache_get_field_float(i, "pickupY");
		PickupData[i][pickupPos][2] = cache_get_field_float(i, "pickupZ");
		PickupData[i][pickupRange] = cache_get_field_float(i, "pickupRange");
		cache_get_field_content(i, "pickupText", PickupData[i][pickupText], g_iHandle, 150);
		PickupData[i][pickupIcon] = cache_get_field_int(i, "pickupIcon");
		PickupData[i][pickupInterior] = cache_get_field_int(i, "pickupInterior");
		PickupData[i][pickupWorld] = cache_get_field_int(i, "pickupWorld");

		Pickup_Refresh(i);
	}
	return 1;
}

forward Cabine_Load();
public Cabine_Load()
{
	static
	rows,
	fields;

	cache_get_data(rows, fields, g_iHandle);

	for (new i = 0; i < rows; i ++) if (i < MAX_CABINES)
	{
		CabineData[i][cabineExists] = true;
		CabineData[i][cabineID] = cache_get_field_int(i, "cabineID");
		CabineData[i][cabinePos][0] = cache_get_field_float(i, "cabineX");
		CabineData[i][cabinePos][1] = cache_get_field_float(i, "cabineY");
		CabineData[i][cabinePos][2] = cache_get_field_float(i, "cabineZ");
		CabineData[i][cabinePos][3] = cache_get_field_float(i, "cabineRX");
		CabineData[i][cabineInterior] = cache_get_field_int(i, "cabineInterior");
		CabineData[i][cabineWorld] = cache_get_field_int(i, "cabineWorld");
		CabineData[i][cabineNumber] = cache_get_field_int(i, "cabineNumber");

		CabineData[i][cabineCallID] = INVALID_PLAYER_ID;
		Cabine_Refresh(i);
	}
	return 1;
}

forward Sign_Load();
public Sign_Load()
{
	static
	rows,
	fields;

	cache_get_data(rows, fields, g_iHandle);

	for (new i = 0; i < rows; i ++) if (i < MAX_SIGNS)
	{
		SignData[i][signExists] = true;
		SignData[i][signID] = cache_get_field_int(i, "signID");
		SignData[i][signModel] = cache_get_field_int(i, "signModel");
		SignData[i][signPos][0] = cache_get_field_float(i, "signX");
		SignData[i][signPos][1] = cache_get_field_float(i, "signY");
		SignData[i][signPos][2] = cache_get_field_float(i, "signZ");
		SignData[i][signPos][3] = cache_get_field_float(i, "signRX");

		Sign_Refresh(i);
	}
	return 1;
}

forward Actor_Load();
public Actor_Load()
{
	Actor_Reset();
	static
	rows,
	fields;

	cache_get_data(rows, fields, g_iHandle);

	for (new i = 0; i < rows; i ++) if (i < MAX_ACTORS)
	{
		ActorData[i][actorExists] = true;
		ActorData[i][actorID] = cache_get_field_int(i, "actorID");
		ActorData[i][actorSkin] = cache_get_field_int(i, "actorSkin");
		ActorData[i][actorBiz] = cache_get_field_int(i, "actorBiz");
		cache_get_field_content(i, "actorName", ActorData[i][actorName], g_iHandle, 25);
		ActorData[i][actorPos][0] = cache_get_field_float(i, "actorX");
		ActorData[i][actorPos][1] = cache_get_field_float(i, "actorY");
		ActorData[i][actorPos][2] = cache_get_field_float(i, "actorZ");
		ActorData[i][actorPos][3] = cache_get_field_float(i, "actorAngle");
		ActorData[i][actorWorld] = cache_get_field_int(i, "actorVW");
		cache_get_field_content(i, "actorText", ActorData[i][actorText], g_iHandle, 100);

		cache_get_field_content(i, "anim_Lib", ActorData[i][anim_Lib], g_iHandle, 50);
		cache_get_field_content(i, "anim_Name", ActorData[i][anim_Name], g_iHandle, 50);

		ActorData[i][anim_Speed] = cache_get_field_float(i, "anim_Speed");
		ActorData[i][anim_Loop] = cache_get_field_int(i, "anim_Loop");
		ActorData[i][anim_LockX] = cache_get_field_int(i, "anim_LockX");
		ActorData[i][anim_LockY] = cache_get_field_int(i, "anim_LockY");
		ActorData[i][anim_Freeze] = cache_get_field_int(i, "anim_Freeze");
		ActorData[i][anim_Time] = cache_get_field_int(i, "anim_Time");

		Actor_Refresh(i);
	}
	return 1;
}

stock Actor_Reset()
{
	for(new i=0; i<MAX_ACTORS; i++)
	{
	    ActorData[i][actorExists] = false;
	    ActorData[i][actorID] = -1;
	    ActorData[i][actorSkin] = -1;
	    ActorData[i][actorBiz] = -1;
	    format(ActorData[i][actorName], 25, "null");
	    ActorData[i][actorPos][0] = -1;
	    ActorData[i][actorPos][1] = -1;
	    ActorData[i][actorPos][2] = -1;
	    ActorData[i][actorPos][3] = -1;
	    ActorData[i][actorWorld] = -1;
	    ActorData[i][actorObject] = -1;

	    ActorData[i][anim_Speed] = -1;
	    ActorData[i][anim_Loop] = -1;
	    ActorData[i][anim_LockX] = -1;
	    ActorData[i][anim_LockY] = -1;
	    ActorData[i][anim_Freeze] = -1;
	    ActorData[i][anim_Time] = -1;
	}
	
	for(new i=0; i<MAX_TAXIS_CALLS; i++)
	{
	    TaxiData[i][tExists] = false;
	    TaxiData[i][actorID] = -1;
	    format(TaxiData[i][tName], 25, "null");
	    TaxiData[i][tSkin] = -1;
		TaxiData[i][tPos][0] = -1;
		TaxiData[i][tPos][1] = -1;
		TaxiData[i][tPos][2] = -1;
		TaxiData[i][tPos][3] = -1;
		TaxiData[i][tDest][0] = -1;
		TaxiData[i][tDest][1] = -1;
		TaxiData[i][tDest][2] = -1;
	}
}

stock Actor_Save(actorid)
{
	static
	query[300];

	format(query, sizeof(query), "UPDATE `actors` SET `actorSkin` = '%d', `actorBiz` = '%d', `actorName` = '%s', `actorX` = '%.4f', `actorY` = '%.4f', `actorZ` = '%.4f', `actorAngle` = '%.4f', `actorVW` = '%d', `actorText` = '%s' WHERE `actorID` = '%d'",
	ActorData[actorid][actorSkin],
	ActorData[actorid][actorBiz],
	ActorData[actorid][actorName],
	ActorData[actorid][actorPos][0],
	ActorData[actorid][actorPos][1],
	ActorData[actorid][actorPos][2],
	ActorData[actorid][actorPos][3],
	ActorData[actorid][actorWorld],
	ActorData[actorid][actorText],
	ActorData[actorid][actorID]
	);
	mysql_function_query(g_iHandle, query, false, "", "");
	
	format(query, sizeof(query), "UPDATE `actors` SET `anim_Lib` = '%s', `anim_Name` = '%s', `anim_Speed` = '%d', `anim_Loop` = '%d', `anim_LockX` = '%d', `anim_LockY` = '%d', `anim_Freeze` = '%d', `anim_Time` = '%d' WHERE `actorID` = '%d'",
	ActorData[actorid][anim_Lib],
	ActorData[actorid][anim_Name],
	ActorData[actorid][anim_Speed],
	ActorData[actorid][anim_Loop],
	ActorData[actorid][anim_LockX],
	ActorData[actorid][anim_LockY],
	ActorData[actorid][anim_Freeze],
	ActorData[actorid][anim_Time],
	ActorData[actorid][actorID]
	);
	mysql_function_query(g_iHandle, query, false, "", "");
	return 1;
}

stock Actor_Create(playerid, bizid = -1, name[] = "null")
{
	for (new i = 0; i != MAX_ACTORS; i ++) if (!ActorData[i][actorExists])
	{
		ActorData[i][actorExists] = true;
		
		if(bizid == -1) ActorData[i][actorSkin] = 1;
		else ActorData[i][actorSkin] = 194;

		if(bizid == -1) format(ActorData[i][actorName], 25, "null");
		else format(ActorData[i][actorName], 25, name);

		if(bizid != -1) format(ActorData[i][actorText], 25, "/acheter");
		
		ActorData[i][actorBiz] = bizid;

        ActorData[i][anim_Lib] = EOS;
        ActorData[i][anim_Name] = EOS;
		ActorData[i][anim_Speed] = 4.1;
		ActorData[i][anim_Loop] = 1;
		ActorData[i][anim_LockX] = 0;
		ActorData[i][anim_LockY] = 0;
		ActorData[i][anim_Freeze] = 1;
		ActorData[i][anim_Time] = 0;

		GetPlayerPos(playerid, ActorData[i][actorPos][0], ActorData[i][actorPos][1], ActorData[i][actorPos][2]);
		GetPlayerFacingAngle(playerid, ActorData[i][actorPos][3]);

		ActorData[i][actorWorld] = GetPlayerVirtualWorld(playerid);

		Actor_Refresh(i);
		mysql_function_query(g_iHandle, "INSERT INTO `actors` (`actorSkin`) VALUES(0)", false, "OnActorCreated", "d", i);
		return i;
	}
	return -1;
}

stock Actor_Delete(actorid)
{
	if (actorid != -1 && ActorData[actorid][actorExists])
	{
		new
		string[64];

		format(string, sizeof(string), "DELETE FROM `actors` WHERE `actorID` = '%d'", ActorData[actorid][actorID]);
		mysql_function_query(g_iHandle, string, false, "", "");

		if (IsValidDynamic3DTextLabel(ActorData[actorid][actorText3D]))
		DestroyDynamic3DTextLabel(ActorData[actorid][actorText3D]);

		if (IsValidActor(ActorData[actorid][actorObject]))
		DestroyActor(ActorData[actorid][actorObject]);

		ActorData[actorid][actorExists] = false;
		ActorData[actorid][actorSkin] = 0;
		ActorData[actorid][actorID] = 0;
		ActorData[actorid][actorBiz] = -1;
	    format(ActorData[actorid][actorName], 25, "null");
	}
	return 1;
}

Actor_Nearest(playerid)
{
	for (new i = 0; i != MAX_ACTORS; i ++) if (ActorData[i][actorExists] && IsPlayerInRangeOfPoint(playerid, 3.0, ActorData[i][actorPos][0], ActorData[i][actorPos][1], ActorData[i][actorPos][2]))
	{
		if (GetPlayerVirtualWorld(playerid) == ActorData[i][actorWorld])
		return i;
	}
	return -1;
}

stock Actor_CountBiz(bizid)
{
	new
	    count = 0;
	    
	for(new i=0; i<MAX_ACTORS; i++) if(ActorData[i][actorExists] && ActorData[i][actorBiz] == bizid)
	{
		count ++;
	}
	return count;
}

stock Actor_Refresh(actorid)
{
	if (actorid != -1 && ActorData[actorid][actorExists])
	{
		if (IsValidDynamic3DTextLabel(ActorData[actorid][actorText3D]))
		DestroyDynamic3DTextLabel(ActorData[actorid][actorText3D]);

		if (IsValidActor(ActorData[actorid][actorObject]))
		DestroyActor(ActorData[actorid][actorObject]);

		static
		string[250];

		if(ActorData[actorid][actorBiz] == -1)
			format(string, sizeof(string), "{FFFFFF}%s", ActorData[actorid][actorText]);
			
		else
			format(string, sizeof(string), "%s\n{FFFFFF}%s", ActorData[actorid][actorName], ActorData[actorid][actorText]);
		
		ActorData[actorid][actorText3D] = CreateDynamic3DTextLabel(string, COLOR_DEFAULT, ActorData[actorid][actorPos][0], ActorData[actorid][actorPos][1], ActorData[actorid][actorPos][2], 5.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, ActorData[actorid][actorWorld], -1);
		ActorData[actorid][actorObject] = CreateActor(ActorData[actorid][actorSkin], ActorData[actorid][actorPos][0], ActorData[actorid][actorPos][1], ActorData[actorid][actorPos][2], ActorData[actorid][actorPos][3]);

		SetActorVirtualWorld(ActorData[actorid][actorObject], ActorData[actorid][actorWorld]);
        
   		if(!isnull(ActorData[actorid][anim_Name]))
		ApplyActorAnimation(ActorData[actorid][actorObject], ActorData[actorid][anim_Lib], ActorData[actorid][anim_Name], ActorData[actorid][anim_Speed], ActorData[actorid][anim_Loop], ActorData[actorid][anim_LockX], ActorData[actorid][anim_LockY], ActorData[actorid][anim_Freeze], ActorData[actorid][anim_Time]);
	}
	return 1;
}

stock Actor_GetID(actorid)
{
	for(new i=0; i<MAX_ACTORS; i++) if(ActorData[i][actorExists])
	{
		if(ActorData[i][actorObject] == actorid)
			return i;
	}
	return -1;
}

stock Corpse_Reset()
{
	for(new i=0; i<MAX_CORPSE; i++)
	{
	    CorpseData[i][corpseExists] = false;
	    CorpseData[i][corpseObject] = -1;
	    CorpseData[i][corpseSkin] = -1;
	    CorpseData[i][corpsePos][0] = -1;
	    CorpseData[i][corpsePos][1] = -1;
	    CorpseData[i][corpsePos][2] = -1;
	    CorpseData[i][corpsePos][3] = -1;
	    CorpseData[i][corpseWorld] = -1;
	    CorpseData[i][corpseInt] = -1;
		CorpseData[i][corpseUsed] = false;
		CorpseData[i][corpseFire] = false;

        CorpseData[i][corpsePlayer] = EOS;
        CorpseData[i][corpseTimeDeath_format] = EOS;
		CorpseData[i][corpseTimeDeath] = -1;
		CorpseData[i][corpseWeapon] = -1;
	}
}

stock Corpse_Create(playerid, Float:posX, Float:posY, Float:posZ, Float:posRX, virtualWorld, interior, weapon)
{
	for (new i = 0; i != MAX_CORPSE; i ++) if (!CorpseData[i][corpseExists])
	{
		CorpseData[i][corpseExists] = true;

		CorpseData[i][corpseSkin] = GetPlayerSkin(playerid);

		CorpseData[i][corpseWorld] = virtualWorld;
		CorpseData[i][corpseInt] = interior;

		CorpseData[i][corpsePos][0] = posX;
		CorpseData[i][corpsePos][1] = posY;
		CorpseData[i][corpsePos][2] = posZ;
		CorpseData[i][corpsePos][3] = posRX;

		CorpseData[i][corpseCar] = INVALID_VEHICLE_ID;
		
		CorpseData[i][corpseUsed] = false;
		CorpseData[i][corpseFire] = false;

		for(new inv=0; inv<MAX_INVENTORY; inv++)
		{
		    corpseData_inventory[i][inv][invExists] = InventoryData[playerid][inv][invExists];
		    corpseData_inventory[i][inv][invID] = InventoryData[playerid][inv][invID];
		    corpseData_inventory[i][inv][invModel] = InventoryData[playerid][inv][invModel];
		    corpseData_inventory[i][inv][invQuantity] = InventoryData[playerid][inv][invQuantity];
		    strpack(corpseData_inventory[i][inv][invItem], InventoryData[playerid][inv][invItem], 32 char);
		}
		
	// DATA :
	
	    // corpsePlayer (NOM)
		if (Inventory_HasItem(playerid, "Permis de conduire") || Inventory_HasItem(playerid, "Permis d'arme"))
			format(CorpseData[i][corpsePlayer], MAX_PLAYER_NAME +1, ReturnName(playerid));
		else
			format(CorpseData[i][corpsePlayer], MAX_PLAYER_NAME +1, "Non déterminé");

		// corpsePhone (TELEPHONE)
		if (Inventory_HasItem(playerid, "Téléphone"))
			format(CorpseData[i][corpsePhone], 50, "{33CC33}Oui{FFFFFF} (%d)", PlayerData[playerid][pPhone]);
		else
			format(CorpseData[i][corpsePhone], 50, "{FF0000}Non");

		// corpseRadio (RADIO)
		if (Inventory_HasItem(playerid, "Radio"))
			format(CorpseData[i][corpseRadio], 50, "{33CC33}Oui{FFFFFF} (Fréquence: %d)", PlayerData[playerid][pChannel]);
		else
			format(CorpseData[i][corpseRadio], 50, "{FF0000}Non");

		CorpseData[i][corpseMoney] = GetMoney(playerid);
		CorpseData[i][corpseTimeDeath] = gettime();
		CorpseData[i][corpseWeapon] = weapon;
		
		new
			time[6];

		gettime(time[0], time[1], time[2]);
		getdate(time[3], time[4], time[5]);

		format(CorpseData[i][corpseTimeDeath_format], 50, "Le %02d/%02d/%02d aux environs de %02dh", time[5], time[4], time[3], time[0]);

		Corpse_Refresh(i);
		return i;
	}
	return -1;
}
stock Corpse_Refresh(corpseid)
{
	if (corpseid != -1 && CorpseData[corpseid][corpseExists])
	{
		if (IsValidActor(CorpseData[corpseid][corpseObject]))
		DestroyActor(CorpseData[corpseid][corpseObject]);

		CorpseData[corpseid][corpseObject] = CreateActor(CorpseData[corpseid][corpseSkin], CorpseData[corpseid][corpsePos][0], CorpseData[corpseid][corpsePos][1], CorpseData[corpseid][corpsePos][2], CorpseData[corpseid][corpsePos][3]);

        SetActorVirtualWorld(CorpseData[corpseid][corpseObject], CorpseData[corpseid][corpseWorld]);
        ApplyActorAnimation(CorpseData[corpseid][corpseObject], "FINALE", "FIN_Land_Die", 0.3, 0, 1, 1, 1, -1);

	}
	return 1;
}

Corpse_Delete(corpseid)
{
	if (corpseid != -1 && CorpseData[corpseid][corpseExists])
	{
		if (IsValidActor(CorpseData[corpseid][corpseObject]))
		DestroyActor(CorpseData[corpseid][corpseObject]);

		if(IsValidObject(CorpseData[corpseid][corpseObject_secondary]))
		DestroyObject(CorpseData[corpseid][corpseObject_secondary]);

		CorpseData[corpseid][corpseObject] = 0;
		CorpseData[corpseid][corpseExists] = false;
		CorpseData[corpseid][corpseSkin] = 0;
		CorpseData[corpseid][corpsePos][0] = 0.0;
		CorpseData[corpseid][corpsePos][1] = 0.0;
		CorpseData[corpseid][corpsePos][2] = 0.0;
		CorpseData[corpseid][corpsePos][3] = 0.0;
		CorpseData[corpseid][corpseUsed] = false;
		CorpseData[corpseid][corpseFire] = false;
		CorpseData[corpseid][corpseWorld] = 0;
		CorpseData[corpseid][corpseInt] = 0;
		CorpseData[corpseid][corpseWorld] = 0;
		CorpseData[corpseid][corpseCar] = INVALID_VEHICLE_ID;

		CorpseData[corpseid][corpsePlayer] = EOS;
		CorpseData[corpseid][corpseTimeDeath_format] = EOS;
		CorpseData[corpseid][corpseTimeDeath] = 0;
		CorpseData[corpseid][corpseWeapon] = 0;

        foreach(new playerid:Player) if(PlayerData[playerid][pTakeCorpse] == corpseid)
		{
		    PlayerData[playerid][pTakeCorpse] = -1;
		    SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
		}
	}
	return 1;
}

Corpse_Nearest(playerid, checkused = 0)
{
	if(checkused == 1)
	{
		for (new i = 0; i != MAX_CORPSE; i ++) if (CorpseData[i][corpseExists] && !CorpseData[i][corpseUsed] && IsPlayerInRangeOfPoint(playerid, 3.0, CorpseData[i][corpsePos][0], CorpseData[i][corpsePos][1], CorpseData[i][corpsePos][2]))
		{
			if (GetPlayerVirtualWorld(playerid) == CorpseData[i][corpseWorld])
			return i;
		}
	}
	else
	{
		for (new i = 0; i != MAX_CORPSE; i ++) if (CorpseData[i][corpseExists] && IsPlayerInRangeOfPoint(playerid, 3.0, CorpseData[i][corpsePos][0], CorpseData[i][corpsePos][1], CorpseData[i][corpsePos][2]))
		{
			if (GetPlayerVirtualWorld(playerid) == CorpseData[i][corpseWorld])
			return i;
		}
	}

	return -1;
}

forward ATM_Load();
public ATM_Load()
{
	static
	rows,
	fields;

	cache_get_data(rows, fields, g_iHandle);

	for (new i = 0; i < rows; i ++) if (i < MAX_ATM_MACHINES)
	{
		ATMData[i][atmExists] = true;
		ATMData[i][atmID] = cache_get_field_int(i, "atmID");
		ATMData[i][atmPos][0] = cache_get_field_float(i, "atmX");
		ATMData[i][atmPos][1] = cache_get_field_float(i, "atmY");
		ATMData[i][atmPos][2] = cache_get_field_float(i, "atmZ");
		ATMData[i][atmPos][3] = cache_get_field_float(i, "atmA");
		ATMData[i][atmInterior] = cache_get_field_int(i, "atmInterior");
		ATMData[i][atmWorld] = cache_get_field_int(i, "atmWorld");
		ATMData[i][atmArgen] = cache_get_field_int(i, "atmArgen");

		ATM_Refresh(i);
	}
	return 1;
}

forward Impound_Load();
public Impound_Load()
{
	static
	rows,
	fields;

	cache_get_data(rows, fields, g_iHandle);

	for (new i = 0; i < rows; i ++) if (i < MAX_IMPOUND_LOTS)
	{
		ImpoundData[i][impoundExists] = true;
		ImpoundData[i][impoundID] = cache_get_field_int(i, "impoundID");
		ImpoundData[i][impoundLot][0] = cache_get_field_float(i, "impoundLotX");
		ImpoundData[i][impoundLot][1] = cache_get_field_float(i, "impoundLotY");
		ImpoundData[i][impoundLot][2] = cache_get_field_float(i, "impoundLotZ");
		ImpoundData[i][impoundRelease][0] = cache_get_field_float(i, "impoundReleaseX");
		ImpoundData[i][impoundRelease][1] = cache_get_field_float(i, "impoundReleaseY");
		ImpoundData[i][impoundRelease][2] = cache_get_field_float(i, "impoundReleaseZ");
		ImpoundData[i][impoundRelease][3] = cache_get_field_float(i, "impoundReleaseA");

		Impound_Refresh(i);
	}
	return 1;
}

forward Backpack_Load();
public Backpack_Load()
{
	static
	rows,
	fields,
	str[64];

	cache_get_data(rows, fields, g_iHandle);

	for (new i = 0; i < rows; i ++) if (i < MAX_BACKPACKS)
	{
		BackpackData[i][backpackExists] = true;
		BackpackData[i][backpackID] = cache_get_field_int(i, "backpackID");
		BackpackData[i][backpackPlayer] = cache_get_field_int(i, "backpackPlayer");
		BackpackData[i][backpackHouse] = cache_get_field_int(i, "backpackHouse");
		BackpackData[i][backpackVehicle] = cache_get_field_int(i, "backpackVehicle");
		BackpackData[i][backpackPos][0] = cache_get_field_float(i, "backpackX");
		BackpackData[i][backpackPos][1] = cache_get_field_float(i, "backpackY");
		BackpackData[i][backpackPos][2] = cache_get_field_float(i, "backpackZ");
		BackpackData[i][backpackInterior] = cache_get_field_int(i, "backpackInterior");
		BackpackData[i][backpackWorld] = cache_get_field_int(i, "backpackWorld");


		if (!BackpackData[i][backpackPlayer]) {
			Backpack_Refresh(i);
		}
	}
	for (new i = 0; i < MAX_BACKPACKS; i ++) if (BackpackData[i][backpackExists]) {
		format(str, sizeof(str), "SELECT * FROM `backpackitems` WHERE `ID` = '%d'", BackpackData[i][backpackID]);

		mysql_function_query(g_iHandle, str, true, "OnLoadBackpack", "d", i);
	}
	return 1;
}

forward Gate_Load();
public Gate_Load()
{
	static
	rows,
	fields;

	cache_get_data(rows, fields, g_iHandle);

	for (new i = 0; i < rows; i ++) if (i < MAX_GATES)
	{
		GateData[i][gateExists] = true;
		GateData[i][gateOpened] = false;

		GateData[i][gateID] = cache_get_field_int(i, "gateID");
		GateData[i][gateModel] = cache_get_field_int(i, "gateModel");
		GateData[i][gateHouseID] = cache_get_field_int(i, "gateHouseID");
		GateData[i][gateSpeed] = cache_get_field_float(i, "gateSpeed");
		GateData[i][gateRadius] = cache_get_field_float(i, "gateRadius");
		GateData[i][gateTime] = cache_get_field_int(i, "gateTime");
		GateData[i][gateInterior] = cache_get_field_int(i, "gateInterior");
		GateData[i][gateWorld] = cache_get_field_int(i, "gateWorld");

		GateData[i][gatePos][0] = cache_get_field_float(i, "gateX");
		GateData[i][gatePos][1] = cache_get_field_float(i, "gateY");
		GateData[i][gatePos][2] = cache_get_field_float(i, "gateZ");
		GateData[i][gatePos][3] = cache_get_field_float(i, "gateRX");
		GateData[i][gatePos][4] = cache_get_field_float(i, "gateRY");
		GateData[i][gatePos][5] = cache_get_field_float(i, "gateRZ");

		GateData[i][gateMove][0] = cache_get_field_float(i, "gateMoveX");
		GateData[i][gateMove][1] = cache_get_field_float(i, "gateMoveY");
		GateData[i][gateMove][2] = cache_get_field_float(i, "gateMoveZ");
		GateData[i][gateMove][3] = cache_get_field_float(i, "gateMoveRX");
		GateData[i][gateMove][4] = cache_get_field_float(i, "gateMoveRY");
		GateData[i][gateMove][5] = cache_get_field_float(i, "gateMoveRZ");

		GateData[i][gateLinkID] = cache_get_field_int(i, "gateLinkID");
		GateData[i][gateFaction] = cache_get_field_int(i, "gateFaction");
		GateData[i][gateJob] = cache_get_field_int(i, "gateJob");

		cache_get_field_content(i, "gatePass", GateData[i][gatePass], g_iHandle, 32);

		GateData[i][gateObject] = CreateDynamicObject(GateData[i][gateModel], GateData[i][gatePos][0], GateData[i][gatePos][1], GateData[i][gatePos][2], GateData[i][gatePos][3], GateData[i][gatePos][4], GateData[i][gatePos][5], GateData[i][gateWorld], GateData[i][gateInterior]);
	}
	return 1;
}

forward Arrest_Load();
public Arrest_Load()
{
	static
	rows,
	fields;

	cache_get_data(rows, fields, g_iHandle);

	for (new i = 0; i < rows; i ++) if (i < MAX_ARREST_POINTS)
	{
		ArrestData[i][arrestExists] = true;

		ArrestData[i][arrestID] = cache_get_field_int(i, "arrestID");
		ArrestData[i][arrestPos][0] = cache_get_field_float(i, "arrestX");
		ArrestData[i][arrestPos][1] = cache_get_field_float(i, "arrestY");
		ArrestData[i][arrestPos][2] = cache_get_field_float(i, "arrestZ");
		ArrestData[i][arrestInterior] = cache_get_field_int(i, "arrestInterior");
		ArrestData[i][arrestWorld] = cache_get_field_int(i, "arrestWorld");

		Arrest_Refresh(i);
	}
	return 1;
}

forward Faction_Load();
public Faction_Load()
{
	static
	rows,
	fields,
	str[32];

	cache_get_data(rows, fields, g_iHandle);

	for (new i = 0; i < rows; i ++) if (i < MAX_FACTIONS)
	{
		FactionData[i][factionExists] = true;
		FactionData[i][factionID] = cache_get_field_int(i, "factionID");

		cache_get_field_content(i, "factionName", FactionData[i][factionName], g_iHandle, 32);

		FactionData[i][factionColor] = cache_get_field_int(i, "factionColor");
		FactionData[i][factionType] = cache_get_field_int(i, "factionType");
		FactionData[i][factionRanks] = cache_get_field_int(i, "factionRanks");
		FactionData[i][factionLockerPos][0] = cache_get_field_float(i, "factionLockerX");
		FactionData[i][factionLockerPos][1] = cache_get_field_float(i, "factionLockerY");
		FactionData[i][factionLockerPos][2] = cache_get_field_float(i, "factionLockerZ");
		FactionData[i][factionLockerInt] = cache_get_field_int(i, "factionLockerInt");
		FactionData[i][factionLockerWorld] = cache_get_field_int(i, "factionLockerWorld");
		FactionData[i][factionArge] = cache_get_field_int(i, "factionArge");
		FactionData[i][factionCredit] = cache_get_field_int(i, "factionCredit");

		//Spawning
		FactionData[i][SpawnX] = cache_get_field_float(i, "SpawnX");
		FactionData[i][SpawnY] = cache_get_field_float(i, "SpawnY");
		FactionData[i][SpawnZ] = cache_get_field_float(i, "SpawnZ");
		FactionData[i][SpawnInterior] = cache_get_field_int(i, "SpawnInterior");
		FactionData[i][SpawnVW] = cache_get_field_int(i, "SpawnVW");

		for (new j = 0; j != MAX_FACTION_UPGRADE; j ++) {
			format(str, sizeof(str), "factionUpgrade%d", j);

			FactionData[i][factionUpgrade][j] = cache_get_field_int(i, str);
		}
		for (new j = 0; j < 8; j ++) {
			format(str, sizeof(str), "factionSkin%d", j + 1);

			FactionData[i][factionSkins][j] = cache_get_field_int(i, str);
		}
		for (new j = 0; j < 10; j ++) {
			format(str, sizeof(str), "factionWeapon%d", j + 1);

			FactionData[i][factionWeapons][j] = cache_get_field_int(i, str);

			format(str, sizeof(str), "factionAmmo%d", j + 1);

			FactionData[i][factionAmmo][j] = cache_get_field_int(i, str);
		}
		for (new j = 0; j < 15; j ++) {
			format(str, sizeof(str), "factionRank%d", j + 1);

			cache_get_field_content(i, str, FactionRanks[i][j], g_iHandle, 32);
		}
		Faction_Refresh(i);
	}
	return 1;
}

forward Plant_Load();
public Plant_Load()
{
	static
	rows,
	fields;

	cache_get_data(rows, fields, g_iHandle);

	for (new i = 0; i < rows; i ++) if (i < MAX_DRUG_PLANTS)
	{
		PlantData[i][plantExists] = true;
		PlantData[i][plantID] = cache_get_field_int(i, "plantID");
		PlantData[i][plantType] = cache_get_field_int(i, "plantType");
		PlantData[i][plantDrugs] = cache_get_field_int(i, "plantDrugs");
		PlantData[i][plantPos][0] = cache_get_field_float(i, "plantX");
		PlantData[i][plantPos][1] = cache_get_field_float(i, "plantY");
		PlantData[i][plantPos][2] = cache_get_field_float(i, "plantZ");
		PlantData[i][plantPos][3] = cache_get_field_float(i, "plantA");
		PlantData[i][plantInterior] = cache_get_field_int(i, "plantInterior");
		PlantData[i][plantWorld] = cache_get_field_int(i, "plantWorld");

		Plant_Refresh(i);
	}
	return 1;
}

forward Crate_Load();
public Crate_Load()
{
	static
	rows,
	fields;

	cache_get_data(rows, fields, g_iHandle);

	for (new i = 0; i < rows; i ++) if (i < MAX_CRATES)
	{
		CrateData[i][crateExists] = true;
		CrateData[i][crateID] = cache_get_field_int(i, "crateID");
		CrateData[i][crateType] = cache_get_field_int(i, "crateType");
		CrateData[i][cratePos][0] = cache_get_field_float(i, "crateX");
		CrateData[i][cratePos][1] = cache_get_field_float(i, "crateY");
		CrateData[i][cratePos][2] = cache_get_field_float(i, "crateZ");
		CrateData[i][cratePos][3] = cache_get_field_float(i, "crateA");
		CrateData[i][crateInterior] = cache_get_field_int(i, "crateInterior");
		CrateData[i][crateWorld] = cache_get_field_int(i, "crateWorld");
		CrateData[i][crateVehicle] = INVALID_VEHICLE_ID;

		Crate_Refresh(i);
	}
	return 1;
}

forward Job_Load();
public Job_Load()
{
	static
	rows,
	fields;

	cache_get_data(rows, fields, g_iHandle);

	for (new i = 0; i < rows; i ++) if (i < MAX_DYNAMIC_JOBS)
	{
		JobData[i][jobExists] = true;
		JobData[i][jobID] = cache_get_field_int(i, "jobID");
		JobData[i][jobType] = cache_get_field_int(i, "jobType");
		JobData[i][jobPos][0] = cache_get_field_float(i, "jobPosX");
		JobData[i][jobPos][1] = cache_get_field_float(i, "jobPosY");
		JobData[i][jobPos][2] = cache_get_field_float(i, "jobPosZ");
		JobData[i][jobInterior] = cache_get_field_int(i, "jobInterior");
		JobData[i][jobWorld] = cache_get_field_int(i, "jobWorld");
		JobData[i][jobLock] = cache_get_field_int(i, "jobLock");
		JobData[i][jobPoint][0] = cache_get_field_float(i, "jobPointX");
		JobData[i][jobPoint][1] = cache_get_field_float(i, "jobPointY");
		JobData[i][jobPoint][2] = cache_get_field_float(i, "jobPointZ");
		JobData[i][jobDeliver][0] = cache_get_field_float(i, "jobDeliverX");
		JobData[i][jobDeliver][1] = cache_get_field_float(i, "jobDeliverY");
		JobData[i][jobDeliver][2] = cache_get_field_float(i, "jobDeliverZ");
		JobData[i][jobPointInt] = cache_get_field_int(i, "jobPointInt");
		JobData[i][jobPointWorld] = cache_get_field_int(i, "jobPointWorld");
		//JobData[i][jobStock] = cache_get_field_int(i, "jobStock");
		Job_Refresh(i);
	}
	return 1;
}

forward Entrance_Load();
public Entrance_Load()
{
	static
	rows,
	fields;

	cache_get_data(rows, fields, g_iHandle);

	for (new i = 0; i < rows; i ++) if (i < MAX_ENTRANCES)
	{
		EntranceData[i][entranceExists] = true;
		EntranceData[i][entranceID] = cache_get_field_int(i, "entranceID");

		cache_get_field_content(i, "entranceName", EntranceData[i][entranceName], g_iHandle, 32);
		cache_get_field_content(i, "entrancePass", EntranceData[i][entrancePass], g_iHandle, 32);

		EntranceData[i][entranceIcon] = cache_get_field_int(i, "entranceIcon");
		EntranceData[i][entranceLocked] = cache_get_field_int(i, "entranceLocked");
		EntranceData[i][entrancePos][0] = cache_get_field_float(i, "entrancePosX");
		EntranceData[i][entrancePos][1] = cache_get_field_float(i, "entrancePosY");
		EntranceData[i][entrancePos][2] = cache_get_field_float(i, "entrancePosZ");
		EntranceData[i][entrancePos][3] = cache_get_field_float(i, "entrancePosA");
		EntranceData[i][entranceInt][0] = cache_get_field_float(i, "entranceIntX");
		EntranceData[i][entranceInt][1] = cache_get_field_float(i, "entranceIntY");
		EntranceData[i][entranceInt][2] = cache_get_field_float(i, "entranceIntZ");
		EntranceData[i][entranceInt][3] = cache_get_field_float(i, "entranceIntA");
		EntranceData[i][entranceInterior] = cache_get_field_int(i, "entranceInterior");
		EntranceData[i][entranceExterior] = cache_get_field_int(i, "entranceExterior");
		EntranceData[i][entranceExteriorVW] = cache_get_field_int(i, "entranceExteriorVW");
		EntranceData[i][entranceType] = cache_get_field_int(i, "entranceType");
		EntranceData[i][entranceCustom] = cache_get_field_int(i, "entranceCustom");
		EntranceData[i][entranceWorld] = cache_get_field_int(i, "entranceWorld");
		EntranceData[i][entranceIconType] = cache_get_field_int(i, "entranceIconType");

		if (EntranceData[i][entranceType] == 3)
		CreateForklifts(i);

		Entrance_Refresh(i);
	}
	return 1;
}

forward Dropped_Load();
public Dropped_Load()
{
	static
	rows,
	fields;

	cache_get_data(rows, fields, g_iHandle);

	for (new i = 0; i < rows; i ++) if (i < MAX_DROPPED_ITEMS)
	{
		DroppedItems[i][droppedID] = cache_get_field_int(i, "ID");

		cache_get_field_content(i, "itemName", DroppedItems[i][droppedItem], g_iHandle, 32);
		cache_get_field_content(i, "itemPlayer", DroppedItems[i][droppedPlayer], g_iHandle, 24);

		DroppedItems[i][droppedModel] = cache_get_field_int(i, "itemModel");
		DroppedItems[i][droppedQuantity] = cache_get_field_int(i, "itemQuantity");
		DroppedItems[i][droppedWeapon] = cache_get_field_int(i, "itemWeapon");
		DroppedItems[i][droppedAmmo] = cache_get_field_int(i, "itemAmmo");
		DroppedItems[i][droppedPos][0] = cache_get_field_float(i, "itemX");
		DroppedItems[i][droppedPos][1] = cache_get_field_float(i, "itemY");
		DroppedItems[i][droppedPos][2] = cache_get_field_float(i, "itemZ");
		DroppedItems[i][droppedInt] = cache_get_field_int(i, "itemInt");
		DroppedItems[i][droppedWorld] = cache_get_field_int(i, "itemWorld");

		if (IsWeaponModel(DroppedItems[i][droppedModel])) {
			DroppedItems[i][droppedObject] = CreateDynamicObject(DroppedItems[i][droppedModel], DroppedItems[i][droppedPos][0], DroppedItems[i][droppedPos][1], DroppedItems[i][droppedPos][2], 93.7, 120.0, 120.0, DroppedItems[i][droppedWorld], DroppedItems[i][droppedInt]);
			} else {
			DroppedItems[i][droppedObject] = CreateDynamicObject(DroppedItems[i][droppedModel], DroppedItems[i][droppedPos][0], DroppedItems[i][droppedPos][1], DroppedItems[i][droppedPos][2], 0.0, 0.0, 0.0, DroppedItems[i][droppedWorld], DroppedItems[i][droppedInt]);
		}
	//	DroppedItems[i][droppedText3D] = CreateDynamic3DTextLabel(DroppedItems[i][droppedItem], COLOR_CYAN, DroppedItems[i][droppedPos][0], DroppedItems[i][droppedPos][1], DroppedItems[i][droppedPos][2], 15.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, DroppedItems[i][droppedWorld], DroppedItems[i][droppedInt]);
	}
	return 1;
}

forward Business_Load();
public Business_Load()
{
	new
	rows,
	fields,
	str[64];

	cache_get_data(rows, fields, g_iHandle);

	for (new i = 0; i < rows; i ++) if (i < MAX_BUSINESSES)
	{
		BusinessData[i][bizExists] = true;
		BusinessData[i][bizID] = cache_get_field_int(i, "bizID");

		cache_get_field_content(i, "bizName", BusinessData[i][bizName], g_iHandle, 32);
		cache_get_field_content(i, "bizMessage", BusinessData[i][bizMessage], g_iHandle, 128);

		BusinessData[i][bizOwner] = cache_get_field_int(i, "bizOwner");
		BusinessData[i][bizType] = cache_get_field_int(i, "bizType");
		BusinessData[i][bizPrice] = cache_get_field_int(i, "bizPrice");
		BusinessData[i][bizPos][0] = cache_get_field_float(i, "bizPosX");
		BusinessData[i][bizPos][1] = cache_get_field_float(i, "bizPosY");
		BusinessData[i][bizPos][2] = cache_get_field_float(i, "bizPosZ");
		BusinessData[i][bizPos][3] = cache_get_field_float(i, "bizPosA");
		BusinessData[i][bizInt][0] = cache_get_field_float(i, "bizIntX");
		BusinessData[i][bizInt][1] = cache_get_field_float(i, "bizIntY");
		BusinessData[i][bizInt][2] = cache_get_field_float(i, "bizIntZ");
		BusinessData[i][bizInt][3] = cache_get_field_float(i, "bizIntA");
		BusinessData[i][bizSpawn][0] = cache_get_field_float(i, "bizSpawnX");
		BusinessData[i][bizSpawn][1] = cache_get_field_float(i, "bizSpawnY");
		BusinessData[i][bizSpawn][2] = cache_get_field_float(i, "bizSpawnZ");
		BusinessData[i][bizSpawn][3] = cache_get_field_float(i, "bizSpawnA");
		BusinessData[i][bizDeliver][0] = cache_get_field_float(i, "bizDeliverX");
		BusinessData[i][bizDeliver][1] = cache_get_field_float(i, "bizDeliverY");
		BusinessData[i][bizDeliver][2] = cache_get_field_float(i, "bizDeliverZ");
		BusinessData[i][bizShipment] = cache_get_field_int(i, "bizShipment");
		BusinessData[i][bizInterior] = cache_get_field_int(i, "bizInterior");
		BusinessData[i][bizCustom] = cache_get_field_int(i, "bizCustom");
		BusinessData[i][bizExterior] = cache_get_field_int(i, "bizExterior");
		BusinessData[i][bizExteriorVW] = cache_get_field_int(i, "bizExteriorVW");
		BusinessData[i][bizLocked] = cache_get_field_int(i, "bizLocked");
		BusinessData[i][bizVault] = cache_get_field_int(i, "bizVault");
		BusinessData[i][bizProducts] = cache_get_field_int(i, "bizProducts");

		for (new j = 0; j < 20; j ++)
		{
			format(str, 32, "bizPrice%d", j + 1);
			BusinessData[i][bizPrices][j] = cache_get_field_int(i, str);
		}
		Business_Refresh(i);
	}
	for (new i = 0; i < MAX_BUSINESSES; i ++) if (BusinessData[i][bizExists])
	{
		if (BusinessData[i][bizType] == 5) {
			format(str, sizeof(str), "SELECT * FROM `dealervehicles` WHERE `ID` = '%d'", BusinessData[i][bizID]);

			mysql_function_query(g_iHandle, str, true, "Business_LoadCars", "d", i);
		}
		else if (BusinessData[i][bizType] == 6) {
			format(str, sizeof(str), "SELECT * FROM `pumps` WHERE `ID` = '%d'", BusinessData[i][bizID]);

			mysql_function_query(g_iHandle, str, true, "Pump_Load", "d", i);
		}
	}
	return 1;
}
forward House_Load();
public House_Load()
{
	new
	rows,
	fields,
	str[128];

	cache_get_data(rows, fields, g_iHandle);

	for (new i = 0; i < rows; i ++) if (i < MAX_HOUSES)
	{
		HouseData[i][houseExists] = true;
		HouseData[i][houseLights] = false;

		HouseData[i][houseID] = cache_get_field_int(i, "houseID");
		HouseData[i][houseOwner] = cache_get_field_int(i, "houseOwner");
		HouseData[i][housePrice] = cache_get_field_int(i, "housePrice");

		cache_get_field_content(i, "houseAddress", HouseData[i][houseAddress], g_iHandle, 32);

		HouseData[i][housePos][0] = cache_get_field_float(i, "housePosX");
		HouseData[i][housePos][1] = cache_get_field_float(i, "housePosY");
		HouseData[i][housePos][2] = cache_get_field_float(i, "housePosZ");
		HouseData[i][housePos][3] = cache_get_field_float(i, "housePosA");
		HouseData[i][houseInt][0] = cache_get_field_float(i, "houseIntX");
		HouseData[i][houseInt][1] = cache_get_field_float(i, "houseIntY");
		HouseData[i][houseInt][2] = cache_get_field_float(i, "houseIntZ");
		HouseData[i][houseInt][3] = cache_get_field_float(i, "houseIntA");
		HouseData[i][houseInterior] = cache_get_field_int(i, "houseInterior");
		HouseData[i][houseExterior] = cache_get_field_int(i, "houseExterior");
		HouseData[i][houseExteriorVW] = cache_get_field_int(i, "houseExteriorVW");
		HouseData[i][houseLocked] = cache_get_field_int(i, "houseLocked");
		HouseData[i][houseMoney] = cache_get_field_int(i, "houseMoney");
		HouseData[i][houseLocPrice] = cache_get_field_int(i, "houseLocPrice");
		HouseData[i][houseLocNb] = cache_get_field_int(i, "houseLocNb");
		HouseData[i][houseLocStatus] = cache_get_field_int(i, "houseLocStatus");
		HouseData[i][houseFaction] = cache_get_field_int(i, "houseFaction");
		
		for (new j = 0; j < 10; j ++)
		{
			format(str, 24, "houseWeapon%d", j + 1);
			HouseData[i][houseWeapons][j] = cache_get_field_int(i, str);

			format(str, 24, "houseAmmo%d", j + 1);
			HouseData[i][houseAmmo][j] = cache_get_field_int(i, str);
		}
		House_Refresh(i);
	}
	for (new i = 0; i < MAX_HOUSES; i ++)
	{
		if (HouseData[i][houseExists])
		{
			format(str, sizeof(str), "SELECT * FROM `housestorage` WHERE `ID` = '%d'", HouseData[i][houseID]);

			mysql_function_query(g_iHandle, str, true, "OnLoadStorage", "d", i);

			format(str, sizeof(str), "SELECT * FROM `furniture` WHERE `ID` = '%d'", HouseData[i][houseID]);

			mysql_function_query(g_iHandle, str, true, "OnLoadFurniture", "d", i);
		}
	}
	return 1;
}

stock Car_GetRealID(carid)
{
	if (carid == -1 || !CarData[carid][carExists] || CarData[carid][carVehicle] == INVALID_VEHICLE_ID)
	return INVALID_VEHICLE_ID;

	return CarData[carid][carVehicle];
}

stock Car_GetID(vehicleid)
{
	for (new i = 0; i != MAX_DYNAMIC_CARS; i ++) {
	    if (CarData[i][carExists] && CarData[i][carVehicle] == vehicleid)
			return i;
	}
	return -1;
}

stock Corpse_Car(carid)
{
	for(new i=0; i<MAX_CORPSE; i++) if(CorpseData[i][corpseExists])
	{
		if(CorpseData[i][corpseCar] == carid) return i;
	}
	return -1;
}

stock Car_Spawn(carid)
{
	if (carid != -1 && CarData[carid][carExists])
	{
		if (IsValidVehicle(CarData[carid][carVehicle]))
		DestroyVehicle(CarData[carid][carVehicle]);

		if (CarData[carid][carColor1] == -1)
		CarData[carid][carColor1] = random(127);

		if (CarData[carid][carColor2] == -1)
		CarData[carid][carColor2] = random(127);
	    
		new
		    corpseid;
		    
		if((corpseid = Corpse_Car(carid)) != -1)
	    {
			Corpse_Delete(corpseid);
		}

		new
		    respawnTime;
		    
		if(CarData[carid][carOwner] != 0) respawnTime = 3600;
		else respawnTime = 1200;
		
		CarData[carid][carVehicle] = CreateVehicle(CarData[carid][carModel], CarData[carid][carPos][0], CarData[carid][carPos][1], CarData[carid][carPos][2], CarData[carid][carPos][3], CarData[carid][carColor1], CarData[carid][carColor2], respawnTime);

		if (CarData[carid][carVehicle] != INVALID_VEHICLE_ID)
		{
			if (CarData[carid][carPaintjob] != -1)
			{
				ChangeVehiclePaintjob(CarData[carid][carVehicle], CarData[carid][carPaintjob]);
			}
			if (CarData[carid][carLocked])
			{
				new
				engine, lights, alarm, doors, bonnet, boot, objective;

				GetVehicleParamsEx(CarData[carid][carVehicle], engine, lights, alarm, doors, bonnet, boot, objective);
				SetVehicleParamsEx(CarData[carid][carVehicle], engine, lights, alarm, 1, bonnet, boot, objective);
			}
			for (new i = 0; i < 14; i ++)
			{
				if (CarData[carid][carMods][i]) AddVehicleComponent(CarData[carid][carVehicle], CarData[carid][carMods][i]);
			}
			
			SetVehicleHealth(CarData[carid][carVehicle], CarData[carid][carHealth_real]);
			UpdateVehicleDamageStatus(CarData[carid][carVehicle], CarData[carid][carHealth][0], CarData[carid][carHealth][1], CarData[carid][carHealth][2], CarData[carid][carHealth][3]);
			
			ResetVehicle(CarData[carid][carVehicle]);
			return 1;
		}
	}
	return 0;
}

forward Car_Load();
public Car_Load()
{
	static
	rows,
	fields,
	str[128];

	cache_get_data(rows, fields, g_iHandle);

	for (new i = 0; i < rows; i ++) if (i < MAX_DYNAMIC_CARS)
	{
		CarData[i][carExists] = true;
		CarData[i][carID] = cache_get_field_int(i, "carID");
		CarData[i][carModel] = cache_get_field_int(i, "carModel");
		CarData[i][carOwner] = cache_get_field_int(i, "carOwner");
		CarData[i][carPos][0] = cache_get_field_float(i, "carPosX");
		CarData[i][carPos][1] = cache_get_field_float(i, "carPosY");
		CarData[i][carPos][2] = cache_get_field_float(i, "carPosZ");
		CarData[i][carPos][3] = cache_get_field_float(i, "carPosR");
		CarData[i][carColor1] = cache_get_field_int(i, "carColor1");
		CarData[i][carColor2] = cache_get_field_int(i, "carColor2");
		CarData[i][carPaintjob] = cache_get_field_int(i, "carPaintjob");
		CarData[i][carImpounded] = cache_get_field_int(i, "carImpounded");
		CarData[i][carImpoundPrice] = cache_get_field_int(i, "carImpoundPrice");
		CarData[i][carFaction] = cache_get_field_int(i, "carFaction");
		CarData[i][carJob] = cache_get_field_int(i, "carJob");
		CarData[i][carLoca] = cache_get_field_int(i, "carLoca");
		CarData[i][carLocaPrice] = cache_get_field_int(i, "carLocaPrice");
		CarData[i][carLocaID] = 0;
		CarData[i][carPrice] = cache_get_field_int(i, "carPrice");
		CarData[i][carDouble] = cache_get_field_int(i, "carDouble");
		CarData[i][carSabot] = cache_get_field_int(i, "carSabot");
		CarData[i][carSabPri] = cache_get_field_int(i, "carSabPri");
		
		cache_get_field_content(i, "carHealth", str, g_iHandle, 30);
		sscanf(str, "p<|>fdddd", CarData[i][carHealth_real], CarData[i][carHealth][0], CarData[i][carHealth][1], CarData[i][carHealth][2], CarData[i][carHealth][3]);

		EntreCar[i] = 0;
		if(CarData[i][carLoca] > 0) CarData[i][carLocked] = 0; else	CarData[i][carLocked] = cache_get_field_int(i, "carLocked");

		for(new j=0; j<5; j++) CarData[i][carMine][j] = -1;
		for (new j = 0; j < 14; j ++)
		{
			if (j < 5)
			{
				format(str, sizeof(str), "carWeapon%d", j + 1);
				CarData[i][carWeapons][j] = cache_get_field_int(i, str);

				format(str, sizeof(str), "carAmmo%d", j + 1);
				CarData[i][carAmmo][j] = cache_get_field_int(i, str);
			}
			format(str, sizeof(str), "carMod%d", j + 1);
			CarData[i][carMods][j] = cache_get_field_int(i, str);
		}

		Car_Spawn(i);
		CoreVehicles[CarData[i][carVehicle]][vehFuel] = cache_get_field_int(i, "carFuel");
	}
	for (new i = 0; i < MAX_DYNAMIC_CARS; i ++) if (CarData[i][carExists]) {
		format(str, sizeof(str), "SELECT * FROM `carstorage` WHERE `ID` = '%d'", CarData[i][carID]);

		mysql_function_query(g_iHandle, str, true, "OnLoadCarStorage", "d", i);
	}

	return 1;
}

forward ListCar(playerid, extraid);
public ListCar(playerid, extraid)
{
	#define MAX_CARS_USERS  (20)

	new
		rows,
		fields,
		countCar = 0,


		id_car,
		model_car,
		Float:pos[3],
		spawned = 0,
		vehicleID;

	cache_get_data(rows, fields, g_iHandle);

    SendClientMessage(extraid, COLOR_GREY, "-----------------------------------------------------------");

	for (new i = 0; i < rows; i ++) if (i < MAX_CARS_USERS)
	{
	    countCar++;

		id_car = cache_get_field_int(i, "carID");
		model_car = cache_get_field_int(i, "carModel");

		pos[0] = cache_get_field_float(i, "carPosX");
		pos[1] = cache_get_field_float(i, "carPosY");
		pos[2] = cache_get_field_float(i, "carPosZ");
		
		for(new ii=0; ii<MAX_DYNAMIC_CARS; ii++) if(CarData[ii][carExists] && CarData[ii][carID] == id_car)
		{
			vehicleID = CarData[ii][carVehicle];
		  	spawned = 1;
		   	break;
		}
		
        SendClientMessageEx(extraid, COLOR_WHITE, "* ID SQL: %d | Modèle: %s | Localisation: %s | Spawn: %s{FFFFFF} (VehID: %d)", id_car, ReturnVehicleModelName(model_car), GetLocation(pos[0], pos[1], pos[2]), (spawned) ? ("{33CC33}Oui") : ("{FF0000}Non"), vehicleID);
	}

	if(countCar <= 0)
	    SendClientMessage(extraid, COLOR_WHITE, "Vous ne possédez pas de véhicule.");
	    
	SendClientMessage(extraid, COLOR_GREY, "-----------------------------------------------------------");
	return 1;
}

forward SpawnCar(playerid);
public SpawnCar(playerid)
{
	#define MAX_CARS_USERS  (20)
	
	new
		rows,
		fields,
		string[150*MAX_CARS_USERS],
		title[150],
		countCar = 0,
		
		
		id_car,
		model_car,
		locked_car,
		Float:pos[3];

	cache_get_data(rows, fields, g_iHandle);
	    
	format(string, sizeof(string), "#\tModel\tLocalisation\tVérouillé\n");
	for (new i = 0; i < rows; i ++) if (i < MAX_CARS_USERS)
	{
	    countCar++;
	    
		id_car = cache_get_field_int(i, "carID");
		model_car = cache_get_field_int(i, "carModel");
		locked_car = cache_get_field_int(i, "carLocked");

		pos[0] = cache_get_field_float(i, "carPosX");
		pos[1] = cache_get_field_float(i, "carPosY");
		pos[2] = cache_get_field_float(i, "carPosZ");
		
	    format(string, sizeof(string), "%s%d\t%s\t%s\t%s\n", string, id_car, ReturnVehicleModelName(model_car), GetLocation(pos[0], pos[1], pos[2]), (locked_car) ? ("{33CC33}Oui") : ("{FF0000}Non"));
	}
	
	if(countCar <= 0)
	    return SendClientMessage(playerid, COLOR_ERROR, "Vous n'avez aucun véhicule.");
	    
	format(title, sizeof(title), "Liste de vos %d véhicules garés", countCar);
	Dialog_Show(playerid, DIALOG_SPAWNCAR, DIALOG_STYLE_TABLIST_HEADERS, title, string, "Spawn", "Annuler");
	return 1;
}


Dialog:DIALOG_NEWCARSPAWN(playerid, response, listitem, inputtext[])
{
	if(!response)
	    return 1;

	if(GetMoney(playerid) < 1500)
	    return SendClientMessage(playerid, COLOR_ERROR, "Vous n'avez pas assez d'argent pour garer votre véhicule.");
	    
	new
	    carid = Car_GetID(GetPlayerVehicleID(playerid));
	    
	GetVehiclePos(GetPlayerVehicleID(playerid), CarData[carid][carPos][0], CarData[carid][carPos][1], CarData[carid][carPos][2]);
	GetVehicleZAngle(GetPlayerVehicleID(playerid), CarData[carid][carPos][3]);

	Car_Save(carid);
	Car_Unspawn(carid);
	
	DisableWaypoint(playerid);
	
	GiveMoney(playerid, -1500);
	
	SendClientMessageEx(playerid, COLOR_INFO, "Vous avez garé votre %s", ReturnVehicleModelName(CarData[carid][carModel]));
	return 1;
}

Dialog:DIALOG_SPAWNCAR(playerid, response, listitem, inputtext[])
{
	if(!response)
	    return 1;

    new
	    id_vehicle,
	    query[260];

	sscanf(inputtext, "d", id_vehicle);

	for (new i=0; i<MAX_DYNAMIC_CARS; i++) if(CarData[i][carExists] && CarData[i][carID] == id_vehicle)
	{
	    cmd_vehicule(playerid, "spawn");
	    SendClientMessage(playerid, COLOR_ERROR, "Ce véhicule est déjà spawn.");
	    return 1;
	}


    mysql_format(g_iHandle, query, sizeof(query),"SELECT * FROM `cars` WHERE `carID` = '%d'", id_vehicle);
	mysql_tquery(g_iHandle, query, "Car_Load2", "ii", playerid, id_vehicle);
	return 1;
}


forward Car_Load2(playerid, carid);
public Car_Load2(playerid, carid)
{
	static
		str[128];

    if(cache_num_rows())
	{
		CarData[carid][carExists] = true;
		CarData[carid][carID] = cache_get_field_int(0, "carID");
		CarData[carid][carModel] = cache_get_field_int(0, "carModel");
		CarData[carid][carOwner] = cache_get_field_int(0, "carOwner");
		CarData[carid][carPos][0] = cache_get_field_float(0, "carPosX");
		CarData[carid][carPos][1] = cache_get_field_float(0, "carPosY");
		CarData[carid][carPos][2] = cache_get_field_float(0, "carPosZ");
		CarData[carid][carPos][3] = cache_get_field_float(0, "carPosR");
		CarData[carid][carColor1] = cache_get_field_int(0, "carColor1");
		CarData[carid][carColor2] = cache_get_field_int(0, "carColor2");
		CarData[carid][carPaintjob] = cache_get_field_int(0, "carPaintjob");
		CarData[carid][carImpounded] = cache_get_field_int(0, "carImpounded");
		CarData[carid][carImpoundPrice] = cache_get_field_int(0, "carImpoundPrice");
		CarData[carid][carFaction] = cache_get_field_int(0, "carFaction");
		CarData[carid][carJob] = cache_get_field_int(0, "carJob");
		CarData[carid][carLoca] = cache_get_field_int(0, "carLoca");
		CarData[carid][carLocaPrice] = cache_get_field_int(0, "carLocaPrice");
		CarData[carid][carLocaID] = 0;
		CarData[carid][carPrice] = cache_get_field_int(0, "carPrice");
		CarData[carid][carDouble] = cache_get_field_int(0, "carDouble");
		CarData[carid][carSabot] = cache_get_field_int(0, "carSabot");
		CarData[carid][carSabPri] = cache_get_field_int(0, "carSabPri");
		EntreCar[carid] = 0;
		if(CarData[carid][carLoca] > 0) CarData[carid][carLocked] = 0;
		else CarData[carid][carLocked] = cache_get_field_int(0, "carLocked");

		cache_get_field_content(0, "carHealth", str, g_iHandle, 30);
		sscanf(str, "p<|>fdddd", CarData[carid][carHealth_real], CarData[carid][carHealth][0], CarData[carid][carHealth][1], CarData[carid][carHealth][2], CarData[carid][carHealth][3]);
		
		for(new j=0; j<5; j++) CarData[carid][carMine][j] = -1;
		for (new j = 0; j < 14; j ++)
		{
			if (j < 5)
			{
				format(str, sizeof(str), "carWeapon%d", j + 1);
				CarData[carid][carWeapons][j] = cache_get_field_int(0, str);

				format(str, sizeof(str), "carAmmo%d", j + 1);
				CarData[carid][carAmmo][j] = cache_get_field_int(0, str);
			}
			format(str, sizeof(str), "carMod%d", j + 1);
			CarData[carid][carMods][j] = cache_get_field_int(0, str);
		}

		Car_Spawn(carid);
		CoreVehicles[CarData[carid][carVehicle]][vehFuel] = cache_get_field_int(0, "carFuel");
	}
	for (new i = 0; i < MAX_DYNAMIC_CARS; i ++) if (CarData[i][carExists]) {
		format(str, sizeof(str), "SELECT * FROM `carstorage` WHERE `ID` = '%d'", CarData[i][carID]);

		mysql_function_query(g_iHandle, str, true, "OnLoadCarStorage", "d", i);
	}

	SendClientMessageEx(playerid, COLOR_INFO, "Vous avez spawn votre %s (point-rouge minimap).", ReturnVehicleModelName(CarData[carid][carModel]));
	Waypoint_Set(playerid, ReturnVehicleModelName(CarData[carid][carModel]), CarData[carid][carPos][0], CarData[carid][carPos][1], CarData[carid][carPos][2]);
	return 1;
}



Car_Unspawn(carid)
{
	if (carid != -1 && CarData[carid][carExists])
	{

		if (IsValidVehicle(CarData[carid][carVehicle]))
			DestroyVehicle(CarData[carid][carVehicle]);

		for (new i = 0; i < MAX_BACKPACKS; i ++) if (BackpackData[i][backpackExists] && BackpackData[i][backpackVehicle] == CarData[carid][carID]) {
	   		BackpackData[i][backpackExists] = false;
			BackpackData[i][backpackID] = 0;
			BackpackData[i][backpackPlayer] = 0;
			BackpackData[i][backpackHouse] = 0;
			BackpackData[i][backpackVehicle] = 0;
		}
		
		// REMOVE ITEMS:
		for (new i = 0; i != MAX_CAR_STORAGE; i ++) {
			CarStorage[carid][i][cItemExists] = false;
			CarStorage[carid][i][cItemModel] = 0;
			CarStorage[carid][i][cItemQuantity] = 0;
		}


		for (new i = 0; i < 5; i ++) {
			CarData[carid][carWeapons][i] = 0;
			CarData[carid][carAmmo][i] = 0;
		}

		CarData[carid][carExists] = false;
		CarData[carid][carID] = 0;
		CarData[carid][carOwner] = 0;
		CarData[carid][carVehicle] = 0;
	}
	return 1;
}


stock IsVehicleSeatUsed(vehicleid, seat)
{
	foreach (new i : Player) if (IsPlayerInVehicle(i, vehicleid) && GetPlayerVehicleSeat(i) == seat) {
		return 1;
	}
	return 0;
}

stock RemoveFromVehicle(playerid)
{
	if (IsPlayerInAnyVehicle(playerid))
	{
		static
		Float:fX,
		Float:fY,
		Float:fZ;

		GetPlayerPos(playerid, fX, fY, fZ);
		SetPlayerPos(playerid, fX, fY, fZ + 1.5);
	}
	return 1;
}

stock GetAvailableSeat(vehicleid, start = 1)
{
	new seats = GetVehicleMaxSeats(vehicleid);

	for (new i = start; i < seats; i ++) if (!IsVehicleSeatUsed(vehicleid, i)) {
		return i;
	}
	return -1;
}

stock GetVehicleFromBehind(vehicleid)
{
	static
	Float:fCoords[7];

	GetVehiclePos(vehicleid, fCoords[0], fCoords[1], fCoords[2]);
	GetVehicleZAngle(vehicleid, fCoords[3]);

	for(new i = 1, j = GetVehiclePoolSize(); i <= j; i++) if (i != vehicleid && GetVehiclePos(i, fCoords[4], fCoords[5], fCoords[6]))
	{
		if (floatabs(fCoords[0] - fCoords[4]) < 6 && floatabs(fCoords[1] - fCoords[5]) < 6 && floatabs(fCoords[2] - fCoords[6]) < 6)
		return i;
	}
	return INVALID_VEHICLE_ID;
}

stock GetVehicleBoot(vehicleid, &Float:x, &Float:y, &Float:z)
{
	if (!GetVehicleModel(vehicleid) || vehicleid == INVALID_VEHICLE_ID)
	return (x = 0.0, y = 0.0, z = 0.0), 0;

	static
	Float:pos[7]
	;
	GetVehicleModelInfo(GetVehicleModel(vehicleid), VEHICLE_MODEL_INFO_SIZE, pos[0], pos[1], pos[2]);
	GetVehiclePos(vehicleid, pos[3], pos[4], pos[5]);
	GetVehicleZAngle(vehicleid, pos[6]);

	x = pos[3] - (floatsqroot(pos[1] + pos[1]) * floatsin(-pos[6], degrees));
	y = pos[4] - (floatsqroot(pos[1] + pos[1]) * floatcos(-pos[6], degrees));
	z = pos[5];

	return 1;
}

stock GetVehicleHood(vehicleid, &Float:x, &Float:y, &Float:z)
{
	if (!GetVehicleModel(vehicleid) || vehicleid == INVALID_VEHICLE_ID)
	return (x = 0.0, y = 0.0, z = 0.0), 0;

	static
	Float:pos[7]
	;
	GetVehicleModelInfo(GetVehicleModel(vehicleid), VEHICLE_MODEL_INFO_SIZE, pos[0], pos[1], pos[2]);
	GetVehiclePos(vehicleid, pos[3], pos[4], pos[5]);
	GetVehicleZAngle(vehicleid, pos[6]);

	x = pos[3] + (floatsqroot(pos[1] + pos[1]) * floatsin(-pos[6], degrees));
	y = pos[4] + (floatsqroot(pos[1] + pos[1]) * floatcos(-pos[6], degrees));
	z = pos[5];

	return 1;
}

forward HarvestPlant(playerid, plantid);
public HarvestPlant(playerid, plantid)
{
	PlayerData[playerid][pHarvesting] = 0;

	if (Plant_Nearest(playerid) != plantid || GetPlayerSpecialAction(playerid) != SPECIAL_ACTION_DUCK || !PlantData[plantid][plantExists])
	return 0;

	switch (PlantData[plantid][plantType])
	{
		case 1:
		{
			new id = Inventory_Add(playerid, "Marijuana", 1578, PlantData[plantid][plantDrugs]);

			if (id == -1)
			return SendClientMessageEx(playerid, COLOR_ERROR, "Il n'y a plus de place dans votre inventaire.");

			SendNearbyMessage(playerid, 15.0, COLOR_PURPLE, "%s a récolté %d grammes de Marijuana.", ReturnName(playerid, 1), PlantData[plantid][plantDrugs]);
		}
		case 2:
		{
			new id = Inventory_Add(playerid, "Cocaine", 1575, PlantData[plantid][plantDrugs]);

			if (id == -1)
			return SendClientMessageEx(playerid, COLOR_ERROR, "Il n'y a plus de place dans votre inventaire.");

			SendNearbyMessage(playerid, 15.0, COLOR_PURPLE, "%s a récolté %d grammes de Cocaine.", ReturnName(playerid, 1), PlantData[plantid][plantDrugs]);
		}
		case 3:
		{
			new id = Inventory_Add(playerid, "Heroine", 1577, PlantData[plantid][plantDrugs]);

			if (id == -1)
			return SendClientMessageEx(playerid, COLOR_ERROR, "Il n'y a plus de place dans votre inventaire.");

			SendNearbyMessage(playerid, 15.0, COLOR_PURPLE, "%s a récolté %d grammes d'Heroîne.", ReturnName(playerid, 1), PlantData[plantid][plantDrugs]);
		}
	}
	Plant_Delete(plantid);
	return 1;
}

forward CraftParts(playerid, crateid);
public CraftParts(playerid, crateid)
{
	if (PlayerData[playerid][pCarryCrate] != crateid || !CrateData[crateid][crateExists] || !IsPlayerSpawned(playerid) || !PlayerData[playerid][pCrafting])
	return 0;

	PlayerData[playerid][pCrafting] = 0;
	PlayerData[playerid][pCarryCrate] = -1;

	FactionData[ PlayerData[playerid][pFaction] ][factionCredit] += CrateData[crateid][crateType];
	Faction_Save(PlayerData[playerid][pFaction]);
	
	TogglePlayerControllable(playerid, 1);
	SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);

	RemovePlayerAttachedObject(playerid, 4);
	Log_Write("logs/craft_log.txt", "[%s] %s has crafted a %s crate.", ReturnDate(), ReturnName(playerid), Crate_GetType(CrateData[crateid][crateType]));

	switch (CrateData[crateid][crateType])
	{
		case 1:
		{

			Inventory_Add(playerid, "Munitions", 2039);
			Inventory_Add(playerid, "Munitions", 2039);

			Crate_Delete(crateid);
			SendClientMessageEx(playerid, COLOR_INFO, "Vous avez crée des munitions (ajouté dans votre inventaire).");
		}
		case 2:
		{
			GiveWeaponToPlayer(playerid, 18, 2);

			Crate_Delete(crateid);
			SendClientMessageEx(playerid, COLOR_INFO, "Vous avez crée 2 Cocktails Molotovs.");
		}
		case 3:
		{
			GiveWeaponToPlayer(playerid, 23, 50);

			Crate_Delete(crateid);
			SendClientMessageEx(playerid, COLOR_INFO, "Vous avez 1 Silencieux (50 balles).");
		}
		case 4:
		{
			GiveWeaponToPlayer(playerid, 22, 50);

			Crate_Delete(crateid);
			SendClientMessageEx(playerid, COLOR_INFO, "Vous avez 1 Colt 45 (50 balles).");
		}
		case 5:
		{
			GiveWeaponToPlayer(playerid, 24, 40);

			Crate_Delete(crateid);
			SendClientMessageEx(playerid, COLOR_INFO, "Vous avez 1 Desert Eagle (40 balles).");
		}
		case 6:
		{
			GiveWeaponToPlayer(playerid, 25, 30);

			Crate_Delete(crateid);
			SendClientMessageEx(playerid, COLOR_INFO, "Vous avez 1 Shotgun (30 balles).");
		}
		case 7:
		{
			GiveWeaponToPlayer(playerid, 28, 100);

			Crate_Delete(crateid);
			SendClientMessageEx(playerid, COLOR_INFO, "Vous avez 1 UZI (100 balles).");
		}
		case 8:
		{
			GiveWeaponToPlayer(playerid, 32, 100);

			Crate_Delete(crateid);
			SendClientMessageEx(playerid, COLOR_INFO, "Vous avez 1 TEC-9 (100 balles).");
		}
		case 9:
		{
			GiveWeaponToPlayer(playerid, 29, 70);

			Crate_Delete(crateid);
			SendClientMessageEx(playerid, COLOR_INFO, "Vous avez 1 MP5 (70 balles).");
		}
		case 10:
		{
			GiveWeaponToPlayer(playerid, 30, 70);

			Crate_Delete(crateid);
			SendClientMessageEx(playerid, COLOR_INFO, "Vous avez 1 AK-47 (70 balles).");
		}
		case 11:
		{
			GiveWeaponToPlayer(playerid, 31, 70);

			Crate_Delete(crateid);
			SendClientMessageEx(playerid, COLOR_INFO, "Vous avez 1 M4 (70 balles).");
		}

		case 12:
		{
			GiveWeaponToPlayer(playerid, 33, 20);

			Crate_Delete(crateid);
			SendClientMessageEx(playerid, COLOR_INFO, "Vous avez 1 Rifle (20 balles).");
		}
		case 13:
		{
			GiveWeaponToPlayer(playerid, 34, 20);

			Crate_Delete(crateid);
			SendClientMessageEx(playerid, COLOR_INFO, "Vous avez 1 Sniper Rifle (20 balles).");
		}
	}
	return 1;
}

forward FirstAidUpdate(playerid);
public FirstAidUpdate(playerid)
{
	static
	Float:health;

	GetPlayerHealth(playerid, health);

	if (!IsPlayerInAnyVehicle(playerid) && GetPlayerAnimationIndex(playerid) != 1508)
	ApplyAnimation(playerid, "SWAT", "gnstwall_injurd", 4.0, 1, 0, 0, 0, 0);

	if (health >= 95.0)
	{
		SetPlayerHealth(playerid, 100.0);
		SendClientMessageEx(playerid, COLOR_INFO, "Votre trousse de premiers soins a été utilisée.");

		if (!IsPlayerInAnyVehicle(playerid)) {
			PlayerData[playerid][pLoopAnim] = true;
			ShowPlayerFooter(playerid, "Appuyez ~y~ESPACE~w~ pour stopper l'animation.");
		}
		PlayerData[playerid][pBleeding] = 0;
		PlayerData[playerid][pBleedTime] = 0;

		PlayerData[playerid][pFirstAid] = false;
		KillTimer(PlayerData[playerid][pAidTimer]);
	}
	else {
		SetPlayerHealth(playerid, floatadd(health, 4.0));
	}
	return 1;
}

forward RepairCar(playerid, vehicleid);
public RepairCar(playerid, vehicleid)
{
	if (/*PlayerData[playerid][pJob] != JOB_MECHANIC || */!IsPlayerNearHood(playerid, vehicleid)) {
	    SendClientMessageEx(playerid, COLOR_ERROR, "Vous vous êtes éloigné du capot, la réparation est annulée.");
		return 0;
	}
	RepairVehicle(vehicleid);
	//SetVehicleHealth(vehicleid, 1000.0);
	GameTextForPlayer(playerid, " ", 1, 3);

	PlayerData[playerid][pRepairTime] = gettime() + 30;
	SendNearbyMessage(playerid, 15.0, COLOR_PURPLE, "%s a réussi à réparer le véhicule.", ReturnName(playerid, 1));

	return 1;
}

forward Business_LoadCars(bizid);
public Business_LoadCars(bizid)
{
	static
	rows,
	fields;

	cache_get_data(rows, fields, g_iHandle);

	for (new i = 0; i != rows; i ++) {
		DealershipCars[bizid][i][vehID] = cache_get_field_int(i, "vehID");
		DealershipCars[bizid][i][vehModel] = cache_get_field_int(i, "vehModel");
		DealershipCars[bizid][i][vehPrice] = cache_get_field_int(i, "vehPrice");
	}
	return 1;
}

forward OnLoadFurniture(houseid);
public OnLoadFurniture(houseid)
{
	static
	rows,
	fields,
	id = -1;

	cache_get_data(rows, fields, g_iHandle);

	for (new i = 0; i != rows; i ++) if ((id = Furniture_GetFreeID()) != -1) {
		FurnitureData[id][furnitureExists] = true;
		FurnitureData[id][furnitureHouse] = houseid;

		cache_get_field_content(i, "furnitureName", FurnitureData[id][furnitureName], g_iHandle, 32);

		FurnitureData[id][furnitureID] = cache_get_field_int(i, "furnitureID");
		FurnitureData[id][furnitureModel] = cache_get_field_int(i, "furnitureModel");
		FurnitureData[id][furniturePos][0] = cache_get_field_float(i, "furnitureX");
		FurnitureData[id][furniturePos][1] = cache_get_field_float(i, "furnitureY");
		FurnitureData[id][furniturePos][2] = cache_get_field_float(i, "furnitureZ");
		FurnitureData[id][furnitureRot][0] = cache_get_field_float(i, "furnitureRX");
		FurnitureData[id][furnitureRot][1] = cache_get_field_float(i, "furnitureRY");
		FurnitureData[id][furnitureRot][2] = cache_get_field_float(i, "furnitureRZ");
		FurnitureData[id][furnitureActive] = cache_get_field_int(i, "furnitureActive");

		Furniture_Refresh(id);
	}
	return 1;
}

Furniture_GetCount(houseid)
{
	new count;

	for (new i = 0; i < MAX_FURNITURE; i ++) if (FurnitureData[i][furnitureExists] && FurnitureData[i][furnitureHouse] == houseid) {
		count++;
	}
	return count;
}

Furniture_GetFreeID()
{
	for (new i = 0; i != MAX_FURNITURE; i ++) if (!FurnitureData[i][furnitureExists]) {
		return i;
	}
	return -1;
}

Furniture_Refresh(furnitureid)
{
	if (furnitureid != -1 && FurnitureData[furnitureid][furnitureExists])
	{
		if (IsValidDynamicObject(FurnitureData[furnitureid][furnitureObject]))
			DestroyDynamicObject(FurnitureData[furnitureid][furnitureObject]);

		
		if(FurnitureData[furnitureid][furnitureActive])
		{
			FurnitureData[furnitureid][furnitureObject] = CreateDynamicObject(
			FurnitureData[furnitureid][furnitureModel],
			FurnitureData[furnitureid][furniturePos][0],
			FurnitureData[furnitureid][furniturePos][1],
			FurnitureData[furnitureid][furniturePos][2],
			FurnitureData[furnitureid][furnitureRot][0],
			FurnitureData[furnitureid][furnitureRot][1],
			FurnitureData[furnitureid][furnitureRot][2],
			HouseData[FurnitureData[furnitureid][furnitureHouse]][houseID] + 5000,
			HouseData[FurnitureData[furnitureid][furnitureHouse]][houseInterior]
			);
		}
		else
		{
		    FurnitureData[furnitureid][furnitureObject] = INVALID_OBJECT_ID;
		}
	}
	return 1;
}

Furniture_Save(furnitureid)
{
	static
	string[500];

	format(string, sizeof(string), "UPDATE `furniture` SET `furnitureModel` = '%d', `furnitureName` = '%s', `furnitureX` = '%.4f', `furnitureY` = '%.4f', `furnitureZ` = '%.4f', `furnitureRX` = '%.4f', `furnitureRY` = '%.4f', `furnitureRZ` = '%.4f', `furnitureActive` = '%d' WHERE `ID` = '%d' AND `furnitureID` = '%d'",
	FurnitureData[furnitureid][furnitureModel],
	FurnitureData[furnitureid][furnitureName],
	FurnitureData[furnitureid][furniturePos][0],
	FurnitureData[furnitureid][furniturePos][1],
	FurnitureData[furnitureid][furniturePos][2],
	FurnitureData[furnitureid][furnitureRot][0],
	FurnitureData[furnitureid][furnitureRot][1],
	FurnitureData[furnitureid][furnitureRot][2],
	FurnitureData[furnitureid][furnitureActive],
	HouseData[FurnitureData[furnitureid][furnitureHouse]][houseID],
	FurnitureData[furnitureid][furnitureID]
	);
	return mysql_function_query(g_iHandle, string, false, "", "");
}

Furniture_Add(playerid, houseid, name[], modelid, Float:x, Float:y, Float:z, Float:rx = 0.0, Float:ry = 0.0, Float:rz = 0.0)
{
	static
	string[64],
	id = -1;

	if (houseid == -1 || !HouseData[houseid][houseExists])
	return 0;

	if ((id = Furniture_GetFreeID()) != -1)
	{
		FurnitureData[id][furnitureExists] = true;
		FurnitureData[id][furnitureActive] = true;
		
		SetPVarInt(playerid, "FURNITURE_NEW", id);
		
		format(FurnitureData[id][furnitureName], 32, name);

		FurnitureData[id][furnitureHouse] = houseid;
		FurnitureData[id][furnitureModel] = modelid;
		FurnitureData[id][furniturePos][0] = x;
		FurnitureData[id][furniturePos][1] = y;
		FurnitureData[id][furniturePos][2] = z;
		FurnitureData[id][furnitureRot][0] = rx;
		FurnitureData[id][furnitureRot][1] = ry;
		FurnitureData[id][furnitureRot][2] = rz;
		

		Furniture_Refresh(id);

		format(string, sizeof(string), "INSERT INTO `furniture` (`ID`) VALUES(%d)", HouseData[houseid][houseID]);
		mysql_function_query(g_iHandle, string, false, "OnFurnitureCreated", "d", id);

		return id;
	}
	return -1;
}

Furniture_Delete(furnitureid)
{
	static
	string[72];

	if (furnitureid != -1 && FurnitureData[furnitureid][furnitureExists])
	{
		format(string, sizeof(string), "DELETE FROM `furniture` WHERE `ID` = '%d' AND `furnitureID` = '%d'", HouseData[FurnitureData[furnitureid][furnitureHouse]][houseID], FurnitureData[furnitureid][furnitureID]);
		mysql_function_query(g_iHandle, string, false, "", "");

		FurnitureData[furnitureid][furnitureExists] = false;
		FurnitureData[furnitureid][furnitureModel] = 0;
		FurnitureData[furnitureid][furnitureActive] = false;

		DestroyDynamicObject(FurnitureData[furnitureid][furnitureObject]);
	}
	return 1;
}

forward OnLoadCarStorage(carid);
public OnLoadCarStorage(carid)
{
	static
	rows,
	fields,
	str[32];

	cache_get_data(rows, fields, g_iHandle);

	for (new i = 0; i != rows; i ++) {
		CarStorage[carid][i][cItemExists] = true;
		CarStorage[carid][i][cItemID] = cache_get_field_int(i, "itemID");
		CarStorage[carid][i][cItemModel] = cache_get_field_int(i, "itemModel");
		CarStorage[carid][i][cItemQuantity] = cache_get_field_int(i, "itemQuantity");

		cache_get_field_content(i, "itemName", str, g_iHandle, 32);
		strpack(CarStorage[carid][i][cItemName], str, 32 char);
	}
	return 1;
}

forward OnLoadStorage(houseid);
public OnLoadStorage(houseid)
{
	static
	rows,
	fields,
	str[32];

	cache_get_data(rows, fields, g_iHandle);

	for (new i = 0; i != rows; i ++) {
		HouseStorage[houseid][i][hItemExists] = true;
		HouseStorage[houseid][i][hItemID] = cache_get_field_int(i, "itemID");
		HouseStorage[houseid][i][hItemModel] = cache_get_field_int(i, "itemModel");
		HouseStorage[houseid][i][hItemQuantity] = cache_get_field_int(i, "itemQuantity");

		cache_get_field_content(i, "itemName", str, g_iHandle, 32);
		strpack(HouseStorage[houseid][i][hItemName], str, 32 char);
	}
	return 1;
}

forward OnLoadBackpack(id);
public OnLoadBackpack(id)
{
	static
	rows,
	fields,
	itemid = -1;

	cache_get_data(rows, fields, g_iHandle);

	for (new i = 0; i != rows; i ++) if ((itemid = Backpack_GetFreeItem()) != -1) {
		BackpackItems[itemid][bItemExists] = true;
		BackpackItems[itemid][bItemBackpack] = id;
		BackpackItems[itemid][bItemID] = cache_get_field_int(i, "itemID");
		BackpackItems[itemid][bItemModel] = cache_get_field_int(i, "itemModel");
		BackpackItems[itemid][bItemQuantity] = cache_get_field_int(i, "itemQuantity");

		cache_get_field_content(i, "itemName", BackpackItems[itemid][bItemName], g_iHandle, 32);
	}
	return 1;
}

House_Save(houseid)
{
	new
	query[1536];

	format(query, sizeof(query), "UPDATE `houses` SET `houseOwner` = '%d', `housePrice` = '%d', `houseAddress` = '%s', `housePosX` = '%.4f', `housePosY` = '%.4f', `housePosZ` = '%.4f', `housePosA` = '%.4f', `houseIntX` = '%.4f', `houseIntY` = '%.4f', `houseIntZ` = '%.4f', `houseIntA` = '%.4f', `houseInterior` = '%d', `houseExterior` = '%d', `houseExteriorVW` = '%d'",
	HouseData[houseid][houseOwner],
	HouseData[houseid][housePrice],
	SQL_ReturnEscaped(HouseData[houseid][houseAddress]),
	HouseData[houseid][housePos][0],
	HouseData[houseid][housePos][1],
	HouseData[houseid][housePos][2],
	HouseData[houseid][housePos][3],
	HouseData[houseid][houseInt][0],
	HouseData[houseid][houseInt][1],
	HouseData[houseid][houseInt][2],
	HouseData[houseid][houseInt][3],
	HouseData[houseid][houseInterior],
	HouseData[houseid][houseExterior],
	HouseData[houseid][houseExteriorVW]
	);
	for (new i = 0; i < 10; i ++) {
		format(query, sizeof(query), "%s, `houseWeapon%d` = '%d', `houseAmmo%d` = '%d'", query, i + 1, HouseData[houseid][houseWeapons][i], i + 1, HouseData[houseid][houseAmmo][i]);
	}
	format(query, sizeof(query), "%s, `houseLocked` = '%d', `houseMoney` = '%d', `houseFaction` = '%d' WHERE `houseID` = '%d'",
	query,
	HouseData[houseid][houseLocked],
	HouseData[houseid][houseMoney],
	HouseData[houseid][houseFaction],
	HouseData[houseid][houseID]
	);
	return mysql_function_query(g_iHandle, query, false, "", "");
}

/*House_GetCount(playerid)
{
	new count = 0;

	for (new i = 0; i != MAX_HOUSES; i ++) if (HouseData[i][houseExists] && House_IsOwner(playerid, i)) {
		count++;
	}
	return count;
}*/

House_Inside(playerid)
{
	if (PlayerData[playerid][pHouse] != -1)
	{
		for (new i = 0; i != MAX_HOUSES; i ++) if (HouseData[i][houseExists] && HouseData[i][houseID] == PlayerData[playerid][pHouse] && GetPlayerInterior(playerid) == HouseData[i][houseInterior] && GetPlayerVirtualWorld(playerid) > 0) {
			return i;
		}
	}
	return -1;
}

Gate_Nearest(playerid)
{
	for (new i = 0; i != MAX_GATES; i ++) if (GateData[i][gateExists] && IsPlayerInRangeOfPoint(playerid, GateData[i][gateRadius], GateData[i][gatePos][0], GateData[i][gatePos][1], GateData[i][gatePos][2]))
	{
		if (GetPlayerInterior(playerid) == GateData[i][gateInterior] && GetPlayerVirtualWorld(playerid) == GateData[i][gateWorld])
		return i;
	}
	return -1;
}

Arrest_Nearest(playerid)
{
	for (new i = 0; i != MAX_ARREST_POINTS; i ++) if (ArrestData[i][arrestExists] && IsPlayerInRangeOfPoint(playerid, 4.0, ArrestData[i][arrestPos][0], ArrestData[i][arrestPos][1], ArrestData[i][arrestPos][2]))
	{
		if (GetPlayerInterior(playerid) == ArrestData[i][arrestInterior] && GetPlayerVirtualWorld(playerid) == ArrestData[i][arrestWorld])
		return i;
	}
	return -1;
}

Pump_Nearest(playerid, Float:radius = 4.0)
{
	for (new i = 0; i != MAX_GAS_PUMPS; i ++) if (PumpData[i][pumpExists] && IsPlayerInRangeOfPoint(playerid, radius, PumpData[i][pumpPos][0], PumpData[i][pumpPos][1], PumpData[i][pumpPos][2]) && PumpData[i][pumpExists]) {
		return i;
	}
	return -1;
}

Plant_Nearest(playerid)
{
	for (new i = 0; i != MAX_DRUG_PLANTS; i ++) if (PlantData[i][plantExists] && IsPlayerInRangeOfPoint(playerid, 4.0, PlantData[i][plantPos][0], PlantData[i][plantPos][1], PlantData[i][plantPos][2]))
	{
		if (GetPlayerInterior(playerid) == PlantData[i][plantInterior] && GetPlayerVirtualWorld(playerid) == PlantData[i][plantWorld])
		return i;
	}
	return -1;
}

Crate_Highest(crateid)
{
	new
	Float:height = -1.0,
	id = -1;

	for (new i = 0; i != MAX_CRATES; i ++) if (i != id && CrateData[i][crateExists] && CrateData[i][crateVehicle] == INVALID_VEHICLE_ID && CrateData[i][cratePos][0] == CrateData[crateid][cratePos][0] && CrateData[i][cratePos][1] == CrateData[crateid][cratePos][1] && CrateData[i][cratePos][2] > CrateData[crateid][cratePos][2] && !IsCrateInUse(crateid))
	{
		if (CrateData[i][cratePos][2] > height)
		{
			height = CrateData[i][cratePos][2];
			id = i;
		}
	}
	return id;
}

Crate_Nearest(playerid, Float:radius = 2.5)
{
	if (PlayerData[playerid][pCarryCrate] != -1 && CrateData[PlayerData[playerid][pCarryCrate]][crateExists])
	return PlayerData[playerid][pCarryCrate];

	for (new i = 0; i != MAX_CRATES; i ++) if (CrateData[i][crateExists] && IsPlayerInRangeOfPoint(playerid, radius, CrateData[i][cratePos][0], CrateData[i][cratePos][1], CrateData[i][cratePos][2]))
	{
		if (GetPlayerInterior(playerid) == CrateData[i][crateInterior] && GetPlayerVirtualWorld(playerid) == CrateData[i][crateWorld] && CrateData[i][crateVehicle] == INVALID_VEHICLE_ID)
		return i;
	}
	return -1;
}

House_Nearest(playerid)
{
	for (new i = 0; i != MAX_HOUSES; i ++) if (HouseData[i][houseExists] && IsPlayerInRangeOfPoint(playerid, 2.5, HouseData[i][housePos][0], HouseData[i][housePos][1], HouseData[i][housePos][2]))
	{
		if (GetPlayerInterior(playerid) == HouseData[i][houseExterior] && GetPlayerVirtualWorld(playerid) == HouseData[i][houseExteriorVW])
		return i;
	}
	return -1;
}

House_AbleToLocation(houseid)
{
	if (!HouseData[houseid][houseLocStatus]) return -1;
	if (HouseData[houseid][houseLocNb] >= 10) return -1;
	
	return HouseData[houseid][houseLocPrice];
}

House_Refresh(houseid)
{
	if (houseid != -1 && HouseData[houseid][houseExists])
	{
		if (IsValidDynamic3DTextLabel(HouseData[houseid][houseText3D]))
		DestroyDynamic3DTextLabel(HouseData[houseid][houseText3D]);

		if (IsValidDynamicPickup(HouseData[houseid][housePickup]))
		DestroyDynamicPickup(HouseData[houseid][housePickup]);

		//if (IsValidDynamicMapIcon(HouseData[houseid][houseMapIcon]))
		//DestroyDynamicMapIcon(HouseData[houseid][houseMapIcon]);

		static
			string[250],
			location[150];

		new
			location_status = House_AbleToLocation(houseid);
		
		if(location_status != -1)
		{
			format(location, sizeof(location), "{7EA0DA}Location:{33CC33} disponible\n{7EA0DA}Prix de la location:{FFFFFF} %d$\n", location_status);
		}
		else
		{
			format(location, sizeof(location), "{7EA0DA}Location:{FF0000} indisponible\n");
		}
		
		if (!HouseData[houseid][houseOwner]) {
			format(string, sizeof(string), "{7EA0DA}Prix:{FFFFFF} %s\n%s{7EA0DA}Adresse:{FFFFFF} %s", FormatNumber(HouseData[houseid][housePrice]), location, HouseData[houseid][houseAddress]);
			HouseData[houseid][houseText3D] = CreateDynamic3DTextLabel(string, COLOR_WHITE, HouseData[houseid][housePos][0], HouseData[houseid][housePos][1], HouseData[houseid][housePos][2], 1.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, HouseData[houseid][houseExteriorVW], HouseData[houseid][houseExterior]);
			HouseData[houseid][housePickup] = CreateDynamicPickup(19522, 1, HouseData[houseid][housePos][0], HouseData[houseid][housePos][1], HouseData[houseid][housePos][2], HouseData[houseid][houseExteriorVW], HouseData[houseid][houseExterior]);
		}
		else {
			format(string, sizeof(string), "{7EA0DA}Adresse:{FFFFFF} %s\n%s", HouseData[houseid][houseAddress], location);
			HouseData[houseid][houseText3D] = CreateDynamic3DTextLabel(string, COLOR_WHITE, HouseData[houseid][housePos][0], HouseData[houseid][housePos][1], HouseData[houseid][housePos][2], 1.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, HouseData[houseid][houseExteriorVW], HouseData[houseid][houseExterior]);
			HouseData[houseid][housePickup] = CreateDynamicPickup(1273, 1, HouseData[houseid][housePos][0], HouseData[houseid][housePos][1], HouseData[houseid][housePos][2], HouseData[houseid][houseExteriorVW], HouseData[houseid][houseExterior]);
		}
	}
	return 1;
}

Car_GetCount(playerid)
{
	new
	count = 0;

	for (new i = 0; i != MAX_DYNAMIC_CARS; i ++)
	{
		if (CarData[i][carExists] && CarData[i][carOwner] == PlayerData[playerid][pID])
		{
			count++;
		}
	}
	return count;
}

House_GetCount(playerid)
{
	new
	count = 0;

	for (new i = 0; i != MAX_HOUSES; i ++)
	{
		if (HouseData[i][houseExists] && House_IsOwner(playerid, i))
		{
			count++;
		}
	}
	return count;
}

Business_GetCount(playerid)
{
	new
	count = 0;

	for (new i = 0; i != MAX_BUSINESSES; i ++)
	{
		if (BusinessData[i][bizExists] && Business_IsOwner(playerid, i))
		{
			count++;
		}
	}
	return count;
}

Car_IsOwner(playerid, carid)
{
	if (!PlayerData[playerid][pLogged] || PlayerData[playerid][pID] == -1)
	return 0;

	if ((CarData[carid][carExists] && CarData[carid][carOwner] != 0) && CarData[carid][carOwner] == PlayerData[playerid][pID])
	return 1;

	return 0;
}

Car_WeaponStorage(playerid, carid)
{
	if (!CarData[carid][carExists] || CarData[carid][carLocked])
	return 0;

	static
	string[164];

	string[0] = 0;

	for (new i = 0; i < 5; i ++)
	{
		if (22 <= CarData[carid][carWeapons][i] <= 38)
		format(string, sizeof(string), "%s%s - Munitions: %d\n", string, ReturnWeaponName(CarData[carid][carWeapons][i]), CarData[carid][carAmmo][i]);

		else
			format(string, sizeof(string), "%s%s\n", string, (CarData[carid][carWeapons][i]) ? (ReturnWeaponName(CarData[carid][carWeapons][i])) : ("Vide"));
	}
	Dialog_Show(playerid, Trunk, DIALOG_STYLE_LIST, "Coffre du véhicule", string, "Ok", "X");
	return 1;
}

Car_ShowTrunk(playerid, carid)
{
	static
	string[MAX_CAR_STORAGE * 32],
	name[32];
	
	new
		carid2 = Car_GetID(carid);

	string[0] = 0;

	for (new i = 0; i != MAX_CAR_STORAGE; i ++)
	{
		if (!CarStorage[carid][i][cItemExists])
		format(string, sizeof(string), "%s Slot vide\n", string);

		else {
			strunpack(name, CarStorage[carid][i][cItemName]);

			if (CarStorage[carid][i][cItemQuantity] == 1) {
				format(string, sizeof(string), "%s%s\n", string, name);
			}
			else format(string, sizeof(string), "%s%s (%d)\n", string, name, CarStorage[carid][i][cItemQuantity]);
		}
	}
	strcat(string, "Stockage d'armes\n");
	strcat(string, "Prendre ou ranger le cadavre\n");
	strcat(string, "Stockage de caisses");
	
	if(PlayerData[playerid][pJob] == JOB_MINER && CarData[carid2][carJob] == JOB_MINER) strcat(string, "\nStockage de mineraies");

	PlayerData[playerid][pStorageSelect] = 0;
	Dialog_Show(playerid, CarStorage, DIALOG_STYLE_LIST, "Stockage", string, "Ok", "X");
	return 1;
}

stock IsNearFactionLocker(playerid)
{
	new factionid = PlayerData[playerid][pFaction];

	if (factionid == -1)
	return 0;

	if (IsPlayerInRangeOfPoint(playerid, 3.0, FactionData[factionid][factionLockerPos][0], FactionData[factionid][factionLockerPos][1], FactionData[factionid][factionLockerPos][2]) && GetPlayerInterior(playerid) == FactionData[factionid][factionLockerInt] && GetPlayerVirtualWorld(playerid) == FactionData[factionid][factionLockerWorld])
	return 1;

	return 0;
}

stock GetFactionByID(sqlid)
{
	for (new i = 0; i != MAX_FACTIONS; i ++) if (FactionData[i][factionExists] && FactionData[i][factionID] == sqlid)
	return i;

	return -1;
}

SetFaction(playerid, id)
{
	if (id != -1 && FactionData[id][factionExists])
	{
		PlayerData[playerid][pFaction] = id;
		PlayerData[playerid][pFactionID] = FactionData[id][factionID];
	}
	return 1;
}

SetFactionColor(playerid)
{
	new factionid = PlayerData[playerid][pFaction];

	if (factionid != -1)
	return SetPlayerColor(playerid, RemoveAlpha(FactionData[factionid][factionColor]));

	return 0;
}

Faction_Update(factionid)
{
	if (factionid != -1 || FactionData[factionid][factionExists])
	{
		foreach (new i : Player) if (PlayerData[i][pFaction] == factionid)
		{
			if (GetFactionType(i) == FACTION_GANG || (GetFactionType(i) != FACTION_GANG && PlayerData[i][pOnDuty]))
			SetFactionColor(i);
		}
	}
	return 1;
}

Faction_Refresh(factionid)
{
	if (factionid != -1 && FactionData[factionid][factionExists])
	{
		if (FactionData[factionid][factionLockerPos][0] != 0.0 && FactionData[factionid][factionLockerPos][1] != 0.0 && FactionData[factionid][factionLockerPos][2] != 0.0)
		{
			static
			string[128];

			if (IsValidDynamicPickup(FactionData[factionid][factionPickup]))
			DestroyDynamicPickup(FactionData[factionid][factionPickup]);

			if (IsValidDynamic3DTextLabel(FactionData[factionid][factionText3D]))
			DestroyDynamic3DTextLabel(FactionData[factionid][factionText3D]);

			if(FactionHasLocker(factionid))
			{
				FactionData[factionid][factionPickup] = CreateDynamicPickup(1239, 23, FactionData[factionid][factionLockerPos][0], FactionData[factionid][factionLockerPos][1], FactionData[factionid][factionLockerPos][2], FactionData[factionid][factionLockerWorld], FactionData[factionid][factionLockerInt]);

				format(string, sizeof(string), "Casier %s\n{FFFFFF}/fcasier pour plus  d'informations", FactionData[factionid][factionName]);
				FactionData[factionid][factionText3D] = CreateDynamic3DTextLabel(string, COLOR_DEFAULT, FactionData[factionid][factionLockerPos][0], FactionData[factionid][factionLockerPos][1], FactionData[factionid][factionLockerPos][2], 3.0, INVALID_VEHICLE_ID, INVALID_PLAYER_ID, 0, FactionData[factionid][factionLockerWorld], FactionData[factionid][factionLockerInt]);
			}
		}
	}
	return 1;
}

Faction_Save(factionid)
{
    Faction_SaveRanks(factionid);
    Faction_SaveUpgrades(factionid);
    
	static
	query[3500];

	format(query, sizeof(query), "UPDATE `factions` SET `factionName` = '%s', `factionColor` = '%d', `factionType` = '%d', `factionRanks` = '%d', `factionLockerX` = '%.4f', `factionLockerY` = '%.4f', `factionLockerZ` = '%.4f', `factionLockerInt` = '%d', `factionLockerWorld` = '%d', `SpawnX` = '%f', `SpawnY` = '%f', `SpawnZ` = '%f', `SpawnInterior` = '%d', `SpawnVW` = '%d', `factionArge` = '%d', `factionCredit` = '%d'",
	SQL_ReturnEscaped(FactionData[factionid][factionName]),
	FactionData[factionid][factionColor],
	FactionData[factionid][factionType],
	FactionData[factionid][factionRanks],
	FactionData[factionid][factionLockerPos][0],
	FactionData[factionid][factionLockerPos][1],
	FactionData[factionid][factionLockerPos][2],
	FactionData[factionid][factionLockerInt],
	FactionData[factionid][factionLockerWorld],

	FactionData[factionid][SpawnX],
	FactionData[factionid][SpawnY],
	FactionData[factionid][SpawnZ],
	FactionData[factionid][SpawnInterior],
	FactionData[factionid][SpawnVW],
	FactionData[factionid][factionArge],
	FactionData[factionid][factionCredit]
	
	);
	for (new i = 0; i < 10; i ++)
	{
		if (i < 8)
		format(query, sizeof(query), "%s, `factionSkin%d` = '%d', `factionWeapon%d` = '%d', `factionAmmo%d` = '%d'", query, i + 1, FactionData[factionid][factionSkins][i], i + 1, FactionData[factionid][factionWeapons][i], i + 1, FactionData[factionid][factionAmmo][i]);

		else
			format(query, sizeof(query), "%s, `factionWeapon%d` = '%d', `factionAmmo%d` = '%d'", query, i + 1, FactionData[factionid][factionWeapons][i], i + 1, FactionData[factionid][factionAmmo][i]);
	}
	format(query, sizeof(query), "%s WHERE `factionID` = '%d'",
	query,
	FactionData[factionid][factionID]
	);
	return mysql_function_query(g_iHandle, query, false, "", "");
}


stock Faction_SaveRanks(factionid)
{
	static
	    query[768];

	format(query, sizeof(query), "UPDATE `factions` SET `factionRank1` = '%s', `factionRank2` = '%s', `factionRank3` = '%s', `factionRank4` = '%s', `factionRank5` = '%s', `factionRank6` = '%s', `factionRank7` = '%s', `factionRank8` = '%s', `factionRank9` = '%s', `factionRank10` = '%s', `factionRank11` = '%s', `factionRank12` = '%s', `factionRank13` = '%s', `factionRank14` = '%s', `factionRank15` = '%s' WHERE `factionID` = '%d'",
	    FactionRanks[factionid][0],
	    FactionRanks[factionid][1],
	    FactionRanks[factionid][2],
	    FactionRanks[factionid][3],
	    FactionRanks[factionid][4],
	    FactionRanks[factionid][5],
	    FactionRanks[factionid][6],
	    FactionRanks[factionid][7],
	    FactionRanks[factionid][8],
	    FactionRanks[factionid][9],
	    FactionRanks[factionid][10],
	    FactionRanks[factionid][11],
	    FactionRanks[factionid][12],
	    FactionRanks[factionid][13],
	    FactionRanks[factionid][14],
	    FactionData[factionid][factionID]
	);
	return mysql_tquery(g_iHandle, query);
}


stock Faction_SaveUpgrades(factionid)
{
	static
	    query[2500];

	format(query, sizeof(query), "UPDATE `factions` SET `factionUpgrade0` = '%d', `factionUpgrade1` = '%d', `factionUpgrade2` = '%d', `factionUpgrade3` = '%d', `factionUpgrade4` = '%d', `factionUpgrade5` = '%d', `factionUpgrade6` = '%d', `factionUpgrade7` = '%d', `factionUpgrade8` = '%d', `factionUpgrade9` = '%d',",
	    FactionData[factionid][factionUpgrade][0],
	    FactionData[factionid][factionUpgrade][1],
	    FactionData[factionid][factionUpgrade][2],
	    FactionData[factionid][factionUpgrade][3],
	    FactionData[factionid][factionUpgrade][4],
	    FactionData[factionid][factionUpgrade][5],
	    FactionData[factionid][factionUpgrade][6],
	    FactionData[factionid][factionUpgrade][7],
	    FactionData[factionid][factionUpgrade][8]
	);
	
	format(query, sizeof(query), "%s `factionUpgrade9` = '%d', `factionUpgrade10` = '%d', `factionUpgrade11` = '%d', `factionUpgrade12` = '%d', `factionUpgrade13` = '%d', `factionUpgrade14` = '%d', `factionUpgrade15` = '%d', `factionUpgrade16` = '%d' WHERE `factionID` = '%d'",
	    query,
	    FactionData[factionid][factionUpgrade][9],
	    FactionData[factionid][factionUpgrade][10],
	    FactionData[factionid][factionUpgrade][11],
	    FactionData[factionid][factionUpgrade][12],
	    FactionData[factionid][factionUpgrade][13],
	    FactionData[factionid][factionUpgrade][14],
	    FactionData[factionid][factionUpgrade][15],
	    FactionData[factionid][factionUpgrade][16],
	    FactionData[factionid][factionID]
	);
	return mysql_tquery(g_iHandle, query);
}

Faction_Delete(factionid)
{
	if (factionid != -1 && FactionData[factionid][factionExists])
	{
		new
		string[64];

		format(string, sizeof(string), "DELETE FROM `factions` WHERE `factionID` = '%d'", FactionData[factionid][factionID]);
		mysql_function_query(g_iHandle, string, false, "", "");

		format(string, sizeof(string), "UPDATE `characters` SET `Faction` = '-1' WHERE `Faction` = '%d'", FactionData[factionid][factionID]);
		mysql_function_query(g_iHandle, string, false, "", "");

		foreach (new i : Player)
		{
			if (PlayerData[i][pFaction] == factionid) {
				PlayerData[i][pFaction] = -1;
				PlayerData[i][pFactionID] = -1;
				PlayerData[i][pFactionRank] = -1;
			}
			if (PlayerData[i][pFactionEdit] == factionid) {
				PlayerData[i][pFactionEdit] = -1;
			}
		}
		if (IsValidDynamicPickup(FactionData[factionid][factionPickup]))
		DestroyDynamicPickup(FactionData[factionid][factionPickup]);

		if (IsValidDynamic3DTextLabel(FactionData[factionid][factionText3D]))
		DestroyDynamic3DTextLabel(FactionData[factionid][factionText3D]);

		FactionData[factionid][factionExists] = false;
		FactionData[factionid][factionType] = 0;
		FactionData[factionid][factionID] = 0;
		FactionData[factionid][factionCredit] = 0;
	}
	return 1;
}

stock GetFactionType(playerid)
{
	if (PlayerData[playerid][pFaction] == -1)
	return 0;

	return (FactionData[PlayerData[playerid][pFaction]][factionType]);
}

Faction_ShowRanks(playerid, factionid)
{
	if (factionid != -1 && FactionData[factionid][factionExists])
	{
		static
		string[640];

		string[0] = 0;

		for (new i = 0; i < FactionData[factionid][factionRanks]; i ++)
		format(string, sizeof(string), "%s Rang %d: %s\n", string, i + 1, FactionRanks[factionid][i]);

		PlayerData[playerid][pFactionEdit] = factionid;
		Dialog_Show(playerid, EditRanks, DIALOG_STYLE_LIST, FactionData[factionid][factionName], string, "Changer", "Fermer");
	}
	return 1;
}

Faction_Create(name[], type)
{
	for (new i = 0; i != MAX_FACTIONS; i ++) if (!FactionData[i][factionExists])
	{
		format(FactionData[i][factionName], 32, name);

		FactionData[i][factionExists] = true;
		FactionData[i][factionColor] = 0xFFFFFF00;
		FactionData[i][factionType] = type;
		FactionData[i][factionRanks] = 5;

		FactionData[i][factionLockerPos][0] = 0.0;
		FactionData[i][factionLockerPos][1] = 0.0;
		FactionData[i][factionLockerPos][2] = 0.0;
		FactionData[i][factionLockerInt] = 0;
		FactionData[i][factionLockerWorld] = 0;
		FactionData[i][factionArge] = 0;
		FactionData[i][factionCredit] = 60;

		for (new j = 0; j < 8; j ++) {
			FactionData[i][factionSkins][j] = 0;
		}
		for (new j = 0; j < 10; j ++) {
			FactionData[i][factionWeapons][j] = 0;
			FactionData[i][factionAmmo][j] = 0;
		}
		for (new j = 0; j < 15; j ++) {
			format(FactionRanks[i][j], 32, "Rank %d", j + 1);
		}
		mysql_function_query(g_iHandle, "INSERT INTO `factions` (`factionType`) VALUES(0)", false, "OnFactionCreated", "d", i);
		return i;
	}
	return -1;
}

Plant_Delete(plantid)
{
	if (plantid != -1 && PlantData[plantid][plantExists])
	{
		new
		string[64];

		format(string, sizeof(string), "DELETE FROM `plants` WHERE `plantID` = '%d'", PlantData[plantid][plantID]);
		mysql_function_query(g_iHandle, string, false, "", "");

		if (IsValidDynamic3DTextLabel(PlantData[plantid][plantText3D]))
		DestroyDynamic3DTextLabel(PlantData[plantid][plantText3D]);

		if (IsValidDynamicObject(PlantData[plantid][plantObject]))
		DestroyDynamicObject(PlantData[plantid][plantObject]);

		PlantData[plantid][plantExists] = false;
		PlantData[plantid][plantID] = 0;
		PlantData[plantid][plantDrugs] = 0;
	}
	return 1;
}

Plant_Create(playerid, type)
{
	static
	Float:x,
	Float:y,
	Float:z,
	Float:angle;

	if (GetPlayerPos(playerid, x, y, z) && GetPlayerFacingAngle(playerid, angle))
	{
		for (new i = 0; i != MAX_DRUG_PLANTS; i ++) if (!PlantData[i][plantExists])
		{
			PlantData[i][plantExists] = true;
			PlantData[i][plantType] = type;
			PlantData[i][plantDrugs] = 0;

			PlantData[i][plantPos][0] = x;
			PlantData[i][plantPos][1] = y;
			PlantData[i][plantPos][2] = z;
			PlantData[i][plantPos][3] = angle;
			PlantData[i][plantInterior] = GetPlayerInterior(playerid);
			PlantData[i][plantWorld] = GetPlayerVirtualWorld(playerid);

			mysql_function_query(g_iHandle, "INSERT INTO `plants` (`plantType`) VALUES(0)", false, "OnPlantCreated", "d", i);
			Plant_Refresh(i);
			return i;
		}
	}
	return -1;
}

Plant_MaxGrams(type)
{
	new grams;

	switch (type)
	{
		case 1: grams = 40; // Marijuana plant
		case 2: grams = 30; // Cocaine plant
		case 3: grams = 25; // Heroin plant
		default: grams = 0;
	}
	return grams;
}

Plant_Save(plantid)
{
	static
	query[256];

	format(query, sizeof(query), "UPDATE `plants` SET `plantType` = '%d', `plantDrugs` = '%d', `plantX` = '%.4f', `plantY` = '%.4f', `plantZ` = '%.4f', `plantA` = '%.4f', `plantInterior` = '%d', `plantWorld` = '%d' WHERE `plantID` = '%d'",
	PlantData[plantid][plantType],
	PlantData[plantid][plantDrugs],
	PlantData[plantid][plantPos][0],
	PlantData[plantid][plantPos][1],
	PlantData[plantid][plantPos][2],
	PlantData[plantid][plantPos][3],
	PlantData[plantid][plantInterior],
	PlantData[plantid][plantWorld],
	PlantData[plantid][plantID]
	);
	return mysql_function_query(g_iHandle, query, false, "", "");
}

Plant_GetType(type)
{
	static
	str[16];

	switch (type) {
		case 1: str = "Marijuana";
		case 2: str = "Cocaine";
		case 3: str = "Heroine";
	}
	return str;
}

Plant_Refresh(plantid)
{
	if (plantid != -1 && PlantData[plantid][plantExists])
	{
		static
		string[128];

		if (IsValidDynamicObject(PlantData[plantid][plantObject]))
		DestroyDynamicObject(PlantData[plantid][plantObject]);

		if (IsValidDynamic3DTextLabel(PlantData[plantid][plantText3D]))
		DestroyDynamic3DTextLabel(PlantData[plantid][plantText3D]);

		PlantData[plantid][plantObject] = CreateDynamicObject(3409, PlantData[plantid][plantPos][0], PlantData[plantid][plantPos][1], PlantData[plantid][plantPos][2] - 1.80, 0.0, 0.0, PlantData[plantid][plantPos][3], PlantData[plantid][plantWorld], PlantData[plantid][plantInterior]);

		format(string, sizeof(string), "{FFFFFF}%s - %d/%d Grammes", Plant_GetType(PlantData[plantid][plantType]), PlantData[plantid][plantDrugs], Plant_MaxGrams(PlantData[plantid][plantType]));
		PlantData[plantid][plantText3D] = CreateDynamic3DTextLabel(string, COLOR_DEFAULT, PlantData[plantid][plantPos][0], PlantData[plantid][plantPos][1], PlantData[plantid][plantPos][2], 10.0, INVALID_VEHICLE_ID, INVALID_PLAYER_ID, 0, PlantData[plantid][plantWorld], PlantData[plantid][plantInterior]);
	}
	return 1;
}

Crate_Refresh(crateid)
{
	if (crateid != -1 && CrateData[crateid][crateExists])
	{
		static
		string[128];

		if (IsValidDynamicObject(CrateData[crateid][crateObject]))
		DestroyDynamicObject(CrateData[crateid][crateObject]);

		if (IsValidDynamic3DTextLabel(CrateData[crateid][crateText3D]))
		DestroyDynamic3DTextLabel(CrateData[crateid][crateText3D]);

		CrateData[crateid][crateObject] = CreateDynamicObject(964, CrateData[crateid][cratePos][0], CrateData[crateid][cratePos][1], CrateData[crateid][cratePos][2], 0.0, 0.0, CrateData[crateid][cratePos][3], CrateData[crateid][crateWorld], CrateData[crateid][crateInterior]);

		if (CrateData[crateid][crateType] != 14) {
			format(string, sizeof(string), "{FFFFFF}%s (appuyer sur 'F' pour le ramasser)", Crate_GetType(CrateData[crateid][crateType]));
		}
		else {
			format(string, sizeof(string), "{FFFFFF}Graines de drogues (appuyer sur 'F' pour le ramasser)");
		}
		CrateData[crateid][crateText3D] = CreateDynamic3DTextLabel(string, COLOR_DEFAULT, CrateData[crateid][cratePos][0], CrateData[crateid][cratePos][1], CrateData[crateid][cratePos][2] + 0.5, 10.0, INVALID_VEHICLE_ID, INVALID_PLAYER_ID, 0, CrateData[crateid][crateWorld], CrateData[crateid][crateInterior]);
	}
	return 1;
}

Crate_Delete(crateid)
{
	if (crateid != -1 && CrateData[crateid][crateExists])
	{
		new
		string[64];

		format(string, sizeof(string), "DELETE FROM `crates` WHERE `crateID` = '%d'", CrateData[crateid][crateID]);
		mysql_function_query(g_iHandle, string, false, "", "");

		if (IsValidDynamic3DTextLabel(CrateData[crateid][crateText3D]))
		DestroyDynamic3DTextLabel(CrateData[crateid][crateText3D]);

		if (IsValidDynamicObject(CrateData[crateid][crateObject]))
		DestroyDynamicObject(CrateData[crateid][crateObject]);

		foreach (new i : Player) if (PlayerData[i][pCarryCrate] == crateid) {
			PlayerData[i][pCarryCrate] = -1;

			RemovePlayerAttachedObject(i, 4);
			SetPlayerSpecialAction(i, SPECIAL_ACTION_NONE);
		}
		CrateData[crateid][crateExists] = false;
		CrateData[crateid][crateID] = 0;
		CrateData[crateid][crateVehicle] = INVALID_VEHICLE_ID;
	}
	return 1;
}

Crate_Drop(playerid, Float:radius = 0.0)
{
	static
	Float:x,
	Float:y,
	Float:z,
	Float:angle,
	id = -1;

	if ((id = PlayerData[playerid][pCarryCrate]) != -1 && CrateData[id][crateExists])
	{
		GetPlayerPos(playerid, x, y, z);
		GetPlayerFacingAngle(playerid, angle);

		if (radius != 0.0) {
			x += radius * floatsin(-angle, degrees);
			y += radius * floatcos(-angle, degrees);
		}
		CrateData[id][cratePos][0] = x;
		CrateData[id][cratePos][1] = y;
		CrateData[id][cratePos][2] = z - 0.9;
		CrateData[id][cratePos][3] = angle;
		CrateData[id][crateInterior] = GetPlayerInterior(playerid);
		CrateData[id][crateWorld] = GetPlayerVirtualWorld(playerid);

		Crate_Refresh(id);
		Crate_Save(id);
	}
	PlayerData[playerid][pCarryCrate] = -1;
	RemovePlayerAttachedObject(playerid, 4);
	return 1;
}

Crate_Save(crateid)
{
	static
	query[255];

	format(query, sizeof(query), "UPDATE `crates` SET `crateType` = '%d', `crateX` = '%.4f', `crateY` = '%.4f', `crateZ` = '%.4f', `crateA` = '%.4f', `crateInterior` = '%d', `crateWorld` = '%d' WHERE `crateID` = '%d'",
	CrateData[crateid][crateType],
	CrateData[crateid][cratePos][0],
	CrateData[crateid][cratePos][1],
	CrateData[crateid][cratePos][2],
	CrateData[crateid][cratePos][3],
	CrateData[crateid][crateInterior],
	CrateData[crateid][crateWorld],
	CrateData[crateid][crateID]
	);
	return mysql_function_query(g_iHandle, query, false, "", "");
}

Crate_GetType(type)
{
	static
	str[24];

	switch (type) {
		case 1: str = "Munitions";
		case 2: str = "Cocktail Molotov";
		case 3: str = "Silencieux";
		case 4: str = "Colt 45";
		case 5: str = "Desert Eagle";
		case 6: str = "Shotgun";
		case 7: str = "UZI";
		case 8: str = "TEC-9";
		case 9: str = "MP5";
		case 10: str = "AK-47";
		case 11: str = "M4";
		case 12: str = "Rifle";
		case 13: str = "Sniper Rifle";
		case 14: str = "Graines de drogues";
		default: str = "Rien";
	}
	return str;
}

Crate_Create(playerid, type)
{
	static
	Float:x,
	Float:y,
	Float:z,
	Float:angle;

	if (GetPlayerPos(playerid, x, y, z) && GetPlayerFacingAngle(playerid, angle))
	{
		for (new i = 0; i != MAX_CRATES; i ++) if (!CrateData[i][crateExists])
		{
			if (Crate_Nearest(playerid, 2.5) != -1) {
				z = floatsub(z, 0.1);
			}
			CrateData[i][crateExists] = true;
			CrateData[i][crateVehicle] = INVALID_VEHICLE_ID;
			CrateData[i][crateType] = type;

			CrateData[i][cratePos][0] = x;
			CrateData[i][cratePos][1] = y;
			CrateData[i][cratePos][2] = z - 0.9;
			CrateData[i][cratePos][3] = angle;

			CrateData[i][crateInterior] = GetPlayerInterior(playerid);
			CrateData[i][crateWorld] = GetPlayerVirtualWorld(playerid);

			mysql_function_query(g_iHandle, "INSERT INTO `crates` (`crateInterior`) VALUES(0)", false, "OnCrateCreated", "d", i);
			Crate_Refresh(i);
			return i;
		}
	}
	return -1;
}

Job_Save(jobid)
{
	static
	query[512];
	// ,`jobStock` = '%d'
	format(query, sizeof(query), "UPDATE `jobs` SET `jobType` = '%d', `jobPosX` = '%.4f', `jobPosY` = '%.4f', `jobPosZ` = '%.4f', `jobInterior` = '%d', `jobWorld` = '%d', `jobLock` = '%d', `jobPointX` = '%.4f', `jobPointY` = '%.4f', `jobPointZ` = '%.4f', `jobDeliverX` = '%.4f', `jobDeliverY` = '%.4f', `jobDeliverZ` = '%.4f', `jobPointInt` = '%d', `jobPointWorld` = '%d' WHERE `jobID` = '%d'",
	JobData[jobid][jobType],
	JobData[jobid][jobPos][0],
	JobData[jobid][jobPos][1],
	JobData[jobid][jobPos][2],
	JobData[jobid][jobInterior],
	JobData[jobid][jobWorld],
	JobData[jobid][jobLock],
	JobData[jobid][jobPoint][0],
	JobData[jobid][jobPoint][1],
	JobData[jobid][jobPoint][2],
	JobData[jobid][jobDeliver][0],
	JobData[jobid][jobDeliver][1],
	JobData[jobid][jobDeliver][2],
	JobData[jobid][jobPointInt],
	JobData[jobid][jobPointWorld],
	//JobData[jobid][jobStock],
	JobData[jobid][jobID]
	);
	return mysql_function_query(g_iHandle, query, false, "", "");
}

Job_GetName(type)
{
	static
	str[24];

	switch (type)
	{
		case JOB_COURIER: str = "Livreur";
		case JOB_MECHANIC: str = "Mecanicien";
		case JOB_TAXI: str = "Taxi man";
		case JOB_MINER: str = "Mineur";
		case JOB_FOOD_VENDOR: str = "Pizza-boy";
		case JOB_GARBAGE: str = "Éboueur";
		case JOB_SORTER: str = "Trieur";
		case JOB_MEDIC: str = "Médecin";
		default: str = "Aucun";
	}
	return str;
}

stock IdNom(playerid)
{
	new
		query[300],
		fields,
		rows,
		nom[28];

	format(query, sizeof(query), "SELECT `Username` FROM `characters` WHERE `ID` = '%d'", PlayerData[playerid][pID]);
	mysql_function_query(g_iHandle, query, false, "", "");
	cache_get_data(rows, fields, g_iHandle);
	if (rows)
	{
	    cache_get_field_content(playerid, "Username", nom, g_iHandle, 28);
	}
	return nom;
}
stock AccountExist(name[])
{
	new
		query[300];
		
	mysql_format(g_iHandle, query, sizeof(query), "SELECT ID FROM `characters` WHERE `Username` = '%s'", name);
	mysql_query(g_iHandle, query);
	
	if(cache_num_rows()) return true;
	else return false;
}
stock IdsqlNom(sqlid)
{
	new
		query[300],
		rows,
		nom[28];
		
	mysql_format(g_iHandle, query, sizeof(query), "SELECT `Username` FROM `characters` WHERE `ID` = '%d' LIMIT 1", sqlid);
	mysql_query(g_iHandle, query);
	
	if (cache_num_rows())
	{
	    cache_get_field_content(rows, "Username", nom, g_iHandle, 28);
	}
	else
	{
		format(nom, sizeof(nom), "Aucun");
	}
	return nom;
}
stock NomId(name[])
{
 	new
		query[300],
		id = -1,
		fields,
		rows;

	format(query, sizeof(query), "SELECT `ID` FROM `characters` WHERE `Username` = '%s'", name);
	mysql_function_query(g_iHandle, query, false, "", "");
    cache_get_data(rows, fields, g_iHandle);
	if (rows)
	{
	    id = cache_get_field_int(0, "ID");
	}
	return id;
}
Billboard_Save(bbid)
{
	static query[2048];
	format(query, sizeof(query), "UPDATE `billboards` SET `bbName` = '%s', `bbMessage` = '%s', `bbOwner` = '%d', `bbPrice` = '%d', `bbRange` = '%d', `bbPosX` = '%.4f', `bbPosY` = '%.4f', `bbPosZ` = '%.4f' WHERE `bbID` = '%d'",
	SQL_ReturnEscaped(BillBoardData[bbid][bbName]),
	SQL_ReturnEscaped(BillBoardData[bbid][bbMessage]),
	BillBoardData[bbid][bbOwner],
	BillBoardData[bbid][bbPrice],
	BillBoardData[bbid][bbRange],
	BillBoardData[bbid][bbPos][0],
	BillBoardData[bbid][bbPos][1],
	BillBoardData[bbid][bbPos][2],
	BillBoardData[bbid][bbID]
	);
	return mysql_function_query(g_iHandle, query, false, "", "");
}

Billboard_Refresh(bizid)
{
	if (bizid != -1 && BillBoardData[bizid][bbExists])
	{
		if (IsValidDynamic3DTextLabel(BillBoardData[bizid][bbText3D]))
		DestroyDynamic3DTextLabel(BillBoardData[bizid][bbText3D]);

		static
		string[128];

		if (!BillBoardData[bizid][bbOwner]) {
			format(string, sizeof(string), "%s\n%s", FormatNumber(BillBoardData[bizid][bbPrice]), BillBoardData[bizid][bbName]);
			BillBoardData[bizid][bbText3D] = CreateDynamic3DTextLabel(string, 0x33AA33FF, BillBoardData[bizid][bbPos][0], BillBoardData[bizid][bbPos][1], BillBoardData[bizid][bbPos][2], BillBoardData[bizid][bbRange], INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0);
		}
		else if (BillBoardData[bizid][bbOwner]) {
			format(string, sizeof(string), "%s\n%s", BillBoardData[bizid][bbName], BillBoardData[bizid][bbMessage]);
			BillBoardData[bizid][bbText3D] = CreateDynamic3DTextLabel(string, 0x33AA33FF, BillBoardData[bizid][bbPos][0], BillBoardData[bizid][bbPos][1], BillBoardData[bizid][bbPos][2], BillBoardData[bizid][bbRange], INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0);
		}
	}
	return 1;
}

Job_Refresh(jobid)
{
	if (jobid != -1 && JobData[jobid][jobExists])
	{
		for (new i = 0; i < 3; i ++) {
			if (IsValidDynamic3DTextLabel(JobData[jobid][jobText3D][i]))
			DestroyDynamic3DTextLabel(JobData[jobid][jobText3D][i]);

			if (IsValidDynamicPickup(JobData[jobid][jobPickups][i]))
			DestroyDynamicPickup(JobData[jobid][jobPickups][i]);
		}
		static
		string[90];

		format(string, sizeof(string), "%s\n{FFFFFF}Utilisez \"/j(ob) prendre\" pour prendre le job", Job_GetName(JobData[jobid][jobType]));

		if (JobData[jobid][jobType] == JOB_COURIER) {
			JobData[jobid][jobText3D][1] = CreateDynamic3DTextLabel("Livreur\n{FFFFFF}Utilisez /j(ob) livraison pour commencer une livraison", COLOR_DARKBLUE, JobData[jobid][jobPoint][0], JobData[jobid][jobPoint][1], JobData[jobid][jobPoint][2], 15.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, JobData[jobid][jobPointWorld], JobData[jobid][jobPointInt]);
			JobData[jobid][jobPickups][1] = CreateDynamicPickup(1239, 23, JobData[jobid][jobPoint][0], JobData[jobid][jobPoint][1], JobData[jobid][jobPoint][2], JobData[jobid][jobPointWorld], JobData[jobid][jobPointInt]);
		}
		else if (JobData[jobid][jobType] == JOB_MINER) {
			JobData[jobid][jobText3D][1] = CreateDynamic3DTextLabel("Mineur\n{FFFFFF}Récuperez un véhicule et rendez-vous à la mine", COLOR_DARKBLUE, JobData[jobid][jobPoint][0], JobData[jobid][jobPoint][1], JobData[jobid][jobPoint][2], 15.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, JobData[jobid][jobPointWorld], JobData[jobid][jobPointInt]);
			JobData[jobid][jobPickups][1] = CreateDynamicPickup(1239, 23, JobData[jobid][jobPoint][0], JobData[jobid][jobPoint][1], JobData[jobid][jobPoint][2], JobData[jobid][jobPointWorld], JobData[jobid][jobPointInt]);

			JobData[jobid][jobText3D][2] = CreateDynamic3DTextLabel("Mineur\n{FFFFFF}Livrer vos minerais à cet endroit", COLOR_DARKBLUE, JobData[jobid][jobDeliver][0], JobData[jobid][jobDeliver][1], JobData[jobid][jobDeliver][2], 15.0);
			JobData[jobid][jobPickups][2] = CreateDynamicPickup(1239, 23, JobData[jobid][jobDeliver][0], JobData[jobid][jobDeliver][1], JobData[jobid][jobDeliver][2]);
		}
		else if (JobData[jobid][jobType] == JOB_FOOD_VENDOR) {
			JobData[jobid][jobText3D][1] = CreateDynamic3DTextLabel("Pizza-boy\n{FFFFFF}Utilisez \"/j(ob) pizza\" pour récuperer les pizzas", COLOR_DARKBLUE, JobData[jobid][jobPoint][0], JobData[jobid][jobPoint][1], JobData[jobid][jobPoint][2], 15.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, JobData[jobid][jobPointWorld], JobData[jobid][jobPointInt]);
			JobData[jobid][jobPickups][1] = CreateDynamicPickup(2814, 23, JobData[jobid][jobPoint][0], JobData[jobid][jobPoint][1], JobData[jobid][jobPoint][2], JobData[jobid][jobPointWorld], JobData[jobid][jobPointInt]);
		}
		else if (JobData[jobid][jobType] == JOB_GARBAGE) {
			JobData[jobid][jobText3D][1] = CreateDynamic3DTextLabel("Éboueur\n{FFFFFF}Utilisez \"/j(ob) decharger\" pour vider vos ordures", COLOR_DARKBLUE, JobData[jobid][jobPoint][0], JobData[jobid][jobPoint][1], JobData[jobid][jobPoint][2], 15.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, JobData[jobid][jobPointWorld], JobData[jobid][jobPointInt]);
			JobData[jobid][jobPickups][1] = CreateDynamicPickup(1264, 23, JobData[jobid][jobPoint][0], JobData[jobid][jobPoint][1], JobData[jobid][jobPoint][2], JobData[jobid][jobPointWorld], JobData[jobid][jobPointInt]);
		}
		else if (JobData[jobid][jobType] == JOB_SORTER) {
			JobData[jobid][jobText3D][1] = CreateDynamic3DTextLabel("Sortie de paquets\n{FFFFFF}Utilisez \"/j(ob) trier\" pour commencer le tri des paquets.", COLOR_DARKBLUE, JobData[jobid][jobPoint][0], JobData[jobid][jobPoint][1], JobData[jobid][jobPoint][2], 15.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, JobData[jobid][jobPointWorld], JobData[jobid][jobPointInt]);
			JobData[jobid][jobPickups][1] = CreateDynamicPickup(1239, 23, JobData[jobid][jobPoint][0], JobData[jobid][jobPoint][1], JobData[jobid][jobPoint][2], JobData[jobid][jobPointWorld], JobData[jobid][jobPointInt]);

			JobData[jobid][jobText3D][2] = CreateDynamic3DTextLabel("Sortie de paquets\n{FFFFFF}Utilisez \"/j(ob) cargo\" pour commencer le tri des paquets.", COLOR_DARKBLUE, JobData[jobid][jobDeliver][0], JobData[jobid][jobDeliver][1], JobData[jobid][jobDeliver][2], 15.0);
			JobData[jobid][jobPickups][2] = CreateDynamicPickup(1239, 23, JobData[jobid][jobDeliver][0], JobData[jobid][jobDeliver][1], JobData[jobid][jobDeliver][2]);
		}
		JobData[jobid][jobText3D][0] = CreateDynamic3DTextLabel(string, COLOR_DARKBLUE, JobData[jobid][jobPos][0], JobData[jobid][jobPos][1], JobData[jobid][jobPos][2], 1.5, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, JobData[jobid][jobWorld], JobData[jobid][jobInterior]);
		JobData[jobid][jobPickups][0] = CreateDynamicPickup(1239, 23, JobData[jobid][jobPos][0], JobData[jobid][jobPos][1], JobData[jobid][jobPos][2], JobData[jobid][jobWorld], JobData[jobid][jobInterior]);
	}
	return 1;
}

Job_Delete(jobid)
{
	if (jobid != -1 && JobData[jobid][jobExists])
	{
		new
		string[64];

		format(string, sizeof(string), "DELETE FROM `jobs` WHERE `jobID` = '%d'", JobData[jobid][jobID]);
		mysql_function_query(g_iHandle, string, false, "", "");

		for (new i = 0; i < 3; i ++) {
			if (IsValidDynamic3DTextLabel(JobData[jobid][jobText3D][i]))
			DestroyDynamic3DTextLabel(JobData[jobid][jobText3D][i]);

			if (IsValidDynamicPickup(JobData[jobid][jobPickups][i]))
			DestroyDynamicPickup(JobData[jobid][jobPickups][i]);
		}
		JobData[jobid][jobExists] = false;
		JobData[jobid][jobType] = 0;
		JobData[jobid][jobID] = 0;
		//JobData[jobid][jobStock] = 0;
 }
	return 1;
}

Job_Create(playerid, type)
{
	static
	Float:x,
	Float:y,
	Float:z;

	if (GetPlayerPos(playerid, x, y, z))
	{
		for (new i = 0; i != MAX_DYNAMIC_JOBS; i ++)
		{
			if (!JobData[i][jobExists])
			{
				JobData[i][jobExists] = true;
				JobData[i][jobLock] = false;
				JobData[i][jobType] = type;

				JobData[i][jobPos][0] = x;
				JobData[i][jobPos][1] = y;
				JobData[i][jobPos][2] = z;
				JobData[i][jobPoint][0] = 0.0;
				JobData[i][jobPoint][1] = 0.0;
				JobData[i][jobPoint][2] = 0.0;
				JobData[i][jobDeliver][0] = 0.0;
				JobData[i][jobDeliver][1] = 0.0;
				JobData[i][jobDeliver][2] = 0.0;

				JobData[i][jobInterior] = GetPlayerInterior(playerid);
				JobData[i][jobWorld] = GetPlayerVirtualWorld(playerid);

				JobData[i][jobPointInt] = 0;
				JobData[i][jobPointWorld] = 0;
				//JobData[i][jobStock] = 0;

				Job_Refresh(i);
				mysql_function_query(g_iHandle, "INSERT INTO `jobs` (`jobInterior`) VALUES(0)", false, "OnJobCreated", "d", i);

				return i;
			}
		}
	}
	return -1;
}

Car_Create(ownerid, modelid, Float:x, Float:y, Float:z, Float:angle, color1, color2, type = 0, job, loca, price, vw=0, interior=0)
{
	for (new i = 0; i != MAX_DYNAMIC_CARS; i ++)
	{
		if (!CarData[i][carExists])
		{
			if (color1 == -1)
			color1 = random(127);

			if (color2 == -1)
			color2 = random(127);

			CarData[i][carExists] = true;
			CarData[i][carModel] = modelid;
			CarData[i][carOwner] = ownerid;

			CarData[i][carPos][0] = x;
			CarData[i][carPos][1] = y;
			CarData[i][carPos][2] = z;
			CarData[i][carPos][3] = angle;

			CarData[i][carColor1] = color1;
			CarData[i][carColor2] = color2;
			CarData[i][carPaintjob] = -1;
			CarData[i][carLocked] = false;
			CarData[i][carImpounded] = -1;
			CarData[i][carImpoundPrice] = 0;
			CarData[i][carFaction] = type;
			CarData[i][carJob] = job;
			CarData[i][carLoca] = loca;
			CarData[i][carLocaPrice] = 200;
			CarData[i][carPrice] = price;
			CarData[i][carDouble] = -1;
			CarData[i][carSabot] = 0;
			CarData[i][carSabPri] = 0;
			
			CarData[i][carHealth_real] = 1000.0;
			CarData[i][carHealth][0] = 0;
			CarData[i][carHealth][1] = 0;
			CarData[i][carHealth][2] = 0;
			CarData[i][carHealth][3] = 0;
			
			for(new j=0; j<5; j++) CarData[i][carMine][j] = -1;

			for (new j = 0; j < 14; j ++)
			{
				if (j < 5)
				{
					CarData[i][carWeapons][j] = 0;
					CarData[i][carAmmo][j] = 0;
				}
				CarData[i][carMods][j] = 0;
			}
			CarData[i][carVehicle] = CreateVehicle(modelid, x, y, z, angle, color1, color2, -1);

			CoreVehicles[CarData[i][carVehicle]][vehFuel] = 100;

			SetVehicleVirtualWorld(CarData[i][carVehicle], vw);
			LinkVehicleToInterior(CarData[i][carVehicle], interior);

			if (CarData[i][carVehicle] != INVALID_VEHICLE_ID) {
				ResetVehicle(CarData[i][carVehicle]);
			}
			mysql_function_query(g_iHandle, "INSERT INTO `cars` (`carModel`) VALUES(0)", false, "OnCarCreated", "d", i);
			return i;
		}
	}
	return -1;
}

Car_Delete(carid)
{
	if (carid != -1 && CarData[carid][carExists])
	{
		new
		string[64];


		format(string, sizeof(string), "DELETE FROM `cars` WHERE `carID` = '%d'", CarData[carid][carID]);
		mysql_function_query(g_iHandle, string, false, "", "");

		
		if (IsValidVehicle(CarData[carid][carVehicle]))
		DestroyVehicle(CarData[carid][carVehicle]);

		for (new i = 0; i < MAX_BACKPACKS; i ++) if (BackpackData[i][backpackExists] && BackpackData[i][backpackVehicle] == CarData[carid][carID]) {
			Backpack_Delete(i);
		}
		Car_RemoveAllItems(carid);

		CarData[carid][carExists] = false;
		CarData[carid][carID] = 0;
		CarData[carid][carOwner] = 0;
		CarData[carid][carVehicle] = 0;
	}
	return 1;
}

Car_Save(carid)
{
	static
	query[1500];

	if (CarData[carid][carVehicle] != INVALID_VEHICLE_ID)
	{
		for (new i = 0; i < 14; i ++) {
			CarData[carid][carMods][i] = GetVehicleComponentInSlot(CarData[carid][carVehicle], i);
		}
	}
	format(query, sizeof(query), "UPDATE `cars` SET `carModel` = '%d', `carOwner` = '%d', `carFuel` = '%d', `carPosX` = '%.4f', `carPosY` = '%.4f', `carPosZ` = '%.4f', `carPosR` = '%.4f', `carColor1` = '%d', `carColor2` = '%d', `carPaintjob` = '%d', `carLocked` = '%d'",
	CarData[carid][carModel],
	CarData[carid][carOwner],
	CoreVehicles[CarData[carid][carVehicle]][vehFuel],
	CarData[carid][carPos][0],
	CarData[carid][carPos][1],
	CarData[carid][carPos][2],
	CarData[carid][carPos][3],
	CarData[carid][carColor1],
	CarData[carid][carColor2],
	CarData[carid][carPaintjob],
	CarData[carid][carLocked]
	);
	format(query, sizeof(query), "%s, `carMod1` = '%d', `carMod2` = '%d', `carMod3` = '%d', `carMod4` = '%d', `carMod5` = '%d', `carMod6` = '%d', `carMod7` = '%d', `carMod8` = '%d', `carMod9` = '%d', `carMod10` = '%d', `carMod11` = '%d', `carMod12` = '%d', `carMod13` = '%d', `carMod14` = '%d', `carHealth` = '%f|%d|%d|%d|%d'",
	query,
	CarData[carid][carMods][0],
	CarData[carid][carMods][1],
	CarData[carid][carMods][2],
	CarData[carid][carMods][3],
	CarData[carid][carMods][4],
	CarData[carid][carMods][5],
	CarData[carid][carMods][6],
	CarData[carid][carMods][7],
	CarData[carid][carMods][8],
	CarData[carid][carMods][9],
	CarData[carid][carMods][10],
	CarData[carid][carMods][11],
	CarData[carid][carMods][12],
	CarData[carid][carMods][13],
	CarData[carid][carHealth_real],
	CarData[carid][carHealth][0],
	CarData[carid][carHealth][1],
	CarData[carid][carHealth][2],
	CarData[carid][carHealth][3]
	);
	format(query, sizeof(query), "%s, `carImpounded` = '%d', `carImpoundPrice` = '%d', `carFaction` = '%d', `carJob` = '%d', `carLoca` = '%d', `carLocaPrice` = '%d', `carLocaID` = '%d',`carPrice` = '%d',`carDouble` = '%d', `carSabot` = '%d', `carSabPri` = '%d' ,`carWeapon1` = '%d', `carWeapon2` = '%d', `carWeapon3` = '%d', `carWeapon4` = '%d', `carWeapon5` = '%d', `carAmmo1` = '%d', `carAmmo2` = '%d', `carAmmo3` = '%d', `carAmmo4` = '%d', `carAmmo5` = '%d' WHERE `carID` = '%d'",
	query,
	CarData[carid][carImpounded],
	CarData[carid][carImpoundPrice],
	CarData[carid][carFaction],
	CarData[carid][carJob],
	CarData[carid][carLoca],
	CarData[carid][carLocaPrice],
	CarData[carid][carLocaID],
	CarData[carid][carPrice],
	CarData[carid][carDouble],
	CarData[carid][carSabot],
	CarData[carid][carSabPri],
	CarData[carid][carWeapons][0],
	CarData[carid][carWeapons][1],
	CarData[carid][carWeapons][2],
	CarData[carid][carWeapons][3],
	CarData[carid][carWeapons][4],
	CarData[carid][carAmmo][0],
	CarData[carid][carAmmo][1],
	CarData[carid][carAmmo][2],
	CarData[carid][carAmmo][3],
	CarData[carid][carAmmo][4],
	CarData[carid][carID]
	);
	return mysql_function_query(g_iHandle, query, false, "", "");
}

Entrance_Delete(entranceid)
{
	if (entranceid != -1 && EntranceData[entranceid][entranceExists])
	{
		new
		string[64];

		format(string, sizeof(string), "DELETE FROM `entrances` WHERE `entranceID` = '%d'", EntranceData[entranceid][entranceID]);
		mysql_function_query(g_iHandle, string, false, "", "");

		if (IsValidDynamic3DTextLabel(EntranceData[entranceid][entranceText3D]))
		DestroyDynamic3DTextLabel(EntranceData[entranceid][entranceText3D]);

		if (IsValidDynamicPickup(EntranceData[entranceid][entrancePickup]))
		DestroyDynamicPickup(EntranceData[entranceid][entrancePickup]);

		if (IsValidDynamicMapIcon(EntranceData[entranceid][entranceMapIcon]))
		DestroyDynamicMapIcon(EntranceData[entranceid][entranceMapIcon]);

		if (EntranceData[entranceid][entranceType] == 3)
		DestroyForklifts(entranceid);

		EntranceData[entranceid][entranceExists] = false;
		EntranceData[entranceid][entranceID] = 0;
	}
	return 1;
}

Entrance_Save(entranceid)
{
	static
	query[1024];

	format(query, sizeof(query), "UPDATE `entrances` SET `entranceName` = '%s', `entrancePass` = '%s', `entranceIcon` = '%d', `entranceLocked` = '%d', `entrancePosX` = '%.4f', `entrancePosY` = '%.4f', `entrancePosZ` = '%.4f', `entrancePosA` = '%.4f', `entranceIntX` = '%.4f', `entranceIntY` = '%.4f', `entranceIntZ` = '%.4f', `entranceIntA` = '%.4f', `entranceInterior` = '%d', `entranceExterior` = '%d', `entranceExteriorVW` = '%d', `entranceType` = '%d'",
	SQL_ReturnEscaped(EntranceData[entranceid][entranceName]),
	SQL_ReturnEscaped(EntranceData[entranceid][entrancePass]),
	EntranceData[entranceid][entranceIcon],
	EntranceData[entranceid][entranceLocked],
	EntranceData[entranceid][entrancePos][0],
	EntranceData[entranceid][entrancePos][1],
	EntranceData[entranceid][entrancePos][2],
	EntranceData[entranceid][entrancePos][3],
	EntranceData[entranceid][entranceInt][0],
	EntranceData[entranceid][entranceInt][1],
	EntranceData[entranceid][entranceInt][2],
	EntranceData[entranceid][entranceInt][3],
	EntranceData[entranceid][entranceInterior],
	EntranceData[entranceid][entranceExterior],
	EntranceData[entranceid][entranceExteriorVW],
	EntranceData[entranceid][entranceType]
	);
	format(query, sizeof(query), "%s, `entranceCustom` = '%d', `entranceWorld` = '%d', `entranceIconType` = '%d' WHERE `entranceID` = '%d'",
	query,
	EntranceData[entranceid][entranceCustom],
	EntranceData[entranceid][entranceWorld],
	EntranceData[entranceid][entranceIconType],
	EntranceData[entranceid][entranceID]
	);
	return mysql_function_query(g_iHandle, query, false, "", "");
}

IsPlayerNearArrest(playerid)
{
	new
	id = Arrest_Nearest(playerid);

	return (id != -1);
}

IsPlayerInCityHall(playerid)
{
	new
	id = -1;

	if ((id = Entrance_Inside(playerid)) != -1 && EntranceData[id][entranceType] == 4)
	return 1;

	return 0;
}

IsPlayerInWarehouse(playerid)
{
	#pragma unused playerid
	/*new
	id = -1;

	if ((id = Entrance_Inside(playerid)) != -1 && EntranceData[id][entranceType] == 3)
	return 1;

	return 0;*/
	return true;
}

IsPlayerInBank(playerid)
{
	if(IsPlayerConnected(playerid))
	{
		if(IsPlayerInRangeOfPoint(playerid, 4, 1429.1047, -986.1868, 996.1050)) //1723.00867, -1133.96729, 24.33024
		{
			return 1;
		}
	}
	return 0;
}
Casier_NearestPoint(playerid)
{
	if(IsPlayerConnected(playerid))
	{
		if(IsPlayerInRangeOfPoint(playerid, 2.0, 1435.49451, -965.26141, 984.18042) || IsPlayerInRangeOfPoint(playerid, 2.0, 1437.60864, -965.27802, 984.18042) || IsPlayerInRangeOfPoint(playerid, 2.0, 1433.40186, -965.25720, 984.18042))
		{
			return 1;
		}
	}
	return 0;
}

Entrance_Inside(playerid)
{
	if (PlayerData[playerid][pEntrance] != -1)
	{
		for (new i = 0; i != MAX_ENTRANCES; i ++) if (EntranceData[i][entranceExists] && EntranceData[i][entranceID] == PlayerData[playerid][pEntrance] && GetPlayerInterior(playerid) == EntranceData[i][entranceInterior] && GetPlayerVirtualWorld(playerid) == EntranceData[i][entranceWorld])
		return i;
	}
	return -1;
}

Entrance_GetLink(playerid)
{
	if (GetPlayerVirtualWorld(playerid) > 0)
	{
		for (new i = 0; i != MAX_ENTRANCES; i ++) if (EntranceData[i][entranceExists] && EntranceData[i][entranceID] == GetPlayerVirtualWorld(playerid) - 7000)
		return EntranceData[i][entranceID];
	}
	return -1;
}

Entrance_Nearest(playerid)
{
	for (new i = 0; i != MAX_ENTRANCES; i ++) if (EntranceData[i][entranceExists] && IsPlayerInRangeOfPoint(playerid, 2.5, EntranceData[i][entrancePos][0], EntranceData[i][entrancePos][1], EntranceData[i][entrancePos][2]))
	{
		if (GetPlayerInterior(playerid) == EntranceData[i][entranceExterior] && GetPlayerVirtualWorld(playerid) == EntranceData[i][entranceExteriorVW])
		return i;
	}
	return -1;
}

Entrance_NearestInside(playerid)
{
	for (new i = 0; i != MAX_ENTRANCES; i ++) if (EntranceData[i][entranceExists] && IsPlayerInRangeOfPoint(playerid, 2.5, EntranceData[i][entranceInt][0], EntranceData[i][entranceInt][1], EntranceData[i][entranceInt][2]))
	{
		if (GetPlayerInterior(playerid) == EntranceData[i][entranceInterior] && GetPlayerVirtualWorld(playerid) == EntranceData[i][entranceWorld])
		return i;
	}
	return -1;
}

Job_NearestPoint(playerid, Float:radius = 4.0)
{
	for (new i = 0; i != MAX_DYNAMIC_JOBS; i ++) if (JobData[i][jobExists] && IsPlayerInRangeOfPoint(playerid, radius, JobData[i][jobPoint][0], JobData[i][jobPoint][1], JobData[i][jobPoint][2])) {
		return i;
	}
	return -1;
}

Job_NearestDeliver(playerid, Float:radius = 4.0)
{
	for (new i = 0; i != MAX_DYNAMIC_JOBS; i ++) if (JobData[i][jobExists] && IsPlayerInRangeOfPoint(playerid, radius, JobData[i][jobDeliver][0], JobData[i][jobDeliver][1], JobData[i][jobDeliver][2])) {
		return i;
	}
	return -1;
}

Job_Nearest(playerid, Float:radius = 2.5)
{
	for (new i = 0; i != MAX_DYNAMIC_JOBS; i ++) if (JobData[i][jobExists] && IsPlayerInRangeOfPoint(playerid, radius, JobData[i][jobPos][0], JobData[i][jobPos][1], JobData[i][jobPos][2]))
	{
		if (GetPlayerInterior(playerid) == JobData[i][jobInterior] && GetPlayerVirtualWorld(playerid) == JobData[i][jobWorld])
		return i;
	}
	return -1;
}

Entrance_Refresh(entranceid)
{
	if (entranceid != -1 && EntranceData[entranceid][entranceExists])
	{
		if (IsValidDynamic3DTextLabel(EntranceData[entranceid][entranceText3D]))
		DestroyDynamic3DTextLabel(EntranceData[entranceid][entranceText3D]);

		if (IsValidDynamicPickup(EntranceData[entranceid][entrancePickup]))
		DestroyDynamicPickup(EntranceData[entranceid][entrancePickup]);

		if (IsValidDynamicMapIcon(EntranceData[entranceid][entranceMapIcon]))
		DestroyDynamicMapIcon(EntranceData[entranceid][entranceMapIcon]);

		EntranceData[entranceid][entranceText3D] = CreateDynamic3DTextLabel(EntranceData[entranceid][entranceName], COLOR_WHITE, EntranceData[entranceid][entrancePos][0], EntranceData[entranceid][entrancePos][1], EntranceData[entranceid][entrancePos][2], 15.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, EntranceData[entranceid][entranceExteriorVW], EntranceData[entranceid][entranceExterior]);
		EntranceData[entranceid][entrancePickup] = CreateDynamicPickup(EntranceData[entranceid][entranceIconType], 23, EntranceData[entranceid][entrancePos][0], EntranceData[entranceid][entrancePos][1], EntranceData[entranceid][entrancePos][2], EntranceData[entranceid][entranceExteriorVW], EntranceData[entranceid][entranceExterior]);

		if (EntranceData[entranceid][entranceIcon] != 0)
		EntranceData[entranceid][entranceMapIcon] = CreateDynamicMapIcon(EntranceData[entranceid][entrancePos][0], EntranceData[entranceid][entrancePos][1], EntranceData[entranceid][entrancePos][2], EntranceData[entranceid][entranceIcon], 0, EntranceData[entranceid][entranceExteriorVW], EntranceData[entranceid][entranceExterior]);
	}
	return 1;
}

DestroyForklifts(entranceid)
{
	if (entranceid != -1 && EntranceData[entranceid][entranceExists])
	{
		for (new i = 0; i < 7; i ++) if (IsValidVehicle(EntranceData[entranceid][entranceForklift][i])) {
			DestroyVehicle(EntranceData[entranceid][entranceForklift][i]);

			EntranceData[entranceid][entranceForklift][i] = INVALID_VEHICLE_ID;
		}
		return 1;
	}
	return 0;
}


CreateForklifts(entranceid)
{
	if (entranceid != -1 && EntranceData[entranceid][entranceExists])
	{
		EntranceData[entranceid][entranceForklift][0] = CreateVehicle(530,1300.6760,5.8440,1000.7919,180.2377,114,1,-1); // forklift 1
		EntranceData[entranceid][entranceForklift][1] = CreateVehicle(530,1303.4263,5.8919,1000.7883,181.4835,119,1,-1); // forklift 2
		EntranceData[entranceid][entranceForklift][2] = CreateVehicle(530,1305.7365,5.7953,1000.7904,179.7971,122,1,-1); // forklift 3
		EntranceData[entranceid][entranceForklift][3] = CreateVehicle(530,1308.2925,-8.6468,1000.7963,89.4510,4,1,-1); // forklift 4
		EntranceData[entranceid][entranceForklift][4] = CreateVehicle(530,1308.2974,-10.9627,1000.7974,91.8611,13,1,-1); // forklift 5
		EntranceData[entranceid][entranceForklift][5] = CreateVehicle(530,1308.3057,-13.6396,1000.7997,90.6285,110,1,-1); // forklift 6
		EntranceData[entranceid][entranceForklift][6] = CreateVehicle(530,1308.2751,-16.5108,1000.7980,90.2175,111,1,-1); // forklift 7

		for (new i = 0; i < 7; i ++) if (IsValidVehicle(EntranceData[entranceid][entranceForklift][i])) {
			SetVehicleVirtualWorld(EntranceData[entranceid][entranceForklift][i], EntranceData[entranceid][entranceWorld]);
			LinkVehicleToInterior(EntranceData[entranceid][entranceForklift][i], 18);

			CoreVehicles[EntranceData[entranceid][entranceForklift][i]][vehFuel] = 100;
			CoreVehicles[EntranceData[entranceid][entranceForklift][i]][vehLoadType] = 0;
		}
	}
	return 1;
}

Entrance_Create(playerid, name[])
{
	static
	Float:x,
	Float:y,
	Float:z,
	Float:angle;

	if (GetPlayerPos(playerid, x, y, z) && GetPlayerFacingAngle(playerid, angle))
	{
		for (new i = 0; i != MAX_HOUSES; i ++)
		{
			if (!EntranceData[i][entranceExists])
			{
				EntranceData[i][entranceExists] = true;
				EntranceData[i][entranceIcon] = 0;
				EntranceData[i][entranceType] = 0;
				EntranceData[i][entranceCustom] = 0;
				EntranceData[i][entranceLocked] = 0;

				format(EntranceData[i][entranceName], 32, name);
				strins(EntranceData[i][entrancePass], "", 0);

				EntranceData[i][entrancePos][0] = x;
				EntranceData[i][entrancePos][1] = y;
				EntranceData[i][entrancePos][2] = z;
				EntranceData[i][entrancePos][3] = angle;

				EntranceData[i][entranceInt][0] = x;
				EntranceData[i][entranceInt][1] = y;
				EntranceData[i][entranceInt][2] = z + 10000;
				EntranceData[i][entranceInt][3] = 0.0000;

				EntranceData[i][entranceIconType] = 1318;
				EntranceData[i][entranceInterior] = 0;
				EntranceData[i][entranceExterior] = GetPlayerInterior(playerid);
				EntranceData[i][entranceExteriorVW] = GetPlayerVirtualWorld(playerid);

				Entrance_Refresh(i);
				mysql_function_query(g_iHandle, "INSERT INTO `entrances` (`entranceType`) VALUES(0)", false, "OnEntranceCreated", "d", i);
				return i;
			}
		}
	}
	return -1;
}

Business_RemoveVehicle(bizid, modelid)
{
	static
	query[128];

	for (new i = 0; i != MAX_DEALERSHIP_CARS; i ++) if (DealershipCars[bizid][i][vehModel] == modelid)
	{
		DealershipCars[bizid][i][vehModel] = 0;
		DealershipCars[bizid][i][vehPrice] = 0;

		format(query, sizeof(query), "DELETE FROM `dealervehicles` WHERE `ID` = '%d' AND `vehID` = '%d'", BusinessData[bizid][bizID], DealershipCars[bizid][i][vehID]);
		mysql_function_query(g_iHandle, query, false, "", "");

		return 1;
	}
	return 0;
}

Business_AddVehicle(bizid, modelid, price)
{
	static
	query[128];

	for (new i = 0; i != MAX_DEALERSHIP_CARS; i ++) if (!DealershipCars[bizid][i][vehModel])
	{
		DealershipCars[bizid][i][vehModel] = modelid;
		DealershipCars[bizid][i][vehPrice] = price;

		format(query, sizeof(query), "INSERT INTO `dealervehicles` (`ID`, `vehModel`, `vehPrice`) VALUES('%d', '%d', '%d')", BusinessData[bizid][bizID], modelid, price);
		mysql_function_query(g_iHandle, query, false, "OnDealerCarCreated", "dd", bizid, i);

		return 1;
	}
	return 0;
}
Business_CarMenu(playerid, bizid)
{
	static
	cars[MAX_DEALERSHIP_CARS];

	for (new i = 0; i != MAX_DEALERSHIP_CARS; i ++)
	{
		if (!DealershipCars[bizid][i][vehModel])
		cars[i] = 19300;

		else
			cars[i] = DealershipCars[bizid][i][vehModel];
	}
	ShowModelSelectionMenu(playerid, "Achat de vehicule", MODEL_SELECTION_BUY_CAR, cars, sizeof(cars), -16.0, 0.0, -55.0, 0.9, 1);
	return 1;
}

Business_EditCars(playerid, bizid)
{
	static
	cars[MAX_DEALERSHIP_CARS];

	for (new i = 0; i != MAX_DEALERSHIP_CARS; i ++)
	{
		if (!DealershipCars[bizid][i][vehModel])
		cars[i] = 19300;

		else
			cars[i] = DealershipCars[bizid][i][vehModel];
	}
	ShowModelSelectionMenu(playerid, "Concession", MODEL_SELECTION_DEALER, cars, sizeof(cars), -16.0, 0.0, -55.0, 0.9, 1);
	return 1;
}

forward Pump_Load(bizid);
public Pump_Load(bizid)
{
	static
	rows,
	fields,
	id = -1;

	cache_get_data(rows, fields, g_iHandle);

	for (new i = 0; i < rows; i ++) if ((id = Pump_GetFreeID()) != -1)
	{
		PumpData[id][pumpExists] = true;
		PumpData[id][pumpBusiness] = bizid;
		PumpData[id][pumpID] = cache_get_field_int(i, "pumpID");
		PumpData[id][pumpPos][0] = cache_get_field_float(i, "pumpPosX");
		PumpData[id][pumpPos][1] = cache_get_field_float(i, "pumpPosY");
		PumpData[id][pumpPos][2] = cache_get_field_float(i, "pumpPosZ");
		PumpData[id][pumpPos][3] = cache_get_field_float(i, "pumpPosA");
		PumpData[id][pumpFuel] = cache_get_field_int(i, "pumpFuel");

		PumpData[id][pumpObject] = CreateDynamicObject(1676, PumpData[id][pumpPos][0], PumpData[id][pumpPos][1], PumpData[id][pumpPos][2], 0.0, 0.0, PumpData[id][pumpPos][3]);
		Pump_Refresh(id);
	}
	return 1;
}

Pump_GetFreeID()
{
	for (new i = 0; i < MAX_GAS_PUMPS; i ++) if (!PumpData[i][pumpExists]) {
		return i;
	}
	return -1;
}

Pump_Delete(pumpid)
{
	if (pumpid != -1 && PumpData[pumpid][pumpExists])
	{
		new
		string[90];

		format(string, sizeof(string), "DELETE FROM `pumps` WHERE `ID` = '%d' AND `pumpID` = '%d'", BusinessData[PumpData[pumpid][pumpBusiness]][bizID], PumpData[pumpid][pumpID]);
		mysql_function_query(g_iHandle, string, false, "", "");

		if (IsValidDynamic3DTextLabel(PumpData[pumpid][pumpText3D]))
		DestroyDynamic3DTextLabel(PumpData[pumpid][pumpText3D]);

		if (IsValidDynamicObject(PumpData[pumpid][pumpObject]))
		DestroyDynamicObject(PumpData[pumpid][pumpObject]);

		foreach (new i : Player) if (PlayerData[i][pGasPump] == pumpid) {
			StopRefilling(i);
		}
		PumpData[pumpid][pumpExists] = false;
		PumpData[pumpid][pumpFuel] = 0;
	}
	return 1;
}

Pump_Create(playerid, bizid)
{
	new
	Float:x,
	Float:y,
	Float:z,
	Float:angle,
	string[64],
	id = -1;

	if (GetPlayerPos(playerid, x, y, z) && GetPlayerFacingAngle(playerid, angle))
	{
		if ((id = Pump_GetFreeID()) != -1)
		{
			x += 5.0 * floatsin(-angle, degrees);
			y += 5.0 * floatcos(-angle, degrees);

			PumpData[id][pumpExists] = true;
			PumpData[id][pumpBusiness] = bizid;
			PumpData[id][pumpPos][0] = x;
			PumpData[id][pumpPos][1] = y;
			PumpData[id][pumpPos][2] = z;
			PumpData[id][pumpPos][3] = angle;
			PumpData[id][pumpFuel] = 2000;
			PumpData[id][pumpObject] = CreateDynamicObject(1676, x, y, z, 0.0, 0.0, angle);

			format(string, sizeof(string), "INSERT INTO `pumps` (`ID`) VALUES(%d)", BusinessData[bizid][bizID]);
			mysql_function_query(g_iHandle, string, false, "OnPumpCreated", "d", id);
			return id;
		}
	}
	return -1;
}

Pump_Refresh(pumpid)
{
	if (pumpid != -1 && PumpData[pumpid][pumpExists])
	{
		static
		string[128];

		format(string, sizeof(string), "{FFFFFF}Carburant: %d litres", PumpData[pumpid][pumpFuel]);

		if (IsValidDynamic3DTextLabel(PumpData[pumpid][pumpText3D]))
		DestroyDynamic3DTextLabel(PumpData[pumpid][pumpText3D]);

		if (IsValidDynamicObject(PumpData[pumpid][pumpObject]))
		DestroyDynamicObject(PumpData[pumpid][pumpObject]);

		PumpData[pumpid][pumpText3D] = CreateDynamic3DTextLabel(string, COLOR_DEFAULT, PumpData[pumpid][pumpPos][0], PumpData[pumpid][pumpPos][1], PumpData[pumpid][pumpPos][2], 15.0);
		PumpData[pumpid][pumpObject] = CreateDynamicObject(1676, PumpData[pumpid][pumpPos][0], PumpData[pumpid][pumpPos][1], PumpData[pumpid][pumpPos][2], 0.0, 0.0, PumpData[pumpid][pumpPos][3]);
	}
	return 1;
}

Pump_Save(pumpid)
{
	static
	query[256];

	format(query, sizeof(query), "UPDATE `pumps` SET `pumpPosX` = '%.4f', `pumpPosY` = '%.4f', `pumpPosZ` = '%.4f', `pumpPosA` = '%.4f', `pumpFuel` = '%d' WHERE `ID` = '%d' AND `pumpID` = '%d'",
	PumpData[pumpid][pumpPos][0],
	PumpData[pumpid][pumpPos][1],
	PumpData[pumpid][pumpPos][2],
	PumpData[pumpid][pumpPos][3],
	PumpData[pumpid][pumpFuel],
	BusinessData[PumpData[pumpid][pumpBusiness]][bizID],
	PumpData[pumpid][pumpID]
	);
	return mysql_function_query(g_iHandle, query, false, "", "");
}

House_Create(playerid, address[], price, location = 50)
{
	new
	Float:x,
	Float:y,
	Float:z,
	Float:angle;

	if (GetPlayerPos(playerid, x, y, z) && GetPlayerFacingAngle(playerid, angle))
	{
		for (new i = 0; i != MAX_HOUSES; i ++)
		{
			if (!HouseData[i][houseExists])
			{
				HouseData[i][houseExists] = 1;
				HouseData[i][houseOwner] = 0;
				HouseData[i][housePrice] = price;
				HouseData[i][houseMoney] = 0;
				HouseData[i][houseLocPrice] = location;
				HouseData[i][houseLocNb] = 0;
				HouseData[i][houseLocStatus] = 1;

				format(HouseData[i][houseAddress], 32, address);

				HouseData[i][housePos][0] = x;
				HouseData[i][housePos][1] = y;
				HouseData[i][housePos][2] = z;
				HouseData[i][housePos][3] = angle;

				HouseData[i][houseInt][0] = 2269.8772;
				HouseData[i][houseInt][1] = -1210.3240;
				HouseData[i][houseInt][2] = 1047.5625;
				HouseData[i][houseInt][3] = 90.0000;

				HouseData[i][houseInterior] = 10;
				HouseData[i][houseExterior] = GetPlayerInterior(playerid);
				HouseData[i][houseExteriorVW] = GetPlayerVirtualWorld(playerid);

				HouseData[i][houseLights] = false;
				HouseData[i][houseLocked] = false;
				
				HouseData[i][houseFaction] = -1;

				House_Refresh(i);
				mysql_function_query(g_iHandle, "INSERT INTO `houses` (`houseOwner`) VALUES(0)", false, "OnHouseCreated", "d", i);
				House_Save(i);
				return i;
			}
		}
	}
	return -1;
}

House_RemoveFurniture(houseid)
{
	if (HouseData[houseid][houseExists])
	{
		static
		string[64];

		for (new i = 0; i != MAX_FURNITURE; i ++) if (FurnitureData[i][furnitureExists] && FurnitureData[i][furnitureHouse] == houseid) {
			FurnitureData[i][furnitureExists] = false;
			FurnitureData[i][furnitureModel] = 0;
			FurnitureData[i][furnitureHouse] = -1;

			DestroyDynamicObject(FurnitureData[i][furnitureObject]);
		}
		format(string, sizeof(string), "DELETE FROM `furniture` WHERE `ID` = '%d'", HouseData[houseid][houseID]);
		mysql_function_query(g_iHandle, string, false, "", "");
	}
	return 1;
}

House_Delete(houseid)
{
	if (houseid != -1 && HouseData[houseid][houseExists])
	{
		new
		string[64];

		format(string, sizeof(string), "DELETE FROM `houses` WHERE `houseID` = '%d'", HouseData[houseid][houseID]);
		mysql_function_query(g_iHandle, string, false, "", "");

		if (IsValidDynamic3DTextLabel(HouseData[houseid][houseText3D]))
		DestroyDynamic3DTextLabel(HouseData[houseid][houseText3D]);

		if (IsValidDynamicPickup(HouseData[houseid][housePickup]))
		DestroyDynamicPickup(HouseData[houseid][housePickup]);

		//if (IsValidDynamicMapIcon(HouseData[houseid][houseMapIcon]))
		//DestroyDynamicMapIcon(HouseData[houseid][houseMapIcon]);

		for (new i = 0; i < MAX_BACKPACKS; i ++) if (BackpackData[i][backpackExists] && BackpackData[i][backpackHouse] == HouseData[houseid][houseID]) {
			Backpack_Delete(i);
		}
		House_RemoveFurniture(houseid);
		House_RemoveAllItems(houseid);

		HouseData[houseid][houseExists] = false;
		HouseData[houseid][houseOwner] = 0;
		HouseData[houseid][houseID] = 0;
		HouseData[houseid][houseFaction] = -1;
	}
	return 1;
}

House_IsOwner(playerid, houseid)
{
	if (!PlayerData[playerid][pLogged] || PlayerData[playerid][pID] == -1)
	return 0;

	if ((HouseData[houseid][houseExists] && HouseData[houseid][houseOwner] != 0) && HouseData[houseid][houseOwner] == PlayerData[playerid][pID])
	return 1;

	return 0;
}

Business_ProductMenu(playerid, bizid)
{
	if (bizid == -1 || !BusinessData[bizid][bizExists])
	return 0;

	static
	string[512];

	switch (BusinessData[bizid][bizType])
	{
		case 1, 6:
		{
			format(string, sizeof(string), "{7EA0DA}Téléphone mobile:{FFFFFF} %s\n{7EA0DA}GPS:{FFFFFF} %s\n{7EA0DA}Spray Can:{FFFFFF} %s\n{7EA0DA}Sac à dos:{FFFFFF} %s\n{7EA0DA}Lotterie:{FFFFFF} %s\n{7EA0DA}Radio:{FFFFFF} %s\n{7EA0DA}Jerrican:{FFFFFF} %s\n{7EA0DA}Boombox:{FFFFFF} %s\n{7EA0DA}Kit réparation:{FFFFFF} %s\n{7EA0DA}Baseball Bat:{FFFFFF} %s\n{7EA0DA}Pied de biche:{FFFFFF} %s\n{7EA0DA}Briquet:{FFFFFF} %s\n{7EA0DA}Annuaire:{FFFFFF} %s",
			FormatNumber(BusinessData[bizid][bizPrices][0]),
			FormatNumber(BusinessData[bizid][bizPrices][1]),
			FormatNumber(BusinessData[bizid][bizPrices][2]),
			FormatNumber(BusinessData[bizid][bizPrices][3]),
			FormatNumber(BusinessData[bizid][bizPrices][4]),
			FormatNumber(BusinessData[bizid][bizPrices][5]),
			FormatNumber(BusinessData[bizid][bizPrices][6]),
			FormatNumber(BusinessData[bizid][bizPrices][7]),
			FormatNumber(BusinessData[bizid][bizPrices][8]),
			FormatNumber(BusinessData[bizid][bizPrices][9]),
			FormatNumber(BusinessData[bizid][bizPrices][10]),
			FormatNumber(BusinessData[bizid][bizPrices][11]),
			FormatNumber(BusinessData[bizid][bizPrices][13]),
			FormatNumber(BusinessData[bizid][bizPrices][14]),
			FormatNumber(BusinessData[bizid][bizPrices][15]),
			FormatNumber(BusinessData[bizid][bizPrices][16]),
			FormatNumber(BusinessData[bizid][bizPrices][17])
			);
			Dialog_Show(playerid, EditProduct, DIALOG_STYLE_LIST, "Business: Modifier l'article", string, "Modifier", "X");
		}
		case 2:
		{
			format(string, sizeof(string), "{7EA0DA}Munitions:{FFFFFF} %s\n{7EA0DA}Gilet pare balles:{FFFFFF} %s\n{7EA0DA}Desert Eagle:{FFFFFF} %s\n{7EA0DA}Remington 870:{FFFFFF} %s\n{7EA0DA}M14 Rifle:{FFFFFF} %s",
			FormatNumber(BusinessData[bizid][bizPrices][0]),
			FormatNumber(BusinessData[bizid][bizPrices][1]),
			FormatNumber(BusinessData[bizid][bizPrices][2]),
			FormatNumber(BusinessData[bizid][bizPrices][3]),
			FormatNumber(BusinessData[bizid][bizPrices][4])
			);
			Dialog_Show(playerid, EditProduct, DIALOG_STYLE_LIST, "Business: Modifier l'article", string, "Modifier", "X");
		}
		case 3:
		{
			format(string, sizeof(string), "{7EA0DA}Vetements:{FFFFFF} %s\n{7EA0DA}Lunettes:{FFFFFF} %s\n{7EA0DA}Chapeaux:{FFFFFF} %s\n{7EA0DA}Bandana:{FFFFFF} %s",
			FormatNumber(BusinessData[bizid][bizPrices][0]),
			FormatNumber(BusinessData[bizid][bizPrices][1]),
			FormatNumber(BusinessData[bizid][bizPrices][2]),
			FormatNumber(BusinessData[bizid][bizPrices][3])
			);
			Dialog_Show(playerid, EditProduct, DIALOG_STYLE_LIST, "Business: Modifier l'article", string, "Modifier", "X");
		}
		case 4:
		{
			format(string, sizeof(string), "{7EA0DA}Eau:{FFFFFF} %s\n{7EA0DA}Soda:{FFFFFF} %s\n{7EA0DA}Frites:{FFFFFF} %s\n{7EA0DA}Cheeseburger:{FFFFFF} %s\n{7EA0DA}Chicken Burger:{FFFFFF} %s\n{7EA0DA}Chicken Nuggets:{FFFFFF} %s\n{7EA0DA}Salades:{FFFFFF} %s",
			FormatNumber(BusinessData[bizid][bizPrices][0]),
			FormatNumber(BusinessData[bizid][bizPrices][1]),
			FormatNumber(BusinessData[bizid][bizPrices][2]),
			FormatNumber(BusinessData[bizid][bizPrices][3]),
			FormatNumber(BusinessData[bizid][bizPrices][4]),
			FormatNumber(BusinessData[bizid][bizPrices][5]),
			FormatNumber(BusinessData[bizid][bizPrices][6])
			);
			Dialog_Show(playerid, EditProduct, DIALOG_STYLE_LIST, "Business: Modifier l'article", string, "Modifier", "X");
		}
		case 7:
		{
			string[0] = 0;

			for (new i = 0; i < sizeof(g_aFurnitureTypes); i ++) {
				format(string, sizeof(string), "%s%s - %s\n", string, g_aFurnitureTypes[i], FormatNumber(BusinessData[bizid][bizPrices][i]));
			}
			Dialog_Show(playerid, EditProduct, DIALOG_STYLE_LIST, "Business: Modifier l'article", string, "Modifier", "X");
		}
	}
	return 1;
}

Business_PurchaseMenu(playerid, bizid)
{
	if (bizid == -1 || !BusinessData[bizid][bizExists])
	return 0;

	static
	string[512];

	switch (BusinessData[bizid][bizType])
	{
		case 1, 6:
		{	//\nMasque\t%s
			format(string, sizeof(string), "Produit\tPrix\nTéléphone mobile\t{7EA0DA}%s{FFFFFF}\nGPS\t{7EA0DA}%s{FFFFFF}\nSpray Can\t{7EA0DA}%s{FFFFFF}\nSac à dos\t{7EA0DA}%s{FFFFFF}\nLotterie\t{7EA0DA}%s{FFFFFF}\nRadio\t{7EA0DA}%s{FFFFFF}\nJerrican\t{7EA0DA}%s{FFFFFF}\nBoombox\t{7EA0DA}%s{FFFFFF}\nKit réparation\t{7EA0DA}%s{FFFFFF}\nBaseball Bat\t{7EA0DA}%s{FFFFFF}\nPied de biche\t{7EA0DA}%s{FFFFFF}\nBriquet\t{7EA0DA}%s{FFFFFF}\nAnnuaire\t{7EA0DA}%s{FFFFFF}",
			FormatNumber(BusinessData[bizid][bizPrices][0]),
			FormatNumber(BusinessData[bizid][bizPrices][1]),
			FormatNumber(BusinessData[bizid][bizPrices][2]),
			FormatNumber(BusinessData[bizid][bizPrices][3]),
			FormatNumber(BusinessData[bizid][bizPrices][4]),
			FormatNumber(BusinessData[bizid][bizPrices][5]),
			FormatNumber(BusinessData[bizid][bizPrices][6]),
			FormatNumber(BusinessData[bizid][bizPrices][7]),
			FormatNumber(BusinessData[bizid][bizPrices][8]),
			FormatNumber(BusinessData[bizid][bizPrices][9]),
			FormatNumber(BusinessData[bizid][bizPrices][10]),
			FormatNumber(BusinessData[bizid][bizPrices][11]),
			//FormatNumber(BusinessData[bizid][bizPrices][12]),
			FormatNumber(BusinessData[bizid][bizPrices][13]),
			FormatNumber(BusinessData[bizid][bizPrices][14]),
			FormatNumber(BusinessData[bizid][bizPrices][15]),
			FormatNumber(BusinessData[bizid][bizPrices][16]),
			FormatNumber(BusinessData[bizid][bizPrices][17])
			);
			Dialog_Show(playerid, BusinessBuy, DIALOG_STYLE_TABLIST_HEADERS, BusinessData[bizid][bizName], string, "Acheter", "X");
		}
		case 2:
		{
			format(string, sizeof(string), "Produit\tPrix\nMunitions\t{7EA0DA}%s{FFFFFF}\nGilet pare balles\t{7EA0DA}%s{FFFFFF}\nDesert Eagle\t{7EA0DA}%s{FFFFFF}\nRemington 870\t{7EA0DA}%s{FFFFFF}\nM14 Rifle\t{7EA0DA}%s{FFFFFF}",
			FormatNumber(BusinessData[bizid][bizPrices][0]),
			FormatNumber(BusinessData[bizid][bizPrices][1]),
			FormatNumber(BusinessData[bizid][bizPrices][2]),
			FormatNumber(BusinessData[bizid][bizPrices][3]),
			FormatNumber(BusinessData[bizid][bizPrices][4])
			);
			Dialog_Show(playerid, BusinessBuy, DIALOG_STYLE_TABLIST_HEADERS, BusinessData[bizid][bizName], string, "Acheter", "X");
		}
		case 3:
		{
			format(string, sizeof(string), "Produit\tPrix\nVêtements\t{7EA0DA}%s{FFFFFF}\nLunettes\t{7EA0DA}%s{FFFFFF}\nChapeaux\t{7EA0DA}%s{FFFFFF}\nBandana\t{7EA0DA}%s",
			FormatNumber(BusinessData[bizid][bizPrices][0]),
			FormatNumber(BusinessData[bizid][bizPrices][1]),
			FormatNumber(BusinessData[bizid][bizPrices][2]),
			FormatNumber(BusinessData[bizid][bizPrices][3])
			);
			Dialog_Show(playerid, BusinessBuy, DIALOG_STYLE_TABLIST_HEADERS, BusinessData[bizid][bizName], string, "Acheter", "X");
		}
		case 4:
		{
			format(string, sizeof(string), "Produit\tPrix\nEau\t{7EA0DA}%s{FFFFFF}\nSoda\t{7EA0DA}%s{FFFFFF}\nFrites\t{7EA0DA}%s{FFFFFF}\nCheeseburger\t{7EA0DA}%s{FFFFFF}\nChicken Burger\t{7EA0DA}%s{FFFFFF}\nChicken Nuggets\t{7EA0DA}%s{FFFFFF}\nSalades\t{7EA0DA}%s",
			FormatNumber(BusinessData[bizid][bizPrices][0]),
			FormatNumber(BusinessData[bizid][bizPrices][1]),
			FormatNumber(BusinessData[bizid][bizPrices][2]),
			FormatNumber(BusinessData[bizid][bizPrices][3]),
			FormatNumber(BusinessData[bizid][bizPrices][4]),
			FormatNumber(BusinessData[bizid][bizPrices][5]),
			FormatNumber(BusinessData[bizid][bizPrices][6])
			);
			Dialog_Show(playerid, BusinessBuy, DIALOG_STYLE_TABLIST_HEADERS, BusinessData[bizid][bizName], string, "Acheter", "X");
		}
	}
	return 1;
}

Business_Save(bizid)
{
	new
	query[2048];

	format(query, sizeof(query), "UPDATE `businesses` SET `bizName` = '%s', `bizMessage` = '%s', `bizOwner` = '%d', `bizType` = '%d', `bizPrice` = '%d', `bizPosX` = '%.4f', `bizPosY` = '%.4f', `bizPosZ` = '%.4f', `bizPosA` = '%.4f', `bizIntX` = '%.4f', `bizIntY` = '%.4f', `bizIntZ` = '%.4f', `bizIntA` = '%.4f', `bizInterior` = '%d', `bizCustom` = '%d', `bizExterior` = '%d', `bizExteriorVW` = '%d', `bizLocked` = '%d', `bizVault` = '%d', `bizProducts` = '%d'",
	SQL_ReturnEscaped(BusinessData[bizid][bizName]),
	SQL_ReturnEscaped(BusinessData[bizid][bizMessage]),
	BusinessData[bizid][bizOwner],
	BusinessData[bizid][bizType],
	BusinessData[bizid][bizPrice],
	BusinessData[bizid][bizPos][0],
	BusinessData[bizid][bizPos][1],
	BusinessData[bizid][bizPos][2],
	BusinessData[bizid][bizPos][3],
	BusinessData[bizid][bizInt][0],
	BusinessData[bizid][bizInt][1],
	BusinessData[bizid][bizInt][2],
	BusinessData[bizid][bizInt][3],
	BusinessData[bizid][bizInterior],
	BusinessData[bizid][bizCustom],
	BusinessData[bizid][bizExterior],
	BusinessData[bizid][bizExteriorVW],
	BusinessData[bizid][bizLocked],
	BusinessData[bizid][bizVault],
	BusinessData[bizid][bizProducts]
	);
	for (new i = 0; i < 20; i ++) {
		format(query, sizeof(query), "%s, `bizPrice%d` = '%d'", query, i + 1, BusinessData[bizid][bizPrices][i]);
	}
	format(query, sizeof(query), "%s, `bizSpawnX` = '%.4f', `bizSpawnY` = '%.4f', `bizSpawnZ` = '%.4f', `bizSpawnA` = '%.4f', `bizDeliverX` = '%.4f', `bizDeliverY` = '%.4f', `bizDeliverZ` = '%.4f', `bizShipment` = '%d' WHERE `bizID` = '%d'",
	query,
	BusinessData[bizid][bizSpawn][0],
	BusinessData[bizid][bizSpawn][1],
	BusinessData[bizid][bizSpawn][2],
	BusinessData[bizid][bizSpawn][3],
	BusinessData[bizid][bizDeliver][0],
	BusinessData[bizid][bizDeliver][1],
	BusinessData[bizid][bizDeliver][2],
	BusinessData[bizid][bizShipment],
	BusinessData[bizid][bizID]
	);
	return mysql_function_query(g_iHandle, query, false, "", "");
}

Business_Inside(playerid)
{
	if (PlayerData[playerid][pBusiness] != -1)
	{
		for (new i = 0; i != MAX_BUSINESSES; i ++) if (BusinessData[i][bizExists] && BusinessData[i][bizID] == PlayerData[playerid][pBusiness] && GetPlayerInterior(playerid) == BusinessData[i][bizInterior] && GetPlayerVirtualWorld(playerid) > 0) {
			return i;
		}
	}
	return -1;
}

Car_Inside(playerid)
{
	new carid;

	if (IsPlayerInAnyVehicle(playerid) && (carid = Car_GetID(GetPlayerVehicleID(playerid))) != -1)
	return carid;

	return -1;
}

Car_Nearest(playerid, Float:range = 3.8)
{
	static
	Float:fX,
	Float:fY,
	Float:fZ;

	for (new i = 0; i != MAX_DYNAMIC_CARS; i ++) if (CarData[i][carExists]) {
		GetVehiclePos(CarData[i][carVehicle], fX, fY, fZ);

		if (IsPlayerInRangeOfPoint(playerid, range, fX, fY, fZ)) {
			return i;

		}
	}
	return -1;
}
/*Furni_Nearest(playerid)
{
	for (new i = 0; i != MAX_FURNITURE; i ++) 	if (FurnitureData[i][furnitureExists] && IsPlayerInRangeOfPoint(playerid, 1.5, FurnitureData[i][furniturePos][0],FurnitureData[i][furniturePos][1],FurnitureData[i][furniturePos][2])) {
		return i;
	}
	return -1;
}*/

Business_NearestDeliver(playerid)
{
	for (new i = 0; i != MAX_BUSINESSES; i ++) if (BusinessData[i][bizExists] && IsPlayerInRangeOfPoint(playerid, 5.0, BusinessData[i][bizDeliver][0], BusinessData[i][bizDeliver][1], BusinessData[i][bizDeliver][2])) {
		return i;
	}
	return -1;
}

Business_Nearest(playerid, Float:radius = 2.5)
{
	for (new i = 0; i != MAX_BUSINESSES; i ++) if (BusinessData[i][bizExists] && IsPlayerInRangeOfPoint(playerid, radius, BusinessData[i][bizPos][0], BusinessData[i][bizPos][1], BusinessData[i][bizPos][2]))
	{
		if (GetPlayerInterior(playerid) == BusinessData[i][bizExterior] && GetPlayerVirtualWorld(playerid) == BusinessData[i][bizExteriorVW])
		return i;
	}
	return -1;
}

Business_Refresh(bizid)
{
	if (bizid != -1 && BusinessData[bizid][bizExists])
	{
		if (IsValidDynamic3DTextLabel(BusinessData[bizid][bizText3D]))
		DestroyDynamic3DTextLabel(BusinessData[bizid][bizText3D]);

		if (IsValidDynamic3DTextLabel(BusinessData[bizid][bizDeliverText3D]))
		DestroyDynamic3DTextLabel(BusinessData[bizid][bizDeliverText3D]);

		if (IsValidDynamicPickup(BusinessData[bizid][bizPickup]))
		DestroyDynamicPickup(BusinessData[bizid][bizPickup]);

		if (IsValidDynamicPickup(BusinessData[bizid][bizDeliverPickup]))
		DestroyDynamicPickup(BusinessData[bizid][bizDeliverPickup]);

		static
		string[512],
		pickup;

	 	if (!BusinessData[bizid][bizOwner]) {
			format(string, sizeof(string), "{FFFFFF}%s", BusinessData[bizid][bizName]);
			BusinessData[bizid][bizText3D] = CreateDynamic3DTextLabel(string, 0x33AA33FF, BusinessData[bizid][bizPos][0], BusinessData[bizid][bizPos][1], BusinessData[bizid][bizPos][2], 5.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, BusinessData[bizid][bizExteriorVW], BusinessData[bizid][bizExterior]);
		}
		else
		{
			if (BusinessData[bizid][bizLocked]) {
				format(string, sizeof(string), "(FERMER) {FFFFFF}%s", BusinessData[bizid][bizName]);
			}
			else {
				format(string, sizeof(string), "{FFFFFF}%s", BusinessData[bizid][bizName]);
			}
			BusinessData[bizid][bizText3D] = CreateDynamic3DTextLabel(string, (BusinessData[bizid][bizLocked]) ? (COLOR_LIGHTRED) : (COLOR_WHITE), BusinessData[bizid][bizPos][0], BusinessData[bizid][bizPos][1], BusinessData[bizid][bizPos][2], 5.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, BusinessData[bizid][bizExteriorVW], BusinessData[bizid][bizExterior]);
		}
		switch (BusinessData[bizid][bizType]) {
			case 1: pickup = 1318;
			case 2: pickup = 1318;
			case 3: pickup = 1318;
			case 4: pickup = 1318;
			case 5: pickup = 1318;
			case 6: pickup = 1318;
			case 8: pickup = 1318;
		}
		if (BusinessData[bizid][bizType] == 6) {
			BusinessData[bizid][bizPickup] = CreateDynamicPickup(pickup, 23, BusinessData[bizid][bizPos][0], BusinessData[bizid][bizPos][1], BusinessData[bizid][bizPos][2] + 0.3, BusinessData[bizid][bizExteriorVW], BusinessData[bizid][bizExterior]);
		}
		else {
			BusinessData[bizid][bizPickup] = CreateDynamicPickup(pickup, 23, BusinessData[bizid][bizPos][0], BusinessData[bizid][bizPos][1], BusinessData[bizid][bizPos][2], BusinessData[bizid][bizExteriorVW], BusinessData[bizid][bizExterior]);
		}
		if (BusinessData[bizid][bizDeliver][0] != 0.0 && BusinessData[bizid][bizDeliver][0] != 0.0 && BusinessData[bizid][bizDeliver][0] != 0.0)
		{
			format(string, sizeof(string), "%s\n\nPoint de livraison", BusinessData[bizid][bizName]);

			BusinessData[bizid][bizDeliverPickup] = CreateDynamicPickup(19133, 23, BusinessData[bizid][bizDeliver][0], BusinessData[bizid][bizDeliver][1], BusinessData[bizid][bizDeliver][2]);
			BusinessData[bizid][bizDeliverText3D] = CreateDynamic3DTextLabel(string, COLOR_CLIENT, BusinessData[bizid][bizDeliver][0], BusinessData[bizid][bizDeliver][1], BusinessData[bizid][bizDeliver][2], 5.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0);
		}
	}
	return 1;
}

Business_Create(playerid, type, price)
{
	static
	Float:x,
	Float:y,
	Float:z,
	Float:angle;

	if (GetPlayerPos(playerid, x, y, z) && GetPlayerFacingAngle(playerid, angle))
	{
		for (new i = 0; i != MAX_BUSINESSES; i ++)
		{
			if (!BusinessData[i][bizExists])
			{
				BusinessData[i][bizExists] = true;
				BusinessData[i][bizOwner] = 0;
				BusinessData[i][bizCustom] = 0;
				BusinessData[i][bizPrice] = price;
				BusinessData[i][bizType] = type;

				format(BusinessData[i][bizName], 32, "Business sans nom");

				BusinessData[i][bizPos][0] = x;
				BusinessData[i][bizPos][1] = y;
				BusinessData[i][bizPos][2] = z;
				BusinessData[i][bizPos][3] = angle;

				BusinessData[i][bizSpawn][0] = x;
				BusinessData[i][bizSpawn][1] = y;
				BusinessData[i][bizSpawn][2] = z;
				BusinessData[i][bizSpawn][3] = angle;

				BusinessData[i][bizDeliver][0] = 0.0;
				BusinessData[i][bizDeliver][1] = 0.0;
				BusinessData[i][bizDeliver][2] = 0.0;

				if (type == 1) {
					BusinessData[i][bizInt][0] = -27.3074;
					BusinessData[i][bizInt][1] = -30.8741;
					BusinessData[i][bizInt][2] = 1003.5573;
					BusinessData[i][bizInt][3] = 0.0000;
					BusinessData[i][bizInterior] = 4;
					BusinessData[i][bizPrices][0] = 75;
					BusinessData[i][bizPrices][1] = 125;
					BusinessData[i][bizPrices][2] = 15;
					BusinessData[i][bizPrices][3] = 100;
					BusinessData[i][bizPrices][4] = 3;
					BusinessData[i][bizPrices][5] = 2;
					BusinessData[i][bizPrices][6] = 10;
					BusinessData[i][bizPrices][7] = 100;
					BusinessData[i][bizPrices][8] = 20;
					BusinessData[i][bizPrices][9] = 10;
					BusinessData[i][bizPrices][10] = 150;
					BusinessData[i][bizPrices][11] = 200;
					BusinessData[i][bizPrices][12] = 160;
					BusinessData[i][bizPrices][13] = 60;
					BusinessData[i][bizPrices][14] = 50;
					BusinessData[i][bizPrices][15] = 5;
					BusinessData[i][bizPrices][16] = 10;
					BusinessData[i][bizPrices][17] = 50;
				}
				else if (type == 2) {
					BusinessData[i][bizInt][0] = 316.3963;
					BusinessData[i][bizInt][1] = -169.8375;
					BusinessData[i][bizInt][2] = 999.6010;
					BusinessData[i][bizInt][3] = 0.0000;
					BusinessData[i][bizInterior] = 6;

					BusinessData[i][bizPrices][0] = 50;
					BusinessData[i][bizPrices][1] = 100;
					BusinessData[i][bizPrices][2] = 200;
					BusinessData[i][bizPrices][3] = 400;
					BusinessData[i][bizPrices][4] = 600;
					BusinessData[i][bizPrices][5] = 800;
				}
				else if (type == 3) {
					BusinessData[i][bizInt][0] = 161.4801;
					BusinessData[i][bizInt][1] = -96.5368;
					BusinessData[i][bizInt][2] = 1001.8047;
					BusinessData[i][bizInt][3] = 0.0000;
					BusinessData[i][bizInterior] = 18;

					BusinessData[i][bizPrices][0] = 25;
					BusinessData[i][bizPrices][1] = 15;
					BusinessData[i][bizPrices][2] = 10;
					BusinessData[i][bizPrices][3] = 10;
				}
				else if (type == 4) {
					BusinessData[i][bizInt][0] = 363.3402;
					BusinessData[i][bizInt][1] = -74.6679;
					BusinessData[i][bizInt][2] = 1001.5078;
					BusinessData[i][bizInt][3] = 315.0000;
					BusinessData[i][bizInterior] = 10;

					BusinessData[i][bizPrices][0] = 2;
					BusinessData[i][bizPrices][1] = 5;
					BusinessData[i][bizPrices][2] = 5;
					BusinessData[i][bizPrices][3] = 10;
					BusinessData[i][bizPrices][4] = 10;
					BusinessData[i][bizPrices][5] = 15;
					BusinessData[i][bizPrices][6] = 10;
				}
				else if (type == 5) {
					BusinessData[i][bizInt][0] = 1494.5612;
					BusinessData[i][bizInt][1] = 1304.2061;
					BusinessData[i][bizInt][2] = 1093.2891;
					BusinessData[i][bizInt][3] = 0.0000;
					BusinessData[i][bizInterior] = 3;
				}
				else if (type == 6) {
					BusinessData[i][bizInt][0] = -27.3383;
					BusinessData[i][bizInt][1] = -57.6909;
					BusinessData[i][bizInt][2] = 1003.5469;
					BusinessData[i][bizInt][3] = 0.0000;
					BusinessData[i][bizInterior] = 6;

					BusinessData[i][bizPrices][0] = 75;
					BusinessData[i][bizPrices][1] = 115;
					BusinessData[i][bizPrices][2] = 15;
					BusinessData[i][bizPrices][3] = 90;
					BusinessData[i][bizPrices][4] = 3;
					BusinessData[i][bizPrices][5] = 2;
					BusinessData[i][bizPrices][6] = 10;
					BusinessData[i][bizPrices][7] = 90;
					BusinessData[i][bizPrices][8] = 20;
					BusinessData[i][bizPrices][9] = 10;
					BusinessData[i][bizPrices][10] = 140;
					BusinessData[i][bizPrices][11] = 150;
					BusinessData[i][bizPrices][12] = 50;
					BusinessData[i][bizPrices][13] = 40;
					BusinessData[i][bizPrices][14] = 5;
					BusinessData[i][bizPrices][15] = 10;
					BusinessData[i][bizPrices][16] = 5;
				}
				BusinessData[i][bizExterior] = GetPlayerInterior(playerid);
				BusinessData[i][bizExteriorVW] = GetPlayerVirtualWorld(playerid);

				BusinessData[i][bizLocked] = true;
				BusinessData[i][bizVault] = 0;
				BusinessData[i][bizProducts] = 100;
				BusinessData[i][bizShipment] = 0;

				Business_Refresh(i);
				mysql_function_query(g_iHandle, "INSERT INTO `businesses` (`bizOwner`) VALUES(0)", false, "OnBusinessCreated", "d", i);
				return i;
			}
		}
	}
	return -1;
}

stock Business_RemoveCars(bizid)
{
	if (BusinessData[bizid][bizExists] && BusinessData[bizid][bizType] == 5)
	{
		static
		string[32];

		for (new i = 0; i != MAX_DEALERSHIP_CARS; i ++)
		{
			DealershipCars[bizid][i][vehModel] = 0;
			DealershipCars[bizid][i][vehPrice] = 0;
		}
		format(string, sizeof(string), "DELETE FROM `dealervehicles` WHERE `ID` = '%d'", BusinessData[bizid][bizID]);
		mysql_function_query(g_iHandle, string, false, "", "");
	}
	return 1;
}

stock Business_RemovePumps(bizid)
{
	if (BusinessData[bizid][bizExists] && BusinessData[bizid][bizType] == 6)
	{
		static
		string[32];

		foreach (new i : Player) if (PlayerData[i][pRefill] != INVALID_VEHICLE_ID && PlayerData[i][pGasStation] == bizid)
		{
			StopRefilling(i);
		}
		for (new i = 0; i != MAX_GAS_PUMPS; i ++) if (PumpData[i][pumpExists] && PumpData[i][pumpBusiness] == bizid)
		{
			DestroyDynamicObject(PumpData[i][pumpObject]);
			DestroyDynamic3DTextLabel(PumpData[i][pumpText3D]);

			PumpData[i][pumpExists] = 0;
			PumpData[i][pumpFuel] = 0;
		}
		format(string, sizeof(string), "DELETE FROM `pumps` WHERE `ID` = '%d'", BusinessData[bizid][bizID]);
		mysql_function_query(g_iHandle, string, false, "", "");
	}
	return 1;
}

Business_Delete(bizid)
{
	if (bizid != -1 && BusinessData[bizid][bizExists])
	{
		new
		string[82];

		format(string, sizeof(string), "DELETE FROM `businesses` WHERE `bizID` = '%d'", BusinessData[bizid][bizID]);
		mysql_function_query(g_iHandle, string, false, "", "");

		if(Actor_CountBiz(bizid) > 0)
		{
			for(new i=0; i<MAX_ACTORS; i++) if(ActorData[i][actorExists] && ActorData[i][actorBiz] == bizid)
			Actor_Delete(i);
		}
		
		foreach (new i : Player) if (PlayerData[i][pShipment] == bizid) {
			PlayerData[i][pShipment] = -1;
			PlayerData[i][pDeliverShipment] = 0;

			DisablePlayerCheckpoint(i);
		}
		
		if (IsValidDynamic3DTextLabel(BusinessData[bizid][bizText3D]))
		DestroyDynamic3DTextLabel(BusinessData[bizid][bizText3D]);

		if (IsValidDynamic3DTextLabel(BusinessData[bizid][bizDeliverText3D]))
		DestroyDynamic3DTextLabel(BusinessData[bizid][bizDeliverText3D]);

		if (IsValidDynamicPickup(BusinessData[bizid][bizPickup]))
		DestroyDynamicPickup(BusinessData[bizid][bizPickup]);

		if (IsValidDynamicPickup(BusinessData[bizid][bizDeliverPickup]))
		DestroyDynamicPickup(BusinessData[bizid][bizDeliverPickup]);

		Business_RemovePumps(bizid);
		Business_RemoveCars(bizid);

		BusinessData[bizid][bizExists] = false;
		BusinessData[bizid][bizOwner] = 0;
		BusinessData[bizid][bizID] = 0;
	}
	return 1;
}

Business_IsOwner(playerid, bizid)
{
	if (!PlayerData[playerid][pLogged] || PlayerData[playerid][pID] == -1)
	return 0;

	if ((BusinessData[bizid][bizExists] && BusinessData[bizid][bizOwner] != 0) && BusinessData[bizid][bizOwner] == PlayerData[playerid][pID])
	return 1;

	return 0;
}

forward OpenInventory(playerid);
public OpenInventory(playerid)
{
	if (!IsPlayerConnected(playerid) || !PlayerData[playerid][pLogged])
	return 0;

	static
	items[MAX_INVENTORY],
	amounts[MAX_INVENTORY];

	for (new i = 0; i < PlayerData[playerid][pCapacity]; i ++)
	{
		if (InventoryData[playerid][i][invExists]) {
			items[i] = InventoryData[playerid][i][invModel];
			amounts[i] = InventoryData[playerid][i][invQuantity];
		}
		else {
			items[i] = -1;
			amounts[i] = -1;
		}
	}
	PlayerData[playerid][pStorageSelect] = 0;
	return ShowModelSelectionMenu(playerid, "Inventaire", MODEL_SELECTION_INVENTORY, items, sizeof(items), 0.0, 0.0, 0.0, 1.0, -1, true, amounts);
}

forward OpenAdminInventory(playerid, userid);
public OpenAdminInventory(playerid, userid)
{
	static
	items[MAX_INVENTORY],
	amounts[MAX_INVENTORY];

	for (new i = 0; i < PlayerData[playerid][pCapacity]; i ++)
	{
		if (InventoryData[playerid][i][invExists])
		{
			items[i] = InventoryData[playerid][i][invModel];
			amounts[i] = InventoryData[playerid][i][invQuantity];
		}
		else
		{
			items[i] = -1;
			amounts[i] = -1;
		}
	}
	return ShowModelSelectionMenu(userid, "Inventaire", 9999999, items, sizeof(items), 0.0, 0.0, 0.0, 1.0, -1, true, amounts);
}

forward SelectTD(playerid);
public SelectTD(playerid)
{
	if (!IsPlayerConnected(playerid))
	return 0;

	return SelectTextDraw(playerid, -1);
}

ReturnDate()
{
	static
	date[36];

	getdate(date[2], date[1], date[0]);
	gettime(date[3], date[4], date[5]);

	format(date, sizeof(date), "%02d/%02d/%d, %02d:%02d", date[0], date[1], date[2], date[3], date[4]);
	return date;
}

ReturnVehicleHealth(vehicleid)
{
	if (!IsValidVehicle(vehicleid))
	return 0;

	static
	Float:amount;

	GetVehicleHealth(vehicleid, amount);
	return floatround(amount, floatround_round);
}

ReturnArmour(playerid)
{
	static
	Float:amount;

	GetPlayerArmour(playerid, amount);
	return floatround(amount, floatround_round);
}

ReturnHealth(playerid)
{
	static
	Float:amount;

	GetPlayerHealth(playerid, amount);
	return floatround(amount, floatround_round);
}

ReturnName(playerid, underscore=0)
{
	static
	name[MAX_PLAYER_NAME + 1];

	GetPlayerName(playerid, name, sizeof(name));

	if (underscore != 0) {
		for (new i = 0, len = strlen(name); i < len; i ++) {
			if (name[i] == '_') name[i] = ' ';
		}
		if (PlayerData[playerid][pMaskOn])
		format(name, sizeof(name), "Inconnu %d", PlayerData[playerid][pMaskID]);
	}

	return name;
}

ReturnIP(playerid)
{
	static
	ip[16];

	GetPlayerIp(playerid, ip, sizeof(ip));
	return ip;
}

ShowStatsForPlayer(playerid, targetid)
{
	new
	account[70],
	string[256],
	count;

	for (new i = 0; i < MAX_INVENTORY; i ++) if (InventoryData[playerid][i][invExists]) {
		count++;
	}
	if (PlayerData[targetid][pAdmin] > 0) account = GetAdminRank(targetid);
	else if (PlayerData[targetid][pHelper]) account = "Helpeur";
	else account = "Joueur";

	SendClientMessageEx(playerid, -1, "{C4E5FF}Statistiques de %s", ReturnName(targetid));
	SendClientMessageEx(playerid, -1, "{C4E5FF}¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯");
		
	format(string, sizeof(string), "{FFFFFF}ID du compte: {C4E5FF}%d {FFFFFF}| ID du personnage: {C4E5FF}%d", PlayerData[targetid][pID], playerid);
	SendClientMessageEx(playerid, COLOR_WHITE, string);

	format(string, sizeof(string), "{FFFFFF}Niveau:{C4E5FF} %d {FFFFFF}| Respect: {C4E5FF}%d{FFFFFF}/{C4E5FF}%d {FFFFFF}| Sexe:{C4E5FF} %s", PlayerData[targetid][pLevel],PlayerData[targetid][pPlayingHours],PlayerData[targetid][pPlayingHoursMax], (PlayerData[targetid][pGender] == 2) ? ("Femme") : ("Homme"));
	SendClientMessageEx(playerid, COLOR_WHITE, string);

	format(string, sizeof(string), "{FFFFFF}Heures jouées: {C4E5FF}%.0f {FFFFFF}| Naissance:{C4E5FF} %s {FFFFFF}| Inventaire: {C4E5FF}%d/%d {FFFFFF}", float(PlayerData[targetid][pMinutes]/60), PlayerData[targetid][pBirthdate], count, MAX_INVENTORY);
	SendClientMessageEx(playerid, COLOR_WHITE, string);

	format(string, sizeof(string), "{FFFFFF}Job: {C4E5FF}%s {FFFFFF}| Skin: {C4E5FF}%d {FFFFFF}| World: {C4E5FF}%d {FFFFFF}| Intérieur: {C4E5FF}%d", Job_GetName(PlayerData[targetid][pJob]),PlayerData[targetid][pSkin],PlayerData[targetid][pWorld],PlayerData[targetid][pInterior]);
	SendClientMessageEx(playerid, COLOR_WHITE, string);

	format(string, sizeof(string), "{FFFFFF}Argent: {C4E5FF}%s {FFFFFF}| Banque:{C4E5FF} %s {FFFFFF}| Compte: {C4E5FF}%s {FFFFFF}| Indice de force: {C4E5FF}%0.1f", FormatNumber(PlayerData[targetid][pMoney]), FormatNumber(PlayerData[targetid][pBankMoney]), account, PlayerData[targetid][pIndiceForce]);
	SendClientMessageEx(playerid, COLOR_WHITE, string);

	format(string, sizeof(string), "{FFFFFF}Lotto: {C4E5FF}%s {FFFFFF}| Faction:{C4E5FF} %s {FFFFFF}| Rank: {C4E5FF}%s", FormatNumber(PlayerData[targetid][pLottery]), Faction_GetName(targetid),Faction_GetRank(targetid));
	SendClientMessageEx(playerid, COLOR_WHITE, string);

	format(string, sizeof(string), "{FFFFFF}VIP: {C4E5FF}%s {FFFFFF}| Numéro:{C4E5FF} %d {FFFFFF}| Origine:{C4E5FF} %s", (PlayerData[targetid][pDonator]) ? ("Donateur") : ("Aucun"), PlayerData[targetid][pPhone], PlayerData[targetid][pOrigin]);
	SendClientMessageEx(playerid, COLOR_WHITE, string);
	if (!PlayerData[playerid][pDisplayStats])
	{
		PlayerData[playerid][pDisplayStats] = true;
	}
	else
	{
		PlayerData[playerid][pDisplayStats] = false;
	}
	return 1;
}

stock Blacklist_Add(ip[], username[], banner[], reason[], expireDate = -1)
{
	static
		string[256],
		formattedExpiration;

	if(expireDate == -1)
	    formattedExpiration = -1;
	    
	else
		formattedExpiration = ( gettime() + expireDate + 3600);
	
	format(string, sizeof(string), "INSERT INTO `blacklist` (`IP`, `Username`, `BannedBy`, `Reason`, `Date`, `ExpireDate`) VALUES('%s', '%s', '%s', '%s', '%s', '%d')",
	SQL_ReturnEscaped(ip),
	SQL_ReturnEscaped(username),
	SQL_ReturnEscaped(banner),
	SQL_ReturnEscaped(reason),
	ReturnDate(),
	formattedExpiration
	);
	mysql_function_query(g_iHandle, string, false, "", "");
}

stock Blacklist_Remove(username[])
{
	static
	string[128];

	format(string, sizeof(string), "DELETE FROM `blacklist` WHERE `Username` = '%s'", SQL_ReturnEscaped(username));
	mysql_function_query(g_iHandle, string, false, "", "");
}

stock Blacklist_RemoveIP(ip[])
{
	static
	string[128];

	format(string, sizeof(string), "DELETE FROM `blacklist` WHERE `IP` = '%s'", SQL_ReturnEscaped(ip));
	mysql_function_query(g_iHandle, string, false, "", "");
}

stock Inventory_Clear(playerid)
{
	static
	string[64];

	for (new i = 0; i < MAX_INVENTORY; i ++)
	{
		if (InventoryData[playerid][i][invExists])
		{
			InventoryData[playerid][i][invExists] = 0;
			InventoryData[playerid][i][invModel] = 0;
			InventoryData[playerid][i][invQuantity] = 0;
		}
	}
	format(string, sizeof(string), "DELETE FROM `inventory` WHERE `ID` = '%d'", PlayerData[playerid][pID]);
	return mysql_function_query(g_iHandle, string, false, "", "");
}

stock Inventory_Set(playerid, item[], model, amount)
{
	new itemid = Inventory_GetItemID(playerid, item);

	if (itemid == -1 && amount > 0)
	Inventory_Add(playerid, item, model, amount);

	else if (amount > 0 && itemid != -1)
	Inventory_SetQuantity(playerid, item, amount);

	else if (amount < 1 && itemid != -1)
	Inventory_Remove(playerid, item, -1);

	return 1;
}

stock Inventory_GetItemID(playerid, item[])
{
	for (new i = 0; i < MAX_INVENTORY; i ++)
	{
		if (!InventoryData[playerid][i][invExists])
		continue;

		if (!strcmp(InventoryData[playerid][i][invItem], item)) return i;
	}
	return -1;
}

stock Inventory_GetFreeID(playerid)
{
	if (Inventory_Items(playerid) >= PlayerData[playerid][pCapacity])
	return -1;

	for (new i = 0; i < MAX_INVENTORY; i ++)
	{
		if (!InventoryData[playerid][i][invExists])
		return i;
	}
	return -1;
}

stock Inventory_Items(playerid)
{
	new count;

	for (new i = 0; i != MAX_INVENTORY; i ++) if (InventoryData[playerid][i][invExists]) {
		count++;
	}
	return count;
}

stock Inventory_Count(playerid, item[])
{
	new itemid = Inventory_GetItemID(playerid, item);

	if (itemid != -1)
	return InventoryData[playerid][itemid][invQuantity];

	return 0;
}

stock Inventory_HasItem(playerid, item[])
{
	return (Inventory_GetItemID(playerid, item) != -1);
}

stock Inventory_SetQuantity(playerid, item[], quantity)
{
	new
	itemid = Inventory_GetItemID(playerid, item),
	string[128];

	if (itemid != -1)
	{
		format(string, sizeof(string), "UPDATE `inventory` SET `invQuantity` = %d WHERE `ID` = '%d' AND `invID` = '%d'", quantity, PlayerData[playerid][pID], InventoryData[playerid][itemid][invID]);
		mysql_function_query(g_iHandle, string, false, "", "");

		InventoryData[playerid][itemid][invQuantity] = quantity;
	}
	return 1;
}

stock Inventory_Add(playerid, item[], model, quantity = 1)
{
	new
	itemid = Inventory_GetItemID(playerid, item),
	string[128];

	if (itemid == -1)
	{
		itemid = Inventory_GetFreeID(playerid);

		if (itemid != -1)
		{
			InventoryData[playerid][itemid][invExists] = true;
			InventoryData[playerid][itemid][invModel] = model;
			InventoryData[playerid][itemid][invQuantity] = quantity;

			strpack(InventoryData[playerid][itemid][invItem], item, 32 char);

			if (strcmp(item, "Demo Soda") != 0)
			{
				format(string, sizeof(string), "INSERT INTO `inventory` (`ID`, `invItem`, `invModel`, `invQuantity`) VALUES('%d', '%s', '%d', '%d')", PlayerData[playerid][pID], SQL_ReturnEscaped(item), model, quantity);
				mysql_function_query(g_iHandle, string, false, "OnInventoryAdd", "dd", playerid, itemid);
			}
			return itemid;
		}
		return -1;
	}
	else
	{
		format(string, sizeof(string), "UPDATE `inventory` SET `invQuantity` = `invQuantity` + %d WHERE `ID` = '%d' AND `invID` = '%d'", quantity, PlayerData[playerid][pID], InventoryData[playerid][itemid][invID]);
		mysql_function_query(g_iHandle, string, false, "", "");

		InventoryData[playerid][itemid][invQuantity] += quantity;
	}
	return itemid;
}

stock Inventory_Remove(playerid, item[], quantity = 1)
{
	new
	itemid = Inventory_GetItemID(playerid, item),
	string[128];

	if (itemid != -1)
	{
		if (InventoryData[playerid][itemid][invQuantity] > 0)
		{
			InventoryData[playerid][itemid][invQuantity] -= quantity;
		}
		if (quantity == -1 || InventoryData[playerid][itemid][invQuantity] < 1)
		{
			InventoryData[playerid][itemid][invExists] = false;
			InventoryData[playerid][itemid][invModel] = 0;
			InventoryData[playerid][itemid][invQuantity] = 0;

			format(string, sizeof(string), "DELETE FROM `inventory` WHERE `ID` = '%d' AND `invID` = '%d'", PlayerData[playerid][pID], InventoryData[playerid][itemid][invID]);
			mysql_function_query(g_iHandle, string, false, "", "");
		}
		else if (quantity != -1 && InventoryData[playerid][itemid][invQuantity] > 0)
		{
			format(string, sizeof(string), "UPDATE `inventory` SET `invQuantity` = `invQuantity` - %d WHERE `ID` = '%d' AND `invID` = '%d'", quantity, PlayerData[playerid][pID], InventoryData[playerid][itemid][invID]);
			mysql_function_query(g_iHandle, string, false, "", "");
		}
		return 1;
	}
	return 0;
}

stock RemoveAlpha(color) {
	return (color & ~0xFF);
}

stock CancelDrivingTest(playerid)
{
	if (PlayerData[playerid][pDrivingTest])
	{
		SetPlayerPos(playerid, examPos[playerid][0], examPos[playerid][1], examPos[playerid][2]);
		SetPlayerFacingAngle(playerid, examPos[playerid][3]);

		SetPlayerInterior(playerid, PlayerData[playerid][pInterior]);
		SetPlayerVirtualWorld(playerid, PlayerData[playerid][pWorld]);

		DisablePlayerCheckpoint(playerid);
		SetCameraBehindPlayer(playerid);

		DestroyVehicle(PlayerData[playerid][pTestCar]);
		PlayerData[playerid][pDrivingTest] = false;
	}
	return 1;
}

stock CancelLicenseTaxiTest(playerid)
{
	if (PlayerData[playerid][pTaxiTest])
	{
		SetPlayerPos(playerid, examPos[playerid][0], examPos[playerid][1], examPos[playerid][2]);
		SetPlayerFacingAngle(playerid, examPos[playerid][3]);

		SetPlayerInterior(playerid, PlayerData[playerid][pInterior]);
		SetPlayerVirtualWorld(playerid, PlayerData[playerid][pWorld]);

		DisablePlayerCheckpoint(playerid);
		SetCameraBehindPlayer(playerid);

		DestroyVehicle(PlayerData[playerid][pTestCar]);
		PlayerData[playerid][pTaxiTest] = false;
	}
	return 1;
}

stock House_WeaponStorage(playerid, houseid)
{
	if (houseid == -1 || !HouseData[houseid][houseExists])
	return 0;

	static
	string[320];

	string[0] = 0;

	for (new i = 0; i < 10; i ++)
	{
		if (!HouseData[houseid][houseWeapons][i])
		format(string, sizeof(string), "%s Slot vide\n", string);

		else
			format(string, sizeof(string), "%s%s (Munitions: %d)\n", string, ReturnWeaponName(HouseData[houseid][houseWeapons][i]), HouseData[houseid][houseAmmo][i]);
	}
	Dialog_Show(playerid, HouseWeapons, DIALOG_STYLE_LIST, "Stockage d'armes", string, "Ok", "X");
	return 1;
}

stock House_ShowItems(playerid, houseid)
{
	if (houseid == -1 || !HouseData[houseid][houseExists])
	return 0;

	static
	string[MAX_HOUSE_STORAGE * 32],
	name[32];

	string[0] = 0;

	for (new i = 0; i != MAX_HOUSE_STORAGE; i ++)
	{
		if (!HouseStorage[houseid][i][hItemExists])
		format(string, sizeof(string), "%s Slot vide\n", string);

		else {
			strunpack(name, HouseStorage[houseid][i][hItemName]);

			if (HouseStorage[houseid][i][hItemQuantity] == 1) {
				format(string, sizeof(string), "%s%s\n", string, name);
			}
			else format(string, sizeof(string), "%s%s (%d)\n", string, name, HouseStorage[houseid][i][hItemQuantity]);
		}
	}
	Dialog_Show(playerid, HouseItems, DIALOG_STYLE_LIST, "Stockage d'objets", string, "Ok", "X");
	return 1;
}

stock House_OpenStorage(playerid, houseid)
{
	if (houseid == -1 || !HouseData[houseid][houseExists])
	return 0;

	new
	items[2],
	string[MAX_HOUSE_STORAGE * 32];

	for (new i = 0; i < MAX_HOUSE_STORAGE; i ++) if (HouseStorage[houseid][i][hItemExists]) {
		items[0]++;
	}
	for (new i = 0; i < 10; i ++) if (HouseData[houseid][houseWeapons][i]) {
		items[1]++;
	}
	if (!House_IsOwner(playerid, houseid))
	format(string, sizeof(string), "Stockage d'objets (%d/%d)\nStockage d'armes (%d/10)", items[0], MAX_HOUSE_STORAGE, items[1]);

	else
		format(string, sizeof(string), "Stockage d'objets (%d/%d)\nStockage d'armes (%d/10)\nArgent (%s)", items[0], MAX_HOUSE_STORAGE, items[1], FormatNumber(HouseData[houseid][houseMoney]));

	Dialog_Show(playerid, HouseStorage, DIALOG_STYLE_LIST, "Stockage", string, "Ok", "X");
	return 1;
}

stock House_GetItemID(houseid, item[])
{
	if (houseid == -1 || !HouseData[houseid][houseExists])
	return 0;

	for (new i = 0; i < MAX_HOUSE_STORAGE; i ++)
	{
		if (!HouseStorage[houseid][i][hItemExists])
		continue;

		if (!strcmp(HouseStorage[houseid][i][hItemName], item)) return i;
	}
	return -1;
}

stock House_GetFreeID(houseid)
{
	if (houseid == -1 || !HouseData[houseid][houseExists])
	return 0;

	for (new i = 0; i < MAX_HOUSE_STORAGE; i ++)
	{
		if (!HouseStorage[houseid][i][hItemExists])
		return i;
	}
	return -1;
}

stock House_AddItem(houseid, item[], model, quantity = 1, slotid = -1)
{
	if (houseid == -1 || !HouseData[houseid][houseExists])
	return 0;

	new
	itemid = House_GetItemID(houseid, item),
	string[128];

	if (itemid == -1)
	{
		itemid = House_GetFreeID(houseid);

		if (itemid != -1)
		{
			if (slotid != -1)
			itemid = slotid;

			HouseStorage[houseid][itemid][hItemExists] = true;
			HouseStorage[houseid][itemid][hItemModel] = model;
			HouseStorage[houseid][itemid][hItemQuantity] = quantity;

			strpack(HouseStorage[houseid][itemid][hItemName], item, 32 char);

			format(string, sizeof(string), "INSERT INTO `housestorage` (`ID`, `itemName`, `itemModel`, `itemQuantity`) VALUES('%d', '%s', '%d', '%d')", HouseData[houseid][houseID], item, model, quantity);
			mysql_function_query(g_iHandle, string, false, "OnStorageAdd", "dd", houseid, itemid);

			return itemid;
		}
		return -1;
	}
	else
	{
		format(string, sizeof(string), "UPDATE `housestorage` SET `itemQuantity` = `itemQuantity` + %d WHERE `ID` = '%d' AND `itemID` = '%d'", quantity, HouseData[houseid][houseID], HouseStorage[houseid][itemid][hItemID]);
		mysql_function_query(g_iHandle, string, false, "", "");

		HouseStorage[houseid][itemid][hItemQuantity] += quantity;
	}
	return itemid;
}

stock House_RemoveItem(houseid, item[], quantity = 1)
{
	if (houseid == -1 || !HouseData[houseid][houseExists])
	return 0;

	new
	itemid = House_GetItemID(houseid, item),
	string[128];

	if (itemid != -1)
	{
		if (HouseStorage[houseid][itemid][hItemQuantity] > 0)
		{
			HouseStorage[houseid][itemid][hItemQuantity] -= quantity;
		}
		if (quantity == -1 || HouseStorage[houseid][itemid][hItemQuantity] < 1)
		{
			HouseStorage[houseid][itemid][hItemExists] = false;
			HouseStorage[houseid][itemid][hItemModel] = 0;
			HouseStorage[houseid][itemid][hItemQuantity] = 0;

			format(string, sizeof(string), "DELETE FROM `housestorage` WHERE `ID` = '%d' AND `itemID` = '%d'", HouseData[houseid][houseID], HouseStorage[houseid][itemid][hItemID]);
			mysql_function_query(g_iHandle, string, false, "", "");
		}
		else if (quantity != -1 && HouseStorage[houseid][itemid][hItemQuantity] > 0)
		{
			format(string, sizeof(string), "UPDATE `housestorage` SET `itemQuantity` = `itemQuantity` - %d WHERE `ID` = '%d' AND `itemID` = '%d'", quantity, HouseData[houseid][houseID], HouseStorage[houseid][itemid][hItemID]);
			mysql_function_query(g_iHandle, string, false, "", "");
		}
		return 1;
	}
	return 0;
}

House_RemoveAllItems(houseid)
{
	static
	query[64];

	for (new i = 0; i != MAX_HOUSE_STORAGE; i ++) {
		HouseStorage[houseid][i][hItemExists] = false;
		HouseStorage[houseid][i][hItemModel] = 0;
		HouseStorage[houseid][i][hItemQuantity] = 0;
	}
	format(query, 64, "DELETE FROM `housestorage` WHERE `ID` = '%d'", HouseData[houseid][houseID]);
	mysql_function_query(g_iHandle, query, false, "", "");

	for (new i = 0; i < 10; i ++) {
		HouseData[houseid][houseWeapons][i] = 0;
		HouseData[houseid][houseAmmo][i] = 0;
	}
	return 1;
}

stock Car_GetItemID(carid, item[])
{
	if (carid == -1 || !CarData[carid][carExists])
	return 0;

	for (new i = 0; i < MAX_CAR_STORAGE; i ++)
	{
		if (!CarStorage[carid][i][cItemExists])
		continue;

		if (!strcmp(CarStorage[carid][i][cItemName], item)) return i;
	}
	return -1;
}

stock Car_GetFreeID(carid)
{
	if (carid == -1 || !CarData[carid][carExists])
	return 0;

	for (new i = 0; i < MAX_CAR_STORAGE; i ++)
	{
		if (!CarStorage[carid][i][cItemExists])
		return i;
	}
	return -1;
}

stock VehicleHasGPS(vehicleid)
{
	new carid = Car_GetID(vehicleid);

	switch(CarData[carid][carFaction])
	{
		case FACTION_POLICE: return true;
		case FACTION_GOV: return true;
	}
	return false;
}

stock Car_AddItem(carid, item[], model, quantity = 1, slotid = -1)
{
	if (carid == -1 || !CarData[carid][carExists])
	return 0;

	new
	itemid = Car_GetItemID(carid, item),
	string[128];

	if (itemid == -1)
	{
		itemid = Car_GetFreeID(carid);

		if (itemid != -1)
		{
			if (slotid != -1)
			itemid = slotid;

			CarStorage[carid][itemid][cItemExists] = true;
			CarStorage[carid][itemid][cItemModel] = model;
			CarStorage[carid][itemid][cItemQuantity] = quantity;

			strpack(CarStorage[carid][itemid][cItemName], item, 32 char);

			format(string, sizeof(string), "INSERT INTO `carstorage` (`ID`, `itemName`, `itemModel`, `itemQuantity`) VALUES('%d', '%s', '%d', '%d')", CarData[carid][carID], item, model, quantity);
			mysql_function_query(g_iHandle, string, false, "OnCarStorageAdd", "dd", carid, itemid);

			return itemid;
		}
		return -1;
	}
	else
	{
		format(string, sizeof(string), "UPDATE `carstorage` SET `itemQuantity` = `itemQuantity` + %d WHERE `ID` = '%d' AND `itemID` = '%d'", quantity, CarData[carid][carID], CarStorage[carid][itemid][cItemID]);
		mysql_function_query(g_iHandle, string, false, "", "");

		CarStorage[carid][itemid][cItemQuantity] += quantity;
	}
	return itemid;
}

stock Car_RemoveItem(carid, item[], quantity = 1)
{
	if (carid == -1 || !CarData[carid][carExists])
	return 0;

	new
	itemid = Car_GetItemID(carid, item),
	string[128];

	if (itemid != -1)
	{
		if (CarStorage[carid][itemid][cItemQuantity] > 0)
		{
			CarStorage[carid][itemid][cItemQuantity] -= quantity;
		}
		if (quantity == -1 || CarStorage[carid][itemid][cItemQuantity] < 1)
		{
			CarStorage[carid][itemid][cItemExists] = false;
			CarStorage[carid][itemid][cItemModel] = 0;
			CarStorage[carid][itemid][cItemQuantity] = 0;

			format(string, sizeof(string), "DELETE FROM `carstorage` WHERE `ID` = '%d' AND `itemID` = '%d'", CarData[carid][carID], CarStorage[carid][itemid][cItemID]);
			mysql_function_query(g_iHandle, string, false, "", "");
		}
		else if (quantity != -1 && CarStorage[carid][itemid][cItemQuantity] > 0)
		{
			format(string, sizeof(string), "UPDATE `carstorage` SET `itemQuantity` = `itemQuantity` - %d WHERE `ID` = '%d' AND `itemID` = '%d'", quantity, CarData[carid][carID], CarStorage[carid][itemid][cItemID]);
			mysql_function_query(g_iHandle, string, false, "", "");
		}
		return 1;
	}
	return 0;
}

Car_RemoveAllItems(carid)
{
	static
	query[64];

	for (new i = 0; i != MAX_CAR_STORAGE; i ++) {
		CarStorage[carid][i][cItemExists] = false;
		CarStorage[carid][i][cItemModel] = 0;
		CarStorage[carid][i][cItemQuantity] = 0;
	}
	format(query, 64, "DELETE FROM `carstorage` WHERE `ID` = '%d'", CarData[carid][carID]);
	mysql_function_query(g_iHandle, query, false, "", "");

	
	for (new i = 0; i < 5; i ++) {
		CarData[carid][carWeapons][i] = 0;
		CarData[carid][carAmmo][i] = 0;
	}
	return 1;
}

FormatNumber(number, prefix[] = "$")
{
	static
	value[32],
	length;

	format(value, sizeof(value), "%d", (number < 0) ? (-number) : (number));

	if ((length = strlen(value)) > 3)
	{
		for (new i = length, l = 0; --i >= 0; l ++) {
			if ((l > 0) && (l % 3 == 0)) strins(value, ",", i + 1);
		}
	}
	if (prefix[0] != 0)
	strins(value, prefix, 0);

	if (number < 0)
	strins(value, "-", 0);

	return value;
}

ResetFaction(playerid)
{
	PlayerData[playerid][pFaction] = -1;
	PlayerData[playerid][pFactionID] = -1;
	PlayerData[playerid][pFactionRank] = 0;
}

forward DragUpdate(playerid, targetid);
public DragUpdate(playerid, targetid)
{
	if (PlayerData[targetid][pDragged] && PlayerData[targetid][pDraggedBy] == playerid)
	{
		static
		Float:fX,
		Float:fY,
		Float:fZ,
		Float:fAngle;

		GetPlayerPos(playerid, fX, fY, fZ);
		GetPlayerFacingAngle(playerid, fAngle);

		fX -= 3.0 * floatsin(-fAngle, degrees);
		fY -= 3.0 * floatcos(-fAngle, degrees);

		SetPlayerPos(targetid, fX, fY, fZ);
		SetPlayerInterior(targetid, GetPlayerInterior(playerid));
		SetPlayerVirtualWorld(targetid, GetPlayerVirtualWorld(playerid));
	}
	return 1;
}

StopDragging(playerid)
{
	if (PlayerData[playerid][pDragged])
	{
		PlayerData[playerid][pDragged] = 0;
		PlayerData[playerid][pDraggedBy] = INVALID_PLAYER_ID;
		KillTimer(PlayerData[playerid][pDragTimer]);
	}
	return 1;
}

ResetEditing(playerid)
{
	if (PlayerData[playerid][pEditFurniture] != -1)
	Furniture_Refresh(PlayerData[playerid][pEditFurniture]);

	if (PlayerData[playerid][pEditPump] != -1)
	{
		Pump_Refresh(PlayerData[playerid][pEditPump]);
		PlayerData[playerid][pGasStation] = -1;
	}
	PlayerData[playerid][pEditType] = 0;
	PlayerData[playerid][pEditGate] = -1;
	PlayerData[playerid][pEditCamera] = -1;
	PlayerData[playerid][pEditVendor] = -1;
	PlayerData[playerid][pEditGarbage] = -1;
	PlayerData[playerid][pEditGym_1] = -1;
	PlayerData[playerid][pEditGym_2] = -1;
	PlayerData[playerid][pEditATM] = -1;
	PlayerData[playerid][pEditCabine] = -1;
	PlayerData[playerid][pEditSign] = -1;
	PlayerData[playerid][pEditSpeed] = -1;
	PlayerData[playerid][pEditRack] = -1;
	PlayerData[playerid][pEditPump] = -1;
	PlayerData[playerid][pEditFurniture] = -1;
	PlayerData[playerid][pEditDoors] = -1;
	return 1;
}

ResetPlayer(playerid)
{
	if (PlayerData[playerid][pDrinking])
	DestroyProgressBar(PlayerData[playerid][pDrinkBar]);

	if (PlayerData[playerid][pFirstAid])
	KillTimer(PlayerData[playerid][pAidTimer]);

	if (PlayerData[playerid][pDrivingTest] || PlayerData[playerid][pTaxiTest])
	DestroyVehicle(PlayerData[playerid][pTestCar]);

	if (PlayerData[playerid][pWaypoint])
	{
		PlayerData[playerid][pWaypoint] = 0;
		PlayerTextDrawHide(playerid, PlayerData[playerid][pTextdraws][69]);
	}
	foreach (new i : Player) if (PlayerData[i][pDraggedBy] == playerid) {
		StopDragging(i);
	}
	if (PlayerData[playerid][pDragged]) {
		StopDragging(playerid);
	}
	PlayerData[playerid][pHospital] = -1;
	PlayerData[playerid][pCooking] = 0;
	PlayerData[playerid][pCookingTime] = 0;
	PlayerData[playerid][pCookingHouse] = -1;
	PlayerData[playerid][pGasPump] = -1;
	PlayerData[playerid][pCarryTrash] = 0;
	PlayerData[playerid][pGasStation] = -1;
	PlayerData[playerid][pCrafting] = 0;
	PlayerData[playerid][pOpeningCrate] = 0;
	PlayerData[playerid][pHarvesting] = 0;
	PlayerData[playerid][pDrivingTest] = 0;
	PlayerData[playerid][pTaxiTest] = 0;
	PlayerData[playerid][pFuelCan] = 0;
	PlayerData[playerid][pFingerTime] = 0;
	PlayerData[playerid][pFingerItem] = -1;
	PlayerData[playerid][pFirstAid] = 0;
	PlayerData[playerid][pDrinking] = 0;
	PlayerData[playerid][pDrinkTime] = 0;
	PlayerData[playerid][pEmergency] = 0;
	PlayerData[playerid][pPlaceAd] = 0;
	PlayerData[playerid][pAdTime] = 0;
	PlayerData[playerid][pTaxiCalled] = 0;
	PlayerData[playerid][pMining] = 0;
	PlayerData[playerid][pMinedRock] = -1;
	PlayerData[playerid][pMineTime] = 0;
	PlayerData[playerid][pBleeding] = 0;
	PlayerData[playerid][pBleedTime] = 0;
	PlayerData[playerid][pLoadType] = 0;
	PlayerData[playerid][pLoadCrate] = 0;
	PlayerData[playerid][pLoading] = 0;
	PlayerData[playerid][pUnloading] = -1;
	PlayerData[playerid][pUnloadVehicle] = INVALID_VEHICLE_ID;
	PlayerData[playerid][pUsedMagazine] = 0;
	PlayerData[playerid][pSorting] = 0;
	PlayerData[playerid][pSortingType] = 0;
	PlayerData[playerid][pSortingVehicle] = 0;
	PlayerData[playerid][pSortingObject][0] = -1;
	PlayerData[playerid][pSortingObject][1] = -1;
	PlayerData[playerid][pSortingObject][2] = -1;
	PlayerData[playerid][pSortCrate] = 0;
	PlayerData[playerid][pSortingBase] = -1;
	PlayerData[playerid][pCP] = 0;
	PlayerData[playerid][pMaskOn] = 0;
	PlayerData[playerid][pCeinture] = 0;
	PlayerData[playerid][pHideTags] = 0;
	PlayerData[playerid][pCuffed] = 0;
	PlayerData[playerid][pGraffiti] = -1;
	PlayerData[playerid][pGraffitiTime] = 0;
	PlayerData[playerid][pPicking] = 0;
	PlayerData[playerid][pPickCar] = -1;
	PlayerData[playerid][pPickTime] = 0;

	/*if (Inventory_HasItem(playerid, "Masque")) {
	}*/
	ResetNameTag(playerid);

	RemovePlayerAttachedObject(playerid, 4);
	SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);

	DisablePlayerCheckpoint(playerid);
	GameTextForPlayer(playerid, " ", 1, 3);

	HidePlayerFooter(playerid);
}

ResetWeapons(playerid)
{
	ResetPlayerWeapons(playerid);

	for (new i = 0; i < 13; i ++) {
		PlayerData[playerid][pGuns][i] = 0;
		PlayerData[playerid][pAmmo][i] = 0;
	}
	return 1;
}

ResetWeapon(playerid, weaponid)
{
	ResetPlayerWeapons(playerid);

	for (new i = 0; i < 13; i ++) {
		if (PlayerData[playerid][pGuns][i] != weaponid) {
			GivePlayerWeapon(playerid, PlayerData[playerid][pGuns][i], PlayerData[playerid][pAmmo][i]);
		}
		else {
			PlayerData[playerid][pGuns][i] = 0;
			PlayerData[playerid][pAmmo][i] = 0;
		}
	}
	return 1;
}

GiveWeaponToPlayer(playerid, weaponid, ammo)
{
	if (weaponid < 0 || weaponid > 46)
	return 0;

	PlayerData[playerid][pGuns][g_aWeaponSlots[weaponid]] = weaponid;
	PlayerData[playerid][pAmmo][g_aWeaponSlots[weaponid]] += ammo;

	return GivePlayerWeapon(playerid, weaponid, ammo);
}

GiveMoney(playerid, amount)
{
	PlayerData[playerid][pMoney] += amount;
	GivePlayerMoney(playerid, amount);

	return 1;
}

GetPlayerSQLID(playerid)
{
	return (PlayerData[playerid][pID]);
}

GetMoney(playerid)
{
	return (PlayerData[playerid][pMoney]);
}

/*IsValidPlayerName(const str[])
{
	if (!str[0] || str[0] == '\1')
	return 0;

	for (new i = 0, l = strlen(str); i != l; i ++)
	{
		if ((str[i] >= '0' && str[i] <= '9') || (str[i] >= 'a' && str[i] <= 'z') || (str[i] >= 'A' && str[i] <= 'Z'))
		continue;

		if (str[i] == '_' || str[i] == '$' || str[i] == '@' || str[i] == '[' || str[i] == ']')
		continue;

		else
			return 0;
	}
	return 1;
}*/

stock IsAnIP(const str[])
{
	if (!str[0] || str[0] == '\1')
	return 0;

	for (new i = 0, l = strlen(str); i != l; i ++)
	{
		if ((str[i] < '0' || str[i] > '9') && str[i] != '.')
		return 0;

		if (0 < ((i == 0) ? (strval(str)) : (strval(str[i + 1]))) > 255)
		return 0;
	}
	return 1;
}

Report_Remove(reportid)
{
	if (reportid != -1 && ReportData[reportid][rExists])
	{
		ReportData[reportid][rExists] = false;
		ReportData[reportid][rType] = 0;
		
		ReportData[reportid][rPlayerReported] = INVALID_PLAYER_ID;
		ReportData[reportid][rPlayerReport] = INVALID_PLAYER_ID;

		strins(ReportData[reportid][rText], "", 0);
		strins(ReportData[reportid][rDate], "", 0);
	}
	return 1;
}

Report_Add(reported, reporter, type, reason[])
{
	for(new i=0; i<MAX_REPORTS; i++) if(!ReportData[i][rExists])
	{
	    ReportData[i][rExists] = true;
	    ReportData[i][rType] = type;

		if(reported != INVALID_PLAYER_ID)
		{
	    	ReportData[i][rPlayerReported] = reported;
	    	format(ReportData[i][rPlayerReported_name], MAX_PLAYER_NAME+1, ReturnName(reported));
		}
		else
		{
	    	ReportData[i][rPlayerReported] = INVALID_PLAYER_ID;
	    	format(ReportData[i][rPlayerReported_name], MAX_PLAYER_NAME+1, "N/A");
		}
		
	    ReportData[i][rPlayerReport] = reporter;
	    format(ReportData[i][rPlayerReport_name], MAX_PLAYER_NAME+1, ReturnName(reporter));

	    format(ReportData[i][rText], 128, reason);
	    
		new
			date[50];

		getdate(date[2], date[1], date[0]);
		gettime(date[3], date[4], date[5]);

		format(date, sizeof(date), "%02d:%02d:%02d", date[3], date[4], date[5]);
	    format(ReportData[i][rDate], 128, date);
	    return i;
	}
	return 1;
}

KickEx(playerid)
{
	if (PlayerData[playerid][pKicked])
	return 0;

	PlayerData[playerid][pKicked] = 1;
	SetTimerEx("KickTimer", 200, false, "d", playerid);
	return 1;
}

forward KickTimer(playerid);
public KickTimer(playerid)
{
	if (PlayerData[playerid][pKicked])
	{
		return Kick(playerid);
	}
	return 0;
}

stock SetDefaultSpawn(playerid)
{
	SetPlayerInterior(playerid, 0);
	SetPlayerVirtualWorld(playerid, 0);


	if(PlayerData[playerid][pSpawnPoint] == 0) // GARE
	{
		SetPlayerPos(playerid, 1743.05530, -1862.45459, 13.16798);
		SetPlayerFacingAngle(playerid, 0.0);
	}
	if(PlayerData[playerid][pSpawnPoint] == 1) // Faction
	{
		new faction = PlayerData[playerid][pFactionID];
		if(PlayerData[playerid][pFactionID] == -1)
		{
			SendClientMessageEx(playerid, COLOR_CLIENT, "Vous n'avez plus de faction, votre spawn par défaut est maintenant la gare.");
			
			SetPlayerPos(playerid, 1743.05530, -1862.45459, 13.16798);
			SetPlayerFacingAngle(playerid, 0.0);

			PlayerData[playerid][pSpawnPoint] = 0;
		}
		SetPlayerPos(playerid,FactionData[faction][SpawnX],FactionData[faction][SpawnY],FactionData[faction][SpawnZ]);
		SetPlayerInterior(playerid,FactionData[faction][SpawnInterior]);
		SetPlayerVirtualWorld(playerid, FactionData[faction][SpawnVW]);
	}
	if(PlayerData[playerid][pSpawnPoint] == 2)
	{
		SetPlayerPos(playerid, PlayerData[playerid][pPos][0], PlayerData[playerid][pPos][1], PlayerData[playerid][pPos][2]);
		SetPlayerFacingAngle(playerid, PlayerData[playerid][pPos][3]);
		SetPlayerInterior(playerid, PlayerData[playerid][pInterior]);
		SetPlayerVirtualWorld(playerid, PlayerData[playerid][pWorld]);
	}
	if(PlayerData[playerid][pSpawnPoint] == 3)
	{
	 	if(House_GetCount(playerid) >= MAX_OWNABLE_HOUSES)
		{
		    new id;
			if((id = GetHouseIDByPlayerSQLID(playerid)) != -1)
			{
				SetPlayerPos(playerid, HouseData[id][houseInt][0], HouseData[id][houseInt][1], HouseData[id][houseInt][2]);
				SetPlayerFacingAngle(playerid, HouseData[id][houseInt][3]);
				SetPlayerInterior(playerid, HouseData[id][houseInterior]);
				SetPlayerVirtualWorld(playerid, HouseData[id][houseID] + 5000);
				SetCameraBehindPlayer(playerid);
				PlayerData[playerid][pHouse] = HouseData[id][houseID];
			}
	  		else
	  		{
	  		    PlayerData[playerid][pSpawnPoint] = 2;
	  		    SetDefaultSpawn(playerid);
	  		}
  		}
	 	else if(PlayerData[playerid][pLocat] != -1)
		{
		    new id = PlayerData[playerid][pLocat];
			SetPlayerPos(playerid, HouseData[id][houseInt][0], HouseData[id][houseInt][1], HouseData[id][houseInt][2]);
			SetPlayerFacingAngle(playerid, HouseData[id][houseInt][3]);
			SetPlayerInterior(playerid, HouseData[id][houseInterior]);
			SetPlayerVirtualWorld(playerid, HouseData[id][houseID] + 5000);
			SetCameraBehindPlayer(playerid);
			PlayerData[playerid][pHouse] = HouseData[id][houseID];
  		}
  		else
  		{
  		    PlayerData[playerid][pSpawnPoint] = 2;
  		    SetDefaultSpawn(playerid);
  		}
	}

	SetCameraBehindPlayer(playerid);
	TogglePlayerControllable(playerid, 1);
	return 1;
}

stock RespawnPlayer(playerid)
{
	if (IsPlayerInAnyVehicle(playerid))
	{
		new
		Float:x,
		Float:y,
		Float:z;

		GetPlayerPos(playerid, x, y, z);
		SetPlayerPos(playerid, x, y, z + 1);
	}
	SpawnPlayer(playerid);
	SetDefaultSpawn(playerid);
	return 1;
}

stock IsPlayerIdle(playerid) {
	new
	index = GetPlayerAnimationIndex(playerid);

	return ((index == 1275) || (1181 <= index <= 1192));
}

stock IsPlayerNearDynamicObject(playerid, objectid, Float:range = 5.0) {

	static
	Float:fX,
	Float:fY,
	Float:fZ;

	GetDynamicObjectPos(objectid, fX, fY, fZ);

	return (IsPlayerInRangeOfPoint(playerid, range, fX, fY, fZ));
}

stock IsPlayerSpawned(playerid)
{
	if (playerid < 0 || playerid >= MAX_PLAYERS)
	return 0;

	return (!PlayerData[playerid][pKilled]) && (GetPlayerState(playerid) != PLAYER_STATE_SPECTATING && GetPlayerState(playerid) != PLAYER_STATE_NONE && GetPlayerState(playerid) != PLAYER_STATE_WASTED);
}

stock GetVehicleMaxSeats(vehicleid)
{
	static const g_arrMaxSeats[] = {
		4, 2, 2, 2, 4, 4, 1, 2, 2, 4, 2, 2, 2, 4, 2, 2, 4, 2, 4, 2, 4, 4, 2, 2, 2, 1, 4, 4, 4, 2,
		1, 7, 1, 2, 2, 0, 2, 7, 4, 2, 4, 1, 2, 2, 2, 4, 1, 2, 1, 0, 0, 2, 1, 1, 1, 2, 2, 2, 4, 4,
		2, 2, 2, 2, 1, 1, 4, 4, 2, 2, 4, 2, 1, 1, 2, 2, 1, 2, 2, 4, 2, 1, 4, 3, 1, 1, 1, 4, 2, 2,
		4, 2, 4, 1, 2, 2, 2, 4, 4, 2, 2, 1, 2, 2, 2, 2, 2, 4, 2, 1, 1, 2, 1, 1, 2, 2, 4, 2, 2, 1,
		1, 2, 2, 2, 2, 2, 2, 2, 2, 4, 1, 1, 1, 2, 2, 2, 2, 7, 7, 1, 4, 2, 2, 2, 2, 2, 4, 4, 2, 2,
		4, 4, 2, 1, 2, 2, 2, 2, 2, 2, 4, 4, 2, 2, 1, 2, 4, 4, 1, 0, 0, 1, 1, 2, 1, 2, 2, 1, 2, 4,
		4, 2, 4, 1, 0, 4, 2, 2, 2, 2, 0, 0, 7, 2, 2, 1, 4, 4, 4, 2, 2, 2, 2, 2, 4, 2, 0, 0, 0, 4,
		0, 0
	};
	new
	model = GetVehicleModel(vehicleid);

	if (400 <= model <= 611)
	return g_arrMaxSeats[model - 400];

	return 0;
}

stock GetNearestVehicle(playerid)
{
	static
	Float:fX,
	Float:fY,
	Float:fZ;

	for(new i = 1, j = GetVehiclePoolSize(); i <= j; i++) if (IsValidVehicle(i) && GetVehiclePos(i, fX, fY, fZ))
	{
		if (IsPlayerInRangeOfPoint(playerid, 3.5, fX, fY, fZ)) return i;
	}
	return INVALID_VEHICLE_ID;
}

stock IsPlayerNearPlayer(playerid, targetid, Float:radius)
{
	if(PlayerData[playerid][pDashcam] || PlayerData[targetid][pDashcam]) return false;
	
	static
	Float:fX,
	Float:fY,
	Float:fZ;

	GetPlayerPos(targetid, fX, fY, fZ);

	return (GetPlayerInterior(playerid) == GetPlayerInterior(targetid) && GetPlayerVirtualWorld(playerid) == GetPlayerVirtualWorld(targetid)) && IsPlayerInRangeOfPoint(playerid, radius, fX, fY, fZ);
}

stock IsPlayerNearBoot(playerid, vehicleid)
{
	static
	Float:fX,
	Float:fY,
	Float:fZ;

	GetVehicleBoot(vehicleid, fX, fY, fZ);

	return (GetPlayerVirtualWorld(playerid) == GetVehicleVirtualWorld(vehicleid)) && IsPlayerInRangeOfPoint(playerid, 3.5, fX, fY, fZ);
}

stock IsPlayerNearHood(playerid, vehicleid)
{
	static
	Float:fX,
	Float:fY,
	Float:fZ;

	GetVehicleHood(vehicleid, fX, fY, fZ);

	return (GetPlayerVirtualWorld(playerid) == GetVehicleVirtualWorld(vehicleid)) && IsPlayerInRangeOfPoint(playerid, 3.0, fX, fY, fZ);
}

stock SendNearbyMessage(playerid, Float:radius, color, const str[], {Float,_}:...)
{
	static
	args,
	start,
	end,
	string[144]
	;
	#emit LOAD.S.pri 8
	#emit STOR.pri args

	if (args > 16)
	{
		#emit ADDR.pri str
		#emit STOR.pri start

		for (end = start + (args - 16); end > start; end -= 4)
		{
			#emit LREF.pri end
			#emit PUSH.pri
		}
		#emit PUSH.S str
		#emit PUSH.C 144
		#emit PUSH.C string

		#emit LOAD.S.pri 8
		#emit CONST.alt 4
		#emit SUB
		#emit PUSH.pri

		#emit SYSREQ.C format
		#emit LCTRL 5
		#emit SCTRL 4

		foreach (new i : Player)
		{
			if (IsPlayerNearPlayer(i, playerid, radius)) {
				SendClientMessage(i, color, string);
				NearWatchedPlayer(i, string);
			}
		}
		return 1;
	}
	foreach (new i : Player)
	{
		if (IsPlayerNearPlayer(i, playerid, radius)) {
			SendClientMessage(i, color, str);
		}
	}
	return 1;
}

stock SendAdminAlert(color, const str[], {Float,_}:...)
{
	static
	args,
	start,
	end,
	string[144]
	;
	#emit LOAD.S.pri 8
	#emit STOR.pri args

	if (args > 8)
	{
		#emit ADDR.pri str
		#emit STOR.pri start

		for (end = start + (args - 8); end > start; end -= 4)
		{
			#emit LREF.pri end
			#emit PUSH.pri
		}
		#emit PUSH.S str
		#emit PUSH.C 144
		#emit PUSH.C string

		#emit LOAD.S.pri 8
		#emit ADD.C 4
		#emit PUSH.pri

		#emit SYSREQ.C format
		#emit LCTRL 5
		#emit SCTRL 4

		foreach (new i : Player)
		{
			if (PlayerData[i][pAdmin] >= 1 && PlayerData[i][pDisableAdmin] != 1) {
				SendClientMessage(i, color, string);
			}
		}
		return 1;
	}
	foreach (new i : Player)
	{
		if (PlayerData[i][pAdmin] >= 1 && PlayerData[i][pDisableAdmin] != 1) {
			SendClientMessage(i, color, str);
		}
	}
	return 1;
}

stock SendHelperAlert(color, const str[], {Float,_}:...)
{
	static
	args,
	start,
	end,
	string[144]
	;
	#emit LOAD.S.pri 8
	#emit STOR.pri args

	if (args > 8)
	{
		#emit ADDR.pri str
		#emit STOR.pri start

		for (end = start + (args - 8); end > start; end -= 4)
		{
			#emit LREF.pri end
			#emit PUSH.pri
		}
		#emit PUSH.S str
		#emit PUSH.C 144
		#emit PUSH.C string

		#emit LOAD.S.pri 8
		#emit ADD.C 4
		#emit PUSH.pri

		#emit SYSREQ.C format
		#emit LCTRL 5
		#emit SCTRL 4

		foreach (new i : Player)
		{
			if (PlayerData[i][pHelper] && PlayerData[i][pDisableAdmin] != 1) {
				SendClientMessage(i, color, string);
			}
		}
		return 1;
	}
	foreach (new i : Player)
	{
		if (PlayerData[i][pHelper] && PlayerData[i][pDisableAdmin] != 1) {
			SendClientMessage(i, color, str);
		}
	}
	return 1;
}

stock SendLeadAdminAlert(color, const str[], {Float,_}:...)
{
	static
	args,
	start,
	end,
	string[144]
	;
	#emit LOAD.S.pri 8
	#emit STOR.pri args

	if (args > 8)
	{
		#emit ADDR.pri str
		#emit STOR.pri start

		for (end = start + (args - 8); end > start; end -= 4)
		{
			#emit LREF.pri end
			#emit PUSH.pri
		}
		#emit PUSH.S str
		#emit PUSH.C 144
		#emit PUSH.C string

		#emit LOAD.S.pri 8
		#emit ADD.C 4
		#emit PUSH.pri

		#emit SYSREQ.C format
		#emit LCTRL 5
		#emit SCTRL 4

		foreach (new i : Player)
		{
			if (PlayerData[i][pAdmin] >= 6) {
				SendClientMessage(i, color, string);
			}
		}
		return 1;
	}
	foreach (new i : Player)
	{
		if (PlayerData[i][pAdmin] >= 6) {
			SendClientMessage(i, color, str);
		}
	}
	return 1;
}

stock SendFactionMessageEx(type, color, const str[], {Float,_}:...)
{
	static
	args,
	start,
	end,
	string[144]
	;
	#emit LOAD.S.pri 8
	#emit STOR.pri args

	if (args > 12)
	{
		#emit ADDR.pri str
		#emit STOR.pri start

		for (end = start + (args - 12); end > start; end -= 4)
		{
			#emit LREF.pri end
			#emit PUSH.pri
		}
		#emit PUSH.S str
		#emit PUSH.C 144
		#emit PUSH.C string
		#emit PUSH.C args

		#emit SYSREQ.C format
		#emit LCTRL 5
		#emit SCTRL 4

		foreach (new i : Player) if (PlayerData[i][pOnDuty] && PlayerData[i][pFaction] != -1 && GetFactionType(i) == type && !PlayerData[i][pDisableFaction]) {
			SendClientMessage(i, color, string);
		}
		return 1;
	}
	foreach (new i : Player) if (PlayerData[i][pOnDuty] && PlayerData[i][pFaction] != -1 && GetFactionType(i) == type && !PlayerData[i][pDisableFaction]) {
		SendClientMessage(i, color, str);
	}
	return 1;
}

stock SendFactionMessage(factionid, color, const str[], {Float,_}:...)
{
	static
	args,
	start,
	end,
	string[144]
	;
	#emit LOAD.S.pri 8
	#emit STOR.pri args

	if (args > 12)
	{
		#emit ADDR.pri str
		#emit STOR.pri start

		for (end = start + (args - 12); end > start; end -= 4)
		{
			#emit LREF.pri end
			#emit PUSH.pri
		}
		#emit PUSH.S str
		#emit PUSH.C 144
		#emit PUSH.C string
		#emit PUSH.C args

		#emit SYSREQ.C format
		#emit LCTRL 5
		#emit SCTRL 4

		foreach (new i : Player) if (PlayerData[i][pFaction] == factionid && !PlayerData[i][pDisableFaction]) {
			SendClientMessage(i, color, string);
		}
		return 1;
	}
	foreach (new i : Player) if (PlayerData[i][pFaction] == factionid && !PlayerData[i][pDisableFaction]) {
		SendClientMessage(i, color, str);
	}
	return 1;
}

stock SendJobMessage(jobid, color, const str[], {Float,_}:...)
{
	static
	args,
	start,
	end,
	string[144]
	;
	#emit LOAD.S.pri 8
	#emit STOR.pri args

	if (args > 12)
	{
		#emit ADDR.pri str
		#emit STOR.pri start

		for (end = start + (args - 12); end > start; end -= 4)
		{
			#emit LREF.pri end
			#emit PUSH.pri
		}
		#emit PUSH.S str
		#emit PUSH.C 144
		#emit PUSH.C string
		#emit PUSH.C args

		#emit SYSREQ.C format
		#emit LCTRL 5
		#emit SCTRL 4

		foreach (new i : Player) if (PlayerData[i][pJob] == jobid) {
			SendClientMessage(i, color, string);
		}
		return 1;
	}
	foreach (new i : Player) if (PlayerData[i][pJob] == jobid) {
		SendClientMessage(i, color, str);
	}
	return 1;
}

stock SendVehicleMessage(vehicleid, color, const str[], {Float,_}:...)
{
	static
	args,
	start,
	end,
	string[144]
	;
	#emit LOAD.S.pri 8
	#emit STOR.pri args

	if (args > 12)
	{
		#emit ADDR.pri str
		#emit STOR.pri start

		for (end = start + (args - 12); end > start; end -= 4)
		{
			#emit LREF.pri end
			#emit PUSH.pri
		}
		#emit PUSH.S str
		#emit PUSH.C 144
		#emit PUSH.C string
		#emit PUSH.C args

		#emit SYSREQ.C format
		#emit LCTRL 5
		#emit SCTRL 4

		foreach (new i : Player) if (GetPlayerVehicleID(i) == vehicleid) {
			SendClientMessage(i, color, string);
		}
		return 1;
	}
	foreach (new i : Player) if (GetPlayerVehicleID(i) == vehicleid) {
		SendClientMessage(i, color, string);
	}
	return 1;
}

stock SendRadioMessage(frequency, color, const str[], {Float,_}:...)
{
	static
	args,
	start,
	end,
	string[144]
	;
	#emit LOAD.S.pri 8
	#emit STOR.pri args

	if (args > 12)
	{
		#emit ADDR.pri str
		#emit STOR.pri start

		for (end = start + (args - 12); end > start; end -= 4)
		{
			#emit LREF.pri end
			#emit PUSH.pri
		}
		#emit PUSH.S str
		#emit PUSH.C 144
		#emit PUSH.C string
		#emit PUSH.C args

		#emit SYSREQ.C format
		#emit LCTRL 5
		#emit SCTRL 4

		foreach (new i : Player) if (Inventory_HasItem(i, "Radio") && PlayerData[i][pChannel] == frequency) {
			SendClientMessage(i, color, string);
		}
		return 1;
	}
	foreach (new i : Player) if (Inventory_HasItem(i, "Radio") && PlayerData[i][pChannel] == frequency) {
		SendClientMessage(i, color, str);
	}
	return 1;
}

stock SendClientMessageEx(playerid, color, const str[], {Float,_}:...)
{
	static
	args,
	start,
	end,
	string[144]
	;
	#emit LOAD.S.pri 8
	#emit STOR.pri args

	if (args > 12)
	{
		#emit ADDR.pri str
		#emit STOR.pri start

		for (end = start + (args - 12); end > start; end -= 4)
		{
			#emit LREF.pri end
			#emit PUSH.pri
		}
		#emit PUSH.S str
		#emit PUSH.C 144
		#emit PUSH.C string
		#emit PUSH.C args
		#emit SYSREQ.C format

		SendClientMessage(playerid, color, string);

		#emit LCTRL 5
		#emit SCTRL 4
		#emit RETN
	}
	return SendClientMessage(playerid, color, str);
}

stock SendClientMessageToAllEx(color, const str[], {Float,_}:...)
{
	static
	args,
	start,
	end,
	string[144]
	;
	#emit LOAD.S.pri 8
	#emit STOR.pri args

	if (args > 8)
	{
		#emit ADDR.pri str
		#emit STOR.pri start

		for (end = start + (args - 8); end > start; end -= 4)
		{
			#emit LREF.pri end
			#emit PUSH.pri
		}
		#emit PUSH.S str
		#emit PUSH.C 144
		#emit PUSH.C string

		#emit LOAD.pri args
		#emit ADD.C 4
		#emit PUSH.pri
		#emit SYSREQ.C format

		#emit LCTRL 5
		#emit SCTRL 4

		foreach (new i : Player) if (PlayerData[i][pLogged] != 0 && PlayerData[i][pCreated]) {
			SendClientMessage(i, color, string);
		}
		return 1;
	}
	return SendClientMessageToAll(color, str);
}

stock Log_Write(const path[], const str[], {Float,_}:...)
{
	static
	args,
	start,
	end,
	File:file,
	string[1024]
	;
	if ((start = strfind(path, "/")) != -1) {
		strmid(string, path, 0, start + 1);

		if (!fexist(string))
		return printf("** Warning: Directory \"%s\" doesn't exist.", string);
	}
	#emit LOAD.S.pri 8
	#emit STOR.pri args

	file = fopen(path, io_append);

	if (!file)
	return 0;

	if (args > 8)
	{
		#emit ADDR.pri str
		#emit STOR.pri start

		for (end = start + (args - 8); end > start; end -= 4)
		{
			#emit LREF.pri end
			#emit PUSH.pri
		}
		#emit PUSH.S str
		#emit PUSH.C 1024
		#emit PUSH.C string
		#emit PUSH.C args
		#emit SYSREQ.C format

		fwrite(file, string);
		fwrite(file, "\r\n");
		fclose(file);

		#emit LCTRL 5
		#emit SCTRL 4
		#emit RETN
	}
	fwrite(file, str);
	fwrite(file, "\r\n");
	fclose(file);

	return 1;
}

IsValidRoleplayName(const name[]) {
	if (!name[0] || strfind(name, "_") == -1)
	return 0;

	else for (new i = 0, len = strlen(name); i != len; i ++) {
		if ((i == 0) && (name[i] < 'A' || name[i] > 'Z'))
		return 0;

		else if ((i != 0 && i < len  && name[i] == '_') && (name[i + 1] < 'A' || name[i + 1] > 'Z'))
		return 0;

		else if ((name[i] < 'A' || name[i] > 'Z') && (name[i] < 'a' || name[i] > 'z') && name[i] != '_' && name[i] != '.')
		return 0;
	}
	return 1;
}

#define MAX_QUESTIONS_RP    (10)
enum questionData {
	questionName[250],
	questionAnsw1[250],
	questionAnsw2[250],
	questionAnsw3[250],
	questionAnsw,
};
new QuestionData[MAX_PLAYERS][MAX_QUESTIONS_RP][questionData];

new
	questionID[MAX_PLAYERS],
	questionAnswer[MAX_PLAYERS];
	
forward QuestionsRP_Load(playerid);
public QuestionsRP_Load(playerid)
{
	static
	rows,
	fields;

	cache_get_data(rows, fields, g_iHandle);

	for (new i = 0; i < rows; i ++) if (i < MAX_QUESTIONS_RP)
	{
		cache_get_field_content(i, "Question", QuestionData[playerid][i][questionName], g_iHandle, 250);
		cache_get_field_content(i, "Answ1", QuestionData[playerid][i][questionAnsw1], g_iHandle, 250);
		cache_get_field_content(i, "Answ2", QuestionData[playerid][i][questionAnsw2], g_iHandle, 250);
		cache_get_field_content(i, "Answ3", QuestionData[playerid][i][questionAnsw3], g_iHandle, 250);
		QuestionData[playerid][i][questionAnsw] = cache_get_field_int(i, "Correction");
	}
	
	questionID[playerid] = 0;
	questionAnswer[playerid] = 0;
	
	ShowQuestionRP(playerid, questionID[playerid]);
	return 1;
}

stock ShowQuestionRP(playerid, questID)
{
	ClearChat(playerid, 15);
	SendClientMessageEx(playerid, COLOR_CLIENT, "QUESTION %d/%d:", questID+1, MAX_QUESTIONS_RP);
	SendClientMessageEx(playerid, COLOR_CLIENT, "%s", QuestionData[playerid][questID][questionName]);
	new
		title[250],
		questions[250*3];

	format(title, sizeof(title), "%d/%d - %s", questID+1, MAX_QUESTIONS_RP, QuestionData[playerid][questID][questionName]);
	format(questions, sizeof(questions), "%s\n%s\n%s", QuestionData[playerid][questID][questionAnsw1], QuestionData[playerid][questID][questionAnsw2], QuestionData[playerid][questID][questionAnsw3]);
	
	Dialog_Show(playerid, DIALOG_QUESTIONS, DIALOG_STYLE_LIST, title, questions, "Valider", "Annuler");
}

Dialog:DIALOG_QUESTIONS_CANCEL(playerid, response, listitem, inputtext[])
{
	if(response)
	{
	    SendClientMessage(playerid, COLOR_INFO, "Vous avez annulé votre inscription. Vous êtes déconnecté du serveur.");
		KickEx(playerid);
	}
	else
	{
	    ShowQuestionRP(playerid, questionID[playerid]);
	}
	return 1;
}

Dialog:DIALOG_QUESTIONS_RETRY(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		new query[200];
		format(query, sizeof(query), "SELECT * FROM `registerQuestion` ORDER BY rand() LIMIT %d", MAX_QUESTIONS_RP);
		mysql_function_query(g_iHandle, query, true, "QuestionsRP_Load", "d", playerid);
	}
	else
	{
	    SendClientMessage(playerid, COLOR_INFO, "Vous avez annulé votre inscription. Vous êtes déconnecté du serveur.");
		KickEx(playerid);
	}
	return 1;
}

Dialog:DIALOG_QUESTIONS(playerid, response, listitem, inputtext[])
{
	if(!response || listitem >= 3)
	{
	    Dialog_Show(playerid, DIALOG_QUESTIONS_CANCEL, DIALOG_STYLE_MSGBOX, "Annuler votre inscription ?", "Si vous souhaitez être déconnecté du serveur et annulez votre inscription\ncliquez sur le bouton \"Oui\".\nSinon, cliquez sur \"Non\" pour continuer votre inscription.", "Oui", "Non");
		return 1;
	}

	if(listitem == QuestionData[playerid][ questionID[playerid] ][questionAnsw]-1)
	{
		questionAnswer[playerid]++;
	}
		
    if(questionID[playerid] >= MAX_QUESTIONS_RP-1)
    { // Il a terminé son test
        if(questionAnswer[playerid] >= MAX_QUESTIONS_RP-2)
        { // Test réussi
            SendClientMessageEx(playerid, COLOR_INFO, "Félicitation, vous avez réussi votre test avec une note de %d/%d.", questionAnswer[playerid], MAX_QUESTIONS_RP);
            SendClientMessageEx(playerid, COLOR_INFO, "Vous allez maintenant passer à l'inscription.");

            SetTimerEx("Register_Start", 2000, false, "ii", playerid, 3);
        }
        else
        { // Test non réussi
            SendClientMessageEx(playerid, COLOR_INFO, "Désolé, vous n'avez pas réussi votre et avez fait %d fautes sur %d questions.", MAX_QUESTIONS_RP-questionAnswer[playerid], MAX_QUESTIONS_RP);
	    	Dialog_Show(playerid, DIALOG_QUESTIONS_RETRY, DIALOG_STYLE_MSGBOX, "Retenter votre chance ?", "Souhaitez-vous retentez votre chance et repasser le questionnaire avec de nouvelles questions ?\n\nCliquez sur \"Oui\" pour repasser le test.\nSinon cliquez sur \"Non\" pour être déconnecté.", "Oui", "Non");
		}
    }
    else
    { // Test non terminé, on passe à la question suivante
		questionID[playerid]++;
		ShowQuestionRP(playerid, questionID[playerid]);
    }
	return 1;
}

enum registerData {
	rPassword[250],
	rBirthday[100],
	rOrigin[100],
	rAstuces,
	rSex,
	rSkinReal,
	rSkinArray
	
	// TEXTDRAWS::
};
new RegisterData[MAX_PLAYERS][registerData];

#define 	TD_NAME 	(0)
#define 	TD_ORIGINE 	(1)
#define 	TD_AGE 		(2)
#define 	TD_PASSWORD	(3)
#define 	TD_ASTUCES	(4)
#define 	TD_SEX		(5)
#define 	TD_SKIN		(6)
#define 	TD_ALL		(7)

stock ResetRegisterData(playerid)
{
	strins(RegisterData[playerid][rPassword], "", 0);
	strins(RegisterData[playerid][rBirthday], "", 0);
	strins(RegisterData[playerid][rOrigin], "", 0);

	RegisterData[playerid][rAstuces] = 1;
	RegisterData[playerid][rSex] = 1;
	RegisterData[playerid][rSkinReal] = 1;
	RegisterData[playerid][rSkinArray] = 1;
}

stock ShowRegisterTextdraws(playerid)
{
	for(new i=0; i!=30; i++)
	{
		PlayerTextDrawShow(playerid, TD_Register[playerid][i]);
	}
	RefreshRegisterTextdraw(playerid, TD_ALL);
}

stock HideRegisterTextdraws(playerid)
{
	for(new i=0; i!=30; i++)
	{
		PlayerTextDrawHide(playerid, TD_Register[playerid][i]);
	}
}

stock RefreshRegisterTextdraw(playerid, type)
{
	new
	    value[120];
	    
	switch(type)
	{
	    case TD_NAME:
	    { // TEXTDRAW 3
	        format(value, sizeof(value), "%s", ReturnName(playerid));

	        PlayerTextDrawSetString(playerid, TD_Register[playerid][3], value);
	        PlayerTextDrawShow(playerid, TD_Register[playerid][3]);
	    }
	    case TD_ORIGINE:
	    { // TEXTDRAW 15
	        if(isnull(RegisterData[playerid][rOrigin]))
				format(value, sizeof(value), "Origine? ~r~Non renseigné");
			else
	        	format(value, sizeof(value), "Origine? ~b~%s", RegisterData[playerid][rOrigin]);

			convert_encoding(value);
	        PlayerTextDrawSetString(playerid, TD_Register[playerid][15], value);
	        PlayerTextDrawShow(playerid, TD_Register[playerid][15]);
	    }
	    case TD_AGE:
	    { // TEXTDRAW 16
	        if(isnull(RegisterData[playerid][rBirthday]))
				format(value, sizeof(value), "Date de naissance? ~r~N/A");
			else
	        	format(value, sizeof(value), "Date de naissance? ~b~%s", RegisterData[playerid][rBirthday]);

			convert_encoding(value);
	        PlayerTextDrawSetString(playerid, TD_Register[playerid][16], value);
	        PlayerTextDrawShow(playerid, TD_Register[playerid][16]);
	    }
	    case TD_PASSWORD:
	    { // TEXTDRAW 17
	        if(isnull(RegisterData[playerid][rPassword]))
				format(value, sizeof(value), "Mot de passe? ~r~Non renseigné");
			else
				format(value, sizeof(value), "Mot de passe? ~g~Renseigné");

			convert_encoding(value);
	        PlayerTextDrawSetString(playerid, TD_Register[playerid][17], value);
	        PlayerTextDrawShow(playerid, TD_Register[playerid][17]);
	    }
	    case TD_ASTUCES:
	    {// TEXTDRAW 19
	        if(RegisterData[playerid][rAstuces] == 1)
	        	format(value, sizeof(value), "Recevoir des astuces? ~g~Oui");
	        	
	        if(RegisterData[playerid][rAstuces] == 0)
	        	format(value, sizeof(value), "Recevoir des astuces? ~r~Non");
	        	
			convert_encoding(value);
	        PlayerTextDrawSetString(playerid, TD_Register[playerid][19], value);
	        PlayerTextDrawShow(playerid, TD_Register[playerid][19]);
	    }
	    case TD_SEX:
	    {// TEXTDRAW 19
	        if(RegisterData[playerid][rSex] == 1)
	        	format(value, sizeof(value), "Sexe? ~b~Homme");
	        	
	        if(RegisterData[playerid][rSex] == 2)
	        	format(value, sizeof(value), "Sexe? ~b~Femme");

			convert_encoding(value);
	        PlayerTextDrawSetString(playerid, TD_Register[playerid][29], value);
	        PlayerTextDrawShow(playerid, TD_Register[playerid][29]);
	    }
	    case TD_SKIN:
	    { // TEXTDRAW 21
	        PlayerTextDrawSetPreviewModel(playerid, TD_Register[playerid][21], RegisterData[playerid][rSkinReal]);
	        PlayerTextDrawShow(playerid, TD_Register[playerid][21]);
	    }
	    case TD_ALL:
	    {
	        RefreshRegisterTextdraw(playerid, TD_NAME);
	        RefreshRegisterTextdraw(playerid, TD_ORIGINE);
	        RefreshRegisterTextdraw(playerid, TD_AGE);
	        RefreshRegisterTextdraw(playerid, TD_PASSWORD);
	        RefreshRegisterTextdraw(playerid, TD_ASTUCES);
	        RefreshRegisterTextdraw(playerid, TD_SEX);
	        RefreshRegisterTextdraw(playerid, TD_SKIN);
	    }
	}
}


Dialog:REGISTER_SetOrigine(playerid, response, listitem, inputtext[])
{
	if(!response) return 1;

	switch(listitem)
	{
	    case 0:
	    {
	        format(RegisterData[playerid][rOrigin], 100, "Américain");
	        RefreshRegisterTextdraw(playerid, TD_ORIGINE);
		}
	    case 1:
		{
	        format(RegisterData[playerid][rOrigin], 100, "Afro-américain");
	        RefreshRegisterTextdraw(playerid, TD_ORIGINE);
		}
		case 2:
		{
	        format(RegisterData[playerid][rOrigin], 100, "Méxicain");
	        RefreshRegisterTextdraw(playerid, TD_ORIGINE);
		}
		case 3:
		{
	        format(RegisterData[playerid][rOrigin], 100, "Asiatique");
	        RefreshRegisterTextdraw(playerid, TD_ORIGINE);
		}
	}
	return 1;
}

Dialog:REGISTER_SetYearsOld(playerid, response, listitem, inputtext[])
{
	if(!response) return 1;

	new
		iDay,
		iMonth,
		iYear;

	static const
		arrMonthDays[] = {31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};

	if (sscanf(inputtext, "p</>ddd", iDay, iMonth, iYear))
		return Dialog_Show(playerid, REGISTER_SetYearsOld, DIALOG_STYLE_INPUT, "Inscription: Choisissez votre date de naissance", "Votre date de naissance apparaitra sur votre carte d'identité.\n{FF0000}La date de naissance doit être sous la forme JJ/MM/AAAA.\n\n{FFFFFF}Entrez la date de naissance de votre personnage:", "Valider", "Annuler");

	else if (iYear < 1900 || iYear > 2014)
		return Dialog_Show(playerid, REGISTER_SetYearsOld, DIALOG_STYLE_INPUT, "Inscription: Choisissez votre date de naissance", "Votre date de naissance apparaitra sur votre carte d'identité.\n{FF0000}La date de naissance doit être sous la forme JJ/MM/AAAA.\n\n{FFFFFF}Entrez la date de naissance de votre personnage:", "Valider", "Annuler");

	else if (iMonth < 1 || iMonth > 12)
		return Dialog_Show(playerid, REGISTER_SetYearsOld, DIALOG_STYLE_INPUT, "Inscription: Choisissez votre date de naissance", "Votre date de naissance apparaitra sur votre carte d'identité.\n{FF0000}La date de naissance doit être sous la forme JJ/MM/AAAA.\n\n{FFFFFF}Entrez la date de naissance de votre personnage:", "Valider", "Annuler");

	else if (iDay < 1 || iDay > arrMonthDays[iMonth - 1])
		return Dialog_Show(playerid, REGISTER_SetYearsOld, DIALOG_STYLE_INPUT, "Inscription: Choisissez votre date de naissance", "Votre date de naissance apparaitra sur votre carte d'identité.\n{FF0000}La date de naissance doit être sous la forme JJ/MM/AAAA.\n\n{FFFFFF}Entrez la date de naissance de votre personnage:", "Valider", "Annuler");


	format(RegisterData[playerid][rBirthday], 24, inputtext);
	RefreshRegisterTextdraw(playerid, TD_AGE);
	return 1;
}


Dialog:REGISTER_SetPassword(playerid, response, listitem, inputtext[])
{
	if(!response) return 1;

	new
	    value[50];

    if (sscanf(inputtext, "s[50]", value))
        return Dialog_Show(playerid, REGISTER_SetPassword, DIALOG_STYLE_PASSWORD, "Inscription: Choisissez votre mot de passe", "Votre mot de passe vous permet de vous connectez au serveur.\nIl vous sera demandé à chaque connection.\nEn cas de perte vous pourrez facilement le changer sur le forum ou directement en jeu.\nLe mot de passe doit être avoir entre 3 et 40 caractères.\n\n{FF0000}Entrez votre mot de passe:", "Valider", "Annuler");

	if(strlen(value) < 3 || strlen(value) > 40)
        return Dialog_Show(playerid, REGISTER_SetPassword, DIALOG_STYLE_PASSWORD, "Inscription: Choisissez votre mot de passe", "Votre mot de passe vous permet de vous connectez au serveur.\nIl vous sera demandé à chaque connection.\nEn cas de perte vous pourrez facilement le changer sur le forum ou directement en jeu.\n{FF0000}Le mot de passe doit être avoir entre 3 et 40 caractères.\n\n{FFFFFF}Entrez votre mot de passe:", "Valider", "Annuler");

	format(RegisterData[playerid][rPassword], 250, value);
	RefreshRegisterTextdraw(playerid, TD_PASSWORD);
	return 1;
}

Dialog:REGISTER_SetAstuces(playerid, response, listitem, inputtext[])
{
	if(!response) return 1;

	switch(listitem)
	{
		case 0: RegisterData[playerid][rAstuces] = 1;
		case 1: RegisterData[playerid][rAstuces] = 0;
	}
	RefreshRegisterTextdraw(playerid, TD_ASTUCES);
	return 1;
}

Dialog:REGISTER_SetSex(playerid, response, listitem, inputtext[])
{
	if(!response) return 1;

	switch(listitem)
	{
	    case 0:
	    {
			RegisterData[playerid][rSex] = 1;
			RegisterData[playerid][rSkinReal] = 1;
			RegisterData[playerid][rSkinArray] = 1;
			
	        RefreshRegisterTextdraw(playerid, TD_SEX);
	        RefreshRegisterTextdraw(playerid, TD_SKIN);
		}
	    case 1:
		{
			RegisterData[playerid][rSex] = 2;
			RegisterData[playerid][rSkinReal] = 9;
			RegisterData[playerid][rSkinArray] = 1;

	        RefreshRegisterTextdraw(playerid, TD_SEX);
	        RefreshRegisterTextdraw(playerid, TD_SKIN);
		}
	}
	return 1;
}

public OnPlayerClickPlayerTextDraw(playerid, PlayerText:playertextid)
{
    if(playertextid == TD_Register[playerid][15])
    { // TD_ORIGINE / Origine?
        Dialog_Show(playerid, REGISTER_SetOrigine, DIALOG_STYLE_LIST, "Inscription: Choisissez votre origine", "{5e78a3}1:{FFFFFF} Américain\n{5e78a3}2:{FFFFFF} Afro-américain\n{5e78a3}3:{FFFFFF} Méxicain\n{5e78a3}4:{FFFFFF} Asiatique", "Valider", "Annuler");
    }
    if(playertextid == TD_Register[playerid][16])
    { // TD_AGE / Age?
		Dialog_Show(playerid, REGISTER_SetYearsOld, DIALOG_STYLE_INPUT, "Inscription: Choisissez votre date de naissance", "Votre date de naissance apparaitra sur votre carte d'identité.\nLa date de naissance doit être sous la forme JJ/MM/AAAA.\n\nEntrez la date de naissance de votre personnage:", "Valider", "Annuler");
    }
    if(playertextid == TD_Register[playerid][17])
    { // TD_PASSWORD / Mot de passe?
        Dialog_Show(playerid, REGISTER_SetPassword, DIALOG_STYLE_PASSWORD, "Inscription: Choisissez votre mot de passe", "Votre mot de passe vous permet de vous connectez au serveur.\nIl vous sera demandé à chaque connection.\nEn cas de perte vous pourrez facilement le changer sur le forum ou directement en jeu.\nLe mot de passe doit être avoir entre 3 et 40 caractères.\n\nEntrez votre mot de passe:", "Valider", "Annuler");
    }
    if(playertextid == TD_Register[playerid][19])
    { // TD_ASTUCES / Astuces?
        Dialog_Show(playerid, REGISTER_SetAstuces, DIALOG_STYLE_LIST, "Inscription: Voulez-vous recevoir des astuces?", "{5e78a3}1:{FFFFFF} Oui\n{5e78a3}2:{FFFFFF} Non", "Valider", "Annuler");
    }
    if(playertextid == TD_Register[playerid][29])
    { // TD_SEX / Sexe?
        Dialog_Show(playerid, REGISTER_SetSex, DIALOG_STYLE_LIST, "Inscription: Choisissez votre sexe", "{5e78a3}1:{FFFFFF} Homme\n{5e78a3}2:{FFFFFF} Femme", "Valider", "Annuler");
    }
    if(playertextid == TD_Register[playerid][24])
    { // TD_SKIN (left -1) / ModelSKIN
        if (RegisterData[playerid][rSex] == 1)
        {
            if(RegisterData[playerid][rSkinArray] <= 0) RegisterData[playerid][rSkinArray] = 193;

            RegisterData[playerid][rSkinArray]--;
            RegisterData[playerid][rSkinReal] = g_aMaleSkins[ RegisterData[playerid][rSkinArray] ];

			PlayerPlaySound(playerid, 1085, 0.0, 0.0, 0.0);
			RefreshRegisterTextdraw(playerid, TD_SKIN);
        }
        if (RegisterData[playerid][rSex] == 2)
        {
            if(RegisterData[playerid][rSkinArray] <= 0) RegisterData[playerid][rSkinArray] = 81;

            RegisterData[playerid][rSkinArray]--;
            RegisterData[playerid][rSkinReal] = g_aFemaleSkins[ RegisterData[playerid][rSkinArray] ];

			PlayerPlaySound(playerid, 1085, 0.0, 0.0, 0.0);
			RefreshRegisterTextdraw(playerid, TD_SKIN);
        }
    }
    if(playertextid == TD_Register[playerid][25])
    { // TD_SKIN (right +1) / ModelSKIN
        if (RegisterData[playerid][rSex] == 1)
        {
            if(RegisterData[playerid][rSkinArray] >= 193) RegisterData[playerid][rSkinArray] = 0;
            
            RegisterData[playerid][rSkinArray]++;
            RegisterData[playerid][rSkinReal] = g_aMaleSkins[ RegisterData[playerid][rSkinArray] ];

			PlayerPlaySound(playerid, 1085, 0.0, 0.0, 0.0);
			RefreshRegisterTextdraw(playerid, TD_SKIN);
        }
        if (RegisterData[playerid][rSex] == 2)
        {
            if(RegisterData[playerid][rSkinArray] >= 81) RegisterData[playerid][rSkinArray] = 0;

            RegisterData[playerid][rSkinArray]++;
            RegisterData[playerid][rSkinReal] = g_aFemaleSkins[ RegisterData[playerid][rSkinArray] ];

			PlayerPlaySound(playerid, 1085, 0.0, 0.0, 0.0);
			RefreshRegisterTextdraw(playerid, TD_SKIN);
        }
    }
    if(playertextid == TD_Register[playerid][27])
    { // TD_VALIDATION / valid
        if(
			!isnull(RegisterData[playerid][rPassword])
    	  &&
			!isnull(RegisterData[playerid][rBirthday])
		  &&
			!isnull(RegisterData[playerid][rOrigin])
		  )
		{
			SQL_CreateAccount(playerid, RegisterData[playerid][rPassword], RegisterData[playerid][rBirthday], RegisterData[playerid][rOrigin], RegisterData[playerid][rSkinReal], RegisterData[playerid][rSex], RegisterData[playerid][rAstuces]);
            HideRegisterTextdraws(playerid);
            CancelSelectTextDraw(playerid);
		}
    }
    return 1;
}


CreateTextDraws(playerid) {
	// INTRODUCTION
    TDEditor_BACKGROUND[playerid] = CreatePlayerTextDraw(playerid, -252.666656, -94.562965, "_");
    PlayerTextDrawLetterSize(playerid, TDEditor_BACKGROUND[playerid], 0.000000, 81.733322);
    PlayerTextDrawTextSize(playerid, TDEditor_BACKGROUND[playerid], 1114.666015, 0.000000);
    PlayerTextDrawAlignment(playerid, TDEditor_BACKGROUND[playerid], 1);
    PlayerTextDrawUseBox(playerid, TDEditor_BACKGROUND[playerid], 1);
    PlayerTextDrawBoxColor(playerid, TDEditor_BACKGROUND[playerid], 0x000000FF);
    PlayerTextDrawFont(playerid, TDEditor_BACKGROUND[playerid], 0);

    TDEditor_LOGO[playerid][0] = CreatePlayerTextDraw(playerid, 237.666687, 169.548019, "Bienvenue sur..."); //176, 0, 176
    PlayerTextDrawLetterSize(playerid, TDEditor_LOGO[playerid][0], 0.618999, 3.147257);
    PlayerTextDrawAlignment(playerid, TDEditor_LOGO[playerid][0], 1);
    PlayerTextDrawColor(playerid, TDEditor_LOGO[playerid][0], -1342131969);
    PlayerTextDrawSetShadow(playerid, TDEditor_LOGO[playerid][0], 0);
    PlayerTextDrawSetOutline(playerid, TDEditor_LOGO[playerid][0], 0);
    PlayerTextDrawBackgroundColor(playerid, TDEditor_LOGO[playerid][0], 255);
    PlayerTextDrawFont(playerid, TDEditor_LOGO[playerid][0], 2);
    PlayerTextDrawSetProportional(playerid, TDEditor_LOGO[playerid][0], 1);
    PlayerTextDrawSetShadow(playerid, TDEditor_LOGO[playerid][0], 0);

    TDEditor_LOGO[playerid][1] = CreatePlayerTextDraw(playerid, 266.933319, 191.314865, ""); //176, 0, 255
    PlayerTextDrawLetterSize(playerid, TDEditor_LOGO[playerid][1], 0.684333, 2.135107);
    PlayerTextDrawAlignment(playerid, TDEditor_LOGO[playerid][1], 1);
    PlayerTextDrawColor(playerid, TDEditor_LOGO[playerid][1], -1342111745);
    PlayerTextDrawSetShadow(playerid, TDEditor_LOGO[playerid][1], 0);
    PlayerTextDrawSetOutline(playerid, TDEditor_LOGO[playerid][1], 1);
    PlayerTextDrawBackgroundColor(playerid, TDEditor_LOGO[playerid][1], 0);
    PlayerTextDrawFont(playerid, TDEditor_LOGO[playerid][1], 0);
    PlayerTextDrawSetProportional(playerid, TDEditor_LOGO[playerid][1], 1);
    PlayerTextDrawSetShadow(playerid, TDEditor_LOGO[playerid][1], 0);

    TDEditor_LOGO[playerid][2] = CreatePlayerTextDraw(playerid, 380.300201, 207.662963, "LSMemories.net"); //176, 0, 161
    PlayerTextDrawLetterSize(playerid, TDEditor_LOGO[playerid][2], 1.015666, 3.798513);
    PlayerTextDrawAlignment(playerid, TDEditor_LOGO[playerid][2], 2);
    PlayerTextDrawColor(playerid, TDEditor_LOGO[playerid][2], -1342135809);
    PlayerTextDrawSetShadow(playerid, TDEditor_LOGO[playerid][2], 0);
    PlayerTextDrawSetOutline(playerid, TDEditor_LOGO[playerid][2], 0);
    PlayerTextDrawBackgroundColor(playerid, TDEditor_LOGO[playerid][2], 255);
    PlayerTextDrawFont(playerid, TDEditor_LOGO[playerid][2], 3);
    PlayerTextDrawSetProportional(playerid, TDEditor_LOGO[playerid][2], 1);
    PlayerTextDrawSetShadow(playerid, TDEditor_LOGO[playerid][2], 0);

    TDEditor_PINTRO[playerid][0] = CreatePlayerTextDraw(playerid, 610.699829, 323.293853, "21546845K");
    PlayerTextDrawLetterSize(playerid, TDEditor_PINTRO[playerid][0], 0.260333, 1.064888);
    PlayerTextDrawTextSize(playerid, TDEditor_PINTRO[playerid][0], 0.000000, 54.249633);
    PlayerTextDrawAlignment(playerid, TDEditor_PINTRO[playerid][0], 2);
    PlayerTextDrawColor(playerid, TDEditor_PINTRO[playerid][0], -1);
    PlayerTextDrawUseBox(playerid, TDEditor_PINTRO[playerid][0], 1);
    PlayerTextDrawBoxColor(playerid, TDEditor_PINTRO[playerid][0], 1515870975);
    PlayerTextDrawSetShadow(playerid, TDEditor_PINTRO[playerid][0], 0);
    PlayerTextDrawSetOutline(playerid, TDEditor_PINTRO[playerid][0], 0);
    PlayerTextDrawBackgroundColor(playerid, TDEditor_PINTRO[playerid][0], 255);
    PlayerTextDrawFont(playerid, TDEditor_PINTRO[playerid][0], 3);
    PlayerTextDrawSetProportional(playerid, TDEditor_PINTRO[playerid][0], 1);
    PlayerTextDrawSetShadow(playerid, TDEditor_PINTRO[playerid][0], 0);

    TDEditor_PINTRO[playerid][1] = CreatePlayerTextDraw(playerid, 611.033142, 337.527496, "Nine");
    PlayerTextDrawLetterSize(playerid, TDEditor_PINTRO[playerid][1], 0.260333, 1.064888);
    PlayerTextDrawTextSize(playerid, TDEditor_PINTRO[playerid][1], 0.000000, 54.249633);
    PlayerTextDrawAlignment(playerid, TDEditor_PINTRO[playerid][1], 2);
    PlayerTextDrawColor(playerid, TDEditor_PINTRO[playerid][1], -1);
    PlayerTextDrawUseBox(playerid, TDEditor_PINTRO[playerid][1], 1);
    PlayerTextDrawBoxColor(playerid, TDEditor_PINTRO[playerid][1], 1515870975);
    PlayerTextDrawSetShadow(playerid, TDEditor_PINTRO[playerid][1], 0);
    PlayerTextDrawSetOutline(playerid, TDEditor_PINTRO[playerid][1], 0);
    PlayerTextDrawBackgroundColor(playerid, TDEditor_PINTRO[playerid][1], 255);
    PlayerTextDrawFont(playerid, TDEditor_PINTRO[playerid][1], 3);
    PlayerTextDrawSetProportional(playerid, TDEditor_PINTRO[playerid][1], 1);
    PlayerTextDrawSetShadow(playerid, TDEditor_PINTRO[playerid][1], 0);

    TDEditor_PINTRO[playerid][2] = CreatePlayerTextDraw(playerid, 611.033142, 351.761138, "Eleven");
    PlayerTextDrawLetterSize(playerid, TDEditor_PINTRO[playerid][2], 0.260333, 1.064888);
    PlayerTextDrawTextSize(playerid, TDEditor_PINTRO[playerid][2], 0.000000, 54.249633);
    PlayerTextDrawAlignment(playerid, TDEditor_PINTRO[playerid][2], 2);
    PlayerTextDrawColor(playerid, TDEditor_PINTRO[playerid][2], -1);
    PlayerTextDrawUseBox(playerid, TDEditor_PINTRO[playerid][2], 1);
    PlayerTextDrawBoxColor(playerid, TDEditor_PINTRO[playerid][2], 1515870975);
    PlayerTextDrawSetShadow(playerid, TDEditor_PINTRO[playerid][2], 0);
    PlayerTextDrawSetOutline(playerid, TDEditor_PINTRO[playerid][2], 0);
    PlayerTextDrawBackgroundColor(playerid, TDEditor_PINTRO[playerid][2], 255);
    PlayerTextDrawFont(playerid, TDEditor_PINTRO[playerid][2], 3);
    PlayerTextDrawSetProportional(playerid, TDEditor_PINTRO[playerid][2], 1);
    PlayerTextDrawSetShadow(playerid, TDEditor_PINTRO[playerid][2], 0);

    TDEditor_PINTRO[playerid][3] = CreatePlayerTextDraw(playerid, 611.033142, 365.994781, "Masculino");
    PlayerTextDrawLetterSize(playerid, TDEditor_PINTRO[playerid][3], 0.260333, 1.064888);
    PlayerTextDrawTextSize(playerid, TDEditor_PINTRO[playerid][3], 0.000000, 54.249633);
    PlayerTextDrawAlignment(playerid, TDEditor_PINTRO[playerid][3], 2);
    PlayerTextDrawColor(playerid, TDEditor_PINTRO[playerid][3], -1);
    PlayerTextDrawUseBox(playerid, TDEditor_PINTRO[playerid][3], 1);
    PlayerTextDrawBoxColor(playerid, TDEditor_PINTRO[playerid][3], 1515870975);
    PlayerTextDrawSetShadow(playerid, TDEditor_PINTRO[playerid][3], 0);
    PlayerTextDrawSetOutline(playerid, TDEditor_PINTRO[playerid][3], 0);
    PlayerTextDrawBackgroundColor(playerid, TDEditor_PINTRO[playerid][3], 255);
    PlayerTextDrawFont(playerid, TDEditor_PINTRO[playerid][3], 3);
    PlayerTextDrawSetProportional(playerid, TDEditor_PINTRO[playerid][3], 1);
    PlayerTextDrawSetShadow(playerid, TDEditor_PINTRO[playerid][3], 0);

	// GYM SYSTEME
	GYM_TD[playerid][0] = CreatePlayerTextDraw(playerid, 491.333251, 353.851959, "box");
	PlayerTextDrawLetterSize(playerid, GYM_TD[playerid][0], 0.000000, 5.233333);
	PlayerTextDrawTextSize(playerid, GYM_TD[playerid][0], 629.000000, 0.000000);
	PlayerTextDrawAlignment(playerid, GYM_TD[playerid][0], 1);
	PlayerTextDrawColor(playerid, GYM_TD[playerid][0], -1);
	PlayerTextDrawUseBox(playerid, GYM_TD[playerid][0], 1);
	PlayerTextDrawBoxColor(playerid, GYM_TD[playerid][0], 100);
	PlayerTextDrawSetShadow(playerid, GYM_TD[playerid][0], 0);
	PlayerTextDrawSetOutline(playerid, GYM_TD[playerid][0], 0);
	PlayerTextDrawBackgroundColor(playerid, GYM_TD[playerid][0], 255);
	PlayerTextDrawFont(playerid, GYM_TD[playerid][0], 1);
	PlayerTextDrawSetProportional(playerid, GYM_TD[playerid][0], 1);
	PlayerTextDrawSetShadow(playerid, GYM_TD[playerid][0], 0);

	GYM_TD[playerid][1] = CreatePlayerTextDraw(playerid, 494.666656, 355.925964, "PUISSANCE");
	PlayerTextDrawLetterSize(playerid, GYM_TD[playerid][1], 0.400000, 1.600000);
	PlayerTextDrawAlignment(playerid, GYM_TD[playerid][1], 1);
	PlayerTextDrawColor(playerid, GYM_TD[playerid][1], -1061109505);
	PlayerTextDrawSetShadow(playerid, GYM_TD[playerid][1], 0);
	PlayerTextDrawSetOutline(playerid, GYM_TD[playerid][1], 0);
	PlayerTextDrawBackgroundColor(playerid, GYM_TD[playerid][1], 255);
	PlayerTextDrawFont(playerid, GYM_TD[playerid][1], 1);
	PlayerTextDrawSetProportional(playerid, GYM_TD[playerid][1], 1);
	PlayerTextDrawSetShadow(playerid, GYM_TD[playerid][1], 0);

	GYM_TD[playerid][2] = CreatePlayerTextDraw(playerid, 597.646789, 355.925964, "50");
	PlayerTextDrawLetterSize(playerid, GYM_TD[playerid][2], 0.400000, 1.600000);
	PlayerTextDrawAlignment(playerid, GYM_TD[playerid][2], 1);
	PlayerTextDrawColor(playerid, GYM_TD[playerid][2], -1378294017);
	PlayerTextDrawSetShadow(playerid, GYM_TD[playerid][2], 0);
	PlayerTextDrawSetOutline(playerid, GYM_TD[playerid][2], 0);
	PlayerTextDrawBackgroundColor(playerid, GYM_TD[playerid][2], 255);
	PlayerTextDrawFont(playerid, GYM_TD[playerid][2], 1);
	PlayerTextDrawSetProportional(playerid, GYM_TD[playerid][2], 1);
	PlayerTextDrawSetShadow(playerid, GYM_TD[playerid][2], 0);


	// DASHCAM
    Dashcam_PTD[playerid][0] = CreatePlayerTextDraw(playerid, 257.647399, 173.083343, "_"); // temps
    PlayerTextDrawLetterSize(playerid, Dashcam_PTD[playerid][0], 0.400000, 1.600000);
    PlayerTextDrawAlignment(playerid, Dashcam_PTD[playerid][0], 1);
    PlayerTextDrawColor(playerid, Dashcam_PTD[playerid][0], -1);
    PlayerTextDrawSetShadow(playerid, Dashcam_PTD[playerid][0], 0);
    PlayerTextDrawSetOutline(playerid, Dashcam_PTD[playerid][0], 0);
    PlayerTextDrawBackgroundColor(playerid, Dashcam_PTD[playerid][0], 255);
    PlayerTextDrawFont(playerid, Dashcam_PTD[playerid][0], 1);
    PlayerTextDrawSetProportional(playerid, Dashcam_PTD[playerid][0], 1);
    PlayerTextDrawSetShadow(playerid, Dashcam_PTD[playerid][0], 0);

    Dashcam_PTD[playerid][1] = CreatePlayerTextDraw(playerid, 337.789245, 163.166717, "_"); // Unité
    PlayerTextDrawLetterSize(playerid, Dashcam_PTD[playerid][1], 0.400000, 1.600000);
    PlayerTextDrawAlignment(playerid, Dashcam_PTD[playerid][1], 1);
    PlayerTextDrawColor(playerid, Dashcam_PTD[playerid][1], -1);
    PlayerTextDrawSetShadow(playerid, Dashcam_PTD[playerid][1], 0);
    PlayerTextDrawSetOutline(playerid, Dashcam_PTD[playerid][1], 0);
    PlayerTextDrawBackgroundColor(playerid, Dashcam_PTD[playerid][1], 255);
    PlayerTextDrawFont(playerid, Dashcam_PTD[playerid][1], 1);
    PlayerTextDrawSetProportional(playerid, Dashcam_PTD[playerid][1], 1);
    PlayerTextDrawSetShadow(playerid, Dashcam_PTD[playerid][1], 0);
    
    
    // AUTRES
	TD_Register[playerid][0] = CreatePlayerTextDraw(playerid, 65.333320, 24.903703, "box");
	PlayerTextDrawLetterSize(playerid, TD_Register[playerid][0], 0.000000, 5.733334);
	PlayerTextDrawTextSize(playerid, TD_Register[playerid][0], 570.000000, 0.000000);
	PlayerTextDrawAlignment(playerid, TD_Register[playerid][0], 1);
	PlayerTextDrawColor(playerid, TD_Register[playerid][0], -1);
	PlayerTextDrawUseBox(playerid, TD_Register[playerid][0], 1);
	PlayerTextDrawBoxColor(playerid, TD_Register[playerid][0], 745110834);
	PlayerTextDrawSetShadow(playerid, TD_Register[playerid][0], 0);
	PlayerTextDrawSetOutline(playerid, TD_Register[playerid][0], 0);
	PlayerTextDrawBackgroundColor(playerid, TD_Register[playerid][0], 255);
	PlayerTextDrawFont(playerid, TD_Register[playerid][0], 1);
	PlayerTextDrawSetProportional(playerid, TD_Register[playerid][0], 1);
	PlayerTextDrawSetShadow(playerid, TD_Register[playerid][0], 0);

	TD_Register[playerid][1] = CreatePlayerTextDraw(playerid, 68.666656, 26.977794, "Bienvenu(e) sur");
	PlayerTextDrawLetterSize(playerid, TD_Register[playerid][1], 0.400000, 1.600000);
	PlayerTextDrawAlignment(playerid, TD_Register[playerid][1], 1);
	PlayerTextDrawColor(playerid, TD_Register[playerid][1], -1);
	PlayerTextDrawSetShadow(playerid, TD_Register[playerid][1], 0);
	PlayerTextDrawSetOutline(playerid, TD_Register[playerid][1], 0);
	PlayerTextDrawBackgroundColor(playerid, TD_Register[playerid][1], 255);
	PlayerTextDrawFont(playerid, TD_Register[playerid][1], 1);
	PlayerTextDrawSetProportional(playerid, TD_Register[playerid][1], 1);
	PlayerTextDrawSetShadow(playerid, TD_Register[playerid][1], 0);

	TD_Register[playerid][2] = CreatePlayerTextDraw(playerid, 171.468399, 26.977794, "LSMemories.net");
	PlayerTextDrawLetterSize(playerid, TD_Register[playerid][2], 0.400000, 1.600000);
	PlayerTextDrawAlignment(playerid, TD_Register[playerid][2], 1);
	PlayerTextDrawColor(playerid, TD_Register[playerid][2], -1788248577);
	PlayerTextDrawSetShadow(playerid, TD_Register[playerid][2], 0);
	PlayerTextDrawSetOutline(playerid, TD_Register[playerid][2], 0);
	PlayerTextDrawBackgroundColor(playerid, TD_Register[playerid][2], 255);
	PlayerTextDrawFont(playerid, TD_Register[playerid][2], 1);
	PlayerTextDrawSetProportional(playerid, TD_Register[playerid][2], 1);
	PlayerTextDrawSetShadow(playerid, TD_Register[playerid][2], 0);

	TD_Register[playerid][3] = CreatePlayerTextDraw(playerid, 469.000000, 35.688919, "PETER SANDERS");
	PlayerTextDrawLetterSize(playerid, TD_Register[playerid][3], 0.585666, 3.109925);
	PlayerTextDrawAlignment(playerid, TD_Register[playerid][3], 2);
	PlayerTextDrawColor(playerid, TD_Register[playerid][3], -1);
	PlayerTextDrawSetShadow(playerid, TD_Register[playerid][3], 0);
	PlayerTextDrawSetOutline(playerid, TD_Register[playerid][3], 0);
	PlayerTextDrawBackgroundColor(playerid, TD_Register[playerid][3], 255);
	PlayerTextDrawFont(playerid, TD_Register[playerid][3], 1);
	PlayerTextDrawSetProportional(playerid, TD_Register[playerid][3], 1);
	PlayerTextDrawSetShadow(playerid, TD_Register[playerid][3], 0);

	TD_Register[playerid][4] = CreatePlayerTextDraw(playerid, 369.666717, 24.903705, "box");
	PlayerTextDrawLetterSize(playerid, TD_Register[playerid][4], 0.000000, 5.733335);
	PlayerTextDrawTextSize(playerid, TD_Register[playerid][4], 366.000000, 0.000000);
	PlayerTextDrawAlignment(playerid, TD_Register[playerid][4], 1);
	PlayerTextDrawColor(playerid, TD_Register[playerid][4], -1);
	PlayerTextDrawUseBox(playerid, TD_Register[playerid][4], 1);
	PlayerTextDrawBoxColor(playerid, TD_Register[playerid][4], -1);
	PlayerTextDrawSetShadow(playerid, TD_Register[playerid][4], 0);
	PlayerTextDrawSetOutline(playerid, TD_Register[playerid][4], 0);
	PlayerTextDrawBackgroundColor(playerid, TD_Register[playerid][4], 255);
	PlayerTextDrawFont(playerid, TD_Register[playerid][4], 1);
	PlayerTextDrawSetProportional(playerid, TD_Register[playerid][4], 1);
	PlayerTextDrawSetShadow(playerid, TD_Register[playerid][4], 0);

	TD_Register[playerid][5] = CreatePlayerTextDraw(playerid, 69.000015, 51.037044, "Entrez les informations relatives a votre compte et procedez~n~a la creation de votre personnage");
	PlayerTextDrawLetterSize(playerid, TD_Register[playerid][5], 0.252332, 0.973628);
	PlayerTextDrawAlignment(playerid, TD_Register[playerid][5], 1);
	PlayerTextDrawColor(playerid, TD_Register[playerid][5], -1);
	PlayerTextDrawSetShadow(playerid, TD_Register[playerid][5], 0);
	PlayerTextDrawSetOutline(playerid, TD_Register[playerid][5], 0);
	PlayerTextDrawBackgroundColor(playerid, TD_Register[playerid][5], 255);
	PlayerTextDrawFont(playerid, TD_Register[playerid][5], 1);
	PlayerTextDrawSetProportional(playerid, TD_Register[playerid][5], 1);
	PlayerTextDrawSetShadow(playerid, TD_Register[playerid][5], 0);

	TD_Register[playerid][6] = CreatePlayerTextDraw(playerid, 65.666656, 85.051834, "box");
	PlayerTextDrawLetterSize(playerid, TD_Register[playerid][6], 0.000000, 2.366669);
	PlayerTextDrawTextSize(playerid, TD_Register[playerid][6], 232.000000, 0.000000);
	PlayerTextDrawAlignment(playerid, TD_Register[playerid][6], 1);
	PlayerTextDrawColor(playerid, TD_Register[playerid][6], -1);
	PlayerTextDrawUseBox(playerid, TD_Register[playerid][6], 1);
	PlayerTextDrawBoxColor(playerid, TD_Register[playerid][6], 745110814);
	PlayerTextDrawSetShadow(playerid, TD_Register[playerid][6], 0);
	PlayerTextDrawSetOutline(playerid, TD_Register[playerid][6], 0);
	PlayerTextDrawBackgroundColor(playerid, TD_Register[playerid][6], 255);
	PlayerTextDrawFont(playerid, TD_Register[playerid][6], 1);
	PlayerTextDrawSetProportional(playerid, TD_Register[playerid][6], 1);
	PlayerTextDrawSetShadow(playerid, TD_Register[playerid][6], 0);

	TD_Register[playerid][7] = CreatePlayerTextDraw(playerid, 238.200485, 85.066658, "box");
	PlayerTextDrawLetterSize(playerid, TD_Register[playerid][7], 0.000000, 2.366669);
	PlayerTextDrawTextSize(playerid, TD_Register[playerid][7], 401.200500, 0.000000);
	PlayerTextDrawAlignment(playerid, TD_Register[playerid][7], 1);
	PlayerTextDrawColor(playerid, TD_Register[playerid][7], -1);
	PlayerTextDrawUseBox(playerid, TD_Register[playerid][7], 1);
	PlayerTextDrawBoxColor(playerid, TD_Register[playerid][7], 745110814);
	PlayerTextDrawSetShadow(playerid, TD_Register[playerid][7], 0);
	PlayerTextDrawSetOutline(playerid, TD_Register[playerid][7], 0);
	PlayerTextDrawBackgroundColor(playerid, TD_Register[playerid][7], 255);
	PlayerTextDrawFont(playerid, TD_Register[playerid][7], 1);
	PlayerTextDrawSetProportional(playerid, TD_Register[playerid][7], 1);
	PlayerTextDrawSetShadow(playerid, TD_Register[playerid][7], 0);

	TD_Register[playerid][8] = CreatePlayerTextDraw(playerid, 407.534210, 85.151817, "box");
	PlayerTextDrawLetterSize(playerid, TD_Register[playerid][8], 0.000000, 2.366669);
	PlayerTextDrawTextSize(playerid, TD_Register[playerid][8], 569.998535, 0.000000);
	PlayerTextDrawAlignment(playerid, TD_Register[playerid][8], 1);
	PlayerTextDrawColor(playerid, TD_Register[playerid][8], -1);
	PlayerTextDrawUseBox(playerid, TD_Register[playerid][8], 1);
	PlayerTextDrawBoxColor(playerid, TD_Register[playerid][8], 745110814);
	PlayerTextDrawSetShadow(playerid, TD_Register[playerid][8], 0);
	PlayerTextDrawSetOutline(playerid, TD_Register[playerid][8], 0);
	PlayerTextDrawBackgroundColor(playerid, TD_Register[playerid][8], 255);
	PlayerTextDrawFont(playerid, TD_Register[playerid][8], 1);
	PlayerTextDrawSetProportional(playerid, TD_Register[playerid][8], 1);
	PlayerTextDrawSetShadow(playerid, TD_Register[playerid][8], 0);

	TD_Register[playerid][9] = CreatePlayerTextDraw(playerid, 147.666625, 87.540718, "VOTRE PERSONNAGE");
	PlayerTextDrawLetterSize(playerid, TD_Register[playerid][9], 0.400000, 1.600000);
	PlayerTextDrawAlignment(playerid, TD_Register[playerid][9], 2);
	PlayerTextDrawColor(playerid, TD_Register[playerid][9], -1);
	PlayerTextDrawSetShadow(playerid, TD_Register[playerid][9], 0);
	PlayerTextDrawSetOutline(playerid, TD_Register[playerid][9], 0);
	PlayerTextDrawBackgroundColor(playerid, TD_Register[playerid][9], 255);
	PlayerTextDrawFont(playerid, TD_Register[playerid][9], 1);
	PlayerTextDrawSetProportional(playerid, TD_Register[playerid][9], 1);
	PlayerTextDrawSetShadow(playerid, TD_Register[playerid][9], 0);

	TD_Register[playerid][10] = CreatePlayerTextDraw(playerid, 319.177093, 87.540718, "VOTRE COMPTE");
	PlayerTextDrawLetterSize(playerid, TD_Register[playerid][10], 0.400000, 1.600000);
	PlayerTextDrawAlignment(playerid, TD_Register[playerid][10], 2);
	PlayerTextDrawColor(playerid, TD_Register[playerid][10], -1);
	PlayerTextDrawSetShadow(playerid, TD_Register[playerid][10], 0);
	PlayerTextDrawSetOutline(playerid, TD_Register[playerid][10], 0);
	PlayerTextDrawBackgroundColor(playerid, TD_Register[playerid][10], 255);
	PlayerTextDrawFont(playerid, TD_Register[playerid][10], 1);
	PlayerTextDrawSetProportional(playerid, TD_Register[playerid][10], 1);
	PlayerTextDrawSetShadow(playerid, TD_Register[playerid][10], 0);

	TD_Register[playerid][11] = CreatePlayerTextDraw(playerid, 488.887451, 87.540718, "INFORMATIONS ADDITIONNELLES");
	PlayerTextDrawLetterSize(playerid, TD_Register[playerid][11], 0.284999, 1.566813);
	PlayerTextDrawAlignment(playerid, TD_Register[playerid][11], 2);
	PlayerTextDrawColor(playerid, TD_Register[playerid][11], -1);
	PlayerTextDrawSetShadow(playerid, TD_Register[playerid][11], 0);
	PlayerTextDrawSetOutline(playerid, TD_Register[playerid][11], 0);
	PlayerTextDrawBackgroundColor(playerid, TD_Register[playerid][11], 255);
	PlayerTextDrawFont(playerid, TD_Register[playerid][11], 1);
	PlayerTextDrawSetProportional(playerid, TD_Register[playerid][11], 1);
	PlayerTextDrawSetShadow(playerid, TD_Register[playerid][11], 0);

	TD_Register[playerid][12] = CreatePlayerTextDraw(playerid, 65.634246, 114.188812, "box");
	PlayerTextDrawLetterSize(playerid, TD_Register[playerid][12], 0.000000, 1.533336);
	PlayerTextDrawTextSize(playerid, TD_Register[playerid][12], 232.000000, 0.000000);
	PlayerTextDrawAlignment(playerid, TD_Register[playerid][12], 1);
	PlayerTextDrawColor(playerid, TD_Register[playerid][12], -1);
	PlayerTextDrawUseBox(playerid, TD_Register[playerid][12], 1);
	PlayerTextDrawBoxColor(playerid, TD_Register[playerid][12], 40);
	PlayerTextDrawSetShadow(playerid, TD_Register[playerid][12], 0);
	PlayerTextDrawSetOutline(playerid, TD_Register[playerid][12], 0);
	PlayerTextDrawBackgroundColor(playerid, TD_Register[playerid][12], 255);
	PlayerTextDrawFont(playerid, TD_Register[playerid][12], 1);
	PlayerTextDrawSetProportional(playerid, TD_Register[playerid][12], 1);
	PlayerTextDrawSetShadow(playerid, TD_Register[playerid][12], 0);

	TD_Register[playerid][13] = CreatePlayerTextDraw(playerid, 238.167633, 113.955429, "box");
	PlayerTextDrawLetterSize(playerid, TD_Register[playerid][13], 0.000000, 1.566669);
	PlayerTextDrawTextSize(playerid, TD_Register[playerid][13], 401.000000, 0.000000);
	PlayerTextDrawAlignment(playerid, TD_Register[playerid][13], 1);
	PlayerTextDrawColor(playerid, TD_Register[playerid][13], -1);
	PlayerTextDrawUseBox(playerid, TD_Register[playerid][13], 1);
	PlayerTextDrawBoxColor(playerid, TD_Register[playerid][13], 40);
	PlayerTextDrawSetShadow(playerid, TD_Register[playerid][13], 0);
	PlayerTextDrawSetOutline(playerid, TD_Register[playerid][13], 0);
	PlayerTextDrawBackgroundColor(playerid, TD_Register[playerid][13], 255);
	PlayerTextDrawFont(playerid, TD_Register[playerid][13], 1);
	PlayerTextDrawSetProportional(playerid, TD_Register[playerid][13], 1);
	PlayerTextDrawSetShadow(playerid, TD_Register[playerid][13], 0);

	TD_Register[playerid][14] = CreatePlayerTextDraw(playerid, 65.634246, 133.188919, "box");
	PlayerTextDrawLetterSize(playerid, TD_Register[playerid][14], 0.000000, 1.533336);
	PlayerTextDrawTextSize(playerid, TD_Register[playerid][14], 232.000000, 0.000000); //
	PlayerTextDrawAlignment(playerid, TD_Register[playerid][14], 1);
	PlayerTextDrawColor(playerid, TD_Register[playerid][14], -1);
	PlayerTextDrawUseBox(playerid, TD_Register[playerid][14], 1);
	PlayerTextDrawBoxColor(playerid, TD_Register[playerid][14], 40);
	PlayerTextDrawSetShadow(playerid, TD_Register[playerid][14], 0);
	PlayerTextDrawSetOutline(playerid, TD_Register[playerid][14], 0);
	PlayerTextDrawBackgroundColor(playerid, TD_Register[playerid][14], 255);
	PlayerTextDrawFont(playerid, TD_Register[playerid][14], 1);
	PlayerTextDrawSetProportional(playerid, TD_Register[playerid][14], 1);
	PlayerTextDrawSetShadow(playerid, TD_Register[playerid][14], 0);

	TD_Register[playerid][15] = CreatePlayerTextDraw(playerid, 68.999977, 134.018707, "Origine? ~b~Afro-americaine");
	PlayerTextDrawLetterSize(playerid, TD_Register[playerid][15], 0.216998, 1.122962);
	PlayerTextDrawTextSize(playerid, TD_Register[playerid][15], 220, 5.1); //
	PlayerTextDrawAlignment(playerid, TD_Register[playerid][15], 1);
	PlayerTextDrawColor(playerid, TD_Register[playerid][15], -1);
	PlayerTextDrawSetShadow(playerid, TD_Register[playerid][15], 0);
	PlayerTextDrawSetOutline(playerid, TD_Register[playerid][15], 0);
	PlayerTextDrawBackgroundColor(playerid, TD_Register[playerid][15], 255);
	PlayerTextDrawFont(playerid, TD_Register[playerid][15], 2);
	PlayerTextDrawSetProportional(playerid, TD_Register[playerid][15], 1);
	PlayerTextDrawSetShadow(playerid, TD_Register[playerid][15], 0);
	PlayerTextDrawSetSelectable(playerid, TD_Register[playerid][15], true);

	TD_Register[playerid][16] = CreatePlayerTextDraw(playerid, 68.999977, 115.618530, "Date de naissance? ~b~XX/XX/XXXX");
	PlayerTextDrawLetterSize(playerid, TD_Register[playerid][16], 0.216998, 1.122962);
	PlayerTextDrawTextSize(playerid, TD_Register[playerid][16], 250, 5.1); //
	PlayerTextDrawAlignment(playerid, TD_Register[playerid][16], 1);
	PlayerTextDrawColor(playerid, TD_Register[playerid][16], -1);
	PlayerTextDrawSetShadow(playerid, TD_Register[playerid][16], 0);
	PlayerTextDrawSetOutline(playerid, TD_Register[playerid][16], 0);
	PlayerTextDrawBackgroundColor(playerid, TD_Register[playerid][16], 255);
	PlayerTextDrawFont(playerid, TD_Register[playerid][16], 2);
	PlayerTextDrawSetProportional(playerid, TD_Register[playerid][16], 1);
	PlayerTextDrawSetShadow(playerid, TD_Register[playerid][16], 0);
	PlayerTextDrawSetSelectable(playerid, TD_Register[playerid][16], true);

	TD_Register[playerid][17] = CreatePlayerTextDraw(playerid, 241.666580, 115.618507, "Mot de passe? ~r~Non renseigne");
	PlayerTextDrawLetterSize(playerid, TD_Register[playerid][17], 0.216998, 1.122962);
	PlayerTextDrawTextSize(playerid, TD_Register[playerid][17], 400, 5.1); //
	PlayerTextDrawAlignment(playerid, TD_Register[playerid][17], 1);
	PlayerTextDrawColor(playerid, TD_Register[playerid][17], -1);
	PlayerTextDrawSetShadow(playerid, TD_Register[playerid][17], 0);
	PlayerTextDrawSetOutline(playerid, TD_Register[playerid][17], 0);
	PlayerTextDrawBackgroundColor(playerid, TD_Register[playerid][17], 255);
	PlayerTextDrawFont(playerid, TD_Register[playerid][17], 2);
	PlayerTextDrawSetProportional(playerid, TD_Register[playerid][17], 1);
	PlayerTextDrawSetShadow(playerid, TD_Register[playerid][17], 0);
	PlayerTextDrawSetSelectable(playerid, TD_Register[playerid][17], true);

	TD_Register[playerid][18] = CreatePlayerTextDraw(playerid, 237.934310, 133.355545, "box");
	PlayerTextDrawLetterSize(playerid, TD_Register[playerid][18], 0.000000, 1.533336);
	PlayerTextDrawTextSize(playerid, TD_Register[playerid][18], 401.000000, 0.000000);
	PlayerTextDrawAlignment(playerid, TD_Register[playerid][18], 1);
	PlayerTextDrawColor(playerid, TD_Register[playerid][18], -1);
	PlayerTextDrawUseBox(playerid, TD_Register[playerid][18], 1);
	PlayerTextDrawBoxColor(playerid, TD_Register[playerid][18], 40);
	PlayerTextDrawSetShadow(playerid, TD_Register[playerid][18], 0);
	PlayerTextDrawSetOutline(playerid, TD_Register[playerid][18], 0);
	PlayerTextDrawBackgroundColor(playerid, TD_Register[playerid][18], 255);
	PlayerTextDrawFont(playerid, TD_Register[playerid][18], 1);
	PlayerTextDrawSetProportional(playerid, TD_Register[playerid][18], 1);
	PlayerTextDrawSetShadow(playerid, TD_Register[playerid][18], 0);

	TD_Register[playerid][19] = CreatePlayerTextDraw(playerid, 241.666580, 134.018692, "Recevoir des astuces?~g~ Oui");
	PlayerTextDrawLetterSize(playerid, TD_Register[playerid][19], 0.216998, 1.122962);
	PlayerTextDrawTextSize(playerid, TD_Register[playerid][19], 400, 5.1); //
	PlayerTextDrawAlignment(playerid, TD_Register[playerid][19], 1);
	PlayerTextDrawColor(playerid, TD_Register[playerid][19], -1);
	PlayerTextDrawSetShadow(playerid, TD_Register[playerid][19], 0);
	PlayerTextDrawSetOutline(playerid, TD_Register[playerid][19], 0);
	PlayerTextDrawBackgroundColor(playerid, TD_Register[playerid][19], 255);
	PlayerTextDrawFont(playerid, TD_Register[playerid][19], 2);
	PlayerTextDrawSetProportional(playerid, TD_Register[playerid][19], 1);
	PlayerTextDrawSetShadow(playerid, TD_Register[playerid][19], 0);
	PlayerTextDrawSetSelectable(playerid, TD_Register[playerid][19], true);

	TD_Register[playerid][20] = CreatePlayerTextDraw(playerid, 407.634277, 113.955429, "box");
	PlayerTextDrawLetterSize(playerid, TD_Register[playerid][20], 0.000000, 17.800014);
	PlayerTextDrawTextSize(playerid, TD_Register[playerid][20], 571.000000, 0.000000);
	PlayerTextDrawAlignment(playerid, TD_Register[playerid][20], 1);
	PlayerTextDrawColor(playerid, TD_Register[playerid][20], -1);
	PlayerTextDrawUseBox(playerid, TD_Register[playerid][20], 1);
	PlayerTextDrawBoxColor(playerid, TD_Register[playerid][20], 40);
	PlayerTextDrawSetShadow(playerid, TD_Register[playerid][20], 0);
	PlayerTextDrawSetOutline(playerid, TD_Register[playerid][20], 0);
	PlayerTextDrawBackgroundColor(playerid, TD_Register[playerid][20], 255);
	PlayerTextDrawFont(playerid, TD_Register[playerid][20], 1);
	PlayerTextDrawSetProportional(playerid, TD_Register[playerid][20], 1);
	PlayerTextDrawSetShadow(playerid, TD_Register[playerid][20], 0);

	TD_Register[playerid][21] = CreatePlayerTextDraw(playerid, 391.666656, 93.607414, "");
	PlayerTextDrawLetterSize(playerid, TD_Register[playerid][21], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, TD_Register[playerid][21], 191.000000, 184.000000);
	PlayerTextDrawAlignment(playerid, TD_Register[playerid][21], 1);
	PlayerTextDrawColor(playerid, TD_Register[playerid][21], -1);
	PlayerTextDrawSetShadow(playerid, TD_Register[playerid][21], 0);
	PlayerTextDrawSetOutline(playerid, TD_Register[playerid][21], 0);
	PlayerTextDrawBackgroundColor(playerid, TD_Register[playerid][21], 0);
	PlayerTextDrawFont(playerid, TD_Register[playerid][21], 5);
	PlayerTextDrawSetProportional(playerid, TD_Register[playerid][21], 0);
	PlayerTextDrawSetShadow(playerid, TD_Register[playerid][21], 0);
	PlayerTextDrawSetPreviewModel(playerid, TD_Register[playerid][21], 0);
	PlayerTextDrawSetPreviewRot(playerid, TD_Register[playerid][21], 0.000000, 0.000000, 0.000000, 1.000000);

	TD_Register[playerid][22] = CreatePlayerTextDraw(playerid, 407.634155, 279.618530, "box");
	PlayerTextDrawLetterSize(playerid, TD_Register[playerid][22], 0.000000, 1.445005);
	PlayerTextDrawTextSize(playerid, TD_Register[playerid][22], 571.489501, 0.000000);
	PlayerTextDrawAlignment(playerid, TD_Register[playerid][22], 1);
	PlayerTextDrawColor(playerid, TD_Register[playerid][22], -1);
	PlayerTextDrawUseBox(playerid, TD_Register[playerid][22], 1);
	PlayerTextDrawBoxColor(playerid, TD_Register[playerid][22], 40);
	PlayerTextDrawSetShadow(playerid, TD_Register[playerid][22], 0);
	PlayerTextDrawSetOutline(playerid, TD_Register[playerid][22], 0);
	PlayerTextDrawBackgroundColor(playerid, TD_Register[playerid][22], 255);
	PlayerTextDrawFont(playerid, TD_Register[playerid][22], 1);
	PlayerTextDrawSetProportional(playerid, TD_Register[playerid][22], 1);
	PlayerTextDrawSetShadow(playerid, TD_Register[playerid][22], 0);

	TD_Register[playerid][23] = CreatePlayerTextDraw(playerid, 409.866729, 281.329742, "Le skin est changeable a tout moment en jeu");
	PlayerTextDrawLetterSize(playerid, TD_Register[playerid][23], 0.156665, 0.911408);
	PlayerTextDrawAlignment(playerid, TD_Register[playerid][23], 1);
	PlayerTextDrawColor(playerid, TD_Register[playerid][23], -65281);
	PlayerTextDrawSetShadow(playerid, TD_Register[playerid][23], 0);
	PlayerTextDrawSetOutline(playerid, TD_Register[playerid][23], 0);
	PlayerTextDrawBackgroundColor(playerid, TD_Register[playerid][23], 255);
	PlayerTextDrawFont(playerid, TD_Register[playerid][23], 2);
	PlayerTextDrawSetProportional(playerid, TD_Register[playerid][23], 1);
	PlayerTextDrawSetShadow(playerid, TD_Register[playerid][23], 0);

	TD_Register[playerid][24] = CreatePlayerTextDraw(playerid, 409.666656, 176.155517, "LD_BEAT:left");
	PlayerTextDrawLetterSize(playerid, TD_Register[playerid][24], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, TD_Register[playerid][24], 32.000000, 33.000000);
	PlayerTextDrawAlignment(playerid, TD_Register[playerid][24], 1);
	PlayerTextDrawColor(playerid, TD_Register[playerid][24], -1);
	PlayerTextDrawSetShadow(playerid, TD_Register[playerid][24], 0);
	PlayerTextDrawSetOutline(playerid, TD_Register[playerid][24], 0);
	PlayerTextDrawBackgroundColor(playerid, TD_Register[playerid][24], 255);
	PlayerTextDrawFont(playerid, TD_Register[playerid][24], 4);
	PlayerTextDrawSetProportional(playerid, TD_Register[playerid][24], 0);
	PlayerTextDrawSetShadow(playerid, TD_Register[playerid][24], 0);
	PlayerTextDrawSetSelectable(playerid, TD_Register[playerid][24], true);

	TD_Register[playerid][25] = CreatePlayerTextDraw(playerid, 537.866577, 176.155517, "LD_BEAT:right");
	PlayerTextDrawLetterSize(playerid, TD_Register[playerid][25], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, TD_Register[playerid][25], 32.000000, 33.000000);
	PlayerTextDrawAlignment(playerid, TD_Register[playerid][25], 1);
	PlayerTextDrawColor(playerid, TD_Register[playerid][25], -1);
	PlayerTextDrawSetShadow(playerid, TD_Register[playerid][25], 0);
	PlayerTextDrawSetOutline(playerid, TD_Register[playerid][25], 0);
	PlayerTextDrawBackgroundColor(playerid, TD_Register[playerid][25], 255);
	PlayerTextDrawFont(playerid, TD_Register[playerid][25], 4);
	PlayerTextDrawSetProportional(playerid, TD_Register[playerid][25], 0);
	PlayerTextDrawSetShadow(playerid, TD_Register[playerid][25], 0);
	PlayerTextDrawSetSelectable(playerid, TD_Register[playerid][25], true);

	TD_Register[playerid][26] = CreatePlayerTextDraw(playerid, 203.666717, 329.792663, "box");
	PlayerTextDrawLetterSize(playerid, TD_Register[playerid][26], 0.000000, 3.500000);
	PlayerTextDrawTextSize(playerid, TD_Register[playerid][26], 419.000000, 0.000000);
	PlayerTextDrawAlignment(playerid, TD_Register[playerid][26], 1);
	PlayerTextDrawColor(playerid, TD_Register[playerid][26], -1);
	PlayerTextDrawUseBox(playerid, TD_Register[playerid][26], 1);
	PlayerTextDrawBoxColor(playerid, TD_Register[playerid][26], 745110834);
	PlayerTextDrawSetShadow(playerid, TD_Register[playerid][26], 0);
	PlayerTextDrawSetOutline(playerid, TD_Register[playerid][26], 0);
	PlayerTextDrawBackgroundColor(playerid, TD_Register[playerid][26], 255);
	PlayerTextDrawFont(playerid, TD_Register[playerid][26], 1);
	PlayerTextDrawSetProportional(playerid, TD_Register[playerid][26], 1);
	PlayerTextDrawSetShadow(playerid, TD_Register[playerid][26], 0);

	TD_Register[playerid][27] = CreatePlayerTextDraw(playerid, 309.666595, 330.207305, "VALIDER");
	PlayerTextDrawLetterSize(playerid, TD_Register[playerid][27], 0.957334, 3.217778);
	PlayerTextDrawTextSize(playerid, TD_Register[playerid][27], 20.000000, 150.000000); //
	PlayerTextDrawAlignment(playerid, TD_Register[playerid][27], 2);
	PlayerTextDrawColor(playerid, TD_Register[playerid][27], -1);
	PlayerTextDrawSetShadow(playerid, TD_Register[playerid][27], 0);
	PlayerTextDrawSetOutline(playerid, TD_Register[playerid][27], 0);
	PlayerTextDrawBackgroundColor(playerid, TD_Register[playerid][27], 255);
	PlayerTextDrawFont(playerid, TD_Register[playerid][27], 1);
	PlayerTextDrawSetProportional(playerid, TD_Register[playerid][27], 1);
	PlayerTextDrawSetShadow(playerid, TD_Register[playerid][27], 0);
	PlayerTextDrawSetSelectable(playerid, TD_Register[playerid][27], true);

	TD_Register[playerid][28] = CreatePlayerTextDraw(playerid, 65.634246, 152.190078, "box");
	PlayerTextDrawLetterSize(playerid, TD_Register[playerid][28], 0.000000, 1.533336);
	PlayerTextDrawTextSize(playerid, TD_Register[playerid][28], 232.000000, 0.000000);
	PlayerTextDrawAlignment(playerid, TD_Register[playerid][28], 1);
	PlayerTextDrawColor(playerid, TD_Register[playerid][28], -1);
	PlayerTextDrawUseBox(playerid, TD_Register[playerid][28], 1);
	PlayerTextDrawBoxColor(playerid, TD_Register[playerid][28], 40);
	PlayerTextDrawSetShadow(playerid, TD_Register[playerid][28], 0);
	PlayerTextDrawSetOutline(playerid, TD_Register[playerid][28], 0);
	PlayerTextDrawBackgroundColor(playerid, TD_Register[playerid][28], 255);
	PlayerTextDrawFont(playerid, TD_Register[playerid][28], 1);
	PlayerTextDrawSetProportional(playerid, TD_Register[playerid][28], 1);
	PlayerTextDrawSetShadow(playerid, TD_Register[playerid][28], 0);

	TD_Register[playerid][29] = CreatePlayerTextDraw(playerid, 68.899978, 153.019866, "SEXE? ~b~Homme");
	PlayerTextDrawLetterSize(playerid, TD_Register[playerid][29], 0.216997, 1.122961);
	PlayerTextDrawTextSize(playerid, TD_Register[playerid][29], 220, 5.1); //
	PlayerTextDrawAlignment(playerid, TD_Register[playerid][29], 1);
	PlayerTextDrawColor(playerid, TD_Register[playerid][29], -1);
	PlayerTextDrawSetShadow(playerid, TD_Register[playerid][29], 0);
	PlayerTextDrawSetOutline(playerid, TD_Register[playerid][29], 0);
	PlayerTextDrawBackgroundColor(playerid, TD_Register[playerid][29], 255);
	PlayerTextDrawFont(playerid, TD_Register[playerid][29], 2);
	PlayerTextDrawSetProportional(playerid, TD_Register[playerid][29], 1);
	PlayerTextDrawSetShadow(playerid, TD_Register[playerid][29], 0);
	PlayerTextDrawSetSelectable(playerid, TD_Register[playerid][29], true);


	PlayerData[playerid][pTextdraws][0] = CreatePlayerTextDraw(playerid, 239.000000, 156.000000, "_");
	PlayerTextDrawBackgroundColor(playerid, PlayerData[playerid][pTextdraws][0], 255);
	PlayerTextDrawFont(playerid, PlayerData[playerid][pTextdraws][0], 1);
	PlayerTextDrawLetterSize(playerid, PlayerData[playerid][pTextdraws][0], 0.519999, 9.100000); //11
	PlayerTextDrawColor(playerid, PlayerData[playerid][pTextdraws][0], -1);
	PlayerTextDrawSetOutline(playerid, PlayerData[playerid][pTextdraws][0], 0);
	PlayerTextDrawSetProportional(playerid, PlayerData[playerid][pTextdraws][0], 1);
	PlayerTextDrawSetShadow(playerid, PlayerData[playerid][pTextdraws][0], 1);
	PlayerTextDrawUseBox(playerid, PlayerData[playerid][pTextdraws][0], 1);
	PlayerTextDrawBoxColor(playerid, PlayerData[playerid][pTextdraws][0], 102);
	PlayerTextDrawTextSize(playerid, PlayerData[playerid][pTextdraws][0], 416.000000, 40.000000);
	PlayerTextDrawSetSelectable(playerid, PlayerData[playerid][pTextdraws][0], 0);

	PlayerData[playerid][pTextdraws][1] = CreatePlayerTextDraw(playerid, 326.000000, 158.000000, "Mes personnages");
	PlayerTextDrawAlignment(playerid, PlayerData[playerid][pTextdraws][1], 2);
	PlayerTextDrawBackgroundColor(playerid, PlayerData[playerid][pTextdraws][1], 255);
	PlayerTextDrawFont(playerid, PlayerData[playerid][pTextdraws][1], 2);
	PlayerTextDrawLetterSize(playerid, PlayerData[playerid][pTextdraws][1], 0.330000, 1.199998);
	PlayerTextDrawColor(playerid, PlayerData[playerid][pTextdraws][1], -1);
	PlayerTextDrawSetOutline(playerid, PlayerData[playerid][pTextdraws][1], 1);
	PlayerTextDrawSetProportional(playerid, PlayerData[playerid][pTextdraws][1], 1);
	PlayerTextDrawSetSelectable(playerid, PlayerData[playerid][pTextdraws][1], 0);

	PlayerData[playerid][pTextdraws][2] = CreatePlayerTextDraw(playerid, 263.000000, 181.000000, "_");
	PlayerTextDrawBackgroundColor(playerid, PlayerData[playerid][pTextdraws][2], 255);
	PlayerTextDrawFont(playerid, PlayerData[playerid][pTextdraws][2], 1);
	PlayerTextDrawLetterSize(playerid, PlayerData[playerid][pTextdraws][2], 0.489998, 1.299998);
	PlayerTextDrawColor(playerid, PlayerData[playerid][pTextdraws][2], -1);
	PlayerTextDrawSetOutline(playerid, PlayerData[playerid][pTextdraws][2], 0);
	PlayerTextDrawSetProportional(playerid, PlayerData[playerid][pTextdraws][2], 1);
	PlayerTextDrawSetShadow(playerid, PlayerData[playerid][pTextdraws][2], 1);
	PlayerTextDrawUseBox(playerid, PlayerData[playerid][pTextdraws][2], 1);
	PlayerTextDrawBoxColor(playerid, PlayerData[playerid][pTextdraws][2], -205);
	PlayerTextDrawTextSize(playerid, PlayerData[playerid][pTextdraws][2], 393.000000, 12.000000);
	PlayerTextDrawSetSelectable(playerid, PlayerData[playerid][pTextdraws][2], 1);

	PlayerData[playerid][pTextdraws][3] = CreatePlayerTextDraw(playerid, 263.000000, 204.000000, "_");
	PlayerTextDrawBackgroundColor(playerid, PlayerData[playerid][pTextdraws][3], 255);
	PlayerTextDrawFont(playerid, PlayerData[playerid][pTextdraws][3], 1);
	PlayerTextDrawLetterSize(playerid, PlayerData[playerid][pTextdraws][3], 0.490000, 1.299998);
	PlayerTextDrawColor(playerid, PlayerData[playerid][pTextdraws][3], -1);
	PlayerTextDrawSetOutline(playerid, PlayerData[playerid][pTextdraws][3], 0);
	PlayerTextDrawSetProportional(playerid, PlayerData[playerid][pTextdraws][3], 1);
	PlayerTextDrawSetShadow(playerid, PlayerData[playerid][pTextdraws][3], 1);
	PlayerTextDrawUseBox(playerid, PlayerData[playerid][pTextdraws][3], 1);
	PlayerTextDrawBoxColor(playerid, PlayerData[playerid][pTextdraws][3], -205);
	PlayerTextDrawTextSize(playerid, PlayerData[playerid][pTextdraws][3], 393.000000, 12.000000);
	PlayerTextDrawSetSelectable(playerid, PlayerData[playerid][pTextdraws][3], 1);

	PlayerData[playerid][pTextdraws][4] = CreatePlayerTextDraw(playerid, 263.000000, 227.000000, "_");
	PlayerTextDrawBackgroundColor(playerid, PlayerData[playerid][pTextdraws][4], 255);
	PlayerTextDrawFont(playerid, PlayerData[playerid][pTextdraws][4], 1);
	PlayerTextDrawLetterSize(playerid, PlayerData[playerid][pTextdraws][4], 0.490000, 1.299996);
	PlayerTextDrawColor(playerid, PlayerData[playerid][pTextdraws][4], -1);
	PlayerTextDrawSetOutline(playerid, PlayerData[playerid][pTextdraws][4], 0);
	PlayerTextDrawSetProportional(playerid, PlayerData[playerid][pTextdraws][4], 1);
	PlayerTextDrawSetShadow(playerid, PlayerData[playerid][pTextdraws][4], 1);
	PlayerTextDrawUseBox(playerid, PlayerData[playerid][pTextdraws][4], 1);
	PlayerTextDrawBoxColor(playerid, PlayerData[playerid][pTextdraws][4], -205);
	PlayerTextDrawTextSize(playerid, PlayerData[playerid][pTextdraws][4], 393.000000, 12.000000);
	PlayerTextDrawSetSelectable(playerid, PlayerData[playerid][pTextdraws][4], 1);

	PlayerData[playerid][pTextdraws][5] = CreatePlayerTextDraw(playerid, 324.000000, 182.000000, "Aucun personnage");
	PlayerTextDrawAlignment(playerid, PlayerData[playerid][pTextdraws][5], 2);
	PlayerTextDrawBackgroundColor(playerid, PlayerData[playerid][pTextdraws][5], 255);
	PlayerTextDrawFont(playerid, PlayerData[playerid][pTextdraws][5], 1);
	PlayerTextDrawLetterSize(playerid, PlayerData[playerid][pTextdraws][5], 0.309998, 0.999998);
	PlayerTextDrawColor(playerid, PlayerData[playerid][pTextdraws][5], -1);
	PlayerTextDrawSetOutline(playerid, PlayerData[playerid][pTextdraws][5], 1);
	PlayerTextDrawSetProportional(playerid, PlayerData[playerid][pTextdraws][5], 1);
	PlayerTextDrawSetSelectable(playerid, PlayerData[playerid][pTextdraws][5], 0);

	PlayerData[playerid][pTextdraws][6] = CreatePlayerTextDraw(playerid, 324.000000, 205.000000, "~g~DISPONIBLE");
	PlayerTextDrawAlignment(playerid, PlayerData[playerid][pTextdraws][6], 2);
	PlayerTextDrawBackgroundColor(playerid, PlayerData[playerid][pTextdraws][6], 255);
	PlayerTextDrawFont(playerid, PlayerData[playerid][pTextdraws][6], 1);
	PlayerTextDrawLetterSize(playerid, PlayerData[playerid][pTextdraws][6], 0.309998, 0.999998);
	PlayerTextDrawColor(playerid, PlayerData[playerid][pTextdraws][6], 0xFF0000FF);
	PlayerTextDrawSetOutline(playerid, PlayerData[playerid][pTextdraws][6], 1);
	PlayerTextDrawSetProportional(playerid, PlayerData[playerid][pTextdraws][6], 1);
	PlayerTextDrawSetSelectable(playerid, PlayerData[playerid][pTextdraws][6], 0);

	PlayerData[playerid][pTextdraws][7] = CreatePlayerTextDraw(playerid, 324.000000, 228.000000, "~g~DISPONIBLE");
	PlayerTextDrawAlignment(playerid, PlayerData[playerid][pTextdraws][7], 2);
	PlayerTextDrawBackgroundColor(playerid, PlayerData[playerid][pTextdraws][7], 255);
	PlayerTextDrawFont(playerid, PlayerData[playerid][pTextdraws][7], 1);
	PlayerTextDrawLetterSize(playerid, PlayerData[playerid][pTextdraws][7], 0.309998, 0.999998);
	PlayerTextDrawColor(playerid, PlayerData[playerid][pTextdraws][7], 0xFF0000FF);
	PlayerTextDrawSetOutline(playerid, PlayerData[playerid][pTextdraws][7], 1);
	PlayerTextDrawSetProportional(playerid, PlayerData[playerid][pTextdraws][7], 1);
	PlayerTextDrawSetSelectable(playerid, PlayerData[playerid][pTextdraws][7], 0);

	PlayerData[playerid][pTextdraws][8] = CreatePlayerTextDraw(playerid, 0.000000, 0.000000, "_");
	PlayerTextDrawBackgroundColor(playerid, PlayerData[playerid][pTextdraws][8], 255);
	PlayerTextDrawFont(playerid, PlayerData[playerid][pTextdraws][8], 1);
	PlayerTextDrawLetterSize(playerid, PlayerData[playerid][pTextdraws][8], 0.000000, 480.000000);
	PlayerTextDrawColor(playerid, PlayerData[playerid][pTextdraws][8], -1);
	PlayerTextDrawSetOutline(playerid, PlayerData[playerid][pTextdraws][8], 0);
	PlayerTextDrawSetProportional(playerid, PlayerData[playerid][pTextdraws][8], 1);
	PlayerTextDrawSetShadow(playerid, PlayerData[playerid][pTextdraws][8], 1);
	PlayerTextDrawUseBox(playerid, PlayerData[playerid][pTextdraws][8], 1);
	PlayerTextDrawBoxColor(playerid, PlayerData[playerid][pTextdraws][8], 1482184789);
	PlayerTextDrawTextSize(playerid, PlayerData[playerid][pTextdraws][8], 640.000000, 42.000000);
	PlayerTextDrawSetSelectable(playerid, PlayerData[playerid][pTextdraws][8], 0);

	PlayerData[playerid][pTextdraws][9] = CreatePlayerTextDraw(playerid, 320.000000, 194.000000, "Delete Character");
	PlayerTextDrawAlignment(playerid, PlayerData[playerid][pTextdraws][9], 2);
	PlayerTextDrawBackgroundColor(playerid, PlayerData[playerid][pTextdraws][9], 255);
	PlayerTextDrawFont(playerid, PlayerData[playerid][pTextdraws][9], 1);
	PlayerTextDrawLetterSize(playerid, PlayerData[playerid][pTextdraws][9], 0.350000, 0.999999);
	PlayerTextDrawColor(playerid, PlayerData[playerid][pTextdraws][9], -1);
	PlayerTextDrawSetOutline(playerid, PlayerData[playerid][pTextdraws][9], 0);
	PlayerTextDrawSetProportional(playerid, PlayerData[playerid][pTextdraws][9], 1);
	PlayerTextDrawSetShadow(playerid, PlayerData[playerid][pTextdraws][9], 1);
	PlayerTextDrawSetSelectable(playerid, PlayerData[playerid][pTextdraws][9], 0);

	PlayerData[playerid][pTextdraws][10] = CreatePlayerTextDraw(playerid, 320.000000, 225.000000, "Go Back");
	PlayerTextDrawAlignment(playerid, PlayerData[playerid][pTextdraws][10], 2);
	PlayerTextDrawBackgroundColor(playerid, PlayerData[playerid][pTextdraws][10], 255);
	PlayerTextDrawFont(playerid, PlayerData[playerid][pTextdraws][10], 1);
	PlayerTextDrawLetterSize(playerid, PlayerData[playerid][pTextdraws][10], 0.350000, 0.999999);
	PlayerTextDrawColor(playerid, PlayerData[playerid][pTextdraws][10], -1);
	PlayerTextDrawSetOutline(playerid, PlayerData[playerid][pTextdraws][10], 0);
	PlayerTextDrawSetProportional(playerid, PlayerData[playerid][pTextdraws][10], 1);
	PlayerTextDrawSetShadow(playerid, PlayerData[playerid][pTextdraws][10], 1);
	PlayerTextDrawSetSelectable(playerid, PlayerData[playerid][pTextdraws][10], 0);

	PlayerData[playerid][pTextdraws][11] = CreatePlayerTextDraw(playerid, 432.000000, 140.000000, "_");
	PlayerTextDrawBackgroundColor(playerid, PlayerData[playerid][pTextdraws][11], 255);
	PlayerTextDrawFont(playerid, PlayerData[playerid][pTextdraws][11], 1);
	PlayerTextDrawLetterSize(playerid, PlayerData[playerid][pTextdraws][11], 0.800000, 8.299997);
	PlayerTextDrawColor(playerid, PlayerData[playerid][pTextdraws][11], -1);
	PlayerTextDrawSetOutline(playerid, PlayerData[playerid][pTextdraws][11], 0);
	PlayerTextDrawSetProportional(playerid, PlayerData[playerid][pTextdraws][11], 1);
	PlayerTextDrawSetShadow(playerid, PlayerData[playerid][pTextdraws][11], 1);
	PlayerTextDrawUseBox(playerid, PlayerData[playerid][pTextdraws][11], 1);
	PlayerTextDrawBoxColor(playerid, PlayerData[playerid][pTextdraws][11], 136);
	PlayerTextDrawTextSize(playerid, PlayerData[playerid][pTextdraws][11], 199.000000, 64.000000);
	PlayerTextDrawSetSelectable(playerid, PlayerData[playerid][pTextdraws][11], 0);

	PlayerData[playerid][pTextdraws][12] = CreatePlayerTextDraw(playerid, 235.000000, 140.000000, "PASSEPORT NATIONAL");
	PlayerTextDrawBackgroundColor(playerid, PlayerData[playerid][pTextdraws][12], 255);
	PlayerTextDrawFont(playerid, PlayerData[playerid][pTextdraws][12], 1);
	PlayerTextDrawLetterSize(playerid, PlayerData[playerid][pTextdraws][12], 0.409999, 1.499999);
	PlayerTextDrawColor(playerid, PlayerData[playerid][pTextdraws][12], -1);
	PlayerTextDrawSetOutline(playerid, PlayerData[playerid][pTextdraws][12], 1);
	PlayerTextDrawSetProportional(playerid, PlayerData[playerid][pTextdraws][12], 1);
	PlayerTextDrawSetSelectable(playerid, PlayerData[playerid][pTextdraws][12], 0);

	PlayerData[playerid][pTextdraws][13] = CreatePlayerTextDraw(playerid, 209.000000, 159.000000, "_");
	PlayerTextDrawBackgroundColor(playerid, PlayerData[playerid][pTextdraws][13], 255);
	PlayerTextDrawFont(playerid, PlayerData[playerid][pTextdraws][13], 5);
	PlayerTextDrawLetterSize(playerid, PlayerData[playerid][pTextdraws][13], 0.240000, -0.299999);
	PlayerTextDrawColor(playerid, PlayerData[playerid][pTextdraws][13], -1);
	PlayerTextDrawSetOutline(playerid, PlayerData[playerid][pTextdraws][13], 0);
	PlayerTextDrawSetProportional(playerid, PlayerData[playerid][pTextdraws][13], 1);
	PlayerTextDrawSetShadow(playerid, PlayerData[playerid][pTextdraws][13], 1);
	PlayerTextDrawUseBox(playerid, PlayerData[playerid][pTextdraws][13], 1);
	PlayerTextDrawBoxColor(playerid, PlayerData[playerid][pTextdraws][13], 0);
	PlayerTextDrawTextSize(playerid, PlayerData[playerid][pTextdraws][13], 52.000000, 51.000000);
	PlayerTextDrawSetPreviewModel(playerid, PlayerData[playerid][pTextdraws][13], 98);

	PlayerData[playerid][pTextdraws][14] = CreatePlayerTextDraw(playerid, 271.000000, 159.000000, "~r~Nom:~w~ Nom du personnage");
	PlayerTextDrawBackgroundColor(playerid, PlayerData[playerid][pTextdraws][14], 255);
	PlayerTextDrawFont(playerid, PlayerData[playerid][pTextdraws][14], 1);
	PlayerTextDrawLetterSize(playerid, PlayerData[playerid][pTextdraws][14], 0.270000, 1.000000);
	PlayerTextDrawColor(playerid, PlayerData[playerid][pTextdraws][14], -1);
	PlayerTextDrawSetOutline(playerid, PlayerData[playerid][pTextdraws][14], 1);
	PlayerTextDrawSetProportional(playerid, PlayerData[playerid][pTextdraws][14], 1);
	PlayerTextDrawSetSelectable(playerid, PlayerData[playerid][pTextdraws][14], 0);

	PlayerData[playerid][pTextdraws][15] = CreatePlayerTextDraw(playerid, 271.000000, 179.000000, "~r~Date de naissance:~w~ Indiquer.");
	PlayerTextDrawBackgroundColor(playerid, PlayerData[playerid][pTextdraws][15], 255);
	PlayerTextDrawFont(playerid, PlayerData[playerid][pTextdraws][15], 1);
	PlayerTextDrawLetterSize(playerid, PlayerData[playerid][pTextdraws][15], 0.240000, 1.000000);
	PlayerTextDrawColor(playerid, PlayerData[playerid][pTextdraws][15], -1);
	PlayerTextDrawSetOutline(playerid, PlayerData[playerid][pTextdraws][15], 1);
	PlayerTextDrawSetProportional(playerid, PlayerData[playerid][pTextdraws][15], 1);
	PlayerTextDrawSetSelectable(playerid, PlayerData[playerid][pTextdraws][15], 0);

	PlayerData[playerid][pTextdraws][16] = CreatePlayerTextDraw(playerid, 271.000000, 169.000000, "~r~Sexe:~w~ Masculin");
	PlayerTextDrawBackgroundColor(playerid, PlayerData[playerid][pTextdraws][16], 255);
	PlayerTextDrawFont(playerid, PlayerData[playerid][pTextdraws][16], 1);
	PlayerTextDrawLetterSize(playerid, PlayerData[playerid][pTextdraws][16], 0.240000, 1.000000);
	PlayerTextDrawColor(playerid, PlayerData[playerid][pTextdraws][16], -1);
	PlayerTextDrawSetOutline(playerid, PlayerData[playerid][pTextdraws][16], 1);
	PlayerTextDrawSetProportional(playerid, PlayerData[playerid][pTextdraws][16], 1);
	PlayerTextDrawSetSelectable(playerid, PlayerData[playerid][pTextdraws][16], 0);

	PlayerData[playerid][pTextdraws][17] = CreatePlayerTextDraw(playerid, 271.000000, 189.000000, "~r~Origine:~w~ Indiquer.");
	PlayerTextDrawBackgroundColor(playerid, PlayerData[playerid][pTextdraws][17], 255);
	PlayerTextDrawFont(playerid, PlayerData[playerid][pTextdraws][17], 1);
	PlayerTextDrawLetterSize(playerid, PlayerData[playerid][pTextdraws][17], 0.240000, 1.000000);
	PlayerTextDrawColor(playerid, PlayerData[playerid][pTextdraws][17], -1);
	PlayerTextDrawSetOutline(playerid, PlayerData[playerid][pTextdraws][17], 1);
	PlayerTextDrawSetProportional(playerid, PlayerData[playerid][pTextdraws][17], 1);
	PlayerTextDrawSetSelectable(playerid, PlayerData[playerid][pTextdraws][17], 0);

	PlayerData[playerid][pTextdraws][18] = CreatePlayerTextDraw(playerid, 368.000000, 202.000000, "Continuer");
	PlayerTextDrawBackgroundColor(playerid, PlayerData[playerid][pTextdraws][18], 255);
	PlayerTextDrawFont(playerid, PlayerData[playerid][pTextdraws][18], 1);
	PlayerTextDrawLetterSize(playerid, PlayerData[playerid][pTextdraws][18], 0.380000, 1.200000);
	PlayerTextDrawColor(playerid, PlayerData[playerid][pTextdraws][18], -1);
	PlayerTextDrawSetOutline(playerid, PlayerData[playerid][pTextdraws][18], 1);
	PlayerTextDrawSetProportional(playerid, PlayerData[playerid][pTextdraws][18], 1);
	PlayerTextDrawSetSelectable(playerid, PlayerData[playerid][pTextdraws][18], 0);

	PlayerData[playerid][pTextdraws][19] = CreatePlayerTextDraw(playerid, 272.000000, 171.000000, "_");
	PlayerTextDrawBackgroundColor(playerid, PlayerData[playerid][pTextdraws][19], 255);
	PlayerTextDrawFont(playerid, PlayerData[playerid][pTextdraws][19], 1);
	PlayerTextDrawLetterSize(playerid, PlayerData[playerid][pTextdraws][19], 0.290000, 0.599999);
	PlayerTextDrawColor(playerid, PlayerData[playerid][pTextdraws][19], -1);
	PlayerTextDrawSetOutline(playerid, PlayerData[playerid][pTextdraws][19], 0);
	PlayerTextDrawSetProportional(playerid, PlayerData[playerid][pTextdraws][19], 1);
	PlayerTextDrawSetShadow(playerid, PlayerData[playerid][pTextdraws][19], 1);
	PlayerTextDrawUseBox(playerid, PlayerData[playerid][pTextdraws][19], 1);
	PlayerTextDrawBoxColor(playerid, PlayerData[playerid][pTextdraws][19], 0);
	PlayerTextDrawTextSize(playerid, PlayerData[playerid][pTextdraws][19], 369.000000, 28.000000);
	PlayerTextDrawSetSelectable(playerid, PlayerData[playerid][pTextdraws][19], 1);

	PlayerData[playerid][pTextdraws][20] = CreatePlayerTextDraw(playerid, 272.000000, 182.000000, "_");
	PlayerTextDrawBackgroundColor(playerid, PlayerData[playerid][pTextdraws][20], 255);
	PlayerTextDrawFont(playerid, PlayerData[playerid][pTextdraws][20], 1);
	PlayerTextDrawLetterSize(playerid, PlayerData[playerid][pTextdraws][20], 0.290000, 0.599999);
	PlayerTextDrawColor(playerid, PlayerData[playerid][pTextdraws][20], -1);
	PlayerTextDrawSetOutline(playerid, PlayerData[playerid][pTextdraws][20], 0);
	PlayerTextDrawSetProportional(playerid, PlayerData[playerid][pTextdraws][20], 1);
	PlayerTextDrawSetShadow(playerid, PlayerData[playerid][pTextdraws][20], 1);
	PlayerTextDrawUseBox(playerid, PlayerData[playerid][pTextdraws][20], 1);
	PlayerTextDrawBoxColor(playerid, PlayerData[playerid][pTextdraws][20], 0);
	PlayerTextDrawTextSize(playerid, PlayerData[playerid][pTextdraws][20], 369.000000, 28.000000);
	PlayerTextDrawSetSelectable(playerid, PlayerData[playerid][pTextdraws][20], 1);

	PlayerData[playerid][pTextdraws][21] = CreatePlayerTextDraw(playerid, 272.000000, 192.000000, "_");
	PlayerTextDrawBackgroundColor(playerid, PlayerData[playerid][pTextdraws][21], 255);
	PlayerTextDrawFont(playerid, PlayerData[playerid][pTextdraws][21], 1);
	PlayerTextDrawLetterSize(playerid, PlayerData[playerid][pTextdraws][21], 0.290000, 0.599999);
	PlayerTextDrawColor(playerid, PlayerData[playerid][pTextdraws][21], -1);
	PlayerTextDrawSetOutline(playerid, PlayerData[playerid][pTextdraws][21], 0);
	PlayerTextDrawSetProportional(playerid, PlayerData[playerid][pTextdraws][21], 1);
	PlayerTextDrawSetShadow(playerid, PlayerData[playerid][pTextdraws][21], 1);
	PlayerTextDrawUseBox(playerid, PlayerData[playerid][pTextdraws][21], 1);
	PlayerTextDrawBoxColor(playerid, PlayerData[playerid][pTextdraws][21], 0);
	PlayerTextDrawTextSize(playerid, PlayerData[playerid][pTextdraws][21], 369.000000, 28.000000);
	PlayerTextDrawSetSelectable(playerid, PlayerData[playerid][pTextdraws][21], 1);

	PlayerData[playerid][pTextdraws][22] = CreatePlayerTextDraw(playerid, 367.000000, 205.000000, "_");
	PlayerTextDrawBackgroundColor(playerid, PlayerData[playerid][pTextdraws][22], 255);
	PlayerTextDrawFont(playerid, PlayerData[playerid][pTextdraws][22], 1);
	PlayerTextDrawLetterSize(playerid, PlayerData[playerid][pTextdraws][22], 0.289999, 0.699999);
	PlayerTextDrawColor(playerid, PlayerData[playerid][pTextdraws][22], -1);
	PlayerTextDrawSetOutline(playerid, PlayerData[playerid][pTextdraws][22], 0);
	PlayerTextDrawSetProportional(playerid, PlayerData[playerid][pTextdraws][22], 1);
	PlayerTextDrawSetShadow(playerid, PlayerData[playerid][pTextdraws][22], 1);
	PlayerTextDrawUseBox(playerid, PlayerData[playerid][pTextdraws][22], 1);
	PlayerTextDrawBoxColor(playerid, PlayerData[playerid][pTextdraws][22], 0);
	PlayerTextDrawTextSize(playerid, PlayerData[playerid][pTextdraws][22], 424.000000, 15.000000);
	PlayerTextDrawSetSelectable(playerid, PlayerData[playerid][pTextdraws][22], 1);

	PlayerData[playerid][pTextdraws][23] = CreatePlayerTextDraw(playerid, 433.000000, 150.000000, "_");
	PlayerTextDrawBackgroundColor(playerid, PlayerData[playerid][pTextdraws][23], 255);
	PlayerTextDrawFont(playerid, PlayerData[playerid][pTextdraws][23], 1);
	PlayerTextDrawLetterSize(playerid, PlayerData[playerid][pTextdraws][23], 0.800000, 1.000000);
	PlayerTextDrawColor(playerid, PlayerData[playerid][pTextdraws][23], -1);
	PlayerTextDrawSetOutline(playerid, PlayerData[playerid][pTextdraws][23], 0);
	PlayerTextDrawSetProportional(playerid, PlayerData[playerid][pTextdraws][23], 1);
	PlayerTextDrawSetShadow(playerid, PlayerData[playerid][pTextdraws][23], 1);
	PlayerTextDrawUseBox(playerid, PlayerData[playerid][pTextdraws][23], 1);
	PlayerTextDrawBoxColor(playerid, PlayerData[playerid][pTextdraws][23], 136);
	PlayerTextDrawTextSize(playerid, PlayerData[playerid][pTextdraws][23], 211.000000, 0.000000);
	PlayerTextDrawSetSelectable(playerid, PlayerData[playerid][pTextdraws][23], 0);

	PlayerData[playerid][pTextdraws][24] = CreatePlayerTextDraw(playerid, 246.000000, 149.000000, "Personnalisation personnage");
	PlayerTextDrawBackgroundColor(playerid, PlayerData[playerid][pTextdraws][24], 255);
	PlayerTextDrawFont(playerid, PlayerData[playerid][pTextdraws][24], 1);
	PlayerTextDrawLetterSize(playerid, PlayerData[playerid][pTextdraws][24], 0.370000, 1.000000);
	PlayerTextDrawColor(playerid, PlayerData[playerid][pTextdraws][24], -1);
	PlayerTextDrawSetOutline(playerid, PlayerData[playerid][pTextdraws][24], 1);
	PlayerTextDrawSetProportional(playerid, PlayerData[playerid][pTextdraws][24], 1);
	PlayerTextDrawSetSelectable(playerid, PlayerData[playerid][pTextdraws][24], 0);

	PlayerData[playerid][pTextdraws][25] = CreatePlayerTextDraw(playerid, 433.000000, 162.000000, "_");
	PlayerTextDrawBackgroundColor(playerid, PlayerData[playerid][pTextdraws][25], 255);
	PlayerTextDrawFont(playerid, PlayerData[playerid][pTextdraws][25], 1);
	PlayerTextDrawLetterSize(playerid, PlayerData[playerid][pTextdraws][25], 0.800000, 10.000000);
	PlayerTextDrawColor(playerid, PlayerData[playerid][pTextdraws][25], -1);
	PlayerTextDrawSetOutline(playerid, PlayerData[playerid][pTextdraws][25], 0);
	PlayerTextDrawSetProportional(playerid, PlayerData[playerid][pTextdraws][25], 1);
	PlayerTextDrawSetShadow(playerid, PlayerData[playerid][pTextdraws][25], 1);
	PlayerTextDrawUseBox(playerid, PlayerData[playerid][pTextdraws][25], 1);
	PlayerTextDrawBoxColor(playerid, PlayerData[playerid][pTextdraws][25], 119);
	PlayerTextDrawTextSize(playerid, PlayerData[playerid][pTextdraws][25], 211.000000, 0.000000);
	PlayerTextDrawSetSelectable(playerid, PlayerData[playerid][pTextdraws][25], 0);

	PlayerData[playerid][pTextdraws][26] = CreatePlayerTextDraw(playerid, 291.000000, 172.000000, "_");
	PlayerTextDrawBackgroundColor(playerid, PlayerData[playerid][pTextdraws][26], 255);
	PlayerTextDrawFont(playerid, PlayerData[playerid][pTextdraws][26], 1);
	PlayerTextDrawLetterSize(playerid, PlayerData[playerid][pTextdraws][26], 0.840000, 1.000000);
	PlayerTextDrawColor(playerid, PlayerData[playerid][pTextdraws][26], -1);
	PlayerTextDrawSetOutline(playerid, PlayerData[playerid][pTextdraws][26], 0);
	PlayerTextDrawSetProportional(playerid, PlayerData[playerid][pTextdraws][26], 1);
	PlayerTextDrawSetShadow(playerid, PlayerData[playerid][pTextdraws][26], 1);
	PlayerTextDrawUseBox(playerid, PlayerData[playerid][pTextdraws][26], 1);
	PlayerTextDrawBoxColor(playerid, PlayerData[playerid][pTextdraws][26], 136);
	PlayerTextDrawTextSize(playerid, PlayerData[playerid][pTextdraws][26], 351.000000, 9.000000);
	PlayerTextDrawSetSelectable(playerid, PlayerData[playerid][pTextdraws][26], 1);

	PlayerData[playerid][pTextdraws][27] = CreatePlayerTextDraw(playerid, 303.000000, 171.500000, "Lunettes");
	PlayerTextDrawBackgroundColor(playerid, PlayerData[playerid][pTextdraws][27], 255);
	PlayerTextDrawFont(playerid, PlayerData[playerid][pTextdraws][27], 1);
	PlayerTextDrawLetterSize(playerid, PlayerData[playerid][pTextdraws][27], 0.290000, 1.000000);
	PlayerTextDrawColor(playerid, PlayerData[playerid][pTextdraws][27], -1);
	PlayerTextDrawSetOutline(playerid, PlayerData[playerid][pTextdraws][27], 1);
	PlayerTextDrawSetProportional(playerid, PlayerData[playerid][pTextdraws][27], 1);
	PlayerTextDrawSetSelectable(playerid, PlayerData[playerid][pTextdraws][27], 0);

	PlayerData[playerid][pTextdraws][28] = CreatePlayerTextDraw(playerid, 291.000000, 196.000000, "_");
	PlayerTextDrawBackgroundColor(playerid, PlayerData[playerid][pTextdraws][28], 255);
	PlayerTextDrawFont(playerid, PlayerData[playerid][pTextdraws][28], 1);
	PlayerTextDrawLetterSize(playerid, PlayerData[playerid][pTextdraws][28], 0.840000, 1.000000);
	PlayerTextDrawColor(playerid, PlayerData[playerid][pTextdraws][28], -1);
	PlayerTextDrawSetOutline(playerid, PlayerData[playerid][pTextdraws][28], 0);
	PlayerTextDrawSetProportional(playerid, PlayerData[playerid][pTextdraws][28], 1);
	PlayerTextDrawSetShadow(playerid, PlayerData[playerid][pTextdraws][28], 1);
	PlayerTextDrawUseBox(playerid, PlayerData[playerid][pTextdraws][28], 1);
	PlayerTextDrawBoxColor(playerid, PlayerData[playerid][pTextdraws][28], 136);
	PlayerTextDrawTextSize(playerid, PlayerData[playerid][pTextdraws][28], 351.000000, 9.000000);
	PlayerTextDrawSetSelectable(playerid, PlayerData[playerid][pTextdraws][28], 1);

	PlayerData[playerid][pTextdraws][29] = CreatePlayerTextDraw(playerid, 304.000000, 195.500000, "Chapeaux");
	PlayerTextDrawBackgroundColor(playerid, PlayerData[playerid][pTextdraws][29], 255);
	PlayerTextDrawFont(playerid, PlayerData[playerid][pTextdraws][29], 1);
	PlayerTextDrawLetterSize(playerid, PlayerData[playerid][pTextdraws][29], 0.290000, 1.000000);
	PlayerTextDrawColor(playerid, PlayerData[playerid][pTextdraws][29], -1);
	PlayerTextDrawSetOutline(playerid, PlayerData[playerid][pTextdraws][29], 1);
	PlayerTextDrawSetProportional(playerid, PlayerData[playerid][pTextdraws][29], 1);
	PlayerTextDrawSetSelectable(playerid, PlayerData[playerid][pTextdraws][29], 0);

	PlayerData[playerid][pTextdraws][30] = CreatePlayerTextDraw(playerid, 291.000000, 220.000000, "_");
	PlayerTextDrawBackgroundColor(playerid, PlayerData[playerid][pTextdraws][30], 255);
	PlayerTextDrawFont(playerid, PlayerData[playerid][pTextdraws][30], 1);
	PlayerTextDrawLetterSize(playerid, PlayerData[playerid][pTextdraws][30], 0.840000, 1.000000);
	PlayerTextDrawColor(playerid, PlayerData[playerid][pTextdraws][30], -1);
	PlayerTextDrawSetOutline(playerid, PlayerData[playerid][pTextdraws][30], 0);
	PlayerTextDrawSetProportional(playerid, PlayerData[playerid][pTextdraws][30], 1);
	PlayerTextDrawSetShadow(playerid, PlayerData[playerid][pTextdraws][30], 1);
	PlayerTextDrawUseBox(playerid, PlayerData[playerid][pTextdraws][30], 1);
	PlayerTextDrawBoxColor(playerid, PlayerData[playerid][pTextdraws][30], 136);
	PlayerTextDrawTextSize(playerid, PlayerData[playerid][pTextdraws][30], 351.000000, 9.000000);
	PlayerTextDrawSetSelectable(playerid, PlayerData[playerid][pTextdraws][30], 1);

	PlayerData[playerid][pTextdraws][31] = CreatePlayerTextDraw(playerid, 307.000000, 219.500000, "Bandana");
	PlayerTextDrawBackgroundColor(playerid, PlayerData[playerid][pTextdraws][31], 255);
	PlayerTextDrawFont(playerid, PlayerData[playerid][pTextdraws][31], 1);
	PlayerTextDrawLetterSize(playerid, PlayerData[playerid][pTextdraws][31], 0.290000, 1.000000);
	PlayerTextDrawColor(playerid, PlayerData[playerid][pTextdraws][31], -1);
	PlayerTextDrawSetOutline(playerid, PlayerData[playerid][pTextdraws][31], 1);
	PlayerTextDrawSetProportional(playerid, PlayerData[playerid][pTextdraws][31], 1);
	PlayerTextDrawSetSelectable(playerid, PlayerData[playerid][pTextdraws][31], 0);

	PlayerData[playerid][pTextdraws][32] = CreatePlayerTextDraw(playerid, 357.000000, 237.000000, "Continuer");
	PlayerTextDrawBackgroundColor(playerid, PlayerData[playerid][pTextdraws][32], 255);
	PlayerTextDrawFont(playerid, PlayerData[playerid][pTextdraws][32], 1);
	PlayerTextDrawLetterSize(playerid, PlayerData[playerid][pTextdraws][32], 0.439999, 1.400000);
	PlayerTextDrawColor(playerid, PlayerData[playerid][pTextdraws][32], -1);
	PlayerTextDrawSetOutline(playerid, PlayerData[playerid][pTextdraws][32], 1);
	PlayerTextDrawSetProportional(playerid, PlayerData[playerid][pTextdraws][32], 1);
	PlayerTextDrawSetSelectable(playerid, PlayerData[playerid][pTextdraws][32], 0);

	PlayerData[playerid][pTextdraws][33] = CreatePlayerTextDraw(playerid, 356.000000, 240.000000, "_");
	PlayerTextDrawBackgroundColor(playerid, PlayerData[playerid][pTextdraws][33], 255);
	PlayerTextDrawFont(playerid, PlayerData[playerid][pTextdraws][33], 1);
	PlayerTextDrawLetterSize(playerid, PlayerData[playerid][pTextdraws][33], 0.840000, 1.000000);
	PlayerTextDrawColor(playerid, PlayerData[playerid][pTextdraws][33], -1);
	PlayerTextDrawSetOutline(playerid, PlayerData[playerid][pTextdraws][33], 0);
	PlayerTextDrawSetProportional(playerid, PlayerData[playerid][pTextdraws][33], 1);
	PlayerTextDrawSetShadow(playerid, PlayerData[playerid][pTextdraws][33], 1);
	PlayerTextDrawUseBox(playerid, PlayerData[playerid][pTextdraws][33], 1);
	PlayerTextDrawBoxColor(playerid, PlayerData[playerid][pTextdraws][33], 0);
	PlayerTextDrawTextSize(playerid, PlayerData[playerid][pTextdraws][33], 424.000000, 9.000000);
	PlayerTextDrawSetSelectable(playerid, PlayerData[playerid][pTextdraws][33], 1);

	/*	PlayerData[playerid][pTextdraws][34] = CreatePlayerTextDraw(playerid, 623.000000, 396.000000, "_");
	PlayerTextDrawBackgroundColor(playerid, PlayerData[playerid][pTextdraws][34], 255);
	PlayerTextDrawFont(playerid, PlayerData[playerid][pTextdraws][34], 1);
	PlayerTextDrawLetterSize(playerid, PlayerData[playerid][pTextdraws][34], 0.760000, 4.299999);
	PlayerTextDrawColor(playerid, PlayerData[playerid][pTextdraws][34], -1);
	PlayerTextDrawSetOutline(playerid, PlayerData[playerid][pTextdraws][34], 0);
	PlayerTextDrawSetProportional(playerid, PlayerData[playerid][pTextdraws][34], 1);
	PlayerTextDrawSetShadow(playerid, PlayerData[playerid][pTextdraws][34], 1);
	PlayerTextDrawUseBox(playerid, PlayerData[playerid][pTextdraws][34], 1);
	PlayerTextDrawBoxColor(playerid, PlayerData[playerid][pTextdraws][34], 85);
	PlayerTextDrawTextSize(playerid, PlayerData[playerid][pTextdraws][34], 512.000000, 28.000000);
	PlayerTextDrawSetSelectable(playerid, PlayerData[playerid][pTextdraws][34], 0);

	PlayerData[playerid][pTextdraws][35] = CreatePlayerTextDraw(playerid, 518.000000, 397.000000, "~r~ESSENCE:~w~ 0%");
	PlayerTextDrawBackgroundColor(playerid, PlayerData[playerid][pTextdraws][35], 255);
	PlayerTextDrawFont(playerid, PlayerData[playerid][pTextdraws][35], 1);
	PlayerTextDrawLetterSize(playerid, PlayerData[playerid][pTextdraws][35], 0.280000, 1.000000);
	PlayerTextDrawColor(playerid, PlayerData[playerid][pTextdraws][35], -1);
	PlayerTextDrawSetOutline(playerid, PlayerData[playerid][pTextdraws][35], 1);
	PlayerTextDrawSetProportional(playerid, PlayerData[playerid][pTextdraws][35], 1);
	PlayerTextDrawSetSelectable(playerid, PlayerData[playerid][pTextdraws][35], 0);

	PlayerData[playerid][pTextdraws][36] = CreatePlayerTextDraw(playerid, 518.000000, 406.200012, "~r~KMH:~w~ 0");
	PlayerTextDrawBackgroundColor(playerid, PlayerData[playerid][pTextdraws][36], 255);
	PlayerTextDrawFont(playerid, PlayerData[playerid][pTextdraws][36], 1);
	PlayerTextDrawLetterSize(playerid, PlayerData[playerid][pTextdraws][36], 0.280000, 1.000000);
	PlayerTextDrawColor(playerid, PlayerData[playerid][pTextdraws][36], -1);
	PlayerTextDrawSetOutline(playerid, PlayerData[playerid][pTextdraws][36], 1);
	PlayerTextDrawSetProportional(playerid, PlayerData[playerid][pTextdraws][36], 1);
	PlayerTextDrawSetSelectable(playerid, PlayerData[playerid][pTextdraws][36], 0);

	PlayerData[playerid][pTextdraws][37] = CreatePlayerTextDraw(playerid, 518.000000, 415.500000, "~r~Dégats:~w~ 0/100%");
	PlayerTextDrawBackgroundColor(playerid, PlayerData[playerid][pTextdraws][37], 255);
	PlayerTextDrawFont(playerid, PlayerData[playerid][pTextdraws][37], 1);
	PlayerTextDrawLetterSize(playerid, PlayerData[playerid][pTextdraws][37], 0.280000, 1.000000);
	PlayerTextDrawColor(playerid, PlayerData[playerid][pTextdraws][37], -1);
	PlayerTextDrawSetOutline(playerid, PlayerData[playerid][pTextdraws][37], 1);
	PlayerTextDrawSetProportional(playerid, PlayerData[playerid][pTextdraws][37], 1);
	PlayerTextDrawSetSelectable(playerid, PlayerData[playerid][pTextdraws][37], 0);

	PlayerData[playerid][pTextdraws][38] = CreatePlayerTextDraw(playerid, 518.000000, 425.000000, "~r~Fenetre:~w~ Up");
	PlayerTextDrawBackgroundColor(playerid, PlayerData[playerid][pTextdraws][38], 255);
	PlayerTextDrawFont(playerid, PlayerData[playerid][pTextdraws][38], 1);
	PlayerTextDrawLetterSize(playerid, PlayerData[playerid][pTextdraws][38], 0.280000, 1.000000);
	PlayerTextDrawColor(playerid, PlayerData[playerid][pTextdraws][38], -1);
	PlayerTextDrawSetOutline(playerid, PlayerData[playerid][pTextdraws][38], 1);
	PlayerTextDrawSetProportional(playerid, PlayerData[playerid][pTextdraws][38], 1);
	PlayerTextDrawSetSelectable(playerid, PlayerData[playerid][pTextdraws][38], 0);*/

	PlayerData[playerid][pTextdraws][34] = CreatePlayerTextDraw(playerid, 323.279632, 383.833465, "-");
	PlayerTextDrawLetterSize(playerid, PlayerData[playerid][pTextdraws][34], 20.681232, 0.561665);
	PlayerTextDrawAlignment(playerid, PlayerData[playerid][pTextdraws][34], 2);
	PlayerTextDrawColor(playerid, PlayerData[playerid][pTextdraws][34], -567339794);
	PlayerTextDrawSetShadow(playerid, PlayerData[playerid][pTextdraws][34], 0);
	PlayerTextDrawSetOutline(playerid, PlayerData[playerid][pTextdraws][34], 1);
	PlayerTextDrawBackgroundColor(playerid, PlayerData[playerid][pTextdraws][34], 51);
	PlayerTextDrawFont(playerid, PlayerData[playerid][pTextdraws][34], 1);
	PlayerTextDrawSetProportional(playerid, PlayerData[playerid][pTextdraws][34], 1);

	PlayerData[playerid][pTextdraws][35] = CreatePlayerTextDraw(playerid, 233.323577, 372.166625, "MOTEUR");
	PlayerTextDrawLetterSize(playerid, PlayerData[playerid][pTextdraws][35], 0.321624, 1.273331);
	PlayerTextDrawAlignment(playerid, PlayerData[playerid][pTextdraws][35], 2);
	PlayerTextDrawColor(playerid, PlayerData[playerid][pTextdraws][35], -1);
	PlayerTextDrawSetShadow(playerid, PlayerData[playerid][pTextdraws][35], 0);
	PlayerTextDrawSetOutline(playerid, PlayerData[playerid][pTextdraws][35], 1);
	PlayerTextDrawBackgroundColor(playerid, PlayerData[playerid][pTextdraws][35], 51);
	PlayerTextDrawFont(playerid, PlayerData[playerid][pTextdraws][35], 3);
	PlayerTextDrawSetProportional(playerid, PlayerData[playerid][pTextdraws][35], 1);

	PlayerData[playerid][pTextdraws][36] = CreatePlayerTextDraw(playerid, 316.846221, 371.833343, "KM/H");
	PlayerTextDrawLetterSize(playerid, PlayerData[playerid][pTextdraws][36], 0.321624, 1.273331);
	PlayerTextDrawAlignment(playerid, PlayerData[playerid][pTextdraws][36], 2);
	PlayerTextDrawColor(playerid, PlayerData[playerid][pTextdraws][36], -1);
	PlayerTextDrawSetShadow(playerid, PlayerData[playerid][pTextdraws][36], 0);
	PlayerTextDrawSetOutline(playerid, PlayerData[playerid][pTextdraws][36], 1);
	PlayerTextDrawBackgroundColor(playerid, PlayerData[playerid][pTextdraws][36], 51);
	PlayerTextDrawFont(playerid, PlayerData[playerid][pTextdraws][36], 3);
	PlayerTextDrawSetProportional(playerid, PlayerData[playerid][pTextdraws][36], 1);

	PlayerData[playerid][pTextdraws][37] = CreatePlayerTextDraw(playerid, 399.243194, 372.000030, "ESSENCE");
	PlayerTextDrawLetterSize(playerid, PlayerData[playerid][pTextdraws][37], 0.321624, 1.273331);
	PlayerTextDrawAlignment(playerid, PlayerData[playerid][pTextdraws][37], 2);
	PlayerTextDrawColor(playerid, PlayerData[playerid][pTextdraws][37], -1);
	PlayerTextDrawSetShadow(playerid, PlayerData[playerid][pTextdraws][37], 0);
	PlayerTextDrawSetOutline(playerid, PlayerData[playerid][pTextdraws][37], 1);
	PlayerTextDrawBackgroundColor(playerid, PlayerData[playerid][pTextdraws][37], 51);
	PlayerTextDrawFont(playerid, PlayerData[playerid][pTextdraws][37], 3);
	PlayerTextDrawSetProportional(playerid, PlayerData[playerid][pTextdraws][37], 1);

	PlayerData[playerid][pTextdraws][38] = CreatePlayerTextDraw(playerid, 232.918014, 388.916717, "1000");
	PlayerTextDrawLetterSize(playerid, PlayerData[playerid][pTextdraws][38], 0.321624, 1.273331);
	PlayerTextDrawAlignment(playerid, PlayerData[playerid][pTextdraws][38], 2);
	PlayerTextDrawColor(playerid, PlayerData[playerid][pTextdraws][38], -1);
	PlayerTextDrawSetShadow(playerid, PlayerData[playerid][pTextdraws][38], 0);
	PlayerTextDrawSetOutline(playerid, PlayerData[playerid][pTextdraws][38], 1);
	PlayerTextDrawBackgroundColor(playerid, PlayerData[playerid][pTextdraws][38], 51);
	PlayerTextDrawFont(playerid, PlayerData[playerid][pTextdraws][38], 2);
	PlayerTextDrawSetProportional(playerid, PlayerData[playerid][pTextdraws][38], 1);

	PlayerData[playerid][pTextdraws][39] = CreatePlayerTextDraw(playerid, 317.377685, 389.166748, "80");
	PlayerTextDrawLetterSize(playerid, PlayerData[playerid][pTextdraws][39], 0.321624, 1.273331);
	PlayerTextDrawAlignment(playerid, PlayerData[playerid][pTextdraws][39], 2);
	PlayerTextDrawColor(playerid, PlayerData[playerid][pTextdraws][39], -1);
	PlayerTextDrawSetShadow(playerid, PlayerData[playerid][pTextdraws][39], 0);
	PlayerTextDrawSetOutline(playerid, PlayerData[playerid][pTextdraws][39], 1);
	PlayerTextDrawBackgroundColor(playerid, PlayerData[playerid][pTextdraws][39], 51);
	PlayerTextDrawFont(playerid, PlayerData[playerid][pTextdraws][39], 2);
	PlayerTextDrawSetProportional(playerid, PlayerData[playerid][pTextdraws][39], 1);

	PlayerData[playerid][pTextdraws][63] = CreatePlayerTextDraw(playerid, 401.180206, 388.166625, "90");
	PlayerTextDrawLetterSize(playerid, PlayerData[playerid][pTextdraws][63], 0.321624, 1.273331);
	PlayerTextDrawAlignment(playerid, PlayerData[playerid][pTextdraws][63], 2);
	PlayerTextDrawColor(playerid, PlayerData[playerid][pTextdraws][63], -1);
	PlayerTextDrawSetShadow(playerid, PlayerData[playerid][pTextdraws][63], 0);
	PlayerTextDrawSetOutline(playerid, PlayerData[playerid][pTextdraws][63], 1);
	PlayerTextDrawBackgroundColor(playerid, PlayerData[playerid][pTextdraws][63], 51);
	PlayerTextDrawFont(playerid, PlayerData[playerid][pTextdraws][63], 2);
	PlayerTextDrawSetProportional(playerid, PlayerData[playerid][pTextdraws][63], 1);

	PlayerData[playerid][pTextdraws][64] = CreatePlayerTextDraw(playerid, 320.799865, 436.550994, "");
	PlayerTextDrawLetterSize(playerid, PlayerData[playerid][pTextdraws][64], 0.317600, 1.206755);
	PlayerTextDrawAlignment(playerid, PlayerData[playerid][pTextdraws][64], 2);
	PlayerTextDrawColor(playerid,PlayerData[playerid][pTextdraws][64], -1);
	PlayerTextDrawSetShadow(playerid, PlayerData[playerid][pTextdraws][64], 0);
	PlayerTextDrawSetOutline(playerid, PlayerData[playerid][pTextdraws][64], 1);
	PlayerTextDrawBackgroundColor(playerid, PlayerData[playerid][pTextdraws][64], 51);
	PlayerTextDrawFont(playerid, PlayerData[playerid][pTextdraws][64], 3);
	PlayerTextDrawSetProportional(playerid, PlayerData[playerid][pTextdraws][64], 1);

	PlayerData[playerid][pTextdraws][40] = CreatePlayerTextDraw(playerid, 470.000000, 160.000000, "_");
	PlayerTextDrawBackgroundColor(playerid, PlayerData[playerid][pTextdraws][40], 255);
	PlayerTextDrawFont(playerid, PlayerData[playerid][pTextdraws][40], 1);
	PlayerTextDrawLetterSize(playerid, PlayerData[playerid][pTextdraws][40], 0.570000, 12.200000);
	PlayerTextDrawColor(playerid, PlayerData[playerid][pTextdraws][40], -1);
	PlayerTextDrawSetOutline(playerid, PlayerData[playerid][pTextdraws][40], 0);
	PlayerTextDrawSetProportional(playerid, PlayerData[playerid][pTextdraws][40], 1);
	PlayerTextDrawSetShadow(playerid, PlayerData[playerid][pTextdraws][40], 1);
	PlayerTextDrawUseBox(playerid, PlayerData[playerid][pTextdraws][40], 1);
	PlayerTextDrawBoxColor(playerid, PlayerData[playerid][pTextdraws][40], 102);
	PlayerTextDrawTextSize(playerid, PlayerData[playerid][pTextdraws][40], 190.000000, 1.000000);
	PlayerTextDrawSetSelectable(playerid, PlayerData[playerid][pTextdraws][40], 0);

	PlayerData[playerid][pTextdraws][41] = CreatePlayerTextDraw(playerid, 470.000000, 160.000000, "_");
	PlayerTextDrawBackgroundColor(playerid, PlayerData[playerid][pTextdraws][41], 255);
	PlayerTextDrawFont(playerid, PlayerData[playerid][pTextdraws][41], 1);
	PlayerTextDrawLetterSize(playerid, PlayerData[playerid][pTextdraws][41], 0.910000, 1.000000);
	PlayerTextDrawColor(playerid, PlayerData[playerid][pTextdraws][41], -1);
	PlayerTextDrawSetOutline(playerid, PlayerData[playerid][pTextdraws][41], 0);
	PlayerTextDrawSetProportional(playerid, PlayerData[playerid][pTextdraws][41], 1);
	PlayerTextDrawSetShadow(playerid, PlayerData[playerid][pTextdraws][41], 1);
	PlayerTextDrawUseBox(playerid, PlayerData[playerid][pTextdraws][41], 1);
	PlayerTextDrawBoxColor(playerid, PlayerData[playerid][pTextdraws][41], -188);
	PlayerTextDrawTextSize(playerid, PlayerData[playerid][pTextdraws][41], 190.000000, -9.000000);
	PlayerTextDrawSetSelectable(playerid, PlayerData[playerid][pTextdraws][41], 0);

	PlayerData[playerid][pTextdraws][42] = CreatePlayerTextDraw(playerid, 199.000000, 174.000000, "~g~Sexe:~w~ Masculin~n~~g~Date de naissance:~w~ 17/02/1993~n~~g~Origine:~w~ United States");
	PlayerTextDrawBackgroundColor(playerid, PlayerData[playerid][pTextdraws][42], 255);
	PlayerTextDrawFont(playerid, PlayerData[playerid][pTextdraws][42], 1);
	PlayerTextDrawLetterSize(playerid, PlayerData[playerid][pTextdraws][42], 0.310000, 1.100000);
	PlayerTextDrawColor(playerid, PlayerData[playerid][pTextdraws][42], -1);
	PlayerTextDrawSetOutline(playerid, PlayerData[playerid][pTextdraws][42], 0);
	PlayerTextDrawSetProportional(playerid, PlayerData[playerid][pTextdraws][42], 1);
	PlayerTextDrawSetShadow(playerid, PlayerData[playerid][pTextdraws][42], 1);
	PlayerTextDrawSetSelectable(playerid, PlayerData[playerid][pTextdraws][42], 0);

	PlayerData[playerid][pTextdraws][43] = CreatePlayerTextDraw(playerid, 195.000000, 159.500000, "Emmet Jones (ID: 4)");
	PlayerTextDrawBackgroundColor(playerid, PlayerData[playerid][pTextdraws][43], 255);
	PlayerTextDrawFont(playerid, PlayerData[playerid][pTextdraws][43], 1);
	PlayerTextDrawLetterSize(playerid, PlayerData[playerid][pTextdraws][43], 0.310000, 1.000000);
	PlayerTextDrawColor(playerid, PlayerData[playerid][pTextdraws][43], -1);
	PlayerTextDrawSetOutline(playerid, PlayerData[playerid][pTextdraws][43], 0);
	PlayerTextDrawSetProportional(playerid, PlayerData[playerid][pTextdraws][43], 1);
	PlayerTextDrawSetShadow(playerid, PlayerData[playerid][pTextdraws][43], 1);
	PlayerTextDrawSetSelectable(playerid, PlayerData[playerid][pTextdraws][43], 0);

	PlayerData[playerid][pTextdraws][44] = CreatePlayerTextDraw(playerid, 199.000000, 212.000000, "~g~Argent:~w~ $0~n~~g~Banque:~w~ $0~n~~g~Save:~w~ $0");
	PlayerTextDrawBackgroundColor(playerid, PlayerData[playerid][pTextdraws][44], 255);
	PlayerTextDrawFont(playerid, PlayerData[playerid][pTextdraws][44], 1);
	PlayerTextDrawLetterSize(playerid, PlayerData[playerid][pTextdraws][44], 0.310000, 1.100000);
	PlayerTextDrawColor(playerid, PlayerData[playerid][pTextdraws][44], -1);
	PlayerTextDrawSetOutline(playerid, PlayerData[playerid][pTextdraws][44], 0);
	PlayerTextDrawSetProportional(playerid, PlayerData[playerid][pTextdraws][44], 1);
	PlayerTextDrawSetShadow(playerid, PlayerData[playerid][pTextdraws][44], 1);
	PlayerTextDrawSetSelectable(playerid, PlayerData[playerid][pTextdraws][44], 0);

	PlayerData[playerid][pTextdraws][45] = CreatePlayerTextDraw(playerid, 339.000000, 174.000000, "~g~Compte:~w~ Joueur~n~~g~Admin:~w~ No");
	PlayerTextDrawBackgroundColor(playerid, PlayerData[playerid][pTextdraws][45], 255);
	PlayerTextDrawFont(playerid, PlayerData[playerid][pTextdraws][45], 1);
	PlayerTextDrawLetterSize(playerid, PlayerData[playerid][pTextdraws][45], 0.310000, 1.100000);
	PlayerTextDrawColor(playerid, PlayerData[playerid][pTextdraws][45], -1);
	PlayerTextDrawSetOutline(playerid, PlayerData[playerid][pTextdraws][45], 0);
	PlayerTextDrawSetProportional(playerid, PlayerData[playerid][pTextdraws][45], 1);
	PlayerTextDrawSetShadow(playerid, PlayerData[playerid][pTextdraws][45], 1);
	PlayerTextDrawSetSelectable(playerid, PlayerData[playerid][pTextdraws][45], 0);

	PlayerData[playerid][pTextdraws][46] = CreatePlayerTextDraw(playerid, 340.000000, 212.000000, "~g~Ping:~w~ 0~n~~g~Packetlost:~w~ 0.0%~n~~g~Temps connecté:~w~ 00:00:00");
	PlayerTextDrawBackgroundColor(playerid, PlayerData[playerid][pTextdraws][46], 255);
	PlayerTextDrawFont(playerid, PlayerData[playerid][pTextdraws][46], 1);
	PlayerTextDrawLetterSize(playerid, PlayerData[playerid][pTextdraws][46], 0.310000, 1.100000);
	PlayerTextDrawColor(playerid, PlayerData[playerid][pTextdraws][46], -1);
	PlayerTextDrawSetOutline(playerid, PlayerData[playerid][pTextdraws][46], 0);
	PlayerTextDrawSetProportional(playerid, PlayerData[playerid][pTextdraws][46], 1);
	PlayerTextDrawSetShadow(playerid, PlayerData[playerid][pTextdraws][46], 1);
	PlayerTextDrawSetSelectable(playerid, PlayerData[playerid][pTextdraws][46], 0);

	PlayerData[playerid][pTextdraws][47] = CreatePlayerTextDraw(playerid, 200.000000, 254.000000, "Mes personnages");
	PlayerTextDrawBackgroundColor(playerid, PlayerData[playerid][pTextdraws][47], 255);
	PlayerTextDrawFont(playerid, PlayerData[playerid][pTextdraws][47], 1);
	PlayerTextDrawLetterSize(playerid, PlayerData[playerid][pTextdraws][47], 0.329999, 1.000000);
	PlayerTextDrawColor(playerid, PlayerData[playerid][pTextdraws][47], -1);
	PlayerTextDrawSetOutline(playerid, PlayerData[playerid][pTextdraws][47], 0);
	PlayerTextDrawSetProportional(playerid, PlayerData[playerid][pTextdraws][47], 1);
	PlayerTextDrawSetShadow(playerid, PlayerData[playerid][pTextdraws][47], 1);
	PlayerTextDrawUseBox(playerid, PlayerData[playerid][pTextdraws][47], 1);
	PlayerTextDrawBoxColor(playerid, PlayerData[playerid][pTextdraws][47], -222);
	PlayerTextDrawTextSize(playerid, PlayerData[playerid][pTextdraws][47], 278.000000, 27.000000);
	PlayerTextDrawSetSelectable(playerid, PlayerData[playerid][pTextdraws][47], 1);

	PlayerData[playerid][pTextdraws][48] = CreatePlayerTextDraw(playerid, 296.000000, 254.000000, "Mon inventaire");
	PlayerTextDrawBackgroundColor(playerid, PlayerData[playerid][pTextdraws][48], 255);
	PlayerTextDrawFont(playerid, PlayerData[playerid][pTextdraws][48], 1);
	PlayerTextDrawLetterSize(playerid, PlayerData[playerid][pTextdraws][48], 0.329999, 1.000000);
	PlayerTextDrawColor(playerid, PlayerData[playerid][pTextdraws][48], -1);
	PlayerTextDrawSetOutline(playerid, PlayerData[playerid][pTextdraws][48], 0);
	PlayerTextDrawSetProportional(playerid, PlayerData[playerid][pTextdraws][48], 1);
	PlayerTextDrawSetShadow(playerid, PlayerData[playerid][pTextdraws][48], 1);
	PlayerTextDrawUseBox(playerid, PlayerData[playerid][pTextdraws][48], 1);
	PlayerTextDrawBoxColor(playerid, PlayerData[playerid][pTextdraws][48], -222);
	PlayerTextDrawTextSize(playerid, PlayerData[playerid][pTextdraws][48], 372.000000, 27.000000);
	PlayerTextDrawSetSelectable(playerid, PlayerData[playerid][pTextdraws][48], 1);

	PlayerData[playerid][pTextdraws][49] = CreatePlayerTextDraw(playerid, 389.000000, 254.000000, "Fermer le menu");
	PlayerTextDrawBackgroundColor(playerid, PlayerData[playerid][pTextdraws][49], 255);
	PlayerTextDrawFont(playerid, PlayerData[playerid][pTextdraws][49], 1);
	PlayerTextDrawLetterSize(playerid, PlayerData[playerid][pTextdraws][49], 0.329999, 1.000000);
	PlayerTextDrawColor(playerid, PlayerData[playerid][pTextdraws][49], -1);
	PlayerTextDrawSetOutline(playerid, PlayerData[playerid][pTextdraws][49], 0);
	PlayerTextDrawSetProportional(playerid, PlayerData[playerid][pTextdraws][49], 1);
	PlayerTextDrawSetShadow(playerid, PlayerData[playerid][pTextdraws][49], 1);
	PlayerTextDrawUseBox(playerid, PlayerData[playerid][pTextdraws][49], 1);
	PlayerTextDrawBoxColor(playerid, PlayerData[playerid][pTextdraws][49], -222);
	PlayerTextDrawTextSize(playerid, PlayerData[playerid][pTextdraws][49], 453.000000, 27.000000);
	PlayerTextDrawSetSelectable(playerid, PlayerData[playerid][pTextdraws][49], 1);

	PlayerData[playerid][pTextdraws][50] = CreatePlayerTextDraw(playerid, 470.000000, 160.000000, "_");
	PlayerTextDrawBackgroundColor(playerid, PlayerData[playerid][pTextdraws][50], 255);
	PlayerTextDrawFont(playerid, PlayerData[playerid][pTextdraws][50], 1);
	PlayerTextDrawLetterSize(playerid, PlayerData[playerid][pTextdraws][50], 0.569998, 8.999999);
	PlayerTextDrawColor(playerid, PlayerData[playerid][pTextdraws][50], -1);
	PlayerTextDrawSetOutline(playerid, PlayerData[playerid][pTextdraws][50], 0);
	PlayerTextDrawSetProportional(playerid, PlayerData[playerid][pTextdraws][50], 1);
	PlayerTextDrawSetShadow(playerid, PlayerData[playerid][pTextdraws][50], 1);
	PlayerTextDrawUseBox(playerid, PlayerData[playerid][pTextdraws][50], 1);
	PlayerTextDrawBoxColor(playerid, PlayerData[playerid][pTextdraws][50], 102);
	PlayerTextDrawTextSize(playerid, PlayerData[playerid][pTextdraws][50], 190.000000, 1.000000);
	PlayerTextDrawSetSelectable(playerid, PlayerData[playerid][pTextdraws][50], 0);

	PlayerData[playerid][pTextdraws][51] = CreatePlayerTextDraw(playerid, 470.000000, 160.000000, "_");
	PlayerTextDrawBackgroundColor(playerid, PlayerData[playerid][pTextdraws][51], 255);
	PlayerTextDrawFont(playerid, PlayerData[playerid][pTextdraws][51], 1);
	PlayerTextDrawLetterSize(playerid, PlayerData[playerid][pTextdraws][51], 0.910000, 1.000000);
	PlayerTextDrawColor(playerid, PlayerData[playerid][pTextdraws][51], -1);
	PlayerTextDrawSetOutline(playerid, PlayerData[playerid][pTextdraws][51], 0);
	PlayerTextDrawSetProportional(playerid, PlayerData[playerid][pTextdraws][51], 1);
	PlayerTextDrawSetShadow(playerid, PlayerData[playerid][pTextdraws][51], 1);
	PlayerTextDrawUseBox(playerid, PlayerData[playerid][pTextdraws][51], 1);
	PlayerTextDrawBoxColor(playerid, PlayerData[playerid][pTextdraws][51], -188);
	PlayerTextDrawTextSize(playerid, PlayerData[playerid][pTextdraws][51], 190.000000, -9.000000);
	PlayerTextDrawSetSelectable(playerid, PlayerData[playerid][pTextdraws][51], 0);

	PlayerData[playerid][pTextdraws][52] = CreatePlayerTextDraw(playerid, 198.000000, 177.000000, "~g~Nom:~w~ Emmet Jackson~n~~g~Compte:~w~ Joueur~n~~g~Crée:~w~ 23 jours ago~n~~g~Dernière co:~w~ 22 jours");
	PlayerTextDrawBackgroundColor(playerid, PlayerData[playerid][pTextdraws][52], 255);
	PlayerTextDrawFont(playerid, PlayerData[playerid][pTextdraws][52], 1);
	PlayerTextDrawLetterSize(playerid, PlayerData[playerid][pTextdraws][52], 0.310000, 1.100000);
	PlayerTextDrawColor(playerid, PlayerData[playerid][pTextdraws][52], -1);
	PlayerTextDrawSetOutline(playerid, PlayerData[playerid][pTextdraws][52], 0);
	PlayerTextDrawSetProportional(playerid, PlayerData[playerid][pTextdraws][52], 1);
	PlayerTextDrawSetShadow(playerid, PlayerData[playerid][pTextdraws][52], 1);
	PlayerTextDrawSetSelectable(playerid, PlayerData[playerid][pTextdraws][52], 0);

	PlayerData[playerid][pTextdraws][53] = CreatePlayerTextDraw(playerid, 195.000000, 159.500000, "#1: Emmet Jones");
	PlayerTextDrawBackgroundColor(playerid, PlayerData[playerid][pTextdraws][53], 255);
	PlayerTextDrawFont(playerid, PlayerData[playerid][pTextdraws][53], 1);
	PlayerTextDrawLetterSize(playerid, PlayerData[playerid][pTextdraws][53], 0.310000, 1.000000);
	PlayerTextDrawColor(playerid, PlayerData[playerid][pTextdraws][53], -1);
	PlayerTextDrawSetOutline(playerid, PlayerData[playerid][pTextdraws][53], 0);
	PlayerTextDrawSetProportional(playerid, PlayerData[playerid][pTextdraws][53], 1);
	PlayerTextDrawSetShadow(playerid, PlayerData[playerid][pTextdraws][53], 1);
	PlayerTextDrawSetSelectable(playerid, PlayerData[playerid][pTextdraws][53], 0);

	PlayerData[playerid][pTextdraws][54] = CreatePlayerTextDraw(playerid, 397.000000, 174.000000, "_");
	PlayerTextDrawBackgroundColor(playerid, PlayerData[playerid][pTextdraws][54], 255);
	PlayerTextDrawFont(playerid, PlayerData[playerid][pTextdraws][54], 5);
	PlayerTextDrawLetterSize(playerid, PlayerData[playerid][pTextdraws][54], 0.579999, 4.699997);
	PlayerTextDrawColor(playerid, PlayerData[playerid][pTextdraws][54], -1);
	PlayerTextDrawSetOutline(playerid, PlayerData[playerid][pTextdraws][54], 0);
	PlayerTextDrawSetProportional(playerid, PlayerData[playerid][pTextdraws][54], 1);
	PlayerTextDrawSetShadow(playerid, PlayerData[playerid][pTextdraws][54], 1);
	PlayerTextDrawUseBox(playerid, PlayerData[playerid][pTextdraws][54], 1);
	PlayerTextDrawBoxColor(playerid, PlayerData[playerid][pTextdraws][54], 0);
	PlayerTextDrawTextSize(playerid, PlayerData[playerid][pTextdraws][54], 53.000000, 48.000000);
	PlayerTextDrawSetSelectable(playerid, PlayerData[playerid][pTextdraws][54], 1);

	PlayerData[playerid][pTextdraws][55] = CreatePlayerTextDraw(playerid, 389.000000, 227.000000, "Fermer le menu");
	PlayerTextDrawBackgroundColor(playerid, PlayerData[playerid][pTextdraws][55], 255);
	PlayerTextDrawFont(playerid, PlayerData[playerid][pTextdraws][55], 1);
	PlayerTextDrawLetterSize(playerid, PlayerData[playerid][pTextdraws][55], 0.329997, 1.000000);
	PlayerTextDrawColor(playerid, PlayerData[playerid][pTextdraws][55], -1);
	PlayerTextDrawSetOutline(playerid, PlayerData[playerid][pTextdraws][55], 0);
	PlayerTextDrawSetProportional(playerid, PlayerData[playerid][pTextdraws][55], 1);
	PlayerTextDrawSetShadow(playerid, PlayerData[playerid][pTextdraws][55], 1);
	PlayerTextDrawUseBox(playerid, PlayerData[playerid][pTextdraws][55], 1);
	PlayerTextDrawBoxColor(playerid, PlayerData[playerid][pTextdraws][55], -222);
	PlayerTextDrawTextSize(playerid, PlayerData[playerid][pTextdraws][55], 453.000000, 27.000000);
	PlayerTextDrawSetSelectable(playerid, PlayerData[playerid][pTextdraws][55], 1);

	PlayerData[playerid][pTextdraws][56] = CreatePlayerTextDraw(playerid, 200.000000, 227.000000, "<< Retour..");
	PlayerTextDrawBackgroundColor(playerid, PlayerData[playerid][pTextdraws][56], 255);
	PlayerTextDrawFont(playerid, PlayerData[playerid][pTextdraws][56], 1);
	PlayerTextDrawLetterSize(playerid, PlayerData[playerid][pTextdraws][56], 0.329998, 1.000000);
	PlayerTextDrawColor(playerid, PlayerData[playerid][pTextdraws][56], -1);
	PlayerTextDrawSetOutline(playerid, PlayerData[playerid][pTextdraws][56], 0);
	PlayerTextDrawSetProportional(playerid, PlayerData[playerid][pTextdraws][56], 1);
	PlayerTextDrawSetShadow(playerid, PlayerData[playerid][pTextdraws][56], 1);
	PlayerTextDrawUseBox(playerid, PlayerData[playerid][pTextdraws][56], 1);
	PlayerTextDrawBoxColor(playerid, PlayerData[playerid][pTextdraws][56], -222);
	PlayerTextDrawTextSize(playerid, PlayerData[playerid][pTextdraws][56], 278.000000, 27.000000);
	PlayerTextDrawSetSelectable(playerid, PlayerData[playerid][pTextdraws][56], 1);

	PlayerData[playerid][pTextdraws][57] = CreatePlayerTextDraw(playerid, 290.000000, 227.000000, "Supprimer mon personnage");
	PlayerTextDrawBackgroundColor(playerid, PlayerData[playerid][pTextdraws][57], 255);
	PlayerTextDrawFont(playerid, PlayerData[playerid][pTextdraws][57], 1);
	PlayerTextDrawLetterSize(playerid, PlayerData[playerid][pTextdraws][57], 0.309998, 1.000000);
	PlayerTextDrawColor(playerid, PlayerData[playerid][pTextdraws][57], -1);
	PlayerTextDrawSetOutline(playerid, PlayerData[playerid][pTextdraws][57], 0);
	PlayerTextDrawSetProportional(playerid, PlayerData[playerid][pTextdraws][57], 1);
	PlayerTextDrawSetShadow(playerid, PlayerData[playerid][pTextdraws][57], 1);
	PlayerTextDrawUseBox(playerid, PlayerData[playerid][pTextdraws][57], 1);
	PlayerTextDrawBoxColor(playerid, PlayerData[playerid][pTextdraws][57], -222);
	PlayerTextDrawTextSize(playerid, PlayerData[playerid][pTextdraws][57], 375.000000, 27.000000);
	PlayerTextDrawSetSelectable(playerid, PlayerData[playerid][pTextdraws][57], 1);

	PlayerData[playerid][pTextdraws][58] = CreatePlayerTextDraw(playerid, 424.000000, 151.000000, "_");
	PlayerTextDrawBackgroundColor(playerid, PlayerData[playerid][pTextdraws][58], 255);
	PlayerTextDrawFont(playerid, PlayerData[playerid][pTextdraws][58], 1);
	PlayerTextDrawLetterSize(playerid, PlayerData[playerid][pTextdraws][58], 0.600000, 8.699998);
	PlayerTextDrawColor(playerid, PlayerData[playerid][pTextdraws][58], -1);
	PlayerTextDrawSetOutline(playerid, PlayerData[playerid][pTextdraws][58], 1);
	PlayerTextDrawSetProportional(playerid, PlayerData[playerid][pTextdraws][58], 1);
	PlayerTextDrawUseBox(playerid, PlayerData[playerid][pTextdraws][58], 1);
	PlayerTextDrawBoxColor(playerid, PlayerData[playerid][pTextdraws][58], 119);
	PlayerTextDrawTextSize(playerid, PlayerData[playerid][pTextdraws][58], 202.000000, 11.000000);
	PlayerTextDrawSetSelectable(playerid, PlayerData[playerid][pTextdraws][58], 0);

	PlayerData[playerid][pTextdraws][59] = CreatePlayerTextDraw(playerid, 206.000000, 151.000000, "Tutoriel: Spawn point");
	PlayerTextDrawBackgroundColor(playerid, PlayerData[playerid][pTextdraws][59], 255);
	PlayerTextDrawFont(playerid, PlayerData[playerid][pTextdraws][59], 1);
	PlayerTextDrawLetterSize(playerid, PlayerData[playerid][pTextdraws][59], 0.319999, 1.000000);
	PlayerTextDrawColor(playerid, PlayerData[playerid][pTextdraws][59], -1);
	PlayerTextDrawSetOutline(playerid, PlayerData[playerid][pTextdraws][59], 1);
	PlayerTextDrawSetProportional(playerid, PlayerData[playerid][pTextdraws][59], 1);
	PlayerTextDrawUseBox(playerid, PlayerData[playerid][pTextdraws][59], 1);
	PlayerTextDrawBoxColor(playerid, PlayerData[playerid][pTextdraws][59], -205);
	PlayerTextDrawTextSize(playerid, PlayerData[playerid][pTextdraws][59], 420.000000, 0.000000);
	PlayerTextDrawSetSelectable(playerid, PlayerData[playerid][pTextdraws][59], 0);

	PlayerData[playerid][pTextdraws][60] = CreatePlayerTextDraw(playerid, 208.000000, 164.000000, "Vous allez spawn ici a la fin du tutoriel~n~ Vous pouvez demander de l'aide~n~après etre spawn");
	PlayerTextDrawBackgroundColor(playerid, PlayerData[playerid][pTextdraws][60], 255);
	PlayerTextDrawFont(playerid, PlayerData[playerid][pTextdraws][60], 1);
	PlayerTextDrawLetterSize(playerid, PlayerData[playerid][pTextdraws][60], 0.270000, 1.000000);
	PlayerTextDrawColor(playerid, PlayerData[playerid][pTextdraws][60], -1);
	PlayerTextDrawSetOutline(playerid, PlayerData[playerid][pTextdraws][60], 0);
	PlayerTextDrawSetProportional(playerid, PlayerData[playerid][pTextdraws][60], 1);
	PlayerTextDrawSetShadow(playerid, PlayerData[playerid][pTextdraws][60], 1);
	PlayerTextDrawSetSelectable(playerid, PlayerData[playerid][pTextdraws][60], 0);

	PlayerData[playerid][pTextdraws][61] = CreatePlayerTextDraw(playerid, 208.000000, 197.000000, "Pour demander de l'aide, utilisez ~g~~h~/besoinaide~w~. L'administrationn~repondra si ils sont en~n~duty on.");
	PlayerTextDrawBackgroundColor(playerid, PlayerData[playerid][pTextdraws][61], 255);
	PlayerTextDrawFont(playerid, PlayerData[playerid][pTextdraws][61], 1);
	PlayerTextDrawLetterSize(playerid, PlayerData[playerid][pTextdraws][61], 0.270000, 1.000000);
	PlayerTextDrawColor(playerid, PlayerData[playerid][pTextdraws][61], -1);
	PlayerTextDrawSetOutline(playerid, PlayerData[playerid][pTextdraws][61], 0);
	PlayerTextDrawSetProportional(playerid, PlayerData[playerid][pTextdraws][61], 1);
	PlayerTextDrawSetShadow(playerid, PlayerData[playerid][pTextdraws][61], 1);
	PlayerTextDrawSetSelectable(playerid, PlayerData[playerid][pTextdraws][61], 0);

	PlayerData[playerid][pTextdraws][62] = CreatePlayerTextDraw(playerid, 644.000000, 1.000000, "_");
	PlayerTextDrawBackgroundColor(playerid, PlayerData[playerid][pTextdraws][62], 255);
	PlayerTextDrawFont(playerid, PlayerData[playerid][pTextdraws][62], 1);
	PlayerTextDrawLetterSize(playerid, PlayerData[playerid][pTextdraws][62], 0.530000, 51.000000);
	PlayerTextDrawColor(playerid, PlayerData[playerid][pTextdraws][62], -1);
	PlayerTextDrawSetOutline(playerid, PlayerData[playerid][pTextdraws][62], 0);
	PlayerTextDrawSetProportional(playerid, PlayerData[playerid][pTextdraws][62], 1);
	PlayerTextDrawSetShadow(playerid, PlayerData[playerid][pTextdraws][62], 1);
	PlayerTextDrawUseBox(playerid, PlayerData[playerid][pTextdraws][62], 1);
	PlayerTextDrawBoxColor(playerid, PlayerData[playerid][pTextdraws][62], 119);
	PlayerTextDrawTextSize(playerid, PlayerData[playerid][pTextdraws][62], -6.000000, 30.000000);
	PlayerTextDrawSetSelectable(playerid, PlayerData[playerid][pTextdraws][62], 0);

	PlayerData[playerid][pTextdraws][67] = CreatePlayerTextDraw(playerid, 535.000000, 172.000000, "armor");
	PlayerTextDrawBackgroundColor(playerid, PlayerData[playerid][pTextdraws][67], 0);
	PlayerTextDrawFont(playerid, PlayerData[playerid][pTextdraws][67], 5);
	PlayerTextDrawLetterSize(playerid, PlayerData[playerid][pTextdraws][67], 0.539999, 1.399999);
	PlayerTextDrawColor(playerid, PlayerData[playerid][pTextdraws][67], -1);
	PlayerTextDrawSetOutline(playerid, PlayerData[playerid][pTextdraws][67], 1);
	PlayerTextDrawSetProportional(playerid, PlayerData[playerid][pTextdraws][67], 1);
	PlayerTextDrawUseBox(playerid, PlayerData[playerid][pTextdraws][67], 1);
	PlayerTextDrawBoxColor(playerid, PlayerData[playerid][pTextdraws][67], 0);
	PlayerTextDrawTextSize(playerid, PlayerData[playerid][pTextdraws][67], 52.000000, 39.000000);
	PlayerTextDrawSetPreviewModel(playerid, PlayerData[playerid][pTextdraws][67], 19142);
	PlayerTextDrawSetPreviewRot(playerid, PlayerData[playerid][pTextdraws][67], -20.0, -90.0, 0.0);

	PlayerData[playerid][pTextdraws][68] = CreatePlayerTextDraw(playerid, 577.000000, 186.000000, "100%");
	PlayerTextDrawBackgroundColor(playerid, PlayerData[playerid][pTextdraws][68], 255);
	PlayerTextDrawFont(playerid, PlayerData[playerid][pTextdraws][68], 1);
	PlayerTextDrawLetterSize(playerid, PlayerData[playerid][pTextdraws][68], 0.289999, 0.899999);
	PlayerTextDrawColor(playerid, PlayerData[playerid][pTextdraws][68], -1);
	PlayerTextDrawSetOutline(playerid, PlayerData[playerid][pTextdraws][68], 1);
	PlayerTextDrawSetProportional(playerid, PlayerData[playerid][pTextdraws][68], 1);
	PlayerTextDrawSetSelectable(playerid, PlayerData[playerid][pTextdraws][68], 0);

	PlayerData[playerid][pTextdraws][69] = CreatePlayerTextDraw(playerid, 13.000000, 431.000000, "~b~Checkpoint:~w~ Chargement..");
	PlayerTextDrawBackgroundColor(playerid, PlayerData[playerid][pTextdraws][69], 255);
	PlayerTextDrawFont(playerid, PlayerData[playerid][pTextdraws][69], 1);
	PlayerTextDrawLetterSize(playerid, PlayerData[playerid][pTextdraws][69], 0.270000, 1.000000);
	PlayerTextDrawColor(playerid, PlayerData[playerid][pTextdraws][69], -1);
	PlayerTextDrawSetOutline(playerid, PlayerData[playerid][pTextdraws][69], 1);
	PlayerTextDrawSetProportional(playerid, PlayerData[playerid][pTextdraws][69], 1);
	PlayerTextDrawSetSelectable(playerid, PlayerData[playerid][pTextdraws][69], 0);

	PlayerData[playerid][pTextdraws][70] = CreatePlayerTextDraw(playerid, 499.000000, 101.000000, "~g~Temps de prison:~w~ 00:00:00");
	PlayerTextDrawBackgroundColor(playerid, PlayerData[playerid][pTextdraws][70], 255);
	PlayerTextDrawFont(playerid, PlayerData[playerid][pTextdraws][70], 1);
	PlayerTextDrawLetterSize(playerid, PlayerData[playerid][pTextdraws][70], 0.270000, 1.000000);
	PlayerTextDrawColor(playerid, PlayerData[playerid][pTextdraws][70], -1);
	PlayerTextDrawSetOutline(playerid, PlayerData[playerid][pTextdraws][70], 1);
	PlayerTextDrawSetProportional(playerid, PlayerData[playerid][pTextdraws][70], 1);
	PlayerTextDrawSetSelectable(playerid, PlayerData[playerid][pTextdraws][70], 0);

	PlayerData[playerid][pTextdraws][71] = CreatePlayerTextDraw(playerid, 240.000000, 161.000000, "_");
	PlayerTextDrawBackgroundColor(playerid, PlayerData[playerid][pTextdraws][71], 255);
	PlayerTextDrawFont(playerid, PlayerData[playerid][pTextdraws][71], 1);
	PlayerTextDrawLetterSize(playerid, PlayerData[playerid][pTextdraws][71], 0.519999, 9.099995);
	PlayerTextDrawColor(playerid, PlayerData[playerid][pTextdraws][71], -1);
	PlayerTextDrawSetOutline(playerid, PlayerData[playerid][pTextdraws][71], 0);
	PlayerTextDrawSetProportional(playerid, PlayerData[playerid][pTextdraws][71], 1);
	PlayerTextDrawSetShadow(playerid, PlayerData[playerid][pTextdraws][71], 1);
	PlayerTextDrawUseBox(playerid, PlayerData[playerid][pTextdraws][71], 1);
	PlayerTextDrawBoxColor(playerid, PlayerData[playerid][pTextdraws][71], 102);
	PlayerTextDrawTextSize(playerid, PlayerData[playerid][pTextdraws][71], 421.000000, 40.000000);
	PlayerTextDrawSetSelectable(playerid, PlayerData[playerid][pTextdraws][71], 0);

	PlayerData[playerid][pTextdraws][72] = CreatePlayerTextDraw(playerid, 326.000000, 161.000000, "Richard Jackson");
	PlayerTextDrawAlignment(playerid, PlayerData[playerid][pTextdraws][72], 2);
	PlayerTextDrawBackgroundColor(playerid, PlayerData[playerid][pTextdraws][72], 255);
	PlayerTextDrawFont(playerid, PlayerData[playerid][pTextdraws][72], 2);
	PlayerTextDrawLetterSize(playerid, PlayerData[playerid][pTextdraws][72], 0.330000, 1.199999);
	PlayerTextDrawColor(playerid, PlayerData[playerid][pTextdraws][72], -1);
	PlayerTextDrawSetOutline(playerid, PlayerData[playerid][pTextdraws][72], 1);
	PlayerTextDrawSetProportional(playerid, PlayerData[playerid][pTextdraws][72], 1);
	PlayerTextDrawSetSelectable(playerid, PlayerData[playerid][pTextdraws][72], 0);

	PlayerData[playerid][pTextdraws][73] = CreatePlayerTextDraw(playerid, 233.000000, 173.000000, "skin");
	PlayerTextDrawBackgroundColor(playerid, PlayerData[playerid][pTextdraws][73], 0);
	PlayerTextDrawFont(playerid, PlayerData[playerid][pTextdraws][73], 5);
	PlayerTextDrawLetterSize(playerid, PlayerData[playerid][pTextdraws][73], 0.619999, 1.400000);
	PlayerTextDrawColor(playerid, PlayerData[playerid][pTextdraws][73], -1);
	PlayerTextDrawSetOutline(playerid, PlayerData[playerid][pTextdraws][73], 1);
	PlayerTextDrawSetProportional(playerid, PlayerData[playerid][pTextdraws][73], 1);
	PlayerTextDrawUseBox(playerid, PlayerData[playerid][pTextdraws][73], 1);
	PlayerTextDrawBoxColor(playerid, PlayerData[playerid][pTextdraws][73], 0);
	PlayerTextDrawTextSize(playerid, PlayerData[playerid][pTextdraws][73], 59.000000, 59.000000);
	PlayerTextDrawSetSelectable(playerid, PlayerData[playerid][pTextdraws][73], 0);

	PlayerData[playerid][pTextdraws][74] = CreatePlayerTextDraw(playerid, 280.000000, 179.000000, "~b~DOB:~w~ 17/02/1998");
	PlayerTextDrawBackgroundColor(playerid, PlayerData[playerid][pTextdraws][74], 255);
	PlayerTextDrawFont(playerid, PlayerData[playerid][pTextdraws][74], 1);
	PlayerTextDrawLetterSize(playerid, PlayerData[playerid][pTextdraws][74], 0.300000, 1.100000);
	PlayerTextDrawColor(playerid, PlayerData[playerid][pTextdraws][74], -1);
	PlayerTextDrawSetOutline(playerid, PlayerData[playerid][pTextdraws][74], 1);
	PlayerTextDrawSetProportional(playerid, PlayerData[playerid][pTextdraws][74], 1);
	PlayerTextDrawSetSelectable(playerid, PlayerData[playerid][pTextdraws][74], 0);

	PlayerData[playerid][pTextdraws][75] = CreatePlayerTextDraw(playerid, 280.000000, 189.500000, "~b~Origine:~w~ Texas, USA");
	PlayerTextDrawBackgroundColor(playerid, PlayerData[playerid][pTextdraws][75], 255);
	PlayerTextDrawFont(playerid, PlayerData[playerid][pTextdraws][75], 1);
	PlayerTextDrawLetterSize(playerid, PlayerData[playerid][pTextdraws][75], 0.300000, 1.100000);
	PlayerTextDrawColor(playerid, PlayerData[playerid][pTextdraws][75], -1);
	PlayerTextDrawSetOutline(playerid, PlayerData[playerid][pTextdraws][75], 1);
	PlayerTextDrawSetProportional(playerid, PlayerData[playerid][pTextdraws][75], 1);
	PlayerTextDrawSetSelectable(playerid, PlayerData[playerid][pTextdraws][75], 0);

	PlayerData[playerid][pTextdraws][76] = CreatePlayerTextDraw(playerid, 280.000000, 200.000000, "~b~Apparition:~w~ 2 mois");
	PlayerTextDrawBackgroundColor(playerid, PlayerData[playerid][pTextdraws][76], 255);
	PlayerTextDrawFont(playerid, PlayerData[playerid][pTextdraws][76], 1);
	PlayerTextDrawLetterSize(playerid, PlayerData[playerid][pTextdraws][76], 0.300000, 1.100000);
	PlayerTextDrawColor(playerid, PlayerData[playerid][pTextdraws][76], -1);
	PlayerTextDrawSetOutline(playerid, PlayerData[playerid][pTextdraws][76], 1);
	PlayerTextDrawSetProportional(playerid, PlayerData[playerid][pTextdraws][76], 1);
	PlayerTextDrawSetSelectable(playerid, PlayerData[playerid][pTextdraws][76], 0);

	PlayerData[playerid][pTextdraws][77] = CreatePlayerTextDraw(playerid, 281.000000, 210.000000, "~b~Jouer:~w~ il y a 3 mois");
	PlayerTextDrawBackgroundColor(playerid, PlayerData[playerid][pTextdraws][77], 255);
	PlayerTextDrawFont(playerid, PlayerData[playerid][pTextdraws][77], 1);
	PlayerTextDrawLetterSize(playerid, PlayerData[playerid][pTextdraws][77], 0.300000, 1.100000);
	PlayerTextDrawColor(playerid, PlayerData[playerid][pTextdraws][77], -1);
	PlayerTextDrawSetOutline(playerid, PlayerData[playerid][pTextdraws][77], 1);
	PlayerTextDrawSetProportional(playerid, PlayerData[playerid][pTextdraws][77], 1);
	PlayerTextDrawSetSelectable(playerid, PlayerData[playerid][pTextdraws][77], 0);

	PlayerData[playerid][pTextdraws][78] = CreatePlayerTextDraw(playerid, 301.000000, 231.000000, "Spawn");
	PlayerTextDrawBackgroundColor(playerid, PlayerData[playerid][pTextdraws][78], 255);
	PlayerTextDrawFont(playerid, PlayerData[playerid][pTextdraws][78], 1);
	PlayerTextDrawLetterSize(playerid, PlayerData[playerid][pTextdraws][78], 0.360000, 1.000000);
	PlayerTextDrawColor(playerid, PlayerData[playerid][pTextdraws][78], -1);
	PlayerTextDrawSetOutline(playerid, PlayerData[playerid][pTextdraws][78], 0);
	PlayerTextDrawSetProportional(playerid, PlayerData[playerid][pTextdraws][78], 1);
	PlayerTextDrawSetShadow(playerid, PlayerData[playerid][pTextdraws][78], 1);
	PlayerTextDrawUseBox(playerid, PlayerData[playerid][pTextdraws][78], 1);
	PlayerTextDrawBoxColor(playerid, PlayerData[playerid][pTextdraws][78], -205);
	PlayerTextDrawTextSize(playerid, PlayerData[playerid][pTextdraws][78], 340.000000, 20.000000);
	PlayerTextDrawSetSelectable(playerid, PlayerData[playerid][pTextdraws][78], 1);

	PlayerData[playerid][pTextdraws][79] = CreatePlayerTextDraw(playerid, 345.000000, 231.000000, "Supp");
	PlayerTextDrawBackgroundColor(playerid, PlayerData[playerid][pTextdraws][79], 255);
	PlayerTextDrawFont(playerid, PlayerData[playerid][pTextdraws][79], 1);
	PlayerTextDrawLetterSize(playerid, PlayerData[playerid][pTextdraws][79], 0.360000, 1.000000);
	PlayerTextDrawColor(playerid, PlayerData[playerid][pTextdraws][79], -1);
	PlayerTextDrawSetOutline(playerid, PlayerData[playerid][pTextdraws][79], 0);
	PlayerTextDrawSetProportional(playerid, PlayerData[playerid][pTextdraws][79], 1);
	PlayerTextDrawSetShadow(playerid, PlayerData[playerid][pTextdraws][79], 1);
	PlayerTextDrawUseBox(playerid, PlayerData[playerid][pTextdraws][79], 1);
	PlayerTextDrawBoxColor(playerid, PlayerData[playerid][pTextdraws][79], -205);
	PlayerTextDrawTextSize(playerid, PlayerData[playerid][pTextdraws][79], 382.000000, 20.000000);
	PlayerTextDrawSetSelectable(playerid, PlayerData[playerid][pTextdraws][79], 1);

	PlayerData[playerid][pTextdraws][80] = CreatePlayerTextDraw(playerid, 387.000000, 231.000000, "<<"); //381
	PlayerTextDrawBackgroundColor(playerid, PlayerData[playerid][pTextdraws][80], 255);
	PlayerTextDrawFont(playerid, PlayerData[playerid][pTextdraws][80], 1);
	PlayerTextDrawLetterSize(playerid, PlayerData[playerid][pTextdraws][80], 0.360000, 1.000000);
	PlayerTextDrawColor(playerid, PlayerData[playerid][pTextdraws][80], -1);
	PlayerTextDrawSetOutline(playerid, PlayerData[playerid][pTextdraws][80], 0);
	PlayerTextDrawSetProportional(playerid, PlayerData[playerid][pTextdraws][80], 1);
	PlayerTextDrawSetShadow(playerid, PlayerData[playerid][pTextdraws][80], 1);
	PlayerTextDrawUseBox(playerid, PlayerData[playerid][pTextdraws][80], 1);
	PlayerTextDrawBoxColor(playerid, PlayerData[playerid][pTextdraws][80], -205);
	PlayerTextDrawTextSize(playerid, PlayerData[playerid][pTextdraws][80], 421.000000, 20.000000); //415
	PlayerTextDrawSetSelectable(playerid, PlayerData[playerid][pTextdraws][80], 1);

	PlayerData[playerid][pTextdraws][81] = CreatePlayerTextDraw(playerid, 553.000000, 99.000000, "~b~~h~Cibles:~w~ 0/10");
	PlayerTextDrawAlignment(playerid, PlayerData[playerid][pTextdraws][81], 2);
	PlayerTextDrawBackgroundColor(playerid, PlayerData[playerid][pTextdraws][81], 255);
	PlayerTextDrawFont(playerid, PlayerData[playerid][pTextdraws][81], 1);
	PlayerTextDrawLetterSize(playerid, PlayerData[playerid][pTextdraws][81], 0.390000, 1.200000);
	PlayerTextDrawColor(playerid, PlayerData[playerid][pTextdraws][81], -1);
	PlayerTextDrawSetOutline(playerid, PlayerData[playerid][pTextdraws][81], 1);
	PlayerTextDrawSetProportional(playerid, PlayerData[playerid][pTextdraws][81], 1);
	PlayerTextDrawSetSelectable(playerid, PlayerData[playerid][pTextdraws][81], 0);

	PlayerData[playerid][pTextdraws][82] = CreatePlayerTextDraw(playerid, 37.000000, 315.000000, "~b~Chargé:~w~ Fournitures~n~~b~Caisse chargées:~w~ 6/6");
	PlayerTextDrawBackgroundColor(playerid, PlayerData[playerid][pTextdraws][82], 255);
	PlayerTextDrawFont(playerid, PlayerData[playerid][pTextdraws][82], 1);
	PlayerTextDrawLetterSize(playerid, PlayerData[playerid][pTextdraws][82], 0.280000, 1.000000);
	PlayerTextDrawColor(playerid, PlayerData[playerid][pTextdraws][82], -1);
	PlayerTextDrawSetOutline(playerid, PlayerData[playerid][pTextdraws][82], 1);
	PlayerTextDrawSetProportional(playerid, PlayerData[playerid][pTextdraws][82], 1);
	PlayerTextDrawSetSelectable(playerid, PlayerData[playerid][pTextdraws][82], 0);

	PlayerData[playerid][pTextdraws][83] = CreatePlayerTextDraw(playerid, 229.999877, 150.177764, "box");
	PlayerTextDrawLetterSize(playerid, PlayerData[playerid][pTextdraws][83], 0.000000, 8.833326);
	PlayerTextDrawTextSize(playerid, PlayerData[playerid][pTextdraws][83], 408.999938, 0.000000);
	PlayerTextDrawAlignment(playerid, PlayerData[playerid][pTextdraws][83], 1);
	PlayerTextDrawColor(playerid, PlayerData[playerid][pTextdraws][83], -1);
	PlayerTextDrawUseBox(playerid, PlayerData[playerid][pTextdraws][83], 1);
	PlayerTextDrawBoxColor(playerid, PlayerData[playerid][pTextdraws][83], 84215276);
	PlayerTextDrawSetShadow(playerid, PlayerData[playerid][pTextdraws][83], 0);
	PlayerTextDrawSetOutline(playerid, PlayerData[playerid][pTextdraws][83], 0);
	PlayerTextDrawBackgroundColor(playerid, PlayerData[playerid][pTextdraws][83], 1768516086);
	PlayerTextDrawFont(playerid, PlayerData[playerid][pTextdraws][83], 1);
	PlayerTextDrawSetProportional(playerid, PlayerData[playerid][pTextdraws][83], 1);
	PlayerTextDrawSetShadow(playerid, PlayerData[playerid][pTextdraws][83], 0);

	PlayerData[playerid][pTextdraws][84] = CreatePlayerTextDraw(playerid, 228.666687, 149.607421, "");
	PlayerTextDrawLetterSize(playerid, PlayerData[playerid][pTextdraws][84], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, PlayerData[playerid][pTextdraws][84], 81.000007, 81.288879);
	PlayerTextDrawAlignment(playerid, PlayerData[playerid][pTextdraws][84], 1);
	PlayerTextDrawColor(playerid, PlayerData[playerid][pTextdraws][84], -1);
	PlayerTextDrawSetShadow(playerid, PlayerData[playerid][pTextdraws][84], 0);
	PlayerTextDrawSetOutline(playerid, PlayerData[playerid][pTextdraws][84], 0);
	PlayerTextDrawBackgroundColor(playerid, PlayerData[playerid][pTextdraws][84], 84215296);
	PlayerTextDrawFont(playerid, PlayerData[playerid][pTextdraws][84], 5);
	PlayerTextDrawSetProportional(playerid, PlayerData[playerid][pTextdraws][84], 1);
	PlayerTextDrawSetShadow(playerid, PlayerData[playerid][pTextdraws][84], 0);
	PlayerTextDrawSetPreviewModel(playerid, PlayerData[playerid][pTextdraws][84], 0);
	PlayerTextDrawSetPreviewRot(playerid, PlayerData[playerid][pTextdraws][84], 0.000000, 0.000000, 0.000000, 1.000000);

	PlayerData[playerid][pTextdraws][85] = CreatePlayerTextDraw(playerid, 347.333435, 214.474044, "SPAWN");
	PlayerTextDrawLetterSize(playerid, PlayerData[playerid][pTextdraws][85], 0.400000, 1.600000);
	PlayerTextDrawTextSize(playerid, PlayerData[playerid][pTextdraws][85], 401.333648, 0.000000);
	PlayerTextDrawAlignment(playerid, PlayerData[playerid][pTextdraws][85], 1);
	PlayerTextDrawColor(playerid, PlayerData[playerid][pTextdraws][85], -1768516006);
	PlayerTextDrawSetShadow(playerid, PlayerData[playerid][pTextdraws][85], -1);
	PlayerTextDrawSetOutline(playerid, PlayerData[playerid][pTextdraws][85], -1);
	PlayerTextDrawBackgroundColor(playerid, PlayerData[playerid][pTextdraws][85], 255);
	PlayerTextDrawFont(playerid, PlayerData[playerid][pTextdraws][85], 2);
	PlayerTextDrawSetProportional(playerid, PlayerData[playerid][pTextdraws][85], 1);
	PlayerTextDrawSetShadow(playerid, PlayerData[playerid][pTextdraws][85], -1);
	PlayerTextDrawSetSelectable(playerid, PlayerData[playerid][pTextdraws][85], true);

	PlayerData[playerid][pTextdraws][86] = CreatePlayerTextDraw(playerid, 291.333374, 151.837005, "AAAAAAAAAA~n~AAAAAAAAAA");
	PlayerTextDrawLetterSize(playerid, PlayerData[playerid][pTextdraws][86], 0.400000, 1.600000);
	PlayerTextDrawAlignment(playerid, PlayerData[playerid][pTextdraws][86], 1);
	PlayerTextDrawColor(playerid, PlayerData[playerid][pTextdraws][86], -1768516002);
	PlayerTextDrawSetShadow(playerid, PlayerData[playerid][pTextdraws][86], 1);
	PlayerTextDrawSetOutline(playerid, PlayerData[playerid][pTextdraws][86], 1);
	PlayerTextDrawBackgroundColor(playerid, PlayerData[playerid][pTextdraws][86], 255);
	PlayerTextDrawFont(playerid, PlayerData[playerid][pTextdraws][86], 1);
	PlayerTextDrawSetProportional(playerid, PlayerData[playerid][pTextdraws][86], 1);
	PlayerTextDrawSetShadow(playerid, PlayerData[playerid][pTextdraws][86], 1);

	PlayerData[playerid][pTextdraws][88] = CreatePlayerTextDraw(playerid, 327.000000, 424.000000, "~r~Texte a pied");
	PlayerTextDrawAlignment(playerid, PlayerData[playerid][pTextdraws][88], 2);
	PlayerTextDrawBackgroundColor(playerid, PlayerData[playerid][pTextdraws][88], 255);
	PlayerTextDrawFont(playerid, PlayerData[playerid][pTextdraws][88], 1);
	PlayerTextDrawLetterSize(playerid, PlayerData[playerid][pTextdraws][88], 0.460000, 1.400000);
	PlayerTextDrawColor(playerid, PlayerData[playerid][pTextdraws][88], -1);
	PlayerTextDrawSetOutline(playerid, PlayerData[playerid][pTextdraws][88], 1);
	PlayerTextDrawSetProportional(playerid, PlayerData[playerid][pTextdraws][88], 1);
	PlayerTextDrawSetSelectable(playerid, PlayerData[playerid][pTextdraws][88], 0);

	// Système de spec:
	TD_SPEC_PLAYER[playerid][0] = CreatePlayerTextDraw(playerid, 478.800109, 327.386688, "box");
	PlayerTextDrawLetterSize(playerid, TD_SPEC_PLAYER[playerid][0], 0.000000, 9.079998);
	PlayerTextDrawTextSize(playerid, TD_SPEC_PLAYER[playerid][0], 632.000000, 0.000000);
	PlayerTextDrawAlignment(playerid, TD_SPEC_PLAYER[playerid][0], 1);
	PlayerTextDrawColor(playerid, TD_SPEC_PLAYER[playerid][0], -1);
	PlayerTextDrawUseBox(playerid, TD_SPEC_PLAYER[playerid][0], 1);
	PlayerTextDrawBoxColor(playerid, TD_SPEC_PLAYER[playerid][0], 255);
	PlayerTextDrawSetShadow(playerid, TD_SPEC_PLAYER[playerid][0], 0);
	PlayerTextDrawSetOutline(playerid, TD_SPEC_PLAYER[playerid][0], 0);
	PlayerTextDrawBackgroundColor(playerid, TD_SPEC_PLAYER[playerid][0], 255);
	PlayerTextDrawFont(playerid, TD_SPEC_PLAYER[playerid][0], 2);
	PlayerTextDrawSetProportional(playerid, TD_SPEC_PLAYER[playerid][0], 1);
	PlayerTextDrawSetShadow(playerid, TD_SPEC_PLAYER[playerid][0], 0);

	TD_SPEC_PLAYER[playerid][1] = CreatePlayerTextDraw(playerid, 480.000335, 337.291839, "PING:");
	PlayerTextDrawLetterSize(playerid, TD_SPEC_PLAYER[playerid][1], 0.312397, 1.395907);
	PlayerTextDrawAlignment(playerid, TD_SPEC_PLAYER[playerid][1], 1);
	PlayerTextDrawColor(playerid, TD_SPEC_PLAYER[playerid][1], -13041409);
	PlayerTextDrawSetShadow(playerid, TD_SPEC_PLAYER[playerid][1], 0);
	PlayerTextDrawSetOutline(playerid, TD_SPEC_PLAYER[playerid][1], 0);
	PlayerTextDrawBackgroundColor(playerid, TD_SPEC_PLAYER[playerid][1], 255);
	PlayerTextDrawFont(playerid, TD_SPEC_PLAYER[playerid][1], 1);
	PlayerTextDrawSetProportional(playerid, TD_SPEC_PLAYER[playerid][1], 1);
	PlayerTextDrawSetShadow(playerid, TD_SPEC_PLAYER[playerid][1], 0);

	TD_SPEC_PLAYER[playerid][2] = CreatePlayerTextDraw(playerid, 479.900329, 326.391174, "PRENOM_NOM");
	PlayerTextDrawLetterSize(playerid, TD_SPEC_PLAYER[playerid][2], 0.312397, 1.395907);
	PlayerTextDrawAlignment(playerid, TD_SPEC_PLAYER[playerid][2], 1);
	PlayerTextDrawColor(playerid, TD_SPEC_PLAYER[playerid][2], -1);
	PlayerTextDrawSetShadow(playerid, TD_SPEC_PLAYER[playerid][2], 0);
	PlayerTextDrawSetOutline(playerid, TD_SPEC_PLAYER[playerid][2], 0);
	PlayerTextDrawBackgroundColor(playerid, TD_SPEC_PLAYER[playerid][2], 255);
	PlayerTextDrawFont(playerid, TD_SPEC_PLAYER[playerid][2], 1);
	PlayerTextDrawSetProportional(playerid, TD_SPEC_PLAYER[playerid][2], 1);
	PlayerTextDrawSetShadow(playerid, TD_SPEC_PLAYER[playerid][2], 0);

	TD_SPEC_PLAYER[playerid][3] = CreatePlayerTextDraw(playerid, 480.000335, 348.492523, "PACKETLOSS:");
	PlayerTextDrawLetterSize(playerid, TD_SPEC_PLAYER[playerid][3], 0.312397, 1.395907);
	PlayerTextDrawAlignment(playerid, TD_SPEC_PLAYER[playerid][3], 1);
	PlayerTextDrawColor(playerid, TD_SPEC_PLAYER[playerid][3], -14284033);
	PlayerTextDrawSetShadow(playerid, TD_SPEC_PLAYER[playerid][3], 0);
	PlayerTextDrawSetOutline(playerid, TD_SPEC_PLAYER[playerid][3], 0);
	PlayerTextDrawBackgroundColor(playerid, TD_SPEC_PLAYER[playerid][3], 255);
	PlayerTextDrawFont(playerid, TD_SPEC_PLAYER[playerid][3], 1);
	PlayerTextDrawSetProportional(playerid, TD_SPEC_PLAYER[playerid][3], 1);
	PlayerTextDrawSetShadow(playerid, TD_SPEC_PLAYER[playerid][3], 0);

	TD_SPEC_PLAYER[playerid][4] = CreatePlayerTextDraw(playerid, 480.000335, 359.193176, "ARME:");
	PlayerTextDrawLetterSize(playerid, TD_SPEC_PLAYER[playerid][4], 0.312397, 1.395907);
	PlayerTextDrawAlignment(playerid, TD_SPEC_PLAYER[playerid][4], 1);
	PlayerTextDrawColor(playerid, TD_SPEC_PLAYER[playerid][4], -14089985);
	PlayerTextDrawSetShadow(playerid, TD_SPEC_PLAYER[playerid][4], 0);
	PlayerTextDrawSetOutline(playerid, TD_SPEC_PLAYER[playerid][4], 0);
	PlayerTextDrawBackgroundColor(playerid, TD_SPEC_PLAYER[playerid][4], 255);
	PlayerTextDrawFont(playerid, TD_SPEC_PLAYER[playerid][4], 1);
	PlayerTextDrawSetProportional(playerid, TD_SPEC_PLAYER[playerid][4], 1);
	PlayerTextDrawSetShadow(playerid, TD_SPEC_PLAYER[playerid][4], 0);

	TD_SPEC_PLAYER[playerid][5] = CreatePlayerTextDraw(playerid, 480.000335, 370.193847, "HP/ARM:");
	PlayerTextDrawLetterSize(playerid, TD_SPEC_PLAYER[playerid][5], 0.312397, 1.395907);
	PlayerTextDrawAlignment(playerid, TD_SPEC_PLAYER[playerid][5], 1);
	PlayerTextDrawColor(playerid, TD_SPEC_PLAYER[playerid][5], -14286593);
	PlayerTextDrawSetShadow(playerid, TD_SPEC_PLAYER[playerid][5], 0);
	PlayerTextDrawSetOutline(playerid, TD_SPEC_PLAYER[playerid][5], 0);
	PlayerTextDrawBackgroundColor(playerid, TD_SPEC_PLAYER[playerid][5], 255);
	PlayerTextDrawFont(playerid, TD_SPEC_PLAYER[playerid][5], 1);
	PlayerTextDrawSetProportional(playerid, TD_SPEC_PLAYER[playerid][5], 1);
	PlayerTextDrawSetShadow(playerid, TD_SPEC_PLAYER[playerid][5], 0);

	TD_SPEC_PLAYER[playerid][6] = CreatePlayerTextDraw(playerid, 479.600311, 380.894500, "ID_JOUEUR:");
	PlayerTextDrawLetterSize(playerid, TD_SPEC_PLAYER[playerid][6], 0.312397, 1.395907);
	PlayerTextDrawAlignment(playerid, TD_SPEC_PLAYER[playerid][6], 1);
	PlayerTextDrawColor(playerid, TD_SPEC_PLAYER[playerid][6], -14941953);
	PlayerTextDrawSetShadow(playerid, TD_SPEC_PLAYER[playerid][6], 0);
	PlayerTextDrawSetOutline(playerid, TD_SPEC_PLAYER[playerid][6], 0);
	PlayerTextDrawBackgroundColor(playerid, TD_SPEC_PLAYER[playerid][6], 255);
	PlayerTextDrawFont(playerid, TD_SPEC_PLAYER[playerid][6], 1);
	PlayerTextDrawSetProportional(playerid, TD_SPEC_PLAYER[playerid][6], 1);
	PlayerTextDrawSetShadow(playerid, TD_SPEC_PLAYER[playerid][6], 0);

	TD_SPEC_PLAYER[playerid][7] = CreatePlayerTextDraw(playerid, 480.000335, 391.792907, "LEVEL:");
	PlayerTextDrawLetterSize(playerid, TD_SPEC_PLAYER[playerid][7], 0.312397, 1.395907);
	PlayerTextDrawAlignment(playerid, TD_SPEC_PLAYER[playerid][7], 1);
	PlayerTextDrawColor(playerid, TD_SPEC_PLAYER[playerid][7], -15400705);
	PlayerTextDrawSetShadow(playerid, TD_SPEC_PLAYER[playerid][7], 0);
	PlayerTextDrawSetOutline(playerid, TD_SPEC_PLAYER[playerid][7], 0);
	PlayerTextDrawBackgroundColor(playerid, TD_SPEC_PLAYER[playerid][7], 255);
	PlayerTextDrawFont(playerid, TD_SPEC_PLAYER[playerid][7], 1);
	PlayerTextDrawSetProportional(playerid, TD_SPEC_PLAYER[playerid][7], 1);
	PlayerTextDrawSetShadow(playerid, TD_SPEC_PLAYER[playerid][7], 0);

	TD_SPEC_PLAYER[playerid][8] = CreatePlayerTextDraw(playerid, 513.101989, 391.792907, "LEVELID");
	PlayerTextDrawLetterSize(playerid, TD_SPEC_PLAYER[playerid][8], 0.312397, 1.395907);
	PlayerTextDrawAlignment(playerid, TD_SPEC_PLAYER[playerid][8], 1);
	PlayerTextDrawColor(playerid, TD_SPEC_PLAYER[playerid][8], -1);
	PlayerTextDrawSetShadow(playerid, TD_SPEC_PLAYER[playerid][8], 0);
	PlayerTextDrawSetOutline(playerid, TD_SPEC_PLAYER[playerid][8], 0);
	PlayerTextDrawBackgroundColor(playerid, TD_SPEC_PLAYER[playerid][8], 255);
	PlayerTextDrawFont(playerid, TD_SPEC_PLAYER[playerid][8], 1);
	PlayerTextDrawSetProportional(playerid, TD_SPEC_PLAYER[playerid][8], 1);
	PlayerTextDrawSetShadow(playerid, TD_SPEC_PLAYER[playerid][8], 0);

	TD_SPEC_PLAYER[playerid][9] = CreatePlayerTextDraw(playerid, 539.502258, 380.944183, "JOUEURID");
	PlayerTextDrawLetterSize(playerid, TD_SPEC_PLAYER[playerid][9], 0.312397, 1.395907);
	PlayerTextDrawAlignment(playerid, TD_SPEC_PLAYER[playerid][9], 1);
	PlayerTextDrawColor(playerid, TD_SPEC_PLAYER[playerid][9], -1);
	PlayerTextDrawSetShadow(playerid, TD_SPEC_PLAYER[playerid][9], 0);
	PlayerTextDrawSetOutline(playerid, TD_SPEC_PLAYER[playerid][9], 0);
	PlayerTextDrawBackgroundColor(playerid, TD_SPEC_PLAYER[playerid][9], 255);
	PlayerTextDrawFont(playerid, TD_SPEC_PLAYER[playerid][9], 1);
	PlayerTextDrawSetProportional(playerid, TD_SPEC_PLAYER[playerid][9], 1);
	PlayerTextDrawSetShadow(playerid, TD_SPEC_PLAYER[playerid][9], 0);

	TD_SPEC_PLAYER[playerid][10] = CreatePlayerTextDraw(playerid, 524.600280, 370.196105, "HEALID");
	PlayerTextDrawLetterSize(playerid, TD_SPEC_PLAYER[playerid][10], 0.312397, 1.395907);
	PlayerTextDrawAlignment(playerid, TD_SPEC_PLAYER[playerid][10], 1);
	PlayerTextDrawColor(playerid, TD_SPEC_PLAYER[playerid][10], -1);
	PlayerTextDrawSetShadow(playerid, TD_SPEC_PLAYER[playerid][10], 0);
	PlayerTextDrawSetOutline(playerid, TD_SPEC_PLAYER[playerid][10], 0);
	PlayerTextDrawBackgroundColor(playerid, TD_SPEC_PLAYER[playerid][10], 255);
	PlayerTextDrawFont(playerid, TD_SPEC_PLAYER[playerid][10], 1);
	PlayerTextDrawSetProportional(playerid, TD_SPEC_PLAYER[playerid][10], 1);
	PlayerTextDrawSetShadow(playerid, TD_SPEC_PLAYER[playerid][10], 0);

	TD_SPEC_PLAYER[playerid][11] = CreatePlayerTextDraw(playerid, 521.300292, 359.345092, "WEAPONID");
	PlayerTextDrawLetterSize(playerid, TD_SPEC_PLAYER[playerid][11], 0.312397, 1.395907);
	PlayerTextDrawAlignment(playerid, TD_SPEC_PLAYER[playerid][11], 1);
	PlayerTextDrawColor(playerid, TD_SPEC_PLAYER[playerid][11], -1);
	PlayerTextDrawSetShadow(playerid, TD_SPEC_PLAYER[playerid][11], 0);
	PlayerTextDrawSetOutline(playerid, TD_SPEC_PLAYER[playerid][11], 0);
	PlayerTextDrawBackgroundColor(playerid, TD_SPEC_PLAYER[playerid][11], 255);
	PlayerTextDrawFont(playerid, TD_SPEC_PLAYER[playerid][11], 1);
	PlayerTextDrawSetProportional(playerid, TD_SPEC_PLAYER[playerid][11], 1);
	PlayerTextDrawSetShadow(playerid, TD_SPEC_PLAYER[playerid][11], 0);

	TD_SPEC_PLAYER[playerid][12] = CreatePlayerTextDraw(playerid, 547.500122, 348.396301, "PACKETID");
	PlayerTextDrawLetterSize(playerid, TD_SPEC_PLAYER[playerid][12], 0.312397, 1.395907);
	PlayerTextDrawAlignment(playerid, TD_SPEC_PLAYER[playerid][12], 1);
	PlayerTextDrawColor(playerid, TD_SPEC_PLAYER[playerid][12], -1);
	PlayerTextDrawSetShadow(playerid, TD_SPEC_PLAYER[playerid][12], 0);
	PlayerTextDrawSetOutline(playerid, TD_SPEC_PLAYER[playerid][12], 0);
	PlayerTextDrawBackgroundColor(playerid, TD_SPEC_PLAYER[playerid][12], 255);
	PlayerTextDrawFont(playerid, TD_SPEC_PLAYER[playerid][12], 1);
	PlayerTextDrawSetProportional(playerid, TD_SPEC_PLAYER[playerid][12], 1);
	PlayerTextDrawSetShadow(playerid, TD_SPEC_PLAYER[playerid][12], 0);

	TD_SPEC_PLAYER[playerid][13] = CreatePlayerTextDraw(playerid, 511.000122, 337.247406, "PINGID");
	PlayerTextDrawLetterSize(playerid, TD_SPEC_PLAYER[playerid][13], 0.312397, 1.395907);
	PlayerTextDrawAlignment(playerid, TD_SPEC_PLAYER[playerid][13], 1);
	PlayerTextDrawColor(playerid, TD_SPEC_PLAYER[playerid][13], -1);
	PlayerTextDrawSetShadow(playerid, TD_SPEC_PLAYER[playerid][13], 0);
	PlayerTextDrawSetOutline(playerid, TD_SPEC_PLAYER[playerid][13], 0);
	PlayerTextDrawBackgroundColor(playerid, TD_SPEC_PLAYER[playerid][13], 255);
	PlayerTextDrawFont(playerid, TD_SPEC_PLAYER[playerid][13], 1);
	PlayerTextDrawSetProportional(playerid, TD_SPEC_PLAYER[playerid][13], 1);
	PlayerTextDrawSetShadow(playerid, TD_SPEC_PLAYER[playerid][13], 0);

	TD_SPEC_PLAYER[playerid][14] = CreatePlayerTextDraw(playerid, 477.200134, 325.395599, "box");
	PlayerTextDrawLetterSize(playerid, TD_SPEC_PLAYER[playerid][14], 0.000000, 9.479996);
	PlayerTextDrawTextSize(playerid, TD_SPEC_PLAYER[playerid][14], 633.340332, 0.000000);
	PlayerTextDrawAlignment(playerid, TD_SPEC_PLAYER[playerid][14], 1);
	PlayerTextDrawColor(playerid, TD_SPEC_PLAYER[playerid][14], -1);
	PlayerTextDrawUseBox(playerid, TD_SPEC_PLAYER[playerid][14], 1);
	PlayerTextDrawBoxColor(playerid, TD_SPEC_PLAYER[playerid][14], 61);
	PlayerTextDrawSetShadow(playerid, TD_SPEC_PLAYER[playerid][14], 0);
	PlayerTextDrawSetOutline(playerid, TD_SPEC_PLAYER[playerid][14], 0);
	PlayerTextDrawBackgroundColor(playerid, TD_SPEC_PLAYER[playerid][14], 255);
	PlayerTextDrawFont(playerid, TD_SPEC_PLAYER[playerid][14], 2);
	PlayerTextDrawSetProportional(playerid, TD_SPEC_PLAYER[playerid][14], 1);
	PlayerTextDrawSetShadow(playerid, TD_SPEC_PLAYER[playerid][14], 0);

}

stock ShowPlayerFooter(playerid, string[], time = 5000) {
	if (PlayerData[playerid][pShowFooter]) {
		PlayerTextDrawHide(playerid, PlayerData[playerid][pTextdraws][88]);
		KillTimer(PlayerData[playerid][pFooterTimer]);
	}
	FixString(string);
	PlayerTextDrawSetString(playerid, PlayerData[playerid][pTextdraws][88], string);
	PlayerTextDrawShow(playerid, PlayerData[playerid][pTextdraws][88]);

	PlayerData[playerid][pShowFooter] = true;
	PlayerData[playerid][pFooterTimer] = SetTimerEx("HidePlayerFooter", time, false, "d", playerid);
}

forward HidePlayerFooter(playerid);
public HidePlayerFooter(playerid) {

	if (!PlayerData[playerid][pShowFooter])
	return 0;

	PlayerData[playerid][pShowFooter] = false;
	return PlayerTextDrawHide(playerid, PlayerData[playerid][pTextdraws][88]);
}


ResetStatistics(playerid)
{
	for (new i = 0; i < 3; i ++)
	{
		for (new j = 0; j < 9; j ++)
		{
			AccessoryData[playerid][i][j] = 0.0;
		}
	}
	for (new i = 0; i != MAX_INVENTORY; i ++) {
		InventoryData[playerid][i][invExists] = false;
		InventoryData[playerid][i][invModel] = 0;
		InventoryData[playerid][i][invQuantity] = 0;
	}
	for (new i = 0; i < 12; i ++) {
		PlayerData[playerid][pGuns][i] = 0;
		PlayerData[playerid][pAmmo][i] = 0;
	}
	for (new i = 0; i != MAX_HOUSE_FURNITURE; i ++) {
		ListedFurniture[playerid][i] = -1;
	}
	for (new i = 0; i < MAX_LISTED_ITEMS; i ++) {
		NearestItems[playerid][i] = -1;
	}
	for (new i = 0; i != MAX_CONTACTS; i ++) {
		ContactData[playerid][i][contactExists] = false;
		ContactData[playerid][i][contactID] = 0;
		ContactData[playerid][i][contactNumber] = 0;
		ListedContacts[playerid][i] = -1;
	}
	for (new i = 0; i != MAX_GPS_LOCATIONS; i ++) {
		LocationData[playerid][i][locationExists] = false;
		LocationData[playerid][i][locationID] = 0;
	}
	for (new i = 0; i != MAX_PLAYER_TICKETS; i ++) {
		TicketData[playerid][i][ticketID] = 0;
		TicketData[playerid][i][ticketExists] = false;
		TicketData[playerid][i][ticketFee] = 0;
	}
	BoomboxData[playerid][boomboxPlaced] = 0;
	BoomboxData[playerid][boomboxPos][0] = 0.0;
	BoomboxData[playerid][boomboxPos][1] = 0.0;
	BoomboxData[playerid][boomboxPos][2] = 0.0;

	PlayerData[playerid][pID] = -1;
	PlayerData[playerid][pAccount] = 0;
	PlayerData[playerid][pLogged] = 0;
	PlayerData[playerid][pLevel] = 0;
	PlayerData[playerid][pAFK] = false;
	PlayerData[playerid][pLoginAttempts] = 0;
	PlayerData[playerid][pCreated] = 0;
	PlayerData[playerid][pGender] = 1;
	PlayerData[playerid][pBirthdate][0] = 0;
	PlayerData[playerid][pOrigin][0] = 0;
	PlayerData[playerid][pSkin] = 98;
	PlayerData[playerid][pEditType] = 0;
	PlayerData[playerid][pGlasses] = 0;
	PlayerData[playerid][pJetpack] = 0;
	PlayerData[playerid][pHat] = 0;
	PlayerData[playerid][pBandana] = 0;
	PlayerData[playerid][pAnnuary] = false;
	PlayerData[playerid][pRedList] = false;
	PlayerData[playerid][pPos] = 0.0;
	PlayerData[playerid][pInterior] = 0;
	PlayerData[playerid][pWorld] = 0;
	PlayerData[playerid][pKilled] = 0;
	PlayerData[playerid][pHospital] = -1;
	PlayerData[playerid][pHospitalInt] = -1;
	PlayerData[playerid][pHospitalTime] = 0;
	PlayerData[playerid][pRepairTime] = 0;
	PlayerData[playerid][pMoney] = 4000;
	PlayerData[playerid][pBankMoney] = 2500;
	PlayerData[playerid][pIndiceForce] = 0.0;
	PlayerData[playerid][pSpawnPoint] = 0;
	PlayerData[playerid][pLocaID] = 0;
	PlayerData[playerid][pSavings] = 0;
	PlayerData[playerid][pSac] = 0;
	PlayerData[playerid][pEditSac] = 0;
	PlayerData[playerid][pCarD] = 0;
	PlayerData[playerid][pAdmin] = 0;
	PlayerData[playerid][pHelper] = 0;
	PlayerData[playerid][pShowFooter] = 0;
	PlayerData[playerid][pReportTime] = 0;
	PlayerData[playerid][pHelpTime] = 0;
	PlayerData[playerid][pSpectator] = INVALID_PLAYER_ID;
	PlayerData[playerid][pJailTime] = 0;
	PlayerData[playerid][pKicked] = 0;
	PlayerData[playerid][pMuted] = 0;
	PlayerData[playerid][pSpamCount] = 0;
	PlayerData[playerid][pCommandCount] = 0;
	PlayerData[playerid][pCallWithCabine] = -1;
	PlayerData[playerid][pDisplayStats] = 0;
	PlayerData[playerid][pToggleGlasses] = 0;
	PlayerData[playerid][pToggleHat] = 0;
	PlayerData[playerid][pToggleBandana] = 0;
	PlayerData[playerid][pToggleArmor] = 0;
	PlayerData[playerid][pLastShot] = INVALID_PLAYER_ID;
	PlayerData[playerid][pShotTime] = 0;
	PlayerData[playerid][pInventoryItem] = 0;
	PlayerData[playerid][pStorageItem] = 0;
	PlayerData[playerid][pStorageSelect] = 0;
	PlayerData[playerid][pProductModify] = 0;
	PlayerData[playerid][pPaVal] = -1;
	PlayerData[playerid][pPaVen] = -1;
	PlayerData[playerid][pHouse] = -1;
	PlayerData[playerid][pLocat] = -1;
	PlayerData[playerid][pBusiness] = -1;
	PlayerData[playerid][pEntrance] = -1;
	PlayerData[playerid][pGasPump] = -1;
	PlayerData[playerid][pGasStation] = -1;
	PlayerData[playerid][pLoading] = 0;
	PlayerData[playerid][pSpeciality] = -1;
	PlayerData[playerid][pEditPump] = -1;
	PlayerData[playerid][pEditFurniture] = -1;
	PlayerData[playerid][pEditDoors] = -1;
	PlayerData[playerid][pEditGate] = -1;
	PlayerData[playerid][pEditCamera] = -1;
	PlayerData[playerid][pEditVendor] = -1;
	PlayerData[playerid][pEditGarbage] = -1;
	PlayerData[playerid][pEditGym_1] = -1;
	PlayerData[playerid][pEditGym_2] = -1;
	PlayerData[playerid][pEditATM] = -1;
	PlayerData[playerid][pEditCabine] = -1;
	PlayerData[playerid][pEditSign] = -1;
	PlayerData[playerid][pEditSpeed] = -1;
	PlayerData[playerid][pEditRack] = -1;
	PlayerData[playerid][pSelectFurniture] = 0;
	PlayerData[playerid][pRefill] = INVALID_VEHICLE_ID;
	if(PlayerData[playerid][pRefill] != INVALID_VEHICLE_ID) DestroyProgressBar(PlayerData[playerid][pRefillBar]);
	PlayerData[playerid][pRefillBar] = INVALID_BAR_ID;
	PlayerData[playerid][pRefill] = INVALID_VEHICLE_ID;
	PlayerData[playerid][pRefillPrice] = 0;
	PlayerData[playerid][pHouseSeller] = INVALID_PLAYER_ID;
	PlayerData[playerid][pHouseOffered] = -1;
	PlayerData[playerid][pHouseValue] = 0;
	PlayerData[playerid][pBusinessSeller] = INVALID_PLAYER_ID;
	PlayerData[playerid][pBusinessOffered] = -1;
	PlayerData[playerid][pBusinessValue] = 0;
	PlayerData[playerid][pCarSeller] = INVALID_PLAYER_ID;
	PlayerData[playerid][pCarOffered] = -1;
	PlayerData[playerid][pCarValue] = 0;
	PlayerData[playerid][pShakeOffer] = INVALID_PLAYER_ID;
	PlayerData[playerid][pShakeType] = 0;
	PlayerData[playerid][pFriskOffer] = INVALID_PLAYER_ID;
	PlayerData[playerid][pFoodSeller] = INVALID_PLAYER_ID;
	PlayerData[playerid][pFoodType] = 0;
	PlayerData[playerid][pFoodPrice] = 0;
	PlayerData[playerid][pFactionOffer] = INVALID_PLAYER_ID;
	PlayerData[playerid][pFactionOffered] = -1;
	PlayerData[playerid][pPhone] = 0;
	PlayerData[playerid][pPhoneOff] = 0;
	PlayerData[playerid][pLottery] = 0;
	PlayerData[playerid][pLotteryB] = 0;
	PlayerData[playerid][pJobDuty] = 0;
	PlayerData[playerid][pCooking] = 0;
	PlayerData[playerid][pCookingTime] = 0;
	PlayerData[playerid][pHours] = 0;
	PlayerData[playerid][pPlayingHours] = 0;
	PlayerData[playerid][pPlayingHoursMax] = 0;
	PlayerData[playerid][pMinutes] = 0;
	PlayerData[playerid][pMinutesCount] = 0;
	PlayerData[playerid][pArmorStatus] = 0;
	PlayerData[playerid][pArmorShown] = 0;
	PlayerData[playerid][pClothesType] = 0;
	PlayerData[playerid][pDrivingTest] = 0;
	PlayerData[playerid][pTaxiTest] = 0;
	PlayerData[playerid][pTestStage] = 0;
	PlayerData[playerid][pTestWarns] = 0;
	PlayerData[playerid][pFurnitureType] = 0;
	PlayerData[playerid][pJob] = 0;
	PlayerData[playerid][pTaxiFee] = 0;
	PlayerData[playerid][pTaxiTime] = 0;
	PlayerData[playerid][pTaxiPlayer] = INVALID_PLAYER_ID;
	PlayerData[playerid][pFirstAid] = 0;
	PlayerData[playerid][pIncomingCall] = 0;
	PlayerData[playerid][pCallLine] = INVALID_PLAYER_ID;
	PlayerData[playerid][pMining] = 0;
	PlayerData[playerid][pMineTime] = 0;
	PlayerData[playerid][pMinedRock] = -1;
	PlayerData[playerid][pCarryTrash] = 0;
	PlayerData[playerid][pCarryCrate] = -1;
	PlayerData[playerid][pCrafting] = 0;
	PlayerData[playerid][pOpeningCrate] = 0;
	PlayerData[playerid][pHarvesting] = 0;
	PlayerData[playerid][pFaction] = -1;
	PlayerData[playerid][pFactionID] = -1;
	PlayerData[playerid][pFactionRank] = 0;
	PlayerData[playerid][pFactionEdit] = -1;
	PlayerData[playerid][pSelectedSlot] = -1;
	PlayerData[playerid][pOnDuty] = 0;
	PlayerData[playerid][pTazer] = 0;
	PlayerData[playerid][pBeanBag] = 0;
	PlayerData[playerid][pStunned] = 0;
	PlayerData[playerid][pCuffed] = 0;
	PlayerData[playerid][pDragged] = 0;
	PlayerData[playerid][pDraggedBy] = INVALID_PLAYER_ID;
	PlayerData[playerid][pPrisoned] = 0;
	PlayerData[playerid][pInjured] = 0;
	PlayerData[playerid][pWarrants] = 0;
	PlayerData[playerid][pMDCPlayer] = INVALID_PLAYER_ID;
	PlayerData[playerid][pTrackTime] = 0;
	PlayerData[playerid][pCP] = 0;
	PlayerData[playerid][pBroadcast] = 0;
	PlayerData[playerid][pNewsGuest] = INVALID_PLAYER_ID;
	PlayerData[playerid][pMuteTime] = 0;
	PlayerData[playerid][pTransfer] = INVALID_PLAYER_ID;
	PlayerData[playerid][pWaypoint] = 0;
	PlayerData[playerid][pWaypointPos][0] = 0.0;
	PlayerData[playerid][pWaypointPos][1] = 0.0;
	PlayerData[playerid][pWaypointPos][2] = 0.0;
	PlayerData[playerid][pFuelCan] = 0;
	PlayerData[playerid][pDisableOOC] = 0;
	PlayerData[playerid][pDisablePM] = 0;
	PlayerData[playerid][pDisableFaction] = 0;
	PlayerData[playerid][pDisableBC] = 0;
	PlayerData[playerid][pNameChange][0] = 0;
	PlayerData[playerid][pDrugTime] = 0;
	PlayerData[playerid][pPrime] = 0;
	PlayerData[playerid][pDrugUsed] = 0;
	PlayerData[playerid][pFingerTime] = 0;
	PlayerData[playerid][pFingerItem] = 0;
	PlayerData[playerid][pWeapon] = 0;
	PlayerData[playerid][pBackpackLoot] = -1;
	PlayerData[playerid][pDashcam_veh] = INVALID_VEHICLE_ID;
	PlayerData[playerid][pDashcam_object] = INVALID_OBJECT_ID;
	PlayerData[playerid][pChannel] = 0;
	PlayerData[playerid][pEmergency] = 0;
	PlayerData[playerid][pPlaceAd] = 0;
	PlayerData[playerid][pTargets] = 0;
	PlayerData[playerid][pTargetLevel] = 0;
	PlayerData[playerid][pVendorTime] = 0;
	PlayerData[playerid][pLoopAnim] = 0;
	PlayerData[playerid][pExecute] = 0;
	PlayerData[playerid][pBoombox] = INVALID_PLAYER_ID;
	PlayerData[playerid][pTakeItems] = INVALID_PLAYER_ID;
	PlayerData[playerid][pDrinkBar] = INVALID_BAR_ID;
	PlayerData[playerid][pDrinking] = 0;
	PlayerData[playerid][pDrinkTime] = 0;
	PlayerData[playerid][pTaxiCalled] = 0;
	PlayerData[playerid][pSpeedTime] = 0;
	PlayerData[playerid][pMarker] = 0;
	PlayerData[playerid][pBleeding] = 0;
	PlayerData[playerid][pBleedTime] = 0;
	PlayerData[playerid][pLoadType] = 0;
	PlayerData[playerid][pLoadCrate] = 0;
	PlayerData[playerid][pLoading] = 0;
	PlayerData[playerid][pUnloading] = -1;
	PlayerData[playerid][pUnloadVehicle] = INVALID_VEHICLE_ID;
	PlayerData[playerid][pShipment] = -1;
	PlayerData[playerid][pDeliverShipment] = 0;
	PlayerData[playerid][pUsedMagazine] = 0;
	PlayerData[playerid][pAdvertise][0] = 0;
	PlayerData[playerid][pFreeze] = 0;
	PlayerData[playerid][pTask] = 0;
	PlayerData[playerid][pBankTask] = 0;
	PlayerData[playerid][pStoreTask] = 0;
	PlayerData[playerid][pTestTask] = 0;
	PlayerData[playerid][pSorting] = 0;
	PlayerData[playerid][pSortingType] = 0;
	PlayerData[playerid][pSortingVehicle] = 0;
	PlayerData[playerid][pSortingObject][0] = -1;
	PlayerData[playerid][pSortingObject][1] = -1;
	PlayerData[playerid][pSortingObject][2] = -1;
	PlayerData[playerid][pSortCrate] = 0;
	PlayerData[playerid][pSortingBase] = -1;
	PlayerData[playerid][pHUD] = 1;
	PlayerData[playerid][pAdminDuty] = 0;
	PlayerData[playerid][pSeekHelp] = 0;
	PlayerData[playerid][pMaskID] = random(90000) + 10000;
	PlayerData[playerid][pMaskOn] = 0;
	PlayerData[playerid][pCeinture] = 0;
	PlayerData[playerid][pCapacity] = 35;
	PlayerData[playerid][pPlayRadio] = 0;
	PlayerData[playerid][pGraffiti] = -1;
	PlayerData[playerid][pGraffitiTime] = 0;
	PlayerData[playerid][pGraffitiColor] = 0;
	PlayerData[playerid][pEditGraffiti] = 0;
	PlayerData[playerid][pMakeGraffiti] = 0;
	PlayerData[playerid][pEditGraffitiID] = -1;
	PlayerData[playerid][pAdminHide] = 0;
	PlayerData[playerid][pDetectorTime] = 0;
	PlayerData[playerid][pPicking] = 0;
	PlayerData[playerid][pPickCar] = -1;
	PlayerData[playerid][pPickTime] = 0;
	PlayerData[playerid][pNameTag] = Text3D:INVALID_3DTEXT_ID;
	PlayerData[playerid][pArmeTF][0] = 0;
	PlayerData[playerid][pArmeTF][1] = 0;
	PlayerData[playerid][pAmmoTF][0] = 0;
	PlayerData[playerid][pAmmoTF][1] = 0;
	PlayerData[playerid][pAnimParler] = false;
	PlayerData[playerid][pAdminClicked] = -1;
	PlayerData[playerid][pTakeCorpse] = -1;
	PlayerData[playerid][pKickDoor] = false;
	PlayerData[playerid][pPizza_House] = -1;
	PlayerData[playerid][pPizza_Vehicle] = -1;
	PlayerData[playerid][pTaxiPNJ] = -1;
	PlayerData[playerid][pTaxiStep] = -1;
	PlayerData[playerid][pDoorCreate] = -1;
	PlayerData[playerid][pGymnase] = -1;
	
	garbageDecharge[playerid][0] = 0;
	garbageDecharge[playerid][1] = 0;
	
	PlayerSpec[playerid] = INVALID_PLAYER_ID;
	ResetWarnings(playerid);
	DernieVehLoc[playerid] = -1;
	DernieVehLocID[playerid] = -1;
	TrafiqueFilsTimer[playerid] = 0;
	BraquageTimer[playerid] = 0;
	xmor[playerid] = 0.0;
	ymor[playerid] = 0.0;
	zmor[playerid] = 0.0;
	int_mor[playerid] = 0;
	vw_mor[playerid] = 0;
	PoliceCivil[playerid] = 0;
	AFKMin[playerid] = 0;
	messagePrivate[playerid] = -1;
	time_StartLicenseTaxi[playerid] = 0;
	objectTaxi[playerid] = 0;
	gainPower[playerid] = 0;
	
	
	for(new i=0; i<MAX_CHALLENGES; i++)
		AstucesChallenges[playerid][i] = 0;
	
	
	if((IsPlayerAttachedObjectSlotUsed(playerid, 3)) && aBraquer{playerid} == true || aBraquerBanque[playerid] == 1)
	{
		RemovePlayerAttachedObject(playerid, 3);
 	}
	aBraquer{playerid} = false;
	aBraquerBanque[playerid] = 0;
	for(new p=0;p<sizeof(AFKPos[]);p++)
	{
	    AFKPos[playerid][p] = 0;
	}
	KillTimer(TrafiqueFilsKillTimer[playerid]);
	KillTimer(BraquageKillTimer[playerid]);
	ResetVar_TempTag(playerid);
}

ResetNameTag(playerid)
{
	foreach (new i : Player) {
		ShowPlayerNameTagForPlayer(i, playerid, 1);
	}
	if (IsValidDynamic3DTextLabel(PlayerData[playerid][pNameTag]))
	DestroyDynamic3DTextLabel(PlayerData[playerid][pNameTag]);

	PlayerData[playerid][pNameTag] = Text3D:INVALID_3DTEXT_ID;
	return 1;
}

ResetWarnings(playerid)
{
	PlayerData[playerid][pWarnings] = 0;
	PlayerData[playerid][pWarn1][0] = 0;
	PlayerData[playerid][pWarn2][0] = 0;
}

GetNumberOwner(number)
{
	foreach (new i : Player) if (PlayerData[i][pPhone] == number && Inventory_HasItem(i, "Téléphone")) {
		return i;
	}
	return INVALID_PLAYER_ID;
}

IsPlayerInsideTaxi(playerid)
{
	new vehicleid = GetPlayerVehicleID(playerid);

	if (GetVehicleModel(vehicleid) == 420 || GetVehicleModel(vehicleid) == 438)
	{
		foreach (new i : Player)
		{
			if ((i != playerid) && (PlayerData[i][pJob] == JOB_TAXI && PlayerData[i][pJobDuty] == JOB_TAXI && GetPlayerState(i) == PLAYER_STATE_DRIVER) && GetPlayerVehicleID(i) == vehicleid)
			return 1;
		}
	}
	return 0;
}


IsNumeric(const str[])
{
	for (new i = 0, l = strlen(str); i != l; i ++)
	{
		if (i == 0 && str[0] == '-')
		continue;

		else if (str[i] < '0' || str[i] > '9')
		return 0;
	}
	return 1;
}

ReturnWeaponName(weaponid)
{
	static
	name[32];

	GetWeaponName(weaponid, name, sizeof(name));

	if (!weaponid || isnull(name) || weaponid == 0)
	name = "Poings";

	else if (weaponid == 18)
	name = "Cocktail Molotov";

	else if (weaponid == 44)
	name = "Nightvision";

	else if (weaponid == 45)
	name = "Infrared";

	return name;
}

ReturnVehicleModelName(model)
{
	new
	name[32] = "None";

	if (model < 400 || model > 611)
	return name;

	format(name, sizeof(name), g_arrVehicleNames[model - 400]);
	return name;
}

stock ReturnVehicleName(vehicleid)
{
	new
	model = GetVehicleModel(vehicleid),
	name[32] = "None";

	if (model < 400 || model > 611)
	return name;

	format(name, sizeof(name), g_arrVehicleNames[model - 400]);
	return name;
}

GetVehicleModelByName(const name[])
{
	if (IsNumeric(name) && (strval(name) >= 400 && strval(name) <= 611))
	return strval(name);

	for (new i = 0; i < sizeof(g_arrVehicleNames); i ++)
	{
		if (strfind(g_arrVehicleNames[i], name, true) != -1)
		{
			return i + 400;
		}
	}
	return 0;
}

GetVehicleDriver(vehicleid) {
	foreach (new i : Player) {
		if (GetPlayerState(i) == PLAYER_STATE_DRIVER && GetPlayerVehicleID(i) == vehicleid) return i;
	}
	return INVALID_PLAYER_ID;
}

stock IsWindowedVehicle(vehicleid)
{
	static const g_aWindowStatus[] = {
		1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
		1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1,
		1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1,
		1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1,
		1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1,
		1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1,
		1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0,
		1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
		1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1,
		1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1,
		1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0
	};
	new modelid = GetVehicleModel(vehicleid);

	if (modelid < 400 || modelid > 611)
	return 0;

	return (g_aWindowStatus[modelid - 400]);
}

stock IsNewsVehicle(vehicleid)
{
	switch (GetVehicleModel(vehicleid)) {
		case 488, 582: return 1;
	}
	return 0;
}

stock IsACruiser(vehicleid)
{
	switch (GetVehicleModel(vehicleid)) {
		case 523, 427, 490, 528, 596..599, 601: return 1;
	}
	return 0;
}

stock IsDoorVehicle(vehicleid)
{
	switch (GetVehicleModel(vehicleid)) {
		case 400..424, 426..429, 431..440, 442..445, 451, 455, 456, 458, 459, 466, 467, 470, 474, 475:
			return 1;

		case 477..480, 482, 483, 486, 489, 490..492, 494..496, 498..500, 502..508, 514..518, 524..529, 533..536:
			return 1;

		case 540..547, 549..552, 554..562, 565..568, 573, 575, 576, 578..580, 582, 585, 587..589, 596..605, 609:
			return 1;
	}
	return 0;
}

stock IsSpeedoVehicle(vehicleid)
{
	if (GetVehicleModel(vehicleid) == 509 || GetVehicleModel(vehicleid) == 510 || GetVehicleModel(vehicleid) == 481 || !IsEngineVehicle(vehicleid)) {
		return 0;
	}
	return 1;
}

stock IsLoadableVehicle(vehicleid)
{
	new modelid = GetVehicleModel(vehicleid);

	if (GetVehicleTrailer(vehicleid))
	modelid = GetVehicleModel(GetVehicleTrailer(vehicleid));

	switch (modelid) {
		case 609, 403, 414, 456, 498, 499, 514, 515, 435, 591: return 1;
	}
	return 0;
}

stock GetMaxCrates(vehicleid)
{
	new crates;

	switch (GetVehicleModel(vehicleid)) {
		case 498, 609: crates = 10;
		case 414: crates = 8;
		case 456, 499: crates = 6;
		case 435, 591: crates = 15;
	}
	return crates;
}

stock IsCrateInUse(crateid)
{
	if (CrateData[crateid][crateVehicle] != INVALID_VEHICLE_ID && IsValidVehicle(CrateData[crateid][crateVehicle])) {
		return 1;
	}
	foreach (new i : Player) if (PlayerData[i][pCarryCrate] == crateid && GetPlayerSpecialAction(i) == SPECIAL_ACTION_CARRY) {
		return 1;
	}
	return 0;
}

stock GetVehicleCrates(vehicleid)
{
	if (!IsValidVehicle(vehicleid) || !IsLoadableVehicle(vehicleid))
	return 0;

	new crates;

	for (new i = 0; i != MAX_CRATES; i ++) if (CrateData[i][crateExists] && CrateData[i][crateVehicle] == vehicleid) {
		crates++;
	}
	return crates;
}

stock IsABoat(vehicleid)
{
	switch (GetVehicleModel(vehicleid)) {
		case 430, 446, 452, 453, 454, 472, 473, 484, 493, 595: return 1;
	}
	return 0;
}

stock IsABike(vehicleid)
{
	switch (GetVehicleModel(vehicleid)) {
		case 448, 461..463, 468, 521..523, 581, 586, 481, 509, 510: return 1;
	}
	return 0;
}

stock IsAPlane(vehicleid)
{
	switch (GetVehicleModel(vehicleid)) {
		case 460, 464, 476, 511, 512, 513, 519, 520, 553, 577, 592, 593: return 1;
	}
	return 0;
}

stock IsAHelicopter(vehicleid)
{
	switch (GetVehicleModel(vehicleid)) {
		case 417, 425, 447, 465, 469, 487, 488, 497, 501, 548, 563: return 1;
	}
	return 0;
}

stock IsEngineVehicle(vehicleid)
{
	static const g_aEngineStatus[] = {
		1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
		1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1,
		1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1,
		1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
		1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
		1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1,
		1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1,
		1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
		1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1,
		1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1,
		1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0
	};
	new modelid = GetVehicleModel(vehicleid);

	if (modelid < 400 || modelid > 611)
	return 0;

	return (g_aEngineStatus[modelid - 400]);
}

stock Float:GetPlayerSpeed(playerid)
{
	static Float:velocity[3];

	if (IsPlayerInAnyVehicle(playerid))
	GetVehicleVelocity(GetPlayerVehicleID(playerid), velocity[0], velocity[1], velocity[2]);
	else
		GetPlayerVelocity(GetPlayerVehicleID(playerid), velocity[0], velocity[1], velocity[2]);

	return floatsqroot((velocity[0] * velocity[0]) + (velocity[1] * velocity[1]) + (velocity[2] * velocity[2])) * 100.0;
}

stock GetGateByID(sqlid)
{
	for (new i = 0; i != MAX_GATES; i ++) if (GateData[i][gateExists] && GateData[i][gateID] == sqlid)
	return i;

	return -1;
}

stock GetHouseByID(sqlid)
{
	for (new i = 0; i != MAX_HOUSES; i ++) if (HouseData[i][houseExists] && HouseData[i][houseID] == sqlid)
	return i;

	return -1;
}

stock GetHouseIDByPlayerSQLID(playerid)
{
    for (new i = 0; i < MAX_HOUSES; i ++)
	{
		if (HouseData[i][houseExists])
		{
		    if(HouseData[i][houseOwner] == GetPlayerSQLID(playerid))
		    {
		        return i;
		    }
		}
	}
	return -1;
}

stock GetBusinessByID(sqlid)
{
	for (new i = 0; i != MAX_BUSINESSES; i ++) if (BusinessData[i][bizExists] && BusinessData[i][bizID] == sqlid)
	return i;

	return -1;
}

stock GetEntranceByID(sqlid)
{
	for (new i = 0; i != MAX_ENTRANCES; i ++) if (EntranceData[i][entranceExists] && EntranceData[i][entranceID] == sqlid)
	return i;

	return -1;
}

stock GetElapsedTime(time, &hours, &minutes, &seconds)
{
	hours = 0;
	minutes = 0;
	seconds = 0;

	if (time >= 3600)
	{
		hours = (time / 3600);
		time -= (hours * 3600);
	}
	while (time >= 60)
	{
		minutes++;
		time -= 60;
	}
	return (seconds = time);
}

stock GetDuration(time)
{
	new
	str[32];

	if (time < 0 || time == gettime()) {
		format(str, sizeof(str), "Jamais");
		return str;
	}
	else if (time < 60)
	format(str, sizeof(str), "%d secondes", time);

	else if (time >= 0 && time < 60)
	format(str, sizeof(str), "%d secondes", time);

	else if (time >= 60 && time < 3600)
	format(str, sizeof(str), (time >= 120) ? ("%d minutes") : ("%d minute"), time / 60);

	else if (time >= 3600 && time < 86400)
	format(str, sizeof(str), (time >= 7200) ? ("%d heures") : ("%d heure"), time / 3600);

	else if (time >= 86400 && time < 2592000)
	format(str, sizeof(str), (time >= 172800) ? ("%d jours") : ("%d jour"), time / 86400);

	else if (time >= 2592000 && time < 31536000)
	format(str, sizeof(str), (time >= 5184000) ? ("%d mois") : ("%d mois"), time / 2592000);

	else if (time >= 31536000)
	format(str, sizeof(str), (time >= 63072000) ? ("%d ans") : ("%d ans"), time / 31536000);

	strcat(str, "");

	return str;
}

stock GetEngineStatus(vehicleid)
{
	static
	engine,
	lights,
	alarm,
	doors,
	bonnet,
	boot,
	objective;

	GetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, boot, objective);

	if (engine != 1)
	return 0;

	return 1;
}

stock GetHoodStatus(vehicleid)
{
	static
	engine,
	lights,
	alarm,
	doors,
	bonnet,
	boot,
	objective;

	GetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, boot, objective);

	if (bonnet != 1)
	return 0;

	return 1;
}

stock GetTrunkStatus(vehicleid)
{
	static
	engine,
	lights,
	alarm,
	doors,
	bonnet,
	boot,
	objective;

	GetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, boot, objective);

	if (boot != 1)
	return 0;

	return 1;
}

stock GetLightStatus(vehicleid)
{
	static
	engine,
	lights,
	alarm,
	doors,
	bonnet,
	boot,
	objective;

	GetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, boot, objective);

	if (lights != 1)
	return 0;

	return 1;
}

stock SetEngineStatus(vehicleid, status)
{
	static
	engine,
	lights,
	alarm,
	doors,
	bonnet,
	boot,
	objective;

	GetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, boot, objective);
	return SetVehicleParamsEx(vehicleid, status, lights, alarm, doors, bonnet, boot, objective);
}

stock SetLightStatus(vehicleid, status)
{
	static
	engine,
	lights,
	alarm,
	doors,
	bonnet,
	boot,
	objective;

	GetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, boot, objective);
	return SetVehicleParamsEx(vehicleid, engine, status, alarm, doors, bonnet, boot, objective);
}

stock SetTrunkStatus(vehicleid, status)
{
	static
		engine,
		lights,
		alarm,
		doors,
		bonnet,
		boot,
		objective;

	GetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, boot, objective);
	return SetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, status, objective);
}

stock SetHoodStatus(vehicleid, status)
{
	static
	engine,
	lights,
	alarm,
	doors,
	bonnet,
	boot,
	objective;

	GetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, boot, objective);
	return SetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, status, boot, objective);
}

forward OnViewCharges(extraid, name[]);
public OnViewCharges(extraid, name[])
{
	if (GetFactionType(extraid) != FACTION_POLICE)
	return 0;

	static
	rows,
	fields;

	cache_get_data(rows, fields, g_iHandle);

	if (!rows)
	return SendClientMessageEx(extraid, COLOR_ERROR, "Aucun résultat trouvé pour les charges sur \"%s\".", name);

	static
	string[1024],
	desc[128],
	date[36];

	string[0] = 0;

	for (new i = 0; i < rows; i ++) {
		cache_get_field_content(i, "Description", desc, g_iHandle, 128);
		cache_get_field_content(i, "Date", date, g_iHandle, 36);

		format(string, sizeof(string), "%s%s (%s)\n", string, desc, date);
	}
	format(desc, sizeof(desc), "Charges: %s", name);
	Dialog_Show(extraid, ChargeList, DIALOG_STYLE_LIST, desc, string, "X", "");
	return 1;
}

forward OnCarStorageAdd(carid, itemid);
public OnCarStorageAdd(carid, itemid)
{
	CarStorage[carid][itemid][cItemID] = cache_insert_id();
	return 1;
}

forward OnStorageAdd(houseid, itemid);
public OnStorageAdd(houseid, itemid)
{
	HouseStorage[houseid][itemid][hItemID] = cache_insert_id();
	return 1;
}

forward OnDealerCarCreated(bizid, slotid);
public OnDealerCarCreated(bizid, slotid)
{
	DealershipCars[bizid][slotid][vehID] = cache_insert_id();
	return 1;
}

forward OnFurnitureCreated(furnitureid);
public OnFurnitureCreated(furnitureid)
{
	FurnitureData[furnitureid][furnitureID] = cache_insert_id();
	Furniture_Save(furnitureid);
	return 1;
}

forward OnContactAdd(playerid, id);
public OnContactAdd(playerid, id)
{
	ContactData[playerid][id][contactID] = cache_insert_id();
	return 1;
}

forward OnInventoryAdd(playerid, itemid);
public OnInventoryAdd(playerid, itemid)
{
	InventoryData[playerid][itemid][invID] = cache_insert_id();
	return 1;
}

forward OnBanLookup(playerid, username[]);
public OnBanLookup(playerid, username[])
{
	if (!IsPlayerConnected(playerid))
	return 0;

	static
	rows,
	fields,
	reason[128],
	date[36];

	cache_get_data(rows, fields, g_iHandle);

	if (rows) {
		cache_get_field_content(0, "Reason", reason, g_iHandle, 128);
		cache_get_field_content(0, "Date", date, g_iHandle, 36);

		SendClientMessageEx(playerid, COLOR_INFO, "%s a été banni par %s, raison: %s", username, date, reason);
	}
	else {
		SendClientMessageEx(playerid, COLOR_ERROR, "%s n'est pas banni de ce serveur.", username);
	}
	return 1;
}

forward OnDeleteCharacter(playerid, name[]);
public OnDeleteCharacter(playerid, name[])
{
	static
	rows,
	fields,
	query[128],
	id = -1;

	cache_get_data(rows, fields);

	if (!rows)
	return SendClientMessageEx(playerid, COLOR_ERROR, "Le nom specifié \"%s\" n'est pas lié dans les comptes.", name);

	if (cache_get_field_int(0, "Admin") > PlayerData[playerid][pAdmin])
	return SendClientMessageEx(playerid, COLOR_ERROR, "Vous n'êtes pas autorisé à supprimer les personnages d'un administrateur supérieur.");

	id = cache_get_field_int(0, "ID");

	if (id) {
		format(query, sizeof(query), "DELETE FROM `contacts` WHERE `ID` = '%d'", id);
		mysql_function_query(g_iHandle, query, false, "", "");

		format(query, sizeof(query), "DELETE FROM `gps` WHERE `ID` = '%d'", id);
		mysql_function_query(g_iHandle, query, false, "", "");

		format(query, sizeof(query), "DELETE FROM `inventory` WHERE `ID` = '%d'", id);
		mysql_function_query(g_iHandle, query, false, "", "");

		format(query, sizeof(query), "DELETE FROM `tickets` WHERE `ID` = '%d'", id);
		mysql_function_query(g_iHandle, query, false, "", "");

		format(query, sizeof(query), "DELETE FROM `characters` WHERE `ID` = '%d'", id);
		mysql_function_query(g_iHandle, query, false, "", "");

		SendClientMessageEx(playerid, COLOR_INFO, "Vous avez supprimé le compte \"%s\" avec succès.", name);
	}
	return 1;
}

forward OnDeleteAccount(playerid, name[]);
public OnDeleteAccount(playerid, name[])
{
	static
	rows,
	fields,
	id = -1;

	cache_get_data(rows, fields);

	if (!rows)
	return SendClientMessageEx(playerid, COLOR_ERROR, "Le compte \"%s\" n'existe pas.", name);

	static
	query[128];

	for (new i = 0; i < rows; i ++)
	{
		if ((id = cache_get_field_int(i, "ID")))
		{
			format(query, sizeof(query), "DELETE FROM `contacts` WHERE `ID` = '%d'", id);
			mysql_function_query(g_iHandle, query, false, "", "");

			format(query, sizeof(query), "DELETE FROM `gps` WHERE `ID` = '%d'", id);
			mysql_function_query(g_iHandle, query, false, "", "");

			format(query, sizeof(query), "DELETE FROM `inventory` WHERE `ID` = '%d'", id);
			mysql_function_query(g_iHandle, query, false, "", "");

			format(query, sizeof(query), "DELETE FROM `tickets` WHERE `ID` = '%d'", id);
			mysql_function_query(g_iHandle, query, false, "", "");
		}
	}
	format(query, sizeof(query), "DELETE FROM `accounts` WHERE `Username` = '%s'", SQL_ReturnEscaped(name));
	mysql_function_query(g_iHandle, query, false, "", "");

	format(query, sizeof(query), "DELETE FROM `characters` WHERE `Username` = '%s'", SQL_ReturnEscaped(name));
	mysql_function_query(g_iHandle, query, false, "", "");

	SendClientMessageEx(playerid, COLOR_INFO, "Vous avez supprimé \"%s\" de la base de donnée.", name);
	return 1;
}

forward OnNameChange(playerid, userid, newname[]);
public OnNameChange(playerid, userid, newname[])
{
	if (!IsPlayerConnected(playerid) || !IsPlayerConnected(userid))
		return 0;

	static
		rows,
		fields,
		query[160];

	cache_get_data(rows, fields);

	if (rows)
		return SendClientMessageEx(playerid, COLOR_ERROR, "Le nom specifié \"%s\" est en cours d'utilisation.", newname);

	format(query, sizeof(query), "INSERT INTO `namechanges` (`OldName`, `NewName`, `Date`) VALUES('%s', '%s', '%s')", ReturnName(userid), newname, ReturnDate());
	mysql_function_query(g_iHandle, query, false, "", "");

	format(query, sizeof(query), "UPDATE `characters` SET `Username` = '%s' WHERE `Username` = '%s'", newname, ReturnName(userid));
	mysql_function_query(g_iHandle, query, false, "", "");

	SendClientMessageEx(playerid, COLOR_ADMIN, "Vous avez renommé %s en %s.", ReturnName(userid), newname);
	SendClientMessageEx(userid, COLOR_ADMIN, "L'administrateur %s vous a renommé en %s.", ReturnName(playerid), newname);

	SetPlayerName(userid, newname);
	format(PlayerData[userid][pUsername], 30, newname);
	return 1;
}

forward OnTicketCreated(playerid, ticketid);
public OnTicketCreated(playerid, ticketid)
{
	TicketData[playerid][ticketid][ticketID] = cache_insert_id();
	return 1;
}

forward OnRackCreated(rackid);
public OnRackCreated(rackid)
{
	if (rackid == -1 || !RackData[rackid][rackExists])
	return 0;

	RackData[rackid][rackID] = cache_insert_id();
	Rack_Save(rackid);

	return 1;
}

forward OnGateCreated(gateid);
public OnGateCreated(gateid)
{
	if (gateid == -1 || !GateData[gateid][gateExists])
	return 0;

	GateData[gateid][gateID] = cache_insert_id();
	Gate_Save(gateid);

	return 1;
}

forward OnBusinessCreated(bizid);
public OnBusinessCreated(bizid)
{
	if (bizid == -1 || !BusinessData[bizid][bizExists])
	return 0;

	BusinessData[bizid][bizID] = cache_insert_id();
	Business_Save(bizid);

	return 1;
}

forward OnEntranceCreated(entranceid);
public OnEntranceCreated(entranceid)
{
	if (entranceid == -1 || !EntranceData[entranceid][entranceExists])
	return 0;

	EntranceData[entranceid][entranceID] = cache_insert_id();
	EntranceData[entranceid][entranceWorld] = EntranceData[entranceid][entranceID] + 7000;

	Entrance_Save(entranceid);

	return 1;
}

forward OnCarCreated(carid);
public OnCarCreated(carid)
{
	if (carid == -1 || !CarData[carid][carExists])
	return 0;

	CarData[carid][carID] = cache_insert_id();
	Car_Save(carid);

	return 1;
}

forward OnPumpCreated(pumpid);
public OnPumpCreated(pumpid)
{
	PumpData[pumpid][pumpID] = cache_insert_id();
	Pump_Save(pumpid);

	return 1;
}

forward OnArrestCreated(arrestid);
public OnArrestCreated(arrestid)
{
	if (arrestid == -1 || !ArrestData[arrestid][arrestExists])
	return 0;

	ArrestData[arrestid][arrestID] = cache_insert_id();
	Arrest_Save(arrestid);

	return 1;
}

forward OnPlantCreated(plantid);
public OnPlantCreated(plantid)
{
	if (plantid == -1 || !PlantData[plantid][plantExists])
	return 0;

	PlantData[plantid][plantID] = cache_insert_id();
	Plant_Save(plantid);

	return 1;
}

forward OnCrateCreated(crateid);
public OnCrateCreated(crateid)
{
	if (crateid == -1 || !CrateData[crateid][crateExists])
	return 0;

	CrateData[crateid][crateID] = cache_insert_id();
	Crate_Save(crateid);

	return 1;
}

forward OnFactionCreated(factionid);
public OnFactionCreated(factionid)
{
	if (factionid == -1 || !FactionData[factionid][factionExists])
	return 0;

	FactionData[factionid][factionID] = cache_insert_id();

	Faction_Save(factionid);
	Faction_SaveRanks(factionid);

	return 1;
}

forward OnBackpackCreated(id);
public OnBackpackCreated(id)
{
	if (id == -1 || !BackpackData[id][backpackExists])
	return 0;

	BackpackData[id][backpackID] = cache_insert_id();
	Backpack_Save(id);

	return 1;
}

forward OnATMCreated(atmid);
public OnATMCreated(atmid)
{
	if (atmid == -1 || !ATMData[atmid][atmExists])
	return 0;

	ATMData[atmid][atmID] = cache_insert_id();
	ATM_Save(atmid);

	return 1;
}

forward OnImpoundCreated(impoundid);
public OnImpoundCreated(impoundid)
{
	if (impoundid == -1 || !ImpoundData[impoundid][impoundExists])
	return 0;

	ImpoundData[impoundid][impoundID] = cache_insert_id();
	Impound_Save(impoundid);

	return 1;
}

forward OnGraffitiCreated(id);
public OnGraffitiCreated(id)
{
	GraffitiData[id][graffitiID] = cache_insert_id();
	Graffiti_Save(id);

	return 1;
}

forward OnDetectorCreated(id);
public OnDetectorCreated(id)
{
	MetalDetectors[id][detectorID] = cache_insert_id();
	return 1;
}

forward OnActorCreated(actorid);
public OnActorCreated(actorid)
{
	if (actorid == -1 || !ActorData[actorid][actorExists])
	return 0;

	ActorData[actorid][actorID] = cache_insert_id();
	Actor_Save(actorid);

	return 1;
}

forward OnPickupCreated(pickupid);
public OnPickupCreated(pickupid)
{
	if (pickupid == -1 || !PickupData[pickupid][pickupExists])
	return 0;

	PickupData[pickupid][pickupID] = cache_insert_id();
	Pickup_Save(pickupid);

	return 1;
}

forward OnGarbageCreated(garbageid);
public OnGarbageCreated(garbageid)
{
	if (garbageid == -1 || !GarbageData[garbageid][garbageExists])
	return 0;

	GarbageData[garbageid][garbageID] = cache_insert_id();
	Garbage_Save(garbageid);

	return 1;
}

forward OnCameraCreated(cameraid);
public OnCameraCreated(cameraid)
{
	if (cameraid == -1 || !CameraData[cameraid][cameraExists])
	return 0;

	CameraData[cameraid][cameraID] = cache_insert_id();
	Camera_Save(cameraid);

	return 1;
}

forward OnGymCreated(gymid);
public OnGymCreated(gymid)
{
	if (gymid == -1 || !GymData[gymid][gymExists])
	return 0;

	GymData[gymid][gymID] = cache_insert_id();
	Gym_Save(gymid);

	return 1;
}



forward OnCabineCreated(cabineid);
public OnCabineCreated(cabineid)
{
	if (cabineid == -1 || !CabineData[cabineid][cabineExists])
	return 0;

	CabineData[cabineid][cabineID] = cache_insert_id();
	Cabine_Save(cabineid);
	return 1;
}

forward OnSignCreated(signid);
public OnSignCreated(signid)
{
	if (signid == -1 || !SignData[signid][signExists])
	return 0;

	SignData[signid][signID] = cache_insert_id();
	Sign_Save(signid);

	return 1;
}

forward OnVendorCreated(vendorid);
public OnVendorCreated(vendorid)
{
	if (vendorid == -1 || !VendorData[vendorid][vendorExists])
	return 0;

	VendorData[vendorid][vendorID] = cache_insert_id();
	Vendor_Save(vendorid);

	return 1;
}

forward OnSpeedCreated(speedid);
public OnSpeedCreated(speedid)
{
	if (speedid == -1 || !SpeedData[speedid][speedExists])
	return 0;

	SpeedData[speedid][speedID] = cache_insert_id();
	Speed_Save(speedid);

	return 1;
}

forward OnHouseCreated(houseid);
public OnHouseCreated(houseid)
{
	if (houseid == -1 || !HouseData[houseid][houseExists])
	return 0;

	HouseData[houseid][houseID] = cache_insert_id();
	House_Save(houseid);

	return 1;
}

forward OnDroppedItem(itemid);
public OnDroppedItem(itemid)
{
	if (itemid == -1 || !DroppedItems[itemid][droppedModel])
	return 0;

	DroppedItems[itemid][droppedID] = cache_insert_id();
	return 1;
}

forward OnJobCreated(jobid);
public OnJobCreated(jobid)
{
	if (jobid == -1 || !JobData[jobid][jobExists])
	return 0;

	JobData[jobid][jobID] = cache_insert_id();
	Job_Save(jobid);

	return 1;
}

stock FlashTextDraw(playerid, PlayerText:textid, delay = 500)
{
	PlayerTextDrawHide(playerid, textid);

	SetTimerEx("FlashShowTextDraw", delay, false, "dd", playerid, _:textid);

	return 1;
}

stock FlashTextDrawEx(playerid, PlayerText:textid, amount = 1)
{
	PlayerTextDrawHide(playerid, textid);

	SetTimerEx("FlashShowTextDrawEx", 500, false, "ddd", playerid, _:textid, amount);

	return 1;
}

forward FlashShowTextDrawEx(playerid, PlayerText:textid, amount);
public FlashShowTextDrawEx(playerid, PlayerText:textid, amount)
{
	if ((IsPlayerConnected(playerid) && PlayerData[playerid][pLogged] && PlayerData[playerid][pHospital] == -1) && IsPlayerSpawned(playerid)) {
		PlayerTextDrawShow(playerid, textid);

		if (amount > 0) return SetTimerEx("HideTextDrawEx", 500, false, "ddd", playerid, _:textid, amount);
	}
	return 1;
}

forward HideTextDrawEx(playerid, PlayerText:textid, amount);
public HideTextDrawEx(playerid, PlayerText:textid, amount)
{
	if ((IsPlayerConnected(playerid) && PlayerData[playerid][pLogged] && PlayerData[playerid][pHospital] == -1) && IsPlayerSpawned(playerid)) {
		PlayerTextDrawHide(playerid, textid);

		if (amount > 0) return SetTimerEx("FlashShowTextDrawEx", 500, false, "ddd", playerid, _:textid, --amount);
	}
	return 1;
}

forward FlashShowTextDraw(playerid, PlayerText:textid);
public FlashShowTextDraw(playerid, PlayerText:textid)
{
	if ((IsPlayerConnected(playerid) && PlayerData[playerid][pLogged] && PlayerData[playerid][pHospital] == -1) && IsPlayerSpawned(playerid)) {
		PlayerTextDrawShow(playerid, textid);
	}
	return 1;
}

stock TotalledCheck()
{
	static
	Float:fHealth;

	for(new i = 1, j = GetVehiclePoolSize(); i <= j; i++) if (IsValidVehicle(i) && GetVehicleHealth(i, fHealth) && fHealth < 300.0) {
		SetVehicleHealth(i, 300.0);
		SetEngineStatus(i, false);
	}
	return 1;
}

CMD:payday(playerid, params[])
{
	SendClientMessageEx(playerid, COLOR_INFO, "Votre prochain payday est dans %d minutes.", 60-PlayerData[playerid][pMinutesCount]);
	return 1;
}

forward MinuteCheck();
public MinuteCheck()
{
	foreach (new i : Player)
	{
		if (!PlayerData[i][pLogged])
			continue;

		if (PlayerData[i][pInjured])
		{
			new Float:hp;
			GetPlayerHealth(i, hp);
			SetPlayerHealth(i, hp - 10.0);
		}

		if(!IsPlayerSpawned(i))
			continue;

		if(PlayerData[i][pAFK])
		    continue;
		    
		PlayerData[i][pMinutesCount]++;
		PlayerData[i][pMinutes]++;
		    
		if (PlayerData[i][pMinutesCount] >= 60)
		{
			new paycheck = random(100) + 742;

			PlayerData[i][pMinutesCount] = 0;

			PlayerData[i][pPlayingHours]++;
			PlayerData[i][pBankMoney] += paycheck;
			
			if(PlayerData[i][pPlayingHours] >= PlayerData[i][pPlayingHoursMax])
			{
				PlayerData[i][pLevel] += 1;
				PlayerData[i][pPlayingHours] = 0;
				PlayerData[i][pPlayingHoursMax] = PlayerData[i][pLevel]*2;
			}

			SendClientMessage(i, COLOR_GREY, "¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯");
			if(PlayerData[i][pOwnsBillboard] >= 0)
			{
				if(PlayerData[i][pBankMoney] >= BillBoardData[PlayerData[i][pOwnsBillboard]][bbPrice])
				{
					SendClientMessageEx(i, COLOR_WHITE, "Votre salaire de {33CC33}%s{FFFFFF} a été ajouté dans votre compte bancaire.", FormatNumber(paycheck));
					SendClientMessageEx(i, COLOR_WHITE, "{33CC33}%s{FFFFFF} ont été déduit de votre compte bancaire pour le loyer de votre maison.", FormatNumber(BillBoardData[PlayerData[i][pOwnsBillboard]][bbPrice]));
					PlayerData[i][pBankMoney] -= BillBoardData[PlayerData[i][pOwnsBillboard]][bbPrice];
					Tax_AddMoney(BillBoardData[PlayerData[i][pOwnsBillboard]][bbPrice]);
					return 1;
				}
				if(PlayerData[i][pBankMoney] < BillBoardData[PlayerData[i][pOwnsBillboard]][bbPrice])
				{
					SendClientMessageEx(i, COLOR_WHITE, "Votre salaire de {33CC33}%s{FFFFFF} a été ajouté dans votre compte bancaire.", FormatNumber(paycheck));
					SendClientMessageEx(i, COLOR_LIGHTRED, "Vous n'avez plus assez d'argent pour payer votre loyer, vous avez été viré.");
					BillBoardData[PlayerData[i][pOwnsBillboard]][bbOwner] = 0;
					Billboard_Save(PlayerData[i][pOwnsBillboard]);
					Billboard_Refresh(PlayerData[i][pOwnsBillboard]);
					PlayerData[i][pOwnsBillboard] = -1;
				}
				return 1;
			}
			SendClientMessageEx(i, COLOR_WHITE, "Votre salaire de {33CC33}%s{FFFFFF} a été ajouté dans votre compte bancaire.", FormatNumber(paycheck));
			
			if(House_GetCount(i) > 0)
			{
			    new Charge = 150*House_GetCount(i);
                SendClientMessageEx(i, COLOR_WHITE, "Taxe des propriétaire d'une ou plusieurs maison(s) {FF0000}- %d$", Charge);
                PlayerData[i][pBankMoney] -= Charge;
			}
			if(Business_GetCount(i) > 0)
			{
			    new Charge = 150*Business_GetCount(i);
                SendClientMessageEx(i, COLOR_WHITE, "Taxe des propriétaire d'un ou plusieurs bizness {FF0000}- %d$", Charge);
                PlayerData[i][pBankMoney] -= Charge;
                
                new actorsBiz = 0;
                
                for (new ii = 0; ii != MAX_BUSINESSES; ii ++) if(BusinessData[ii][bizExists] && Business_IsOwner(i, ii))
				{
					actorsBiz += Actor_CountBiz(ii);
				}
				
				if(actorsBiz != 0)
				{
				    new Charge2 = 15*actorsBiz;
                	SendClientMessageEx(i, COLOR_WHITE, "Taxe du ou des employé(s) de votre commerce {FF0000}- %d$", Charge2);
                	PlayerData[i][pBankMoney] -= Charge2;
				}
			}
			
			if(PlayerData[i][pLocat] != -1)
   			{
   				new locatid = PlayerData[i][pLocat];
				new ChargeL = HouseData[locatid][houseLocPrice];
				SendClientMessageEx(i, COLOR_WHITE, "Charges de location {FF0000}-%s", FormatNumber(ChargeL));
				PlayerData[i][pBankMoney] -= ChargeL;
				if(HouseData[locatid][houseOwner]) HouseData[locatid][houseMoney] += ChargeL;
			}
			/*if(PlayerData[i][pPlayingHours] >= 0)
   			{
				new GrandLev = PlayerData[i][pPlayingHours]*3;
				SendClientMessageEx(i, COLOR_WHITE, "Une prime de niveaux {33CC33}%s{FFFFFF} vous a été versé dans votre comtpe", FormatNumber(GrandLev));
				PlayerData[i][pBankMoney] += GrandLev;
			}*/
			if(GetFactionType(i) == FACTION_POLICE || GetFactionType(i) == FACTION_GOV)
   			{
				new primeleg = PlayerData[i][pFactionRank]*45;
				SendClientMessageEx(i, COLOR_WHITE, "Une prime de {33CC33}%s{FFFFFF} a été versée sur votre compte bancaire.", FormatNumber(primeleg));
				PlayerData[i][pBankMoney] += primeleg;
			}
			SendClientMessage(i, COLOR_GREY, "¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯");
		}
	}
	
	for (new i = 0; i != MAX_DRUG_PLANTS; i ++) if (PlantData[i][plantExists] && PlantData[i][plantDrugs] < Plant_MaxGrams(PlantData[i][plantType])) {
		PlantData[i][plantDrugs]++;

		Plant_Refresh(i);
		Plant_Save(i);
	}
	return 1;
}

forward PlayerCheck();
public PlayerCheck()
{
	static
	str[128],
	id = -1;

	TotalledCheck();

	if(BraquageBiz > 0)
	{
	    BraquageBiz --;
	    if(BraquageBiz <= 0)
	        BraquageBiz = 0;
	}
	if(BraquageBanque > 0)
	{
	    BraquageBanque --;
	    if(BraquageBanque <= 0)
	        BraquageBanque = 0;
	}
	foreach (new i : Player)
	{
		if (!PlayerData[i][pLogged])
		continue;

		if(IsPlayerAttachedObjectSlotUsed(i, 7))
		{
			new Float:armour;
			GetPlayerArmour(i, armour);
			if(armour <= 0.0)
			{
				RemovePlayerAttachedObject(i, 7);
			}
		}

		if(PlayerData[i][pTaxiTest])
		{
            if(time_StartLicenseTaxi[i] > 0)
            {
                time_StartLicenseTaxi[i]--;
			}
			else
			{
                time_StartLicenseTaxi[i] = 0;
                TogglePlayerControllable(i, true);
                PlayerPlaySound(i, 1052, 0.0, 0.0, 0.0);
			}
		}
		
		if(IsPlayerInAnyVehicle(i))
		{
			if(IsValidObject(objectTaxi[i]))
			{
				DestroyObject(objectTaxi[i]);
			}
		}
		
		/*
		    --------------- SCRIPT ATTACH ARME ---------------
		*/
		new
		    weaponsInfo[2][2];

		GetPlayerWeaponData(i, 5, weaponsInfo[0][0], weaponsInfo[0][1]);
		GetPlayerWeaponData(i, 6, weaponsInfo[1][0], weaponsInfo[1][1]);

		if((weaponsInfo[0][0] == 30 || weaponsInfo[0][0] == 31) && GetPlayerWeapon(i) != weaponsInfo[0][0]) AttachArme(i, weaponsInfo[0][0]);
		else if((weaponsInfo[1][0] == 33 || weaponsInfo[1][0] == 34) && GetPlayerWeapon(i) != weaponsInfo[1][0] ) AttachArme(i, weaponsInfo[1][0]);
		else AttachArme(i, 0);

		/*
		    --------------------------------------------------
		*/
		
		if(PlayerData[i][pCallWithCabine] != -1)
		{
			if(CabineData[ PlayerData[i][pCallWithCabine] ][cabineExists] || Cabine_Nearest(i) != PlayerData[i][pCallWithCabine])
			cmd_cabine(i, "raccrocher");
		}
		
		if(PlayerData[i][pMining] == 1 && Mine_Nearest(i))
		{
			PlayerData[i][pMineTime]--;
			if(PlayerData[i][pMineTime] <= 0)
			{
			    PlayerData[i][pMineTime] = 0;
			    PlayerData[i][pMining] = 2;
			    
			    SetPlayerSpecialAction(i, SPECIAL_ACTION_CARRY);
			    SetPlayerAttachedObject(i, 4, 2936, 5, 0.044377, 0.029049, 0.161334, 265.922912, 9.904896, 21.765972, 0.500000, 0.500000, 0.500000);
				
	    		ApplyAnimation(i, "BSKTBALL", "null", 4.0, 0, 1, 1, 0, 0, 1);
				ApplyAnimation(i, "BSKTBALL", "BBALL_pickup", 4.0, 0, 1, 1, 0, 0, 1);
				
				TogglePlayerControllable(i, true);

				SendClientMessageEx(i, COLOR_INFO, "Allez déposer votre mineraie dans un camion. Touche \"N\" à proximité d'un véhicule.");
			}
			else
			{
				ApplyAnimation(i, "BASEBALL", "null", 4.0, 0, 1, 1, 0, 0, 1);
				ApplyAnimation(i, "BASEBALL", "BAT_4", 4.0, 0, 1, 1, 0, 0, 1);
			}

		}
		if (GetPlayerSpecialAction(i) == SPECIAL_ACTION_USEJETPACK && PlayerData[i][pJetpack] != 1)
		{
		    OnCheatDetected(i, PlayerData[i][pIP], 1, 50);
		}
		if(GetPlayerState(i) == PLAYER_STATE_SPECTATING && PlayerSpec[i] != INVALID_PLAYER_ID && IsPlayerConnected(PlayerSpec[i]))
		{
		    ShowSpecTextdraw(i, PlayerSpec[i]);
		}
		if(PlayerData[i][pChannel] == 911 && GetFactionType(i) != FACTION_POLICE)
		{
			PlayerData[i][pChannel] = 0;
		}
		if(PlayerData[i][pChannel] == 912 && GetFactionType(i) != FACTION_GOV)
		{
			PlayerData[i][pChannel] = 0;
		}
		if (PlayerData[i][pPicking])
		{
			if ((id = PlayerData[i][pPickCar]) != -1)
			{
				if (Car_Nearest(i) != id)
				{
					PlayerData[i][pPicking] = 0;
					PlayerData[i][pPickCar] = -1;
					PlayerData[i][pPickTime] = 0;
				}
				else
				{
					PlayerData[i][pPickTime]++;

					format(str, sizeof(str), "~n~~n~~n~~n~~n~~n~~n~~n~~n~~w~Cueillette... %d", 60 - PlayerData[i][pPickTime]);
					GameTextForPlayer(i, str, 1000, 3);

					if (PlayerData[i][pPickTime] >= 60)
					{
						static
						engine, lights, alarm, doors, bonnet, boot, objective;

						GetVehicleParamsEx(CarData[id][carVehicle], engine, lights, alarm, doors, bonnet, boot, objective);
						SetVehicleParamsEx(CarData[id][carVehicle], engine, lights, alarm, 0, bonnet, boot, objective);

						PlayerData[i][pPicking] = 0;
						PlayerData[i][pPickCar] = -1;
						PlayerData[i][pPickTime] = 0;

						CarData[id][carLocked] = 0;
						Car_Save(id);

						SendNearbyMessage(i, 30.0, COLOR_PURPLE, "%s open/lock veh", ReturnName(i, 1));
						ShowPlayerFooter(i, "Vous avez ~g~ouvert~w~ le véhicule");
					}
				}
			}
		}
		if (!PlayerData[i][pKilled] && PlayerData[i][pHospital] != -1)
		{
			TextDrawHideForPlayer(i, gServerTextdraws[2]);
			
			PlayerData[i][pHospitalTime]++;

			format(str, sizeof(str), "~n~~n~~n~~n~~n~~n~~n~~n~~n~~w~On vous soigne... %d", 15 - PlayerData[i][pHospitalTime]);
			GameTextForPlayer(i, str, 1000, 3);

			ApplyAnimation(i, "CRACK", "crckdeth2", 4.0, 1, 0, 0, 0, 0);

			if (PlayerData[i][pHospitalTime] >= 15)
			{
			    
       			SetPlayerPosEx(i, 220.8251,1897.4630,369.3111);
			    SetPlayerFacingAngle(i, 169.0000);

			    TogglePlayerControllable(i, 1);
			    SetCameraBehindPlayer(i);

			    SetPlayerInterior(i, 0);
			    SetPlayerVirtualWorld(i, PlayerData[i][pHospital]);
			    
			    SendClientMessage(i, -1, "Le personnel de notre établissement à prit en charge vos blessures et attentes.");
			    SendClientMessageEx(i, COLOR_INFO, "N'oubliez pas que vous êtes considéré comme mort, impossible de rejouer la scène.");

				new
				    rapportLevel = PlayerData[i][pLevel]*50;
				    
                GiveMoney(i, -(1000+rapportLevel));

			    GameTextForPlayer(i, " ", 1, 3);

			    PlayerData[i][pHospitalInt] = PlayerData[i][pHospital];
			    PlayerData[i][pHospital] = -1;
			    PlayerData[i][pHospitalTime] = 0;
			    
				PlayerData[i][pInjured] = 0;
				PlayerData[i][pMortAcheve] = 0;
				PlayerData[i][pMortWeapon] = 0;
			    
			}
		}
		else if (PlayerData[i][pMuted] && PlayerData[i][pMuteTime] > 0)
		{
			PlayerData[i][pMuteTime]--;

			if (!PlayerData[i][pMuteTime])
			{
				PlayerData[i][pMuted] = 0;
				PlayerData[i][pMuteTime] = 0;
			}
		}
		else if (PlayerData[i][pGraffiti] != -1 && PlayerData[i][pGraffitiTime] > 0)
		{
			if (Graffiti_Nearest(i) != PlayerData[i][pGraffiti])
			{
				PlayerData[i][pGraffiti] = -1;
				PlayerData[i][pGraffitiTime] = 0;
			}
			else
			{
				PlayerData[i][pGraffitiTime]--;

				if (PlayerData[i][pGraffitiTime] < 1)
				{
					strunpack(str, PlayerData[i][pGraffitiText]);
					format(GraffitiData[PlayerData[i][pGraffiti]][graffitiText], 64, str);

					GraffitiData[PlayerData[i][pGraffiti]][graffitiColor] = PlayerData[i][pGraffitiColor];

					Graffiti_Refresh(PlayerData[i][pGraffiti]);
					Graffiti_Save(PlayerData[i][pGraffiti]);

					ClearAnimations(i, 1);
					SendNearbyMessage(i, 30.0, COLOR_PURPLE, "%s pose la bombe de peinture au loin.", ReturnName(i, 1));

					PlayerData[i][pGraffiti] = -1;
					PlayerData[i][pGraffitiTime] = 0;
				}
			}
		}
		else if (PlayerData[i][pSpamCount] > 0)
		{
			PlayerData[i][pSpamCount]--;
		}
		else if (PlayerData[i][pCommandCount] > 0)
		{
			PlayerData[i][pCommandCount]--;
		}
		else if (PlayerData[i][pVendorTime] > 0)
		{
			PlayerData[i][pVendorTime]--;
		}
		else if (PlayerData[i][pDrinkTime] > 0)
		{
			PlayerData[i][pDrinkTime]--;
		}
		else if (PlayerData[i][pAdTime] > 0)
		{
			PlayerData[i][pAdTime]--;
		}
		else if (PlayerData[i][pSpeedTime] > 0)
		{
			PlayerData[i][pSpeedTime]--;
		}
		else if (PlayerData[i][pBleeding] && PlayerData[i][pBleedTime] > 0)
		{
			if (--PlayerData[i][pBleedTime] == 0)
			{
				SetPlayerHealth(i, ReturnHealth(i) - 3.0);
				PlayerData[i][pBleedTime] = 10;
			}
		}
		else if (PlayerData[i][pPrime] > 0)
		{
			PlayerData[i][pPrime]--;
		}
		else if (PlayerData[i][pFingerTime] > 0)
		{
			PlayerData[i][pFingerTime]--;

			if (!PlayerData[i][pFingerTime] && DroppedItems[PlayerData[i][pFingerItem]][droppedModel] && IsPlayerInRangeOfPoint(i, 1.5, DroppedItems[PlayerData[i][pFingerItem]][droppedPos][0], DroppedItems[PlayerData[i][pFingerItem]][droppedPos][1], DroppedItems[PlayerData[i][pFingerItem]][droppedPos][2]))
			{
				SendClientMessageEx(i, COLOR_INFO, "Le scanner d'empreintes digitales a détecté: %s.", DroppedItems[PlayerData[i][pFingerItem]][droppedPlayer]);
				PlayerData[i][pFingerItem] = -1;
			}
		}
		else if (PlayerData[i][pDrugUsed] != 0 && PlayerData[i][pDrugTime] > 0)
		{
			if (--PlayerData[i][pDrugTime] && 1 <= PlayerData[i][pDrugUsed] <= 3 && GetPlayerDrunkLevel(i) < 5000) {
				SetPlayerDrunkLevel(i, 10000);

				PlayerTextDrawShow(i, PlayerData[i][pTextdraws][8]);

				if (PlayerData[i][pDrugUsed] == 3) {
					SetPlayerWeather(i, -67);
					SetPlayerTime(i, 12, 12); // Set the time (the drug weather is buggy at night)
				}
			}
			if (1 <= PlayerData[i][pDrugUsed] <= 3 && ReturnHealth(i) <= 95) {
				SetPlayerHealth(i, ReturnHealth(i) + 5);
			}
			if (!PlayerData[i][pDrugTime])
			{
				new
				time[3];

				gettime(time[0], time[1], time[2]);
				SetPlayerTime(i, time[0], time[1]);

				SetPlayerDrunkLevel(i, 500);
				PlayerTextDrawHide(i, PlayerData[i][pTextdraws][8]);

				PlayerData[i][pDrugUsed] = 0;
				SendClientMessageEx(i, COLOR_INFO, "Les effets ont diminués.");
			}
		}
		else if (PlayerData[i][pStunned] > 0)
		{
			PlayerData[i][pStunned]--;

			if (GetPlayerAnimationIndex(i) != 388)
			ApplyAnimation(i, "CRACK", "crckdeth4", 4.0, 0, 0, 0, 1, 0, 1);

			if (!PlayerData[i][pStunned])
			{
				TogglePlayerControllable(i, 1);
				ShowPlayerFooter(i, "L'effet se dissipe petit à petit..");
			}
		}
		else if (PlayerData[i][pJailTime] > 0)
		{
			static
			hours,
			minutes,
			seconds;

			PlayerData[i][pJailTime]--;

			GetElapsedTime(PlayerData[i][pJailTime], hours, minutes, seconds);

			format(str, sizeof(str), "~r~Temps de prison:~w~ %02d:%02d:%02d", hours, minutes, seconds);
			PlayerTextDrawSetString(i, PlayerData[i][pTextdraws][70], str);

			if (!PlayerData[i][pJailTime])
			{
				PlayerData[i][pPrisoned] = 0;

				SetDefaultSpawn(i);

				SendClientMessageEx(i, COLOR_INFO, "Vous avez été libéré de prison.");
				PlayerTextDrawHide(i, PlayerData[i][pTextdraws][70]);
			}
		}
		else if (PlayerData[i][pTrackTime] > 0 && IsPlayerConnected(PlayerData[i][pMDCPlayer]) && GetFactionType(i) == FACTION_POLICE)
		{
			PlayerData[i][pTrackTime]--;

			if (!PlayerData[i][pTrackTime])
			{
				if ((id = House_Inside(PlayerData[i][pMDCPlayer])) != -1)
				{
					PlayerData[i][pCP] = 1;

					SetPlayerCheckpoint(i, HouseData[id][housePos][0], HouseData[id][housePos][1], HouseData[id][housePos][2], 3.0);
					SendClientMessageEx(i, COLOR_INFO, "La dernière position était %s \"%s\" (marqué sur votre radar).", ReturnName(PlayerData[i][pMDCPlayer], 0), HouseData[id][houseAddress]);
				}
				else if ((id = Business_Inside(PlayerData[i][pMDCPlayer])) != -1)
				{
					PlayerData[i][pCP] = 1;

					SetPlayerCheckpoint(i, BusinessData[id][bizPos][0], BusinessData[id][bizPos][1], BusinessData[id][bizPos][2], 3.0);
					SendClientMessageEx(i, COLOR_INFO, "La dernière position était %s \"%s\" (marqué sur votre radar).", ReturnName(PlayerData[i][pMDCPlayer], 0), BusinessData[id][bizName]);
				}
				else if (GetPlayerInterior(PlayerData[i][pMDCPlayer]) == 0)
				{
					static
					Float:fX,
					Float:fY,
					Float:fZ;

					GetPlayerPos(PlayerData[i][pMDCPlayer], fX, fY, fZ);
					PlayerData[i][pCP] = 1;

					SetPlayerCheckpoint(i, fX, fY, fZ, 3.0);
					SendClientMessageEx(i, COLOR_INFO, "La dernière position était %s \"%s\" (marqué sur votre radar).", ReturnName(PlayerData[i][pMDCPlayer], 0), GetLocation(fX, fY, fZ));
				}
				else
				{
					SendClientMessageEx(i, COLOR_INFO, "Impossible de localiser %s; la cible est hors de portée (à l'intérieur d'un intérieur).", ReturnName(PlayerData[i][pMDCPlayer], 0));
				}
			}
		}
		else if (PlayerData[i][pCooking] && IsPlayerSpawned(i))
		{
			PlayerData[i][pCookingTime]--;

			if (House_Inside(i) == PlayerData[i][pCookingHouse])
			{
				format(str, sizeof(str), "~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~b~~h~Vous cuisinez pendant..~w~ %d secondes", PlayerData[i][pCookingTime]);
				GameTextForPlayer(i, str, 1200, 3);
			}
			if (PlayerData[i][pCookingTime] < 1)
			{
				if (House_Inside(i) != PlayerData[i][pCookingHouse])
				{
					SendClientMessageEx(i, COLOR_INFO, "Vous avez laissé vos aliments sans surveillance et ils ont brûlés.");
				}
				else
				{
					switch (PlayerData[i][pCooking])
					{
						case 1:
						{
							id = Inventory_Add(i, "Burger", 2703, 1);

							if (id == -1)
							return SendClientMessageEx(i, COLOR_ERROR, "Il n'y a plus de place dans votre inventaire.");

							SendNearbyMessage(i, 30.0, COLOR_PURPLE, "Le micro-onde ce met à sonner (( %s ))", ReturnName(i, 1));
							SendClientMessageEx(i, COLOR_INFO, "Le burger a été ajouté à votre inventaire.");
						}
						case 2:
						{
							id = Inventory_Add(i, "Pizza", 2702, 6);

							if (id == -1)
							return SendClientMessageEx(i, COLOR_ERROR, "Il n'y a plus de place dans votre inventaire.");

							SendNearbyMessage(i, 30.0, COLOR_PURPLE, "Le four ce met à sonner (( %s ))", ReturnName(i, 1));
							SendClientMessageEx(i, COLOR_INFO, "La pizza cuite a été ajouté à votre inventaire.");
						}
					}
				}
				PlayerData[i][pCooking] = 0;
				PlayerData[i][pCookingTime] = 0;
				PlayerData[i][pCookingHouse] = -1;
			}
		}
		else if (PlayerData[i][pDrivingTest] && IsPlayerInVehicle(i, PlayerData[i][pTestCar]))
		{
			if (!IsPlayerInRangeOfPoint(i, 100.0, g_arrDrivingCheckpoints[PlayerData[i][pTestStage]][0], g_arrDrivingCheckpoints[PlayerData[i][pTestStage]][1], g_arrDrivingCheckpoints[PlayerData[i][pTestStage]][2]))
			{
				CancelDrivingTest(i);
				SendClientMessage(i, COLOR_INFO, "Vous avez échoué à votre permis de conduire.");
			}
			else if (GetPlayerSpeed(i) >= 55.0)
			{
				if (++PlayerData[i][pTestWarns] < 3)
				{
					SendClientMessageEx(i, COLOR_INFO, "Votre vitesse est excessive, vous devez rouler à 50km/h ! (%d/3)", PlayerData[i][pTestWarns]);
				}
				else
				{
					CancelDrivingTest(i);
					SendClientMessage(i, COLOR_INFO, "Vous conduisez trop vite, vous avez échoué à votre permis de conduire.");
				}
			}
		}
		else if (PlayerData[i][pTaxiTest] && IsPlayerInVehicle(i, PlayerData[i][pTestCar]))
		{
			if (!IsPlayerInRangeOfPoint(i, 350.0, g_arrLicenseTaxiCheckpoints[PlayerData[i][pTestStage]][0], g_arrLicenseTaxiCheckpoints[PlayerData[i][pTestStage]][1], g_arrLicenseTaxiCheckpoints[PlayerData[i][pTestStage]][2]))
			{
				CancelLicenseTaxiTest(i);
				SendClientMessage(i, COLOR_INFO, "Vous avez échoué au test pour votre license de taxi.");
			}
			else if (GetPlayerSpeed(i) >= 55.0)
			{
				if (++PlayerData[i][pTestWarns] < 3)
				{
					SendClientMessageEx(i, COLOR_INFO, "Votre vitesse est excessive, vous devez rouler à 50km/h ! (%d/3)", PlayerData[i][pTestWarns]);
				}
				else
				{
					CancelLicenseTaxiTest(i);
					SendClientMessage(i, COLOR_INFO, "Vous conduisez trop vite, vous avez échoué au test pour votre license de taxi.");
				}
			}
		}
		else if (IsPlayerInsideTaxi(i))
		{
			PlayerData[i][pTaxiTime]++;

			if (PlayerData[i][pTaxiTime] == 15)
			{
				PlayerData[i][pTaxiTime] = 0;
				PlayerData[i][pTaxiFee] += 10;
			}
			format(str, sizeof(str), "~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~g~$%d...~w~ %d secondes", PlayerData[i][pTaxiFee], PlayerData[i][pTaxiTime]);

			GameTextForPlayer(i, str, 1100, 3);
			GameTextForPlayer(GetVehicleDriver(GetPlayerVehicleID(i)), str, 1100, 3);
		}
		if ((id = Boombox_Nearest(i)) != INVALID_PLAYER_ID && PlayerData[i][pBoombox] != id && strlen(BoomboxData[id][boomboxURL]) && !IsPlayerInAnyVehicle(i))
		{
			strunpack(str, BoomboxData[id][boomboxURL]);
			PlayerData[i][pBoombox] = id;

			StopAudioStreamForPlayer(i);
			PlayAudioStreamForPlayer(i, str, BoomboxData[id][boomboxPos][0], BoomboxData[id][boomboxPos][1], BoomboxData[id][boomboxPos][2], 30.0, 1);
		}
		else if (PlayerData[i][pBoombox] != INVALID_PLAYER_ID && !IsPlayerInRangeOfPoint(i, 30.0, BoomboxData[PlayerData[i][pBoombox]][boomboxPos][0], BoomboxData[PlayerData[i][pBoombox]][boomboxPos][1], BoomboxData[PlayerData[i][pBoombox]][boomboxPos][2]))
		{
			PlayerData[i][pBoombox] = INVALID_PLAYER_ID;
			StopAudioStreamForPlayer(i);
		}
		if (PlayerData[i][pInjured] == 1 && GetPlayerAnimationIndex(i) != 388)
		{
			ApplyAnimation(i, "CRACK", "crckdeth4", 4.0, 0, 0, 0, 1, 0, 1);
		}
		if (PlayerData[i][pHealthTime] > 0)
		{
			PlayerData[i][pHealthTime]--;
		}
	}
	return 1;
}
forward RefuelCheck();
public RefuelCheck()
{
	static
	string[128];

	foreach (new i : Player)
	{
		new
			vehicleid = GetPlayerVehicleID(i);
			
		if(IsPlayerInAnyVehicle(i) && IsSpeedoVehicle(vehicleid) && !PlayerData[i][pDisableSpeedo] && GetPlayerVehicleSeat(i) == 0)
		{
			static
			str[15],
			Float:fDamage,
			Float:fSpeed,
			Float:fVelocity[3];
			GetVehicleHealth(vehicleid, fDamage);
			GetVehicleVelocity(vehicleid, fVelocity[0], fVelocity[1], fVelocity[2]);

			fSpeed = floatmul(floatsqroot((fVelocity[0] * fVelocity[0]) + (fVelocity[1] * fVelocity[1]) + (fVelocity[2] * fVelocity[2])), 100.0*2);


			PlayerTextDrawShow(i,PlayerData[i][pTextdraws][34]);
			PlayerTextDrawShow(i,PlayerData[i][pTextdraws][35]);
			PlayerTextDrawShow(i,PlayerData[i][pTextdraws][36]);
			PlayerTextDrawShow(i,PlayerData[i][pTextdraws][37]);
			PlayerTextDrawShow(i,PlayerData[i][pTextdraws][38]);
			PlayerTextDrawShow(i,PlayerData[i][pTextdraws][39]);
			PlayerTextDrawShow(i,PlayerData[i][pTextdraws][63]);
			//PlayerTextDrawShow(i,PlayerData[i][pTextdraws][64]);


			format(str, sizeof(str), "%d", CoreVehicles[vehicleid][vehFuel]);
			PlayerTextDrawSetString(i, PlayerData[i][pTextdraws][63], str);

			format(str, sizeof(str), "%.0f", fSpeed);
			PlayerTextDrawSetString(i, PlayerData[i][pTextdraws][39], str);

			format(str, sizeof(str), "%.0f", fDamage);
			PlayerTextDrawSetString(i, PlayerData[i][pTextdraws][38], str);

			/*format(str, sizeof(str), "%s",ReturnVehicleName(GetPlayerVehicleID(i)));
			PlayerTextDrawSetString(i, PlayerData[i][pTextdraws][64], str);*/
		}
		else if(!IsPlayerInAnyVehicle(i))
		{
			PlayerTextDrawHide(i,PlayerData[i][pTextdraws][34]);
			PlayerTextDrawHide(i,PlayerData[i][pTextdraws][35]);
			PlayerTextDrawHide(i,PlayerData[i][pTextdraws][36]);
			PlayerTextDrawHide(i,PlayerData[i][pTextdraws][37]);
			PlayerTextDrawHide(i,PlayerData[i][pTextdraws][38]);
			PlayerTextDrawHide(i,PlayerData[i][pTextdraws][39]);
			PlayerTextDrawHide(i,PlayerData[i][pTextdraws][63]);
			//PlayerTextDrawHide(i,PlayerData[i][pTextdraws][64]);
		}
		if (!PlayerData[i][pLogged] || PlayerData[i][pRefill] == INVALID_VEHICLE_ID)
		continue;

		if (PlayerData[i][pRefill] != INVALID_VEHICLE_ID && PlayerData[i][pGasPump] != -1)
		{
		    if(IsPlayerInAnyVehicle(i))
		    {
				SendClientMessageEx(i, COLOR_INFO, "Vous avez rempli votre véhicule pour la somme de $%d.", PlayerData[i][pRefillPrice]);

				Car_Save(Car_GetID(PlayerData[i][pRefill]));
			    StopRefilling(i);
		        continue;
		    }
		    
		  	ApplyAnimation(i, "DEALER", "null", 4.0, 0, 1, 1, 0, 0, 1);
			ApplyAnimation(i, "DEALER", "DEALER_IDLE", 4.0, 0, 1, 1, 0, 0, 1);
			
			PlayerData[i][pRefillPrice] += PRICE_FUEL;
			CoreVehicles[PlayerData[i][pRefill]][vehFuel] ++;
			
			SetProgressBarValue(PlayerData[i][pRefillBar], CoreVehicles[PlayerData[i][pRefill]][vehFuel]);
			UpdateProgressBar(PlayerData[i][pRefillBar], i);
			
			format(string, sizeof(string), "%d litres ~g~(%d$)", CoreVehicles[PlayerData[i][pRefill]][vehFuel], PlayerData[i][pRefillPrice]);
			ShowPlayerFooter(i, string, 2500);
			
			PumpData[PlayerData[i][pGasPump]][pumpFuel] --;
			GiveMoney(i, -PRICE_FUEL);
			
			if(GetMoney(i) < 1)
			{
				SendClientMessageEx(i, COLOR_INFO, "Vous avez rempli votre véhicule pour la somme de $%d.", PlayerData[i][pRefillPrice]);
				
				Car_Save(Car_GetID(PlayerData[i][pRefill]));
			    StopRefilling(i);
			}
			else
			{
				if (PumpData[PlayerData[i][pGasPump]][pumpExists])
				{
					format(string, sizeof(string), "{FFFFFF}Essence: %d litres", PumpData[PlayerData[i][pGasPump]][pumpFuel]);
					UpdateDynamic3DTextLabelText(PumpData[PlayerData[i][pGasPump]][pumpText3D], COLOR_DEFAULT, string);
				}
				if (CoreVehicles[PlayerData[i][pRefill]][vehFuel] >= 100 || !PumpData[PlayerData[i][pGasPump]][pumpExists] || PumpData[PlayerData[i][pGasPump]][pumpFuel] < 0)
				{
					CoreVehicles[PlayerData[i][pRefill]][vehFuel] = 100;
					SendClientMessageEx(i, COLOR_INFO, "Vous avez rempli votre véhicule pour la somme de $%d.", PlayerData[i][pRefillPrice]);

					if (PumpData[PlayerData[i][pGasPump]][pumpExists])
					{
						if (PumpData[PlayerData[i][pGasPump]][pumpFuel] < 0)
						PumpData[PlayerData[i][pGasPump]][pumpFuel] = 0;

						BusinessData[PlayerData[i][pGasStation]][bizVault] += PlayerData[i][pRefillPrice];
						Business_Save(PlayerData[i][pGasStation]);

						Pump_Save(PlayerData[i][pGasPump]);
					}
			    	
					Car_Save(Car_GetID(PlayerData[i][pRefill]));
					StopRefilling(i);
				}
			}
		}
	}
	return 1;
}

forward FuelUpdate();
public FuelUpdate()
{
	for(new i = 1, j = GetVehiclePoolSize(); i <= j; i++) if (IsEngineVehicle(i) && GetEngineStatus(i))
	{
		if (CoreVehicles[i][vehFuel] > 0)
		{
			CoreVehicles[i][vehFuel]--;

			if (CoreVehicles[i][vehFuel] >= 1 && CoreVehicles[i][vehFuel] <= 5)
			{
				SendClientMessage(GetVehicleDriver(i), COLOR_INFO, "Le carburant de votre véhicule devient faible. Vous devriez aller le remplir.");
			}
		}
		if (CoreVehicles[i][vehFuel] <= 0)
		{
			CoreVehicles[i][vehFuel] = 0;
			SetEngineStatus(i, false);
		}
	}
}

public OnVehicleDeath(vehicleid, killerid)
{
	if (CoreVehicles[vehicleid][vehTemporary])
	{
		CoreVehicles[vehicleid][vehTemporary] = false;
		DestroyVehicle(vehicleid);
	}
	for (new i = 0; i != MAX_CRATES; i ++) if (CrateData[i][crateExists] && CrateData[i][crateVehicle] == vehicleid) {
		Crate_Delete(i);
	}
	return 1;
}

public OnVehicleRespray(playerid, vehicleid, color1, color2)
{
	SetVehicleColor(vehicleid, color1, color2);
	return 1;
}

public OnVehiclePaintjob(playerid, vehicleid, paintjobid)
{
	SetVehiclePaintjob(vehicleid, paintjobid);
	return 1;
}

public OnVehicleMod(playerid, vehicleid, componentid)
{
	new
	id = Car_GetID(vehicleid),
	slot = GetVehicleComponentType(componentid);

	if (id != -1)
	{
		CarData[id][carMods][slot] = componentid;
		Car_Save(id);
	}
	return 1;
}

public OnVehicleSpawn(vehicleid)
{
	vehiclecallsign[vehicleid] = 0;
	if (CoreVehicles[vehicleid][vehTemporary])
	{
		CoreVehicles[vehicleid][vehTemporary] = false;
		DestroyVehicle(vehicleid);
	}
	for (new i = 0; i != MAX_CRATES; i ++) if (CrateData[i][crateExists] && CrateData[i][crateVehicle] == vehicleid) {
		Crate_Delete(i);
	}
	if (IsValidObject(CoreVehicles[vehicleid][vehCrate]) && GetVehicleModel(vehicleid) == 530)
	DestroyObject(CoreVehicles[vehicleid][vehCrate]);

	new
		id = Car_GetID(vehicleid);
		
	if(CarData[id][carLoca] == 1 || CarData[id][carJob] != -1 || CarData[id][carFaction] != -1)
	{
	    CoreVehicles[vehicleid][vehFuel] = 100;
	}
	
	ResetVehicle(vehicleid);
	return 1;
}

public OnRconLoginAttempt(ip[], password[], success)
{
	if (!success)
	{
		foreach (new i : Player) if (!strcmp(PlayerData[i][pIP], ip, true) && PlayerData[i][pAdmin] < 6) {
			Kick(i);
		}
		SendAdminAlert(COLOR_ADMINGROUP, "Tentative érroné de connexion au RCON. (IP: \"%s\")", ip);
		Log_Write("logs/rcon_log.txt", "[%s] RCON login attempt failed from \"%s\".", ReturnDate(), ip);
	}
	else
	{
		foreach (new i : Player) if (!strcmp(PlayerData[i][pIP], ip, true) && PlayerData[i][pAdmin] < 6) {
			Blacklist_Add(ip, PlayerData[i][pUsername], "Server", "Unauthorized RCON");

			SendAdminAlert(COLOR_ADMINGROUP, "%s a été banni pour tentative de connexion au RCON.", ReturnName(i, 0));
			Log_Write("logs/rcon_log.txt", "[%s] %s (%s) was banned for an unauthorized RCON login.", ReturnDate(), ReturnName(i, 0), ip);

			break;
		}
	}
	return 1;
}
public OnPlayerInteriorChange(playerid, newinteriorid, oldinteriorid)
{
	MaskOff(playerid);
	return 1;
}

stock MaskOff(playerid)
{
	foreach (new i : Player)
	{
		if(IsPlayerConnected(i))
		{
			if(PlayerData[playerid][pMaskOn] == 1)
			{
				ShowPlayerNameTagForPlayer(i, playerid, 0);
			}
		}
	}
	return 1;
}

public OnPlayerClickPlayer(playerid, clickedplayerid, source)
{
	if(PlayerData[playerid][pAdmin] != 0 && playerid != clickedplayerid && IsPlayerSpawned(clickedplayerid) && IsPlayerSpawned(playerid))
	{
	    new
	        title[80],
	        content[450],
			ip_address[17];

        GetPlayerIp(clickedplayerid, ip_address, sizeof(ip_address));

		format(title, sizeof(title), "%s (ID:%d) - %s", ReturnName(clickedplayerid), clickedplayerid, ip_address);
		format(content, sizeof(content), "\
		{7EA0DA}[TP]{FFFFFF} Se téléporter à lui\n\
		{7EA0DA}[TP]{FFFFFF} Le téléporter à moi\n\
		{7EA0DA}[SANCTION]{FFFFFF} Kicker le joueur\n\
		{7EA0DA}[SANCTION]{FFFFFF} Bannir le joueur\n\
		{7EA0DA}[UTILE]{FFFFFF} Restaurer son intérieur et virtual world à 0\n\
		{7EA0DA}[UTILE]{FFFFFF} Restaurer sa vie à 100HP\n\
		{7EA0DA}[UTILE]{FFFFFF} Restaurer son armure à 50ARM\n\
		{7EA0DA}[UTILE]{FFFFFF} Changer le skin");

		PlayerData[playerid][pAdminClicked] = clickedplayerid;
	    Dialog_Show(playerid, DIALOG_ADMIN_CLICK, DIALOG_STYLE_LIST, title, content, "Valider", "Annuler");
	}
	return 1;
}

Dialog:DIALOG_ADMIN_BAN(playerid, response, listitem, inputtext[])
{
	if(!response)
	    return 1;

    new
        command_string[20];

	format(command_string, sizeof(command_string), "%d %s", PlayerData[playerid][pAdminClicked], inputtext);

    cmd_ban(playerid, command_string);
	PlayerData[playerid][pAdminClicked] = -1;
	return 1;
}

Dialog:DIALOG_ADMIN_KICK(playerid, response, listitem, inputtext[])
{
	if(!response)
	    return 1;

    new
        command_string[20];

	format(command_string, sizeof(command_string), "%d %s", PlayerData[playerid][pAdminClicked], inputtext);

    cmd_kick(playerid, command_string);
	PlayerData[playerid][pAdminClicked] = -1;
	return 1;
}

Dialog:DIALOG_ADMIN_SKIN(playerid, response, listitem, inputtext[])
{
	if(!response)
	    return 1;

    new
        command_string[20];

	format(command_string, sizeof(command_string), "%d skin %d", PlayerData[playerid][pAdminClicked], strval(inputtext));

    cmd_setstat(playerid, command_string);
	PlayerData[playerid][pAdminClicked] = -1;
	return 1;
}

Dialog:DIALOG_ADMIN_CLICK(playerid, response, listitem, inputtext[])
{
	if (!response)
		return 1;

	switch(listitem)
	{
		case 0:
		{
		    new
		        command_string[20];

			format(command_string, sizeof(command_string), "%d", PlayerData[playerid][pAdminClicked]);

		    cmd_goto(playerid, command_string);
		    PlayerData[playerid][pAdminClicked] = -1;
		}
		case 1:
		{
		    new
		        command_string[20];

			format(command_string, sizeof(command_string), "%d", PlayerData[playerid][pAdminClicked]);

		    cmd_gethere(playerid, command_string);
		    PlayerData[playerid][pAdminClicked] = -1;
		}
		case 2:
		{
	    	new
	        	title[80],
	        	ip_address[17];

     		GetPlayerIp(PlayerData[playerid][pAdminClicked], ip_address, sizeof(ip_address));

		    format(title, sizeof(title), "%s (ID:%d) - %s", ReturnName(PlayerData[playerid][pAdminClicked]), PlayerData[playerid][pAdminClicked], ip_address);

		    Dialog_Show(playerid, DIALOG_ADMIN_KICK, DIALOG_STYLE_INPUT, title, "Entrez la raison du kick:", "Valider", "Annuler");
		}
		case 3:
		{
	    	new
	        	title[80],
	        	ip_address[17];

     		GetPlayerIp(PlayerData[playerid][pAdminClicked], ip_address, sizeof(ip_address));

		    format(title, sizeof(title), "%s (ID:%d) - %s", ReturnName(PlayerData[playerid][pAdminClicked]), PlayerData[playerid][pAdminClicked], ip_address);

		    Dialog_Show(playerid, DIALOG_ADMIN_BAN, DIALOG_STYLE_INPUT, title, "Entrez la raison du bannissement:", "Valider", "Annuler");
		}
		case 4:
		{
		    SetPlayerInterior(PlayerData[playerid][pAdminClicked], 0);
		    SetPlayerVirtualWorld(PlayerData[playerid][pAdminClicked], 0);

		    SendClientMessageEx(playerid, COLOR_INFO, "Vous avez réinitialiser l'intérieur et le virtual world de %s", ReturnName(PlayerData[playerid][pAdminClicked]));
		    SendClientMessageEx(PlayerData[playerid][pAdminClicked], COLOR_INFO, "%s vous a réinitialiser l'intérieur et le virtual world.", ReturnName(playerid));
		    PlayerData[playerid][pAdminClicked] = -1;
		}
		case 5:
		{
		    new
		        command_string[20];

			format(command_string, sizeof(command_string), "%d 100", PlayerData[playerid][pAdminClicked]);

            cmd_sethp(playerid, command_string);
		    PlayerData[playerid][pAdminClicked] = -1;
		}
		case 6:
		{
		    new
		        command_string[20];

			format(command_string, sizeof(command_string), "%d 50", PlayerData[playerid][pAdminClicked]);

            cmd_setarmor(playerid, command_string);
		    PlayerData[playerid][pAdminClicked] = -1;
		}
		case 7:
		{
	    	new
	        	title[80],
	        	ip_address[17];

     		GetPlayerIp(PlayerData[playerid][pAdminClicked], ip_address, sizeof(ip_address));

		    format(title, sizeof(title), "%s (ID:%d) - %s", ReturnName(PlayerData[playerid][pAdminClicked]), PlayerData[playerid][pAdminClicked], ip_address);

		    Dialog_Show(playerid, DIALOG_ADMIN_SKIN, DIALOG_STYLE_INPUT, title, "Entrez le nouveau Skin ID:", "Valider", "Annuler");
		}
	}

	return 1;
}

public OnPlayerStreamIn(playerid, forplayerid)
{
	if (PlayerData[playerid][pMaskOn])
		ShowPlayerNameTagForPlayer(forplayerid, playerid, 0);
	else
		ShowPlayerNameTagForPlayer(forplayerid, playerid, 1);

	return 1;
}

forward OnPlayerUseItem(playerid, itemid, name[]);
public OnPlayerUseItem(playerid, itemid, name[])
{
	if (!strcmp(name, "Boombox", true)) {
		cmd_boombox(playerid, "place");
	}
	else if (!strcmp(name, "Sac a dos", true)) {
		cmd_sac(playerid, "\1");
	}
	else if (!strcmp(name, "Telephone", true)) {
		cmd_telephone(playerid, "\1");
	}
	else if (!strcmp(name, "Radio", true)) {
		SendClientMessageEx(playerid, COLOR_USAGE, "Utilisez \"/r <texte>\" pour parler dans votre radio.");
	}
	else if (!strcmp(name, "Jerrican", true)) {
		SendClientMessageEx(playerid, COLOR_USAGE, "Utilisez \"/v(ehicule) remplir\".");
	}
	else if (!strcmp(name, "Kit Reparation", true)) {
		cmd_reparer(playerid, "\1");
	}
	else if (!strcmp(name, "NOS", true)) {
		cmd_job(playerid, "nitro");
	}
	else if (!strcmp(name, "GPS", true)) {
		cmd_gps(playerid, "\1");
	}
	else if (!strcmp(name, "Marijuana", true)) {
		cmd_drogue(playerid, "marijuana");
	}
	else if (!strcmp(name, "Cocaine", true)) {
		cmd_drogue(playerid, "cocaine");
	}
	else if (!strcmp(name, "Heroine", true)) {
		cmd_drogue(playerid, "heroine");
	}
	else if (!strcmp(name, "Steroides", true)) {
		cmd_drogue(playerid, "Steroides");
	}
	else if (!strcmp(name, "Soda", true)) {
		cmd_boire(playerid, "soda");
	}
	else if (!strcmp(name, "Bouteille d'eau", true)) {
		cmd_boire(playerid, "water");
	}
	/*else if (!strcmp(name, "Pizza", true)) {
		cmd_cuisiner(playerid, "pizza");
	}
	else if (!strcmp(name, "Burger", true)) {
		cmd_cuisiner(playerid, "burger");
	}*/
	else if (!strcmp(name, "Gilet pare balle", true)) {
		cmd_gilet(playerid, "\1");
	}
	else if (!strcmp(name, "Munitions", true)) {
		cmd_recharger(playerid, "\1");
	}

	else if (!strcmp(name, "Graines de Marijuana", true)) {
		cmd_planter(playerid, "weed");
	}
	else if (!strcmp(name, "Coca", true)) {
		cmd_planter(playerid, "coca");
	}
	else if (!strcmp(name, "Opium", true)) {
		cmd_planter(playerid, "opium");
	}
	return 1;
}
public OnPlayerWeaponShot(playerid, weaponid, hittype, hitid, Float:fX, Float:fY, Float:fZ)
{
	if(weaponid != 38)
	{
		if((gettime() - shotTime[playerid]) < 1)
		{
			shot[playerid]+=1;
		}
		else
		{
			shot[playerid]=0;
		}
		if(shot[playerid] > 10)
		{
			Kick(playerid);
		}
		shotTime[playerid] = gettime();
	}
	if(hittype == BULLET_HIT_TYPE_OBJECT || hittype == BULLET_HIT_TYPE_PLAYER_OBJECT)
	{
	    PlayerData[playerid][pLastWarnCheat] = gettime() + 1;
	}
	if(GetPlayerWeapon(playerid) == 23 && PlayerData[playerid][pTazer]) // On vérifie si il a le taser + silencieux
    {
		PlayReloadAnimation(playerid, 23);
		PlayReloadAnimation(playerid, 23);
		
		GivePlayerWeapon(playerid, 23, 0);
	}
	if (weaponid == 23 && PlayerData[playerid][pTazer] && GetFactionType(playerid) == FACTION_POLICE) {
		PlayerPlaySoundEx(playerid, 6003);
	}
	if ((weaponid >= 22 && weaponid <= 38) && hittype == BULLET_HIT_TYPE_PLAYER && hitid != INVALID_PLAYER_ID)
	{
		if (PlayerData[hitid][pHospital] != -1)
		return 0;

		if (PlayerData[hitid][pDrugUsed] == 2)
		{
			new
			Float:damage = floatdiv(g_arrWeaponDamage[weaponid], 2),
			Float:health;

			GetPlayerHealth(hitid, health);
			SetPlayerHealth(hitid, floatsub(health, damage));

			return 0;
		}
	}
	return 1;
}
public OnPlayerGiveDamage(playerid, damagedid, Float:amount, weaponid)
{
	if (damagedid != INVALID_PLAYER_ID)
	{
		PlayerData[damagedid][pLastShot] = playerid;
		PlayerData[damagedid][pShotTime] = gettime();

		if (PlayerData[playerid][pDrugUsed] == 4 && (weaponid >= 0 && weaponid <= 15))
		{
			SetPlayerHealth(damagedid, ReturnHealth(damagedid) - 6);
		}
		if (GetFactionType(playerid) == FACTION_POLICE && PlayerData[playerid][pTazer] && PlayerData[damagedid][pStunned] < 1 && weaponid == 23)
		{
			if (GetPlayerState(damagedid) != PLAYER_STATE_ONFOOT)
			return SendClientMessageEx(playerid, COLOR_ERROR, "Le joueur doit être à pied pour être tazer.");

			if (GetPlayerDistanceFromPlayer(playerid, damagedid) > 15.0)
			return SendClientMessageEx(playerid, COLOR_ERROR, "Vous devez être plus proche pour tazer le joueur.");

			new
			string[64];

			format(string, sizeof(string), "Vous avez été ~r~tazé~w~ par %s.", ReturnName(playerid));

			PlayerData[damagedid][pStunned] = 10;
			
			ApplyAnimation(damagedid, "CRACK", "crckdeth2", 4.0, 0, 0, 0, 1, 0, 1);
			ShowPlayerFooter(damagedid, string);

			SendNearbyMessage(playerid, 15.0, COLOR_PURPLE, "%s lève son tazer en direction de %s puis le taze.", ReturnName(playerid, 1), ReturnName(damagedid, 1));
		}
		if (GetFactionType(playerid) == FACTION_POLICE && PlayerData[playerid][pBeanBag] && PlayerData[damagedid][pStunned] < 1 && weaponid == 25)
		{
			if (GetPlayerState(damagedid) != PLAYER_STATE_ONFOOT)
			return SendClientMessageEx(playerid, COLOR_ERROR, "Le joueur doit être à pied pour être flashball.");

			if (GetPlayerDistanceFromPlayer(playerid, damagedid) > 40.0)
			return SendClientMessageEx(playerid, COLOR_ERROR, "Vous devez être plus proche pour flashball le joueur.");

			new
			string[64];

			format(string, sizeof(string), "Vous vous êtes fait ~r~flashball~w~ par %s.", ReturnName(playerid, 1));

			PlayerData[damagedid][pStunned] = 10;

			ApplyAnimation(damagedid, "CRACK", "crckdeth4", 4.0, 0, 0, 0, 1, 0, 1);
			ShowPlayerFooter(damagedid, string);

			SendNearbyMessage(playerid, 15.0, COLOR_PURPLE, "%s lève son flashball en direction de %s puis lui tire dessus.", ReturnName(playerid, 1), ReturnName(damagedid, 1));
		}
	}
	return 1;
}

public OnActorStreamIn(actorid, forplayerid)
{
	new
	    realID = Actor_GetID(actorid),
		Float:pos[4];

	if(realID == -1)
	{
		GetActorPos(actorid, pos[0], pos[1], pos[2]);
		GetActorFacingAngle(actorid, pos[3]);
		
	    SetActorPos(actorid, pos[0], pos[1], pos[2]);
	    SetActorFacingAngle(actorid, pos[3]);
	}
	else
	{
	    SetActorPos(ActorData[realID][actorObject], ActorData[realID][actorPos][0], ActorData[realID][actorPos][1], ActorData[realID][actorPos][2]);
	    SetActorFacingAngle(ActorData[realID][actorObject], ActorData[realID][actorPos][3]);
	}
	return 1;
}

public OnPlayerDeath(playerid, killerid, reason)
{
    DisableAnticheatForPlayer(playerid);
	PlayerData[playerid][pMortWeapon] = reason;
	
	GetPlayerPos(playerid, xmor[playerid], ymor[playerid], zmor[playerid]);
	int_mor[playerid] = GetPlayerInterior(playerid);
	vw_mor[playerid] = GetPlayerVirtualWorld(playerid);

    KillTimer(TimerFaim[playerid]);

	SendJobMessage(JOB_MEDIC, COLOR_RADIO,"HQ: A toutes les unités, un civil est blessé, Localisation: %s.",GetLocation(xmor[playerid], ymor[playerid], zmor[playerid]));

	if(PlayerData[playerid][pInjured] && PlayerData[playerid][pMortAcheve] == 0) SendAdminAlert(0xbd7567FF, "[%s] AdmWarning: %s a été blessé par %s (%s)", ReturnDate(), ReturnName(playerid), ReturnName(killerid), ReturnWeaponName(reason));
	else if(PlayerData[playerid][pInjured] && PlayerData[playerid][pMortAcheve] == 1) SendAdminAlert(0xbd7567FF, "[%s] AdmWarning: %s a été tué par %s (%s)", ReturnDate(), ReturnName(playerid), ReturnName(killerid), ReturnWeaponName(reason));

	if (killerid != INVALID_PLAYER_ID)
	{
		if (1 <= reason <= 46)
			Log_Write("logs/kill_log.txt", "[%s] %s a été tué par %s (%s).", ReturnDate(),ReturnName(playerid),ReturnName(killerid), ReturnWeaponName(reason));

		else
			Log_Write("logs/kill_log.txt", "[%s] %s a été tué par %s (raison: %d).", ReturnDate(),ReturnName(playerid),ReturnName(killerid), ReturnWeaponName(reason));

		if (reason == 50 && killerid != INVALID_PLAYER_ID)
		SendAdminAlert(COLOR_ADMINGROUP, "%s a tué %s par hélicoptère.", ReturnName(killerid, 1), ReturnName(playerid, 1));

		if (reason == 29 && killerid != INVALID_PLAYER_ID && GetPlayerState(killerid) == PLAYER_STATE_DRIVER){
			SendAdminAlert(COLOR_ADMINGROUP, "%s a tué %s par drive-by.", ReturnName(killerid, 1), ReturnName(playerid, 1));}
	}
	if (PlayerData[playerid][pTaxiPNJ] != -1)
	{
		Reset_TaxiCalls(PlayerData[playerid][pTaxiPNJ]);
		PlayerData[playerid][pTaxiPNJ] = -1;
		DisableWaypoint(playerid);
	}
	if(BraquageTimer[playerid] > 0 || C4Timer[playerid] != 0)
	{
		KillTimer(BraquageKillTimer[playerid]);
		KillTimer(C4KillTimer[playerid]);
		BraquageTimer[playerid] = 0;
		C4Timer[playerid] = 0;
		SendClientMessageEx(playerid, COLOR_ERROR, "Vous avez été tué pendant votre braquage, ce dernier est donc annulé.");
	}
	if((IsPlayerAttachedObjectSlotUsed(playerid, 3)) && aBraquer{playerid} == true || aBraquerBanque[playerid] == 1)
		RemovePlayerAttachedObject(playerid, 3);
	if(IsPlayerAttachedObjectSlotUsed(playerid, 9))
		RemovePlayerAttachedObject(playerid, 9);
		
	if(PlayerData[playerid][pTakeCorpse] != -1)
	{
	    new id = PlayerData[playerid][pTakeCorpse];
	    
        CorpseData[id][corpseUsed] = false;
        GetPlayerPos(playerid, CorpseData[id][corpsePos][0], CorpseData[id][corpsePos][1], CorpseData[id][corpsePos][2]);
		GetPlayerFacingAngle(playerid, CorpseData[id][corpsePos][3]);

        CorpseData[id][corpsePos][0] = CorpseData[id][corpsePos][0]+1;
        CorpseData[id][corpsePos][1] = CorpseData[id][corpsePos][1]+2;
        
		if(IsPlayerAttachedObjectSlotUsed(playerid, 9)) RemovePlayerAttachedObject(playerid, 9);
		Corpse_Refresh(id);
	}
	
	return 1;
}

/*#define HOLDING(%0) 						((newkeys & (%0)) == (%0))
#define PRESSED(%0) 						(((newkeys & (%0)) == (%0)) && ((oldkeys & (%0)) != (%0)))*/

public OnPlayerKeyStateChange(playerid, newkeys, oldkeys)
{
	if (PlayerData[playerid][pHospital] != -1 || !IsPlayerSpawned(playerid) || PlayerData[playerid][pCuffed] || PlayerData[playerid][pInjured])
	return 0;

	if(newkeys & KEY_NO && GetPlayerCameraMode(playerid) == 55 && GetPlayerState(playerid) == PLAYER_STATE_PASSENGER)
    {
	    // On le remet dans le véhicule à sa place.
	    ClearAnimations(playerid, 1);
	    PutPlayerInVehicle(playerid, GetPlayerVehicleID(playerid), GetPlayerVehicleSeat(playerid));
	    SetPlayerArmedWeapon(playerid, 0);
	}

	if (GetPlayerSpecialAction(playerid) == SPECIAL_ACTION_CUFFED && newkeys & KEY_JUMP && !(oldkeys & KEY_JUMP))
	ApplyAnimation(playerid, "GYMNASIUM", "gym_jog_falloff", 4.0, 0, 1, 1, 0, 0, 1);

	/*if((HOLDING(KEY_SPRINT) && PRESSED(KEY_JUMP)) && GetPlayerTargetPlayer(playerid) != INVALID_PLAYER_ID)
    {
        new plaquer = GetPlayerTargetPlayer(playerid); // plaquer = le joueur qui se fait mettre au sol. playerid = le plaqueur.
        if(IsPlayerNearPlayer(playerid, plaquer, 2.0))
        {
	        if(random(2))
	        {
	            SendNearbyMessage(playerid, 15.0, COLOR_PURPLE, "** %s a plaquer contre le sol %s.", ReturnName(playerid), ReturnName(plaquer, 0));

	            ApplyAnimation(plaquer,"PED","KO_skid_front",4.1,0,1,1,1,0); // On met le joueur plaqué au sol.
	            ApplyAnimation(playerid, "DODGE", "Cover_Dive_01", 4.1, 1, 1, 1, 1, 1, 1); // On met une animation au joueur qui plaque.
	        }
	        else
	        {
	            SendNearbyMessage(playerid, 15.0, COLOR_PURPLE, "** %s a tenter de plaquer %s contre le sol mais n'a pas réussi.", ReturnName(playerid), ReturnName(plaquer, 0));
	            ApplyAnimation(playerid, "DODGE", "Cover_Dive_01", 4.1, 1, 1, 1, 1, 1, 1); // On met une animation au joueur qui plaque.
	        }
        }
    }*/

	if (newkeys & KEY_CROUCH && IsPlayerInAnyVehicle(playerid))
	{
		cmd_open(playerid, "\1");
	}
	if(newkeys & 2)
	{ // DRIVE BY
	    if(GetPlayerWeapon(playerid) != 0 && GetPlayerState(playerid) == PLAYER_STATE_PASSENGER)
	    {
	        if(PlayerData[playerid][p_DriveBy] == true)
			{
				ApplyAnimation(playerid, "CARRY", "crry_prtial", 2.0, 0, 0, 0, 0, 0);
				PlayerData[playerid][p_DriveBy] = false;
			}
			else PlayerData[playerid][p_DriveBy] = true;
	    }
	}
	if (newkeys & KEY_YES && IsPlayerSpawned(playerid))
	{
		if (PlayerData[playerid][pJailTime] > 0)
		return SendClientMessageEx(playerid, COLOR_ERROR, "Vous ne pouvez pas ouvrir votre inventaire en Jail.");

		if (PlayerData[playerid][pCuffed] > 0 || GetPlayerSpecialAction(playerid) == SPECIAL_ACTION_CARRY)
		return SendClientMessageEx(playerid, COLOR_ERROR, "Vous ne pouvez pas ouvrir votre inventaire pour le moment.");

		OpenInventory(playerid);
	}
	if (newkeys & KEY_SPRINT && IsPlayerSpawned(playerid) && PlayerData[playerid][pLoopAnim])
	{
		ClearAnimations(playerid);
		HidePlayerFooter(playerid);

		PlayerData[playerid][pLoopAnim] = false;
	}
	if (newkeys & KEY_FIRE && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
	{
		new vehicleid = GetPlayerVehicleID(playerid);
		new id = Car_GetID(vehicleid);

		if(id == -1) return SendClientMessageEx(playerid, COLOR_ERROR, "Vous ne pouvez pas démarrer ou éteindre ce véhicule.");
		if (!IsEngineVehicle(vehicleid)) return SendClientMessageEx(playerid, COLOR_ERROR, "Vous n'êtes pas à l'intérieur d'un véhicule.");
		if (GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return SendClientMessageEx(playerid, COLOR_ERROR, "Vous devez être conducteur.");
		if (CoreVehicles[vehicleid][vehFuel] < 1) return SendClientMessageEx(playerid, COLOR_ERROR, "Le réservoir est vide.");
		if (ReturnVehicleHealth(vehicleid) <= 300) return SendClientMessageEx(playerid, COLOR_ERROR, "Le moteur est hors service.");
		if (CarData[id][carLoca] > 0 && CarData[id][carID] != PlayerData[playerid][pLocaID])
		{
		    if(!PlayerData[playerid][pAdminDuty])
		    {
				SendClientMessageEx(playerid, COLOR_ERROR, "Vous n'avez pas les clés du véhicule.");
				return 1;
			}
		}
		if (CarData[id][carOwner] > 0 && CarData[id][carOwner] != PlayerData[playerid][pID] && CarData[id][carDouble] <= 0)
		{
		    if(!PlayerData[playerid][pAdminDuty])
		    {
				SendClientMessageEx(playerid, COLOR_ERROR, "Vous n'avez pas les clés du véhicule.");
				return 1;
			}
		}
		if (CarData[id][carDouble] > 0 && CarData[id][carDouble] != PlayerData[playerid][pID] && !Car_IsOwner(playerid, id))
		{
			if(!PlayerData[playerid][pAdminDuty])
		    {
				SendClientMessageEx(playerid, COLOR_ERROR, "Vous n'avez pas les clés du véhicule.");
				return 1;
			}
		}

		if (CarData[id][carSabot] != 0 && GetEngineStatus(vehicleid) == 0) return SendClientMessageEx(playerid, COLOR_ERROR, "Ce véhicule a un sabot. Utilisez /payersabot pour le retirer ($%d)",CarData[id][carSabPri]);

		switch (GetEngineStatus(vehicleid))
		{
			case false:
			{
				SetTimerEx("Demar",1500,0,"ii",playerid,vehicleid);
				//GameTextForPlayer(playerid, "~w~Démarrage en cours..",1000,3);
				ShowPlayerFooter(playerid, "~w~Démarrage en cours ...");
			}
			case true:
			{
				SetEngineStatus(vehicleid, false);
				ShowPlayerFooter(playerid, "Vous avez ~r~éteint~w~ le moteur");
			}
		}
	}
	if (newkeys & KEY_LOOK_BEHIND && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
	{
		new vehicleid = GetPlayerVehicleID(playerid);
		if (!IsEngineVehicle(vehicleid)) return SendClientMessageEx(playerid, COLOR_ERROR, "Vous devez être dans un véhicule.");
		if (GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return SendClientMessageEx(playerid, COLOR_ERROR, "Vous devez être conducteur pour utiliser cette commande.");

		switch (GetLightStatus(vehicleid))
		{
			case false:
			{
				SetLightStatus(vehicleid, true);
				ShowPlayerFooter(playerid, "Vous avez ~g~allumé~w~ les phares!");
			}
			case true:
			{
				SetLightStatus(vehicleid, false);
				ShowPlayerFooter(playerid, "Vous avez ~r~éteint~w~ les phares!");
			}
		}
	}
	if (newkeys & KEY_FIRE && PlayerData[playerid][pDrinking])
	{
		if (GetPlayerAnimationIndex(playerid) != 15 && GetPlayerAnimationIndex(playerid) != 16 && !PlayerData[playerid][pDrinkTime])
		{
			if (GetProgressBarValue(PlayerData[playerid][pDrinkBar]) <= 0.0)
			{
				SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);

				DestroyProgressBar(PlayerData[playerid][pDrinkBar]);
				PlayerData[playerid][pDrinking] = 0;

				SendClientMessageEx(playerid, COLOR_INFO, "Vous avez fini de boire à la bouteille.");
			}
			else
			{
				PlayerData[playerid][pDrinkTime] = 2;

				switch (PlayerData[playerid][pDrinking])
				{
				}
				SetProgressBarValue(PlayerData[playerid][pDrinkBar], GetProgressBarValue(PlayerData[playerid][pDrinkBar]) - 10.0);
				UpdateProgressBar(PlayerData[playerid][pDrinkBar], playerid);
			}
		}
	}
	if (newkeys & KEY_FIRE && Cforcerporte[playerid] != 0 )
	{

		static
		Float:X,
		Float:Y,
		Float:Z;

		GetDynamicObjectPos(CasierN[playerid], X, Y, Z);

		if(IsPlayerInRangeOfPoint(playerid, 1.5, 1438.8292,-1001.6400,996.1090))
		{

			if (Forcerporte[playerid] > 0)
			{
				Forcerporte[playerid] --;

				ApplyAnimation(playerid, "BASEBALL", "null", 4.0, 0, 1, 1, 0, 0, 1);
				ApplyAnimation(playerid, "BASEBALL", "BAT_4", 4.0, 0, 1, 1, 0, 0, 1);
			}
			else
			{
				Cforcerporte[playerid] = 0;
				Forcerporte[playerid] = 10;

				RemovePlayerAttachedObject(playerid, 4);

				ApplyAnimation(playerid, "BSKTBALL", "null", 4.0, 0, 1, 1, 0, 0, 1);
				ApplyAnimation(playerid, "BSKTBALL", "BBALL_pickup", 4.0, 0, 1, 1, 0, 0, 1);

				DisablePlayerCheckpoint(playerid);
				//ouvrir la porte
				DestroyDynamicObject(coffreba2);
				coffreba2 = CreateDynamicObject(1495, 1438.0971, -1002.6653, 995.0795,   0.00000, 0.00000, 270.0000);
			}
		}
	}
	else if (newkeys & KEY_FIRE && Ccasier[playerid] != 0 )
	{

		static
		Float:X,
		Float:Y,
		Float:Z;

		GetDynamicObjectPos(CasierN[playerid], X, Y, Z);

		new id = Casier_NearestPoint(playerid);

		if (id != -1)
		{

			if (CassageC[playerid] < 30)
			{
				CassageC[playerid]++;

				ApplyAnimation(playerid, "BASEBALL", "null", 4.0, 0, 1, 1, 0, 0, 1);
				ApplyAnimation(playerid, "BASEBALL", "BAT_4", 4.0, 0, 1, 1, 0, 0, 1);
			}
			else
			{
				CasierCas++;
				CassageC[playerid] = 0;
				Ccasier[playerid] = 0;
				DestroyDynamicObject(CasierN[playerid]);

				RemovePlayerAttachedObject(playerid, 4);

				ApplyAnimation(playerid, "BSKTBALL", "null", 4.0, 0, 1, 1, 0, 0, 1);
				ApplyAnimation(playerid, "BSKTBALL", "BBALL_pickup", 4.0, 0, 1, 1, 0, 0, 1);

				SendClientMessageEx(playerid, COLOR_INFO, "Vous avez cassé un casier. /remplirsac.");
				DisablePlayerCheckpoint(playerid);
				//nouveauxcasier
				CasierN[playerid] = CreateDynamicObject(1829, X, Y,Z,   0.00000, 0.00000, 0.00000);
				//timer
				//SetTimer("CasierRes", 45000, false);
				//message
				SendNearbyMessage(playerid, 5.0, COLOR_PURPLE, "%s tape à maintes reprises sur le casier jusqu'à ce que ce dernier s'ouvre.",ReturnName(playerid, 1));
			}
		}
	}
	else if (newkeys & KEY_NO && GetPlayerState(playerid) == PLAYER_STATE_ONFOOT && PlayerData[playerid][pMining] == 2)
	{
	    new
	        carid = -1;
		if((carid = Car_Nearest(playerid)) != -1)
		{
		    if(CarData[carid][carJob] == JOB_MINER)
		    {
		        
		        for(new i=0; i<5; i++)
				{
				    if(CarData[carid][carMine][i] != -1) continue;
				    
		        	SendClientMessage(playerid, COLOR_INFO, "Vous déposez votre pierre dans le camion.");
					CarData[carid][carMine][i] = PlayerData[playerid][pMinedRock];
		        	
		        	SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
					SetPlayerAttachedObject(playerid, 4, 18634, 6, 0.156547, 0.039423, 0.026570, 198.109115, 6.364907, 262.997558, 1.000000, 1.000000, 1.000000);

					PlayerData[playerid][pMineTime] = 0;
					PlayerData[playerid][pMining] = 0;
					PlayerData[playerid][pMinedRock] = -1;
		        	return 1;
				}
				SendClientMessage(playerid, COLOR_ERROR, "Il n'y a plus de place dans ce camion.{FFFFFF} (Utilisez \"(/job jetermine)\" pour jeter votre mineraie)");
		    }
		}
	}
	else if (newkeys & KEY_NO && GetPlayerState(playerid) == PLAYER_STATE_ONFOOT)
	{
		static
		string[320];

		if (PlayerData[playerid][pPizza_House] != -1)
		{
		    if(GetPlayerSpecialAction(playerid) == SPECIAL_ACTION_CARRY)
		    {
			    new
					id = -1,
					house_id = PlayerData[playerid][pPizza_House];

	            if ((id = Car_Nearest(playerid, 1.5)) != -1 && CarData[id][carJob] == JOB_FOOD_VENDOR)
	            {
	                if(IsPlayerAttachedObjectSlotUsed(playerid, 9)) RemovePlayerAttachedObject(playerid, 9);
	                SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);

					PlayerData[playerid][pPizza_Vehicle] = id;
					SetPlayerCheckpoint(playerid, HouseData[house_id][housePos][0], HouseData[house_id][housePos][1], HouseData[house_id][housePos][2], 3.0);

					SendClientMessageEx(playerid, COLOR_INFO, "Allez livrer les pizzas au domicile situé à \"%s\" (%s).", HouseData[house_id][houseAddress], GetLocation(HouseData[house_id][housePos][0], HouseData[house_id][housePos][1], HouseData[house_id][housePos][2]));
	            }
			}
			else if(GetPlayerSpecialAction(playerid) == SPECIAL_ACTION_NONE && PlayerData[playerid][pPizza_Vehicle] != -1)
			{
			    new
					id = -1;

	            if ((id = Car_Nearest(playerid, 1.5)) != -1)
	            {
	                if(id == PlayerData[playerid][pPizza_Vehicle])
	                {
						SetPlayerSpecialAction(playerid, SPECIAL_ACTION_CARRY);
						SetPlayerAttachedObject(playerid, 9, 2814, 6, 0.100001, -0.002001, -0.139001, 76.799995, -178.799942, 0.000000);
						
						PlayerData[playerid][pPizza_Vehicle] = -1;
						
						SendClientMessage(playerid, COLOR_INFO, "Amenez les pizzas jusqu'à la maison. {FFFFFF}(checkpoint)");
	                }
				}
			}
		}
		if (PlayerData[playerid][pLoadCrate])
		{
			for(new i = 1, j = GetVehiclePoolSize(); i <= j; i++) if (IsPlayerNearBoot(playerid, i))
			{
				if (!IsLoadableVehicle(i))
				return SendClientMessageEx(playerid, COLOR_ERROR, "Vous ne pouvez pas charger les caisses dans ce véhicule.");

				if (CoreVehicles[i][vehLoadType] != 0 && CoreVehicles[i][vehLoadType] != PlayerData[playerid][pLoadType])
				return SendClientMessageEx(playerid, COLOR_ERROR, "Ce véhicule est déjà chargé avec autre chose.");

				if (CoreVehicles[i][vehLoads] >= 6)
				return SendClientMessageEx(playerid, COLOR_ERROR, "Ce véhicule ne peut contenir plus de six caisses.");

				CoreVehicles[i][vehLoads]++;
				CoreVehicles[i][vehLoadType] = PlayerData[playerid][pLoadType];

				ApplyAnimation(playerid, "CARRY", "putdwn", 4.0, 0, 0, 0, 0, 0);
				SendNearbyMessage(playerid, 15.0, COLOR_PURPLE, "%s dépose une caisse à l'arrière de la %s.", ReturnName(playerid, 1), ReturnVehicleName(i));

                new id = Job_NearestPoint(playerid, 100.0);
               	if(id != -1) SetPlayerCheckpoint(playerid, JobData[id][jobPoint][0], JobData[id][jobPoint][1], JobData[id][jobPoint][2], 1.0);

				if (CoreVehicles[i][vehLoads] == 6)
				{
					DisablePlayerCheckpoint(playerid);

					if (PlayerData[playerid][pShipment] != -1)
					{
						PlayerData[playerid][pDeliverShipment] = 1;

						SendClientMessageEx(playerid, COLOR_INFO, "Vous avez chargé toutes les caisses. Utilisez \"/j(ob) dechargement\" au marqueur.");
						SetPlayerCheckpoint(playerid, BusinessData[PlayerData[playerid][pShipment]][bizDeliver][0], BusinessData[PlayerData[playerid][pShipment]][bizDeliver][1], BusinessData[PlayerData[playerid][pShipment]][bizDeliver][2], 3.0);
					}
					else switch (PlayerData[playerid][pLoadType])
					{
						case 1: SendClientMessageEx(playerid, COLOR_INFO, "Vous avez chargé toutes les caisses. Utilisez \"/j(ob) dechargement\" à n'importe quel magasin.");
						case 2: SendClientMessageEx(playerid, COLOR_INFO, "Vous avez chargé toutes les caisses. Utilisez \"/j(ob) dechargement\" à n'importe quel ammunation.");
						case 3: SendClientMessageEx(playerid, COLOR_INFO, "Vous avez chargé toutes les caisses. Utilisez \"/j(ob) dechargement\" à n'importe quel magasin de vêtements.");
						case 4: SendClientMessageEx(playerid, COLOR_INFO, "Vous avez chargé toutes les caisses. Utilisez \"/j(ob) dechargement\" à n'importe quel restaurant.");
						case 5: SendClientMessageEx(playerid, COLOR_INFO, "Vous avez chargé toutes les caisses. Utilisez \"/j(ob) dechargement\" à n'importe quel station essence.");
					}
					PlayerData[playerid][pLoading] = 0;
					PlayerData[playerid][pLoadType] = 0;
				}
				PlayerData[playerid][pLoadCrate] = 0;

				RemovePlayerAttachedObject(playerid, 4);
				SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);

				return 1;
			}
		}
		for (new i = 0; i != MAX_BACKPACKS; i ++) if (BackpackData[i][backpackExists] && !BackpackData[i][backpackPlayer] && IsPlayerInRangeOfPoint(playerid, 2.0, BackpackData[i][backpackPos][0], BackpackData[i][backpackPos][1], BackpackData[i][backpackPos][2])) {
			return Backpack_Items(playerid, i);
		}
		if (PlayerData[playerid][pCarryTrash])
		{
			for(new i = 1, j = GetVehiclePoolSize(); i <= j; i++) if (GetVehicleModel(i) == 408 && IsPlayerNearBoot(playerid, i))
			{
				if (CoreVehicles[i][vehTrash] >= 10)
				return SendClientMessageEx(playerid, COLOR_ERROR, "Ce véhicule n'a plus de place. (limite: 10).");

				CoreVehicles[i][vehTrash]++;

				RemovePlayerAttachedObject(playerid, 4);
				SendNearbyMessage(playerid, 15.0, COLOR_PURPLE, "%s a chargé un sac poubelle dans le Trashmaster.", ReturnName(playerid, 1));

				PlayerData[playerid][pCarryTrash] = 0;
				break;
			}
		}

		if (PlayerData[playerid][pCarryCrate] != -1)
		{
			for(new i = 1, j = GetVehiclePoolSize(); i <= j; i++) if (IsLoadableVehicle(i) && IsPlayerNearBoot(playerid, i))
			{
				if (GetVehicleCrates(i) >= GetMaxCrates(i))
				return SendClientMessageEx(playerid, COLOR_ERROR, "Ce véhicule ne dispose plus de place. (limite: %d).", GetMaxCrates(i));

				CrateData[PlayerData[playerid][pCarryCrate]][crateVehicle] = i;
				SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);

				RemovePlayerAttachedObject(playerid, 4);
				SendNearbyMessage(playerid, 15.0, COLOR_PURPLE, "%s a chargé une caisse dans le %s.", ReturnName(playerid, 1), ReturnVehicleName(i));

				PlayerData[playerid][pCarryCrate] = -1;
				ApplyAnimation(playerid, "CARRY", "putdwn", 4.0, 0, 0, 0, 0, 0);
				break;
			}
		}
		else if (GetPlayerSpecialAction(playerid) == SPECIAL_ACTION_DUCK)
		{
			new
			count = 0,
			id = Item_Nearest(playerid);

			if (id != -1)
			{
				string = "";

				for (new i = 0; i < MAX_DROPPED_ITEMS; i ++) if (count < MAX_LISTED_ITEMS && DroppedItems[i][droppedModel] && IsPlayerInRangeOfPoint(playerid, 1.5, DroppedItems[i][droppedPos][0], DroppedItems[i][droppedPos][1], DroppedItems[i][droppedPos][2]) && GetPlayerInterior(playerid) == DroppedItems[i][droppedInt] && GetPlayerVirtualWorld(playerid) == DroppedItems[i][droppedWorld]) {
					NearestItems[playerid][count++] = i;

					strcat(string, DroppedItems[i][droppedItem]);
					strcat(string, "\n");
				}
				if (count == 1)
				{
					if (DroppedItems[id][droppedWeapon] != 0)
					{
						if (PlayerData[playerid][pLevel] < 2)
						return SendClientMessageEx(playerid, COLOR_ERROR, "Vous devez être level 2 pour utiliser cette commande.");

						GiveWeaponToPlayer(playerid, DroppedItems[id][droppedWeapon], DroppedItems[id][droppedAmmo]);

						Item_Delete(id);
						SendNearbyMessage(playerid, 15.0, COLOR_PURPLE, "%s a ramassé un(e) %s au sol.", ReturnName(playerid, 1), ReturnWeaponName(DroppedItems[id][droppedWeapon]));
						Log_Write("logs/droppick.txt", "[%s] %s picked up a %s.", ReturnDate(), ReturnName(playerid, 1), ReturnWeaponName(DroppedItems[id][droppedWeapon]));

					}
					else if (PickupItem(playerid, id))
					{
						format(string, sizeof(string), "~g~%s~w~ ajouté à l'inventaire.", DroppedItems[id][droppedItem]);
						ShowPlayerFooter(playerid, string);
						SendNearbyMessage(playerid, 15.0, COLOR_PURPLE, "%s a ramassé un(e) %s au sol.", ReturnName(playerid, 1),  DroppedItems[id][droppedItem]);
						Log_Write("logs/droppick.txt", "[%s] %s has picked up a \"%s\".", ReturnDate(), ReturnName(playerid, 1), DroppedItems[id][droppedItem]);
					}
					else
						SendClientMessageEx(playerid, COLOR_ERROR, "Il n'y a plus de place dans votre inventaire.");
				}
				else Dialog_Show(playerid, PickupItems, DIALOG_STYLE_LIST, "Articles", string, "Ramasser", "X");
			}
		}
	}
	else if (newkeys & KEY_SECONDARY_ATTACK)
	{
		static
		id = -1;

		if ((id = Vendor_Nearest(playerid)) != -1)
		{
			switch (VendorData[id][vendorType])
			{
				case 1, 2, 4:
				{
					if (GetMoney(playerid) < 75)
					return SendClientMessageEx(playerid, COLOR_ERROR, "Vous devez avoir au moins 75$.");

					if (PlayerData[playerid][pVendorTime] > 0)
					return SendClientMessageEx(playerid, COLOR_ERROR, "Vous devez attendre quelques secondes avant d'acheter d'autre chose.");


					PlayerData[playerid][pVendorTime] = 3;

					GiveMoney(playerid, -75);
					ApplyAnimation(playerid, "DEALER", "shop_pay", 4.0, 0, 0, 0, 0, 0);

					SendNearbyMessage(playerid, 15.0, COLOR_PURPLE, "%s a acheté un hamburger pour la somme de $75.", ReturnName(playerid, 1));

					new Float:health;
					GetPlayerHealth(playerid, health);

					if(health+35.0 > 100) SetPlayerHealth(playerid, 100.0);
					else SetPlayerHealth(playerid, health+35.0);
				}
				case 3, 5:
				{
					if (GetMoney(playerid) < 75)
					return SendClientMessageEx(playerid, COLOR_ERROR, "Vous devez avoir au moins 75$.");

					if (PlayerData[playerid][pVendorTime] > 0)
					return SendClientMessageEx(playerid, COLOR_ERROR, "Vous devez attendre quelques secondes avant d'acheter d'autre chose.");

					if (Inventory_Count(playerid, "Soda") >= 10)
					return SendClientMessageEx(playerid, COLOR_ERROR, "Il y a trop de Soda dans votre inventaire.");

					id = Inventory_Add(playerid, "Soda", 1543);

					if (id != -1)
					{
						PlayerData[playerid][pVendorTime] = 3;

						GiveMoney(playerid, -75);
						ApplyAnimation(playerid, "VENDING", "VEND_USE", 4.0, 0, 0, 0, 0, 0);

						SendNearbyMessage(playerid, 15.0, COLOR_PURPLE, "%s a acheté un soda pour la somme de $75.", ReturnName(playerid, 1));
						ShowPlayerFooter(playerid, "Votre ~p~soda~w~ a été placé dans votre inventaire");
						
						new Float:health;
						GetPlayerHealth(playerid, health);

						if(health+35.0 > 100) SetPlayerHealth(playerid, 100.0);
						else SetPlayerHealth(playerid, health+35.0);
					}
				}
				case 6:
				{
					if (GetMoney(playerid) < 50)
					return SendClientMessageEx(playerid, COLOR_ERROR, "Vous devez avoir au moins 50$.");

					if (PlayerData[playerid][pVendorTime] > 0)
					return SendClientMessageEx(playerid, COLOR_ERROR, "Vous devez attendre quelques secondes avant d'acheter d'autre chose.");
					
					PlayerData[playerid][pVendorTime] = 3;

					GiveMoney(playerid, -50);
					ApplyAnimation(playerid, "DEALER", "shop_pay", 4.0, 0, 0, 0, 0, 0);

					SendNearbyMessage(playerid, 15.0, COLOR_PURPLE, "%s a acheté une glace pour la somme de $50.", ReturnName(playerid, 1));

					new Float:health;
					GetPlayerHealth(playerid, health);
					
					if(health+30.0 > 100) SetPlayerHealth(playerid, 100.0);
					else SetPlayerHealth(playerid, health+30.0);
				}
			}
		}
		for (new i = 0; i < sizeof(arrHospitalSpawns); i ++) if (IsPlayerInRangeOfPoint(playerid, 3.0, arrHospitalSpawns[i][0], arrHospitalSpawns[i][1], arrHospitalSpawns[i][2]))
		{
			DisableCheatIDTemporary(playerid, 6, 1500);
			SetPlayerPos(playerid, 197.2141,1884.7640,369.3091);
			SetPlayerFacingAngle(playerid, 268.0000);

			SetPlayerVirtualWorld(playerid, i +1);

			SetCameraBehindPlayer(playerid);
			PlayerData[playerid][pHospitalInt] = i;

			return 1;
		}
		if ((id = Gate_Nearest(playerid)) != -1)
		{
			cmd_open(playerid, "\1");
		}
		if ((id = House_Nearest(playerid)) != -1)
		{
			DisableCheatIDTemporary(playerid, 6, 1500);
			if (HouseData[id][houseLocked] && PlayerData[playerid][pLocat] != id)
			return SendClientMessageEx(playerid, COLOR_ERROR, "La maison est fermée à clé.");

			SetPlayerPos(playerid, HouseData[id][houseInt][0], HouseData[id][houseInt][1], HouseData[id][houseInt][2]);
			SetPlayerFacingAngle(playerid, HouseData[id][houseInt][3]);

			SetPlayerInterior(playerid, HouseData[id][houseInterior]);
			SetPlayerVirtualWorld(playerid, HouseData[id][houseID] + 5000);

			SetCameraBehindPlayer(playerid);
			PlayerData[playerid][pHouse] = HouseData[id][houseID];
			
			if(HouseData[id][houseFaction] == PlayerData[playerid][pFaction])
			{
				if(GetFactionType(playerid) == FACTION_MAFIA) SendClientMessageEx(playerid, COLOR_GREY, "PLANQUE: /mafia creerarme");
				if(GetFactionType(playerid) == FACTION_GANG) SendClientMessageEx(playerid, COLOR_GREY, "PLANQUE: /gang achetergraines");
			}
			return 1;
		}
		if ((id = Business_Nearest(playerid)) != -1)
		{
			DisableCheatIDTemporary(playerid, 6, 1500);
			if (BusinessData[id][bizLocked])
			return SendClientMessageEx(playerid, COLOR_ERROR, "Ce business est fermé à clé.");



			if(!AstucesChallenges[playerid][1] && PlayerData[playerid][pAstuces])
			{
			    ValidChallenges(playerid, 1);
			    SendClientMessage(playerid, COLOR_GREEN, "Vous avez débloqué le challenge \"{33CC33}Rendez-vous dans un 24/7{FFFFFF}\". +1 point respect (/challenges)");
			}

			if(BusinessData[id][bizCustom])
				SetPlayerPosEx(playerid, BusinessData[id][bizInt][0], BusinessData[id][bizInt][1], BusinessData[id][bizInt][2]);
			else
				SetPlayerPos(playerid, BusinessData[id][bizInt][0], BusinessData[id][bizInt][1], BusinessData[id][bizInt][2]);

			SetPlayerFacingAngle(playerid, BusinessData[id][bizInt][3]);

			SetPlayerInterior(playerid, BusinessData[id][bizInterior]);
			SetPlayerVirtualWorld(playerid, BusinessData[id][bizID] + 6000);

			SetCameraBehindPlayer(playerid);
			PlayerData[playerid][pBusiness] = BusinessData[id][bizID];

			if (strlen(BusinessData[id][bizMessage]) && strcmp(BusinessData[id][bizMessage], "Non inscrit", true)) {
				SendClientMessage(playerid, COLOR_DEFAULT, BusinessData[id][bizMessage]);
			}
			return 1;
		}
		if ((id = Entrance_Nearest(playerid)) != -1)
		{
			DisableCheatIDTemporary(playerid, 6, 1500);
			if (EntranceData[id][entranceLocked])
			return SendClientMessageEx(playerid, COLOR_ERROR, "Cette entrée est verrouillée pour le moment.");

			if (!isnull(EntranceData[id][entrancePass]))
			{
				Dialog_Show(playerid, ENTRANCE_PASS, DIALOG_STYLE_INPUT, "Mot de passe", "Entrez le mot de passe:", "Valider", "Annuler");
		    	SetPVarInt(playerid, "ENTRANCE_ID", id);
		    	return 1;
			}

			if (PlayerData[playerid][pTask])
			{
				if (EntranceData[id][entranceType] == 2 && !PlayerData[playerid][pBankTask])
				{
					PlayerData[playerid][pBankTask] = 1;
					Dialog_Show(playerid, ShowOnly, DIALOG_STYLE_MSGBOX, "Banque", "Cette banque vous permettra de gérer vos comptes en banque.\nChaque joueur a un compte bancaire standard et un compte d'épargne pour les fonds supplémentaires.\n\nVous pouvez taper /banque à l'intérieur de ce bâtiment pour gérer vos comptes bancaires.\nSi vous êtes à proximité d'un ATM, vous pouvez utiliser la commande /retirer pour vos besoins bancaires.", "X", "");

					if (IsTaskCompleted(playerid))
					{
						PlayerData[playerid][pTask] = 0;
						ShowPlayerFooter(playerid, "Vous avez ~g~complété~w~ toutes vos tâches!");
					}
				}
				else if (EntranceData[id][entranceType] == 1 && !PlayerData[playerid][pTestTask])
				{
					PlayerData[playerid][pTestTask] = 1;
					Dialog_Show(playerid, ShowOnly, DIALOG_STYLE_MSGBOX, "DMV", "L'auto école est un lieu où vous pouvez tenter l'examen de conduite pour obtenir votre permis.\nVous devrez éviter de heurter les obstacles, endommager le véhicule ou accélérer pendant le test.", "X", "");

					if (IsTaskCompleted(playerid))
					{
						PlayerData[playerid][pTask] = 0;
						ShowPlayerFooter(playerid, "Vous avez ~g~complété~w~ toutes vos tâches!");
					}
				}
			}
			if (EntranceData[id][entranceCustom])
				SetPlayerPosEx(playerid, EntranceData[id][entranceInt][0], EntranceData[id][entranceInt][1], EntranceData[id][entranceInt][2]);

			else
				SetPlayerPos(playerid, EntranceData[id][entranceInt][0], EntranceData[id][entranceInt][1], EntranceData[id][entranceInt][2]);

			SetPlayerFacingAngle(playerid, EntranceData[id][entranceInt][3]);

			SetPlayerInterior(playerid, EntranceData[id][entranceInterior]);
			SetPlayerVirtualWorld(playerid, EntranceData[id][entranceWorld]);

			SetCameraBehindPlayer(playerid);
			PlayerData[playerid][pEntrance] = EntranceData[id][entranceID];
			return 1;
		}
		if ((id = House_Inside(playerid)) != -1 && IsPlayerInRangeOfPoint(playerid, 2.5, HouseData[id][houseInt][0], HouseData[id][houseInt][1], HouseData[id][houseInt][2]))
		{
			DisableCheatIDTemporary(playerid, 6, 1500);
			SetPlayerPos(playerid, HouseData[id][housePos][0], HouseData[id][housePos][1], HouseData[id][housePos][2]);
			SetPlayerFacingAngle(playerid, HouseData[id][housePos][3] - 180.0);

			SetPlayerInterior(playerid, HouseData[id][houseExterior]);
			SetPlayerVirtualWorld(playerid, HouseData[id][houseExteriorVW]);

			SetCameraBehindPlayer(playerid);
			PlayerData[playerid][pHouse] = -1;
			return 1;
		}
		if ((id = Business_Inside(playerid)) != -1 && IsPlayerInRangeOfPoint(playerid, 2.5, BusinessData[id][bizInt][0], BusinessData[id][bizInt][1], BusinessData[id][bizInt][2]))
		{
			DisableCheatIDTemporary(playerid, 6, 1500);
			SetPlayerPos(playerid, BusinessData[id][bizPos][0], BusinessData[id][bizPos][1], BusinessData[id][bizPos][2]);
			SetPlayerFacingAngle(playerid, BusinessData[id][bizPos][3] - 180.0);

			SetPlayerInterior(playerid, BusinessData[id][bizExterior]);
			SetPlayerVirtualWorld(playerid, BusinessData[id][bizExteriorVW]);

			SetCameraBehindPlayer(playerid);
			PlayerData[playerid][pBusiness] = -1;
			
			TogglePlayerControllable(playerid, true);
			return 1;
		}
		if ((id = Entrance_Inside(playerid)) != -1 && IsPlayerInRangeOfPoint(playerid, 2.5, EntranceData[id][entranceInt][0], EntranceData[id][entranceInt][1], EntranceData[id][entranceInt][2]))
		{
			DisableCheatIDTemporary(playerid, 6, 1500);
			if (EntranceData[id][entranceCustom])
				SetPlayerPos(playerid, EntranceData[id][entrancePos][0], EntranceData[id][entrancePos][1], EntranceData[id][entrancePos][2]);

			else
				SetPlayerPos(playerid, EntranceData[id][entrancePos][0], EntranceData[id][entrancePos][1], EntranceData[id][entrancePos][2]);

			SetPlayerFacingAngle(playerid, EntranceData[id][entrancePos][3] - 180.0);

			SetPlayerInterior(playerid, EntranceData[id][entranceExterior]);
			SetPlayerVirtualWorld(playerid, EntranceData[id][entranceExteriorVW]);

			SetCameraBehindPlayer(playerid);
			PlayerData[playerid][pEntrance] = Entrance_GetLink(playerid);

			TogglePlayerControllable(playerid, true);
			return 1;
		}
		if ((id = Entrance_NearestInside(playerid)) != -1 && IsPlayerInRangeOfPoint(playerid, 2.5, EntranceData[id][entranceInt][0], EntranceData[id][entranceInt][1], EntranceData[id][entranceInt][2]))
		{
			DisableCheatIDTemporary(playerid, 6, 1500);
			if (EntranceData[id][entranceCustom])
				SetPlayerPos(playerid, EntranceData[id][entrancePos][0], EntranceData[id][entrancePos][1], EntranceData[id][entrancePos][2]);

			else
				SetPlayerPos(playerid, EntranceData[id][entrancePos][0], EntranceData[id][entrancePos][1], EntranceData[id][entrancePos][2]);

			SetPlayerFacingAngle(playerid, EntranceData[id][entrancePos][3] - 180.0);

			SetPlayerInterior(playerid, EntranceData[id][entranceExterior]);
			SetPlayerVirtualWorld(playerid, EntranceData[id][entranceExteriorVW]);

			SetCameraBehindPlayer(playerid);
			PlayerData[playerid][pEntrance] = Entrance_GetLink(playerid);

			TogglePlayerControllable(playerid, true);
			return 1;
		}
		if ((id = Crate_Nearest(playerid)) != -1 && PlayerData[playerid][pCarryCrate] == -1 && !IsCrateInUse(id))
		{
			// If the crate is within a stack, this function below
			// will get the highest crate on the stack.

			if ((id = Crate_Highest(id)) == -1)
			id = Crate_Nearest(playerid);

			ApplyAnimation(playerid, "CARRY", "liftup", 4.1, 0, 0, 0, 0, 0, 1);

			PlayerData[playerid][pCarryCrate] = id;
			SetPlayerAttachedObject(playerid, 4, 964, 1, -0.157020, 0.413313, 0.000000, 0.000000, 88.000000, 180.000000, 0.500000, 0.500000, 0.500000);

			SendNearbyMessage(playerid, 15.0, COLOR_PURPLE, "%s se baisse puis récupère une caisse au sol.", ReturnName(playerid, 1));
			SendClientMessageEx(playerid, COLOR_INFO, "Vous avez ramassé une caisse. Veuillez la charger dans un véhicule à l'aide de la touche 'N'");

			DestroyDynamicObject(CrateData[id][crateObject]);
			DestroyDynamic3DTextLabel(CrateData[id][crateText3D]);

			SetPlayerSpecialAction(playerid, SPECIAL_ACTION_CARRY);
			CrateData[id][crateObject] = INVALID_OBJECT_ID;
			return 1;
		}
		if (PlayerData[playerid][pCarryCrate] != -1 && GetPlayerState(playerid) == PLAYER_STATE_ONFOOT && GetPlayerSpecialAction(playerid) == SPECIAL_ACTION_CARRY && !PlayerData[playerid][pCrafting])
		{
			ApplyAnimation(playerid, "CARRY", "null", 4.0, 0, 0, 0, 0, 0);
			ApplyAnimation(playerid, "CARRY", "putdwn", 4.0, 0, 0, 0, 0, 0);

			Crate_Drop(playerid, 1.5);
			SendNearbyMessage(playerid, 15.0, COLOR_PURPLE, "%s a posé une caisse.", ReturnName(playerid, 1));

			SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
			return 1;
		}
	}
	if ((newkeys & KEY_SECONDARY_ATTACK) && !(oldkeys & KEY_SECONDARY_ATTACK))
  	{
  	    if(PlayerData[playerid][pGymnase] != -1)
  	    {
  	        new
  	            gymid = PlayerData[playerid][pGymnase];
  	            
			if(GymData[gymid][gymExists] && BAR_CAN_BE_USED[playerid] == true)
			{
				switch(GymData[gymid][gymType])
				{
				    case GYM_RUN:
					{
		  				KillTimer(PLAYER_TREAD_TIMER[playerid]);
		    			GetOffTread(playerid);
					}

					case GYM_BIKE:
					{
						KillTimer(PLAYER_BIKE_TIMER[playerid]);
	   					GetOffBIKE(playerid);
					}
					
					case GYM_BENCH:
					{
						KillTimer(PLAYER_BENCH_TIMER[playerid]);
						GetOffBENCH(playerid);
					}

					case GYM_DUMB:
					{
						KillTimer(PLAYER_DUMB_TIMER[playerid]);
						PutDownDUMB(playerid);
					}
				}
			}
  	    }
	}
	if ((newkeys & KEY_SECONDARY_ATTACK) && !(oldkeys & KEY_SECONDARY_ATTACK))
	{
	    static
	        gymid = -1;
	        
		if((gymid = Gym_Nearest(playerid)) != -1)
		{
		    if(!GymData[gymid][gymUsed] && GymData[gymid][gymPlayerUse] == INVALID_PLAYER_ID)
		    {
			    if(GymData[gymid][gymType] == GYM_RUN)
			    {
					GymData[gymid][gymUsed] = true;
					GymData[gymid][gymPlayerUse] = playerid;
					PlayerData[playerid][pGymnase] = gymid;

					PLAYER_TREAM_DIS_COUNT[playerid]=0;

					SetPlayerPos(playerid, GymData[gymid][gymPlayerPos][0], GymData[gymid][gymPlayerPos][1], GymData[gymid][gymPlayerPos][2]);
					SetPlayerFacingAngle(playerid, GymData[gymid][gymPlayerPos][3]);

					ApplyAnimation(playerid, "GYMNASIUM", "gym_tread_geton", 1, 0, 0, 0, 1, 0, 1);
					SetTimerEx("TREAM_START", 2000, false, "ii", playerid);

					SetProgressBarValue(player_gym_progress[playerid], 50);

					SetPlayerCameraPos(playerid, GymData[gymid][gymObjectPos_1][0]+2, GymData[gymid][gymObjectPos_1][1]-2, GymData[gymid][gymObjectPos_1][2]+0.5);
					SetPlayerCameraLookAt(playerid, GymData[gymid][gymObjectPos_1][0], GymData[gymid][gymObjectPos_1][1], GymData[gymid][gymObjectPos_1][2]);
				}
			    if(GymData[gymid][gymType] == GYM_BIKE)
			    {
					GymData[gymid][gymUsed] = true;
					GymData[gymid][gymPlayerUse] = playerid;
					PlayerData[playerid][pGymnase] = gymid;

					PLAYER_BIKE_DIS_COUNT[playerid]=0;

					SetProgressBarValue(player_gym_progress[playerid], 0);

					SetPlayerPos(playerid, GymData[gymid][gymPlayerPos][0], GymData[gymid][gymPlayerPos][1], GymData[gymid][gymPlayerPos][2]);
					SetPlayerFacingAngle(playerid, GymData[gymid][gymPlayerPos][3]);

					ApplyAnimation(playerid, "GYMNASIUM", "gym_bike_geton", 1, 0, 0, 0, 1, 0, 1);
					SetTimerEx("BIKE_START", 2000, false, "i", playerid);

					SetPlayerCameraPos(playerid, GymData[gymid][gymObjectPos_1][0]+2, GymData[gymid][gymObjectPos_1][1]-2, GymData[gymid][gymObjectPos_1][2]+0.5);
					SetPlayerCameraLookAt(playerid, GymData[gymid][gymObjectPos_1][0], GymData[gymid][gymObjectPos_1][1], GymData[gymid][gymObjectPos_1][2]+0.5);
				}
			    if(GymData[gymid][gymType] == GYM_BENCH)
			    {
					GymData[gymid][gymUsed] = true;
					GymData[gymid][gymPlayerUse] = playerid;
					PlayerData[playerid][pGymnase] = gymid;


					PLAYER_BENCH_COUNT[playerid]=0;

					SetProgressBarValue(player_gym_progress[playerid], 0);

					SetPlayerPos(playerid, GymData[gymid][gymPlayerPos][0], GymData[gymid][gymPlayerPos][1], GymData[gymid][gymPlayerPos][2]);
					SetPlayerFacingAngle(playerid, GymData[gymid][gymPlayerPos][3]);

					ApplyAnimation(playerid, "benchpress", "gym_bp_geton", 1, 0, 0, 0, 1, 0, 1 );
					SetTimerEx("BENCH_START", 3800, 0, "i", playerid);

					SetPlayerCameraPos( playerid, GymData[gymid][gymObjectPos_1][0]-1.5, GymData[gymid][gymObjectPos_1][1]+1.5, GymData[gymid][gymObjectPos_1][2]+0.5 );
					SetPlayerCameraLookAt( playerid, GymData[gymid][gymObjectPos_1][0], GymData[gymid][gymObjectPos_1][1], GymData[gymid][gymObjectPos_1][2]);
				}

			    if(GymData[gymid][gymType] == GYM_DUMB)
			    {
					GymData[gymid][gymUsed] = true;
					GymData[gymid][gymPlayerUse] = playerid;
					PlayerData[playerid][pGymnase] = gymid;

					PLAYER_DUMB_COUNT[playerid]=0;

					SetProgressBarValue(player_gym_progress[playerid], 0);

					SetPlayerPos(playerid, GymData[gymid][gymPlayerPos][0]-1, GymData[gymid][gymPlayerPos][1], GymData[gymid][gymPlayerPos][2]);
					SetPlayerFacingAngle(playerid, GymData[gymid][gymPlayerPos][3]);

					ApplyAnimation(playerid, "Freeweights", "gym_free_pickup", 1, 0, 0, 0, 1, 0, 1 );
					SetTimerEx("DUMB_START", 2500, 0, "ii", playerid);

					SetPlayerCameraPos(playerid, GymData[gymid][gymObjectPos_1][0]+2.3, GymData[gymid][gymObjectPos_1][1], GymData[gymid][gymObjectPos_1][2]+0.3 );
					SetPlayerCameraLookAt(playerid, GymData[gymid][gymObjectPos_1][0], GymData[gymid][gymObjectPos_1][1], GymData[gymid][gymObjectPos_1][2]+0.5);
				}
			}
			else
			{
			    if(GymData[gymid][gymPlayerUse] != playerid)
			    	SendClientMessage(playerid, COLOR_ERROR, "Cette machine est déjà en cours d'utilisation.");
			}
			
		}
	}
	if ((newkeys & KEY_SPRINT) && !(oldkeys & KEY_SPRINT))
 	{
 	    if(PlayerData[playerid][pGymnase] != -1)
 	    {
			new
			    gymid = PlayerData[playerid][pGymnase];
			    
			if(GymData[gymid][gymExists] && BAR_CAN_BE_USED[playerid] == true)
			{
				switch(GymData[gymid][gymType])
				{
				    case GYM_RUN:
				    {
				        CheckGainPower(playerid);
				        
						//Update Bar
					 	SetProgressBarValue(player_gym_progress[playerid], GetProgressBarValue(player_gym_progress[playerid]) + 5);
						UpdateProgressBar(player_gym_progress[playerid], playerid);

						//Anoynned Part
						new LocalLabel[10];
						PLAYER_TREAM_DIS_COUNT[playerid]++;
						format(LocalLabel,sizeof(LocalLabel),"%d",PLAYER_TREAM_DIS_COUNT[playerid]);
						PlayerTextDrawSetString(playerid, GYM_TD[playerid][2],LocalLabel);
				    }
				    case GYM_BIKE:
				    {
				        CheckGainPower(playerid);

					 	SetProgressBarValue(player_gym_progress[playerid], GetProgressBarValue(player_gym_progress[playerid]) + 5 );
					  	UpdateProgressBar(player_gym_progress[playerid], playerid );
					  	
						//Math Stuffs
						new LocalLabel[10];
						PLAYER_BIKE_DIS_COUNT[playerid]++;
						format(LocalLabel,sizeof(LocalLabel),"%d",PLAYER_BIKE_DIS_COUNT[playerid]);
						PlayerTextDrawSetString(playerid, GYM_TD[playerid][2], LocalLabel);
				    }
				    case GYM_BENCH:
				    {
				        CheckGainPower(playerid);

				 		SetProgressBarValue(player_gym_progress[playerid], GetProgressBarValue(player_gym_progress[playerid]) + 5 );
				 		UpdateProgressBar(player_gym_progress[playerid], playerid);
				    }
				    case GYM_DUMB:
					{
				        CheckGainPower(playerid);

				 		SetProgressBarValue(player_gym_progress[playerid], GetProgressBarValue(player_gym_progress[playerid]) + 5);
				 		UpdateProgressBar(player_gym_progress[playerid], playerid);
				    }
				}
			}
		}
 	}
	return 1;
}

forward PutInsideVehicle(playerid, vehicleid);
public PutInsideVehicle(playerid, vehicleid)
{
	if (!PlayerData[playerid][pDrivingTest])
	return 0;

	RemoveFromVehicle(vehicleid);
	PutPlayerInVehicle(playerid, vehicleid, 0);
	return 1;
}

public OnPlayerExitVehicle(playerid, vehicleid)
{
	printf("exitvehicle: %d", vehicleid);
	if (IsPlayerNPC(playerid))
		return 1;
		
	pmodelid[playerid] = 0;
	EntreCar[vehicleid] = 0;
	if (PlayerData[playerid][pJobDuty] == JOB_TAXI)
	{
		foreach (new i : Player) if (PlayerData[i][pTaxiPlayer] == playerid && IsPlayerInVehicle(i, GetPlayerVehicleID(playerid)))
		{
			LeaveTaxi(i, playerid);
		}
		SetPlayerColor(playerid, COLOR_WHITE);

		PlayerData[playerid][pJobDuty] = 0;
		SendClientMessageEx(playerid, COLOR_INFO, "Vous n'êtes plus en service taxi.");
	}
	if (PlayerData[playerid][pDrivingTest])
	{
		SetTimerEx("PutInsideVehicle", 500, false, "dd", playerid, vehicleid);
		Dialog_Show(playerid, LeaveTest, DIALOG_STYLE_MSGBOX, "Confirmation", "Êtes-vous sûr de vouloir quitter le test de conduite?", "Oui", "Non");
	}
	if (PlayerData[playerid][pTaxiTest])
	{
		SetTimerEx("PutInsideVehicle", 500, false, "dd", playerid, vehicleid);
		Dialog_Show(playerid, LeaveTest_taxi, DIALOG_STYLE_MSGBOX, "Confirmation", "Êtes-vous sûr de vouloir quitter le test pour votre license de taxi?", "Oui", "Non");
	}
	if(PlayerData[playerid][pSorting] && PlayerData[playerid][pSortingVehicle] != 0)
	{
		PlayerData[playerid][pSorting] = 0;
		PlayerData[playerid][pSortingType] = 0;
		PlayerData[playerid][pSortCrate] = 0;
		PlayerData[playerid][pSortingBase] = -1;
		
		DestroyObject(PlayerData[playerid][pSortingObject][0]);
		DestroyObject(PlayerData[playerid][pSortingObject][1]);
		DestroyObject(PlayerData[playerid][pSortingObject][2]);

		PlayerData[playerid][pSortingObject][0] = -1;
		PlayerData[playerid][pSortingObject][1] = -1;
		PlayerData[playerid][pSortingObject][2] = -1;

		DestroyVehicle(PlayerData[playerid][pSortingVehicle]);
		PlayerData[playerid][pSortingVehicle] = 0;

		DisablePlayerCheckpoint(playerid);
		SendClientMessageEx(playerid, COLOR_ERROR, "Vous êtes descendu du véhicule, votre cycle a automatiquement été arrêté.");
	}
	if(IsValidObject(objectTaxi[playerid]))
	{
		DestroyObject(objectTaxi[playerid]);
	}
	return 1;
}

public OnPlayerTakeDamage(playerid, issuerid, Float: amount, weaponid, bodypart)
{
	if(IsPlayerConnected(playerid) && PlayerData[playerid][pInjured] && PlayerData[playerid][pMortAcheve] == 2)
	{
	    SetPlayerHealth(playerid, 100);
	}
	return 1;
}

public OnPlayerEnterVehicle(playerid, vehicleid, ispassenger)
{
    PlayerData[playerid][p_DriveBy] = false;
	EntreCar[vehicleid] = 1;
	if (IsPlayerNPC(playerid))
	return 1;

	if (GetPlayerSpecialAction(playerid) == SPECIAL_ACTION_CUFFED || GetPlayerSpecialAction(playerid) == SPECIAL_ACTION_CARRY || PlayerData[playerid][pInjured] || PlayerData[playerid][pFirstAid]) {
		ClearAnimations(playerid);

		return 0;
	}
	new id = Car_GetID(vehicleid);
	pmodelid[playerid] = GetVehicleModel(vehicleid);
	
	if (!ispassenger && id != -1 && CarData[id][carFaction] > 0 && GetFactionType(playerid) != CarData[id][carFaction]  ||  !ispassenger && id != -1 && CarData[id][carJob] > 0 &&  PlayerData[playerid][pJob] != CarData[id][carJob])
	{
	    if(!PlayerData[playerid][pAdminDuty])
	    {
			ClearAnimations(playerid);
			SendClientMessageEx(playerid, COLOR_ERROR, "Vous n'avez pas les clés de ce véhicule.");
			return 0;
		}
	}
	return 1;
}

public OnPlayerEnterCheckpoint(playerid)
{
	if (GetFactionType(playerid) == FACTION_POLICE || PlayerData[playerid][pJobDuty] == JOB_MECHANIC)
	{
		DisablePlayerCheckpoint(playerid);
	}
	new
	    taxi_id = -1;

	printf("Taxi_Nearest: %d | pTaxiPNJ: %d", Taxi_Nearest(playerid), PlayerData[playerid][pTaxiPNJ]);
	if ((taxi_id = Taxi_Nearest(playerid)) != -1 && PlayerData[playerid][pTaxiPNJ] != -1 && PlayerData[playerid][pTaxiStep] == 1 && IsPlayerInAnyVehicle(playerid) && taxi_id == PlayerData[playerid][pTaxiPNJ])
	{
	    printf("script executed");
	    Waypoint_Set(playerid, GetLocation(TaxiData[taxi_id][tDest][0], TaxiData[taxi_id][tDest][1], TaxiData[taxi_id][tDest][2]), TaxiData[taxi_id][tDest][0], TaxiData[taxi_id][tDest][1], TaxiData[taxi_id][tDest][2], 6.0);
	    
		PlayerData[playerid][pTaxiStep] = 2;

		SendClientMessageEx(playerid, COLOR_INFO, "Vous avez récuperer votre client, emmenez le à %s", GetLocation(TaxiData[taxi_id][tDest][0], TaxiData[taxi_id][tDest][1], TaxiData[taxi_id][tDest][2]));
		Reset_TaxiCalls(taxi_id);
		return 1;
	}
	if (PlayerData[playerid][pTaxiPNJ] != -1 && PlayerData[playerid][pTaxiStep] == 2 && IsPlayerInAnyVehicle(playerid))
	{
		DisablePlayerCheckpoint(playerid);
		DisableWaypoint(playerid);
	    
		PlayerData[playerid][pTaxiPNJ] = -1;
		PlayerData[playerid][pTaxiStep] = -1;
		
		new
			money = (150+random(100)),
			string[150];
			
		GiveMoney(playerid, money);

		format(string, sizeof(string), "Vous gagné la somme de ~r~$%d~w~ grâce à votre travail.", money);
		ShowPlayerFooter(playerid, string);
		return 1;
	}
	if (PlayerData[playerid][pPizza_House] != -1 && !IsPlayerInAnyVehicle(playerid))
	{
	    if(IsPlayerAttachedObjectSlotUsed(playerid, 9))
	    {
			RemovePlayerAttachedObject(playerid, 9);
			SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
			
			PlayerData[playerid][pPizza_House] = -1;
			PlayerData[playerid][pPizza_Vehicle] = -1;
			
			new
				money = (75+random(25)),
				string[150];
			GiveMoney(playerid, money);

			format(string, sizeof(string), "Vous gagné la somme de ~r~$%d~w~ grâce à votre travail.", money);
			ShowPlayerFooter(playerid, string);
			
			DisablePlayerCheckpoint(playerid);
	    }
	}
	if (TruckingCheck[playerid] >= 1 && PlayerData[playerid][pUnloading] == -1)
	{
		if (!IsPlayerInAnyVehicle(playerid))
		{
			SendClientMessageEx(playerid, COLOR_ERROR, "Vous n'êtes pas dans un véhicule");
			return 1;
		}
		new vehicleid = GetPlayerVehicleID(playerid);
		if (!IsLoadableVehicle(vehicleid))
		{
			SendClientMessageEx(playerid, COLOR_ERROR, "Vous n'êtes pas dans un véhicule de livraison.");
		}
		
		GiveMoney(playerid, TruckingCheck[playerid]);
		SendClientMessageEx(playerid, COLOR_LIGHTYELLOW, "Vous avez gagné la somme de %d$ grâce à votre travail.", TruckingCheck[playerid]);
		
		TruckingCheck[playerid] = 0;
		DisablePlayerCheckpoint(playerid);
		RespawnVehicle(vehicleid);
	}
	if (PlayerData[playerid][pCP])
	{
		DisablePlayerCheckpoint(playerid);
		PlayerData[playerid][pCP] = 0;
	}
	if (PlayerData[playerid][pTask])
	{
		new id = -1;

		if ((id = Entrance_Nearest(playerid)) != -1 && EntranceData[id][entranceType] == 2 && !PlayerData[playerid][pBankTask])
		ShowPlayerFooter(playerid, "Utilisez ~y~'F'~w~ pour entrer");

		if ((id = Business_Nearest(playerid)) != -1 && BusinessData[id][bizType] == 1 && !PlayerData[playerid][pStoreTask])
		ShowPlayerFooter(playerid, "Utilisez ~y~'F'~w~ pour entrer");

		if ((id = Entrance_Nearest(playerid)) != -1 && EntranceData[id][entranceType] == 1 && !PlayerData[playerid][pTestTask])
		ShowPlayerFooter(playerid, "Utilisez ~y~'F'~w~ pour entrer");

		DisablePlayerCheckpoint(playerid);
	}
	if (PlayerData[playerid][pDrivingTest])
	{
		PlayerData[playerid][pTestStage]++;

		if (PlayerData[playerid][pTestStage] < sizeof(g_arrDrivingCheckpoints)) {
			SetPlayerCheckpoint(playerid, g_arrDrivingCheckpoints[PlayerData[playerid][pTestStage]][0], g_arrDrivingCheckpoints[PlayerData[playerid][pTestStage]][1], g_arrDrivingCheckpoints[PlayerData[playerid][pTestStage]][2], 3.0);
		}
		else
		{
			static
			Float:health;

			GetVehicleHealth(GetPlayerVehicleID(playerid), health);

			if (health < 900.0)
			SendClientMessageEx(playerid, COLOR_ERROR, "Vous avez échoué à l'examen de conduite - Le véhicule a été endommagé!");

			else
			{
			    new
			        string[150];

				format(string, sizeof(string), "Vous avez payé la somme de ~r~$%d~w~ pour le test de conduite.", PRICE_PERMIS_CONDUIRE);
				ShowPlayerFooter(playerid, string);

				GiveMoney(playerid, -PRICE_PERMIS_CONDUIRE);

				Inventory_Add(playerid, "Permis de conduire", 1581);
				SendClientMessageEx(playerid, COLOR_INFO, "Vous avez passé le test de conduite et reçu votre permis de conduire.");

				if(!AstucesChallenges[playerid][4] && PlayerData[playerid][pAstuces])
				{
				    ValidChallenges(playerid, 4);
				    SendClientMessage(playerid, COLOR_GREEN, "Vous avez débloqué le challenge \"{33CC33}Dirigez-vous à l'auto-école et passer votre permis{FFFFFF}\". +1 point respect (/challenges)");
				}
			}
			CancelDrivingTest(playerid);
		}
	}
	else if (PlayerData[playerid][pTaxiTest])
	{
		PlayerData[playerid][pTestStage]++;

		if(PlayerData[playerid][pTestStage] == 4 && GetPlayerSpeed(playerid) >= 30.0)
		{
			CancelLicenseTaxiTest(playerid);
			SendClientMessage(playerid, COLOR_INFO, "Vous n'avez pas respecter le stop à l'intersection. Vous avez échoué votre test.");
		}

		else if (PlayerData[playerid][pTestStage] < sizeof(g_arrLicenseTaxiCheckpoints)) {
			SetPlayerCheckpoint(playerid, g_arrLicenseTaxiCheckpoints[PlayerData[playerid][pTestStage]][0], g_arrLicenseTaxiCheckpoints[PlayerData[playerid][pTestStage]][1], g_arrLicenseTaxiCheckpoints[PlayerData[playerid][pTestStage]][2], 3.0);
		}
		
		else
		{
			static
			Float:health;

			GetVehicleHealth(GetPlayerVehicleID(playerid), health);

			if (health < 900.0)
				SendClientMessageEx(playerid, COLOR_ERROR, "Vous avez échoué au test pour votre license de taxi, le véhicule est trop endommagé.");

			else
			{
			    new
			        string[150];

				format(string, sizeof(string), "Vous avez payé la somme de ~r~$%d~w~ pour votre license de taxi.", PRICE_LICENSE_TAXI);
				ShowPlayerFooter(playerid, string);

				GiveMoney(playerid, -PRICE_LICENSE_TAXI);
				SendClientMessageEx(playerid, COLOR_INFO, "Vous avez passé votre license de taxi, choisissez maintenant votre borne.");
				
				ShowModelSelectionMenu(playerid, "Choix de la borne de taxi", MODEL_SELECTION_TAXILICENSE, {19308, 19309, 19310, 19311}, 4, 0.0, 0.0, 0.0);
			}
			CancelLicenseTaxiTest(playerid);
		}
	}
	else
	{
		if (PlayerData[playerid][pWaypoint])
		{
			PlayerData[playerid][pWaypoint] = 0;

			DisablePlayerCheckpoint(playerid);
			PlayerTextDrawHide(playerid, PlayerData[playerid][pTextdraws][69]);
		}
		else if (PlayerData[playerid][pJob] == JOB_COURIER && !IsPlayerInAnyVehicle(playerid))
		{
			if (PlayerData[playerid][pLoading] && !PlayerData[playerid][pLoadCrate] && Job_NearestPoint(playerid) != -1)
			{
				PlayerData[playerid][pLoadCrate] = 1;

				SetPlayerAttachedObject(playerid, 4, 3014, 1, 0.038192, 0.371544, 0.055191, 0.000000, 90.000000, 357.668670, 1.000000, 1.000000, 1.000000);
				SetPlayerSpecialAction(playerid, SPECIAL_ACTION_CARRY);

				ApplyAnimation(playerid, "CARRY", "liftup", 4.1, 0, 0, 0, 0, 0, 1);
				ShowPlayerFooter(playerid, "Utilisez ~y~'N'~w~ près d'un camion pour charger la caisse.");
			}
			else if (PlayerData[playerid][pUnloading] != -1)
			{
				if (!PlayerData[playerid][pLoadCrate])
				{
					PlayerData[playerid][pLoadCrate] = 1;
					ApplyAnimation(playerid, "CARRY", "liftup", 4.1, 0, 0, 0, 0, 0, 1);

					SetPlayerAttachedObject(playerid, 4, 3014, 1, 0.038192, 0.371544, 0.055191, 0.000000, 90.000000, 357.668670, 1.000000, 1.000000, 1.000000);
					SetPlayerSpecialAction(playerid, SPECIAL_ACTION_CARRY);

					SetPlayerCheckpoint(playerid, BusinessData[PlayerData[playerid][pUnloading]][bizPos][0], BusinessData[PlayerData[playerid][pUnloading]][bizPos][1], BusinessData[PlayerData[playerid][pUnloading]][bizPos][2], 1.0);
					ShowPlayerFooter(playerid, "Veuillez livrer la caisse au ~r~checkpoint.");

					CoreVehicles[PlayerData[playerid][pUnloadVehicle]][vehLoads]--;
				}
				else
				{
					static
					Float:fX,
					Float:fY,
					Float:fZ,
					string[64];

					PlayerData[playerid][pLoadCrate] = 0;
					ApplyAnimation(playerid, "CARRY", "putdwn", 4.1, 0, 0, 0, 0, 0, 1);

					RemovePlayerAttachedObject(playerid, 4);
					SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);

					switch (CoreVehicles[PlayerData[playerid][pUnloadVehicle]][vehLoadType])
					{
						case 1:
						{
							TruckingCheck[playerid] += 35;
							//GiveMoney(playerid, 35);
							ShowPlayerFooter(playerid, "~g~$35~w~ ont été ajoutés à votre chéque.");
						}
						case 2:
						{
							TruckingCheck[playerid] += 40;
							//GiveMoney(playerid, 40);
							ShowPlayerFooter(playerid, "~g~$40~w~ ont été ajoutés à votre chéque.");
						}
						case 3:
						{
							TruckingCheck[playerid] += 30;
							//GiveMoney(playerid, 30);
							ShowPlayerFooter(playerid, "~g~$30~w~ ont été ajoutés à votre chéque.");
						}
						case 4:
						{
							TruckingCheck[playerid] += 35;
							//GiveMoney(playerid, 35);
							ShowPlayerFooter(playerid, "~g~$35~w~ ont été ajoutés à votre chéque.");
						}
						case 5:
						{
							TruckingCheck[playerid] += 40;
							//GiveMoney(playerid, 40);
							ShowPlayerFooter(playerid, "~g~$40~w~ ont été ajoutés à votre chéque.");
						}
						case 6:
						{
							TruckingCheck[playerid] += 35;
							//GiveMoney(playerid, 35);
							ShowPlayerFooter(playerid, "~g~$35~w~ ont été ajoutés à votre chéque.");
						}
					}
					if (CoreVehicles[PlayerData[playerid][pUnloadVehicle]][vehLoadType] == 5)
					{
						for (new i = 0; i < MAX_GAS_PUMPS; i ++) if (PumpData[i][pumpExists] && PumpData[i][pumpBusiness] == PlayerData[playerid][pUnloading]) {
							PumpData[i][pumpFuel] += 100;

							format(string, sizeof(string), "{FFFFFF}Essence: %d litres", PumpData[i][pumpFuel]);
							UpdateDynamic3DTextLabelText(PumpData[i][pumpText3D], COLOR_DEFAULT, string);

							Pump_Save(i);
						}
					}
					else
					{
						BusinessData[PlayerData[playerid][pUnloading]][bizProducts] += 20;
						Business_Save(PlayerData[playerid][pUnloading]);
					}
					if (CoreVehicles[PlayerData[playerid][pUnloadVehicle]][vehLoads] > 0)
					{
						GetVehicleBoot(PlayerData[playerid][pUnloadVehicle], fX, fY, fZ);
						SetPlayerCheckpoint(playerid, fX, fY, fZ, 1.0);
					}
					else
					{
						CoreVehicles[PlayerData[playerid][pUnloadVehicle]][vehLoads] = 0;
						CoreVehicles[PlayerData[playerid][pUnloadVehicle]][vehLoadType] = 0;

						PlayerData[playerid][pUnloading] = -1;
						PlayerData[playerid][pUnloadVehicle] = INVALID_VEHICLE_ID;

						DisablePlayerCheckpoint(playerid);
						SendClientMessageEx(playerid, COLOR_INFO, "Vous avez livré toutes les caisses du véhicule.");
						SendClientMessageEx(playerid, COLOR_INFO, "Livrez votre camion au point de contrôle pour vous faire payer.");
						SetPlayerCheckpoint(playerid, 1751.7672, -2057.0923, 13.7442, 15.0);

						if (PlayerData[playerid][pShipment] != -1)
						{
							foreach (new i : Player) if (Business_IsOwner(i, PlayerData[playerid][pShipment])) {
								SendClientMessageEx(playerid, COLOR_INFO, "%s a livré votre expédition %s.", ReturnName(playerid), BusinessData[PlayerData[playerid][pShipment]][bizName]);
							}
							BusinessData[PlayerData[playerid][pShipment]][bizShipment] = 0;
							Business_Save(PlayerData[playerid][pShipment]);

							PlayerData[playerid][pShipment] = -1;
							PlayerData[playerid][pDeliverShipment] = 0;
						}
					}
				}
			}
		}
		else if (PlayerData[playerid][pJob] == JOB_MINER && PlayerData[playerid][pMinedRock] && GetPlayerSpecialAction(playerid) == SPECIAL_ACTION_CARRY)
		{
			new money = random(20) + 5;

			SendClientMessageEx(playerid, COLOR_INFO, "Vous avez gagné la somme de $%d grâce à votre job.", money);
			GiveMoney(playerid, money);

			PlayerData[playerid][pMinedRock] = -1;
			PlayerData[playerid][pMineTime] = 0;

			DisablePlayerCheckpoint(playerid);
			RemovePlayerAttachedObject(playerid, 4);

			SetPlayerAttachedObject(playerid, 4, 18634, 6, 0.156547, 0.039423, 0.026570, 198.109115, 6.364907, 262.997558, 1.000000, 1.000000, 1.000000);
			SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
		}
		else if (PlayerData[playerid][pJob] == JOB_SORTER && PlayerData[playerid][pSorting] == 1 && PlayerData[playerid][pSortingType] == 1)
		{
		    if(IsPlayerInAnyVehicle(playerid))
		    {
				PlayerData[playerid][pSorting] = 0;
				PlayerData[playerid][pSortingType] = 0;
				PlayerData[playerid][pSortCrate] = 0;
				PlayerData[playerid][pSortingBase] = -1;

				RemovePlayerAttachedObject(playerid, 4);
				SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);

				DisablePlayerCheckpoint(playerid);
				SendClientMessage(playerid, COLOR_ERROR, "Vous êtes dans un véhicule, votre cycle a automatiquement été arrêté.");
			}
			if (PlayerData[playerid][pSortCrate] == 5)
			{ // +5 caisses, on lui donne sa paye
				new
					money = 100 + random(20);
					
				PlayerData[playerid][pSortCrate] = 0;

   				ApplyAnimation(playerid, "CARRY", "putdwn", 4.1, 0, 0, 0, 0, 0, 1);

				GiveMoney(playerid, money);

				SendClientMessageEx(playerid, COLOR_INFO, "Vous avez gagné %d$ pour votre triage de colis. Vous recommencez un nouveau cycle.", money);
				ShowPlayerFooter(playerid, "Veuillez livrer la caisse au ~r~checkpoint.");

				new
					random_Checkpoint = random(sizeof(g_arrSortingCheckpoint_foot));

				SetPlayerCheckpoint(playerid, g_arrSortingCheckpoint_foot[random_Checkpoint][0], g_arrSortingCheckpoint_foot[random_Checkpoint][1], g_arrSortingCheckpoint_foot[random_Checkpoint][2], 1.0);
			}
			else if (PlayerData[playerid][pSortCrate] == 4)
			{ // Il arrive à la 5ème, on lui dit de retourner à l'entrepot
				PlayerData[playerid][pSortCrate]++;

				SetPlayerAttachedObject(playerid, 4, 1220, 5, 0.137832, 0.176979, 0.151424, 96.305931, 185.363006, 20.328088, 0.699999, 0.800000, 0.699999);
				SetPlayerSpecialAction(playerid, SPECIAL_ACTION_CARRY);

   				ApplyAnimation(playerid, "CARRY", "putdwn", 4.1, 0, 0, 0, 0, 0, 1);

				SetPlayerCheckpoint(playerid, JobData[ PlayerData[playerid][pSortingBase] ][jobPoint][0], JobData[ PlayerData[playerid][pSortingBase] ][jobPoint][1], JobData[ PlayerData[playerid][pSortingBase] ][jobPoint][2], 3.0);

				ShowPlayerFooter(playerid, "Veuillez livrer la caisse au ~r~checkpoint.");
			}
			else
			{
				PlayerData[playerid][pSortCrate]++;

				SetPlayerAttachedObject(playerid, 4, 1220, 5, 0.137832, 0.176979, 0.151424, 96.305931, 185.363006, 20.328088, 0.699999, 0.800000, 0.699999);
				SetPlayerSpecialAction(playerid, SPECIAL_ACTION_CARRY);

				ApplyAnimation(playerid, "CARRY", "liftup", 4.1, 0, 0, 0, 0, 0, 1);

				new
					random_Checkpoint = random(sizeof(g_arrSortingCheckpoint_foot));

				SetPlayerCheckpoint(playerid, g_arrSortingCheckpoint_foot[random_Checkpoint][0], g_arrSortingCheckpoint_foot[random_Checkpoint][1], g_arrSortingCheckpoint_foot[random_Checkpoint][2], 1.0);

				ShowPlayerFooter(playerid, "Veuillez livrer la caisse au ~r~checkpoint.");
			}
		}
		else if (PlayerData[playerid][pJob] == JOB_SORTER && PlayerData[playerid][pSorting] == 1 && PlayerData[playerid][pSortingType] == 2)
		{
		    if(!IsPlayerInAnyVehicle(playerid))
		    {
				PlayerData[playerid][pSorting] = 0;
				PlayerData[playerid][pSortingType] = 0;
				PlayerData[playerid][pSortCrate] = 0;
				PlayerData[playerid][pSortingBase] = -1;
				
				DestroyObject(PlayerData[playerid][pSortingObject][0]);
				DestroyObject(PlayerData[playerid][pSortingObject][1]);
				DestroyObject(PlayerData[playerid][pSortingObject][2]);

				PlayerData[playerid][pSortingObject][0] = -1;
				PlayerData[playerid][pSortingObject][1] = -1;
				PlayerData[playerid][pSortingObject][2] = -1;
				
				DestroyVehicle(PlayerData[playerid][pSortingVehicle]);
				PlayerData[playerid][pSortingVehicle] = 0;

				DisablePlayerCheckpoint(playerid);
				SendClientMessage(playerid, COLOR_ERROR, "Vous n'êtes pas dans un véhicule, votre cycle a automatiquement été arrêté.");
			}
			if (PlayerData[playerid][pSortCrate] == 5)
			{ // +5 caisses, on lui donne sa paye
				new
					money = 80 + random(40);
					
				PlayerData[playerid][pSortCrate] = 0;

				GiveMoney(playerid, money);

				SendClientMessageEx(playerid, COLOR_INFO, "Vous avez gagné %d$ pour votre triage de colis. Vous recommencez un nouveau cycle.", money);
				ShowPlayerFooter(playerid, "Veuillez livrer la caisse au ~r~checkpoint.");

				new
					random_Checkpoint = random(sizeof(g_arrSortingCheckpoint_car));

				SetPlayerCheckpoint(playerid, g_arrSortingCheckpoint_car[random_Checkpoint][0], g_arrSortingCheckpoint_car[random_Checkpoint][1], g_arrSortingCheckpoint_car[random_Checkpoint][2], 5.0);
			}
			else if (PlayerData[playerid][pSortCrate] == 4)
			{ // Il arrive à la 5ème, on lui dit de retourner à l'entrepot
				PlayerData[playerid][pSortCrate]++;

				SetPlayerCheckpoint(playerid, JobData[ PlayerData[playerid][pSortingBase] ][jobDeliver][0], JobData[ PlayerData[playerid][pSortingBase] ][jobDeliver][1], JobData[ PlayerData[playerid][pSortingBase] ][jobDeliver][2], 6.0);

				ShowPlayerFooter(playerid, "Veuillez livrer la caisse au ~r~checkpoint.");
			}
			else
			{
				PlayerData[playerid][pSortCrate]++;

				new
					random_Checkpoint = random(sizeof(g_arrSortingCheckpoint_car));

				SetPlayerCheckpoint(playerid, g_arrSortingCheckpoint_car[random_Checkpoint][0], g_arrSortingCheckpoint_car[random_Checkpoint][1], g_arrSortingCheckpoint_car[random_Checkpoint][2], 5.0);

				ShowPlayerFooter(playerid, "Veuillez livrer la caisse au ~r~checkpoint.");
			}
		}
	}
	return 1;
}

public OnPlayerStateChange(playerid, newstate, oldstate)
{
	if (IsPlayerNPC(playerid))
	return 1;

    AFKMin[playerid] = 0;
	new vehicleid = GetPlayerVehicleID(playerid);

	if (newstate == PLAYER_STATE_WASTED && PlayerData[playerid][pJailTime] < 1)
	{
		for (new i = 34; i < 39; i ++) {
			PlayerTextDrawHide(playerid, PlayerData[playerid][pTextdraws][i]);
		}
		PlayerTextDrawHide(playerid, PlayerData[playerid][pTextdraws][82]);

		//ShowHungerTextdraw(playerid, 0);

		ResetWeapons(playerid);
		ResetPlayer(playerid);

		PlayerData[playerid][pHealth] = 99.0;
		SetPlayerHealth(playerid, 99.0);

		PlayerData[playerid][pKilled] = 1;

		if (!PlayerData[playerid][pInjured])
		{
			PlayerData[playerid][pInjured] = 1;

			PlayerData[playerid][pInterior] = GetPlayerInterior(playerid);
			PlayerData[playerid][pWorld] = GetPlayerVirtualWorld(playerid);
		    SetPlayerPos(playerid, xmor[playerid], ymor[playerid], zmor[playerid]);
		    SetPlayerInterior(playerid, int_mor[playerid]);
		    SetPlayerVirtualWorld(playerid, vw_mor[playerid]);
		}
		else if(PlayerData[playerid][pMortAcheve] == 2)
		{
			PlayerData[playerid][pInjured] = 0;
			PlayerData[playerid][pHospital] = GetClosestHospital(playerid);
		}
		if (PlayerData[playerid][pCallLine] != INVALID_PLAYER_ID)
		{
			SendClientMessage(PlayerData[playerid][pCallLine], COLOR_YELLOW, "TÉLÉPHONE:{FFFFFF} La communication a été coupée !");
			CancelCall(playerid);
		}
		if (PlayerData[playerid][pCarryCrate] != -1)
		{
			Crate_Drop(playerid);
		}
	}
	else if (oldstate == PLAYER_STATE_DRIVER)
	{
		if (GetPlayerSpecialAction(playerid) == SPECIAL_ACTION_CARRY || GetPlayerSpecialAction(playerid) == SPECIAL_ACTION_CUFFED)
		return RemoveFromVehicle(playerid);

		for (new i = 34; i < 39; i ++)
		PlayerTextDrawHide(playerid, PlayerData[playerid][pTextdraws][i]);

		PlayerTextDrawHide(playerid, PlayerData[playerid][pTextdraws][82]);
	}
	else if (newstate == PLAYER_STATE_DRIVER)
	{
		new id = Car_GetID(vehicleid);

		if (CarData[id][carLoca] == 1 && CarData[id][carLocaID] == 0)
		{
		    new
		        string[150];

			format(string, sizeof(string), "Souhaitez-vous louer ce véhicule ?\n\nModèle: {FFFFFF}%s{A9C4E4}\nPrix:{FFFFFF} %d$", ReturnVehicleModelName(CarData[id][carModel]), CarData[id][carLocaPrice]);
		    Dialog_Show(playerid, DIALOG_RENTCAR, DIALOG_STYLE_MSGBOX, "Location d'un véhicule", string, "Louer", "Annuler");
		}
		if (id != -1 && CarData[id][carFaction] > 0 && GetFactionType(playerid) != CarData[id][carFaction] ||  id != -1 && CarData[id][carJob] > 0 && PlayerData[playerid][pJob] != CarData[id][carJob]) {
			RemovePlayerFromVehicle(playerid);
			
			return SendClientMessageEx(playerid, COLOR_ERROR, "Vous n'avez pas les clés de ce véhicule.");
		}
		if (PlayerData[playerid][pJob] == JOB_GARBAGE && GetVehicleModel(vehicleid) == 408 && CoreVehicles[vehicleid][vehTrash] > 0)
		{
			new pointid = -1;

			if ((pointid = GetClosestJobPoint(playerid, 7)) != -1)
			{
				PlayerData[playerid][pCP] = 1;
				SetPlayerCheckpoint(playerid, JobData[pointid][jobPoint][0], JobData[pointid][jobPoint][1], JobData[pointid][jobPoint][2], 2.5);

				SendClientMessageEx(playerid, COLOR_INFO, "Ce véhicule est chargé avec %d sacs poubelles (checkpoint placé sur votre map)", CoreVehicles[vehicleid][vehTrash]);
			}
		}
		if (PlayerData[playerid][pJob] == JOB_MINER && PlayerData[playerid][pJobDuty] == JOB_MINER && CarData[id][carJob] == JOB_MINER)
		{
		    new
		        count = 0;
		        
			for(new i=0; i<5; i++) if(CarData[id][carMine][i] != -1)
			{
			    count++;
			}
			
			if(count <= 0)
			{ // Aucun minerais
			    SendClientMessage(playerid, COLOR_USAGE, "MISSION: Rendez-vous à la mine récuperez des minerais. (point-rouge minimap)");
				Waypoint_Set(playerid, "Mine", 641.0143, 945.7012, -34.8091);
			}
		}
		if (PlayerData[playerid][pJob] == JOB_COURIER && IsLoadableVehicle(vehicleid) && CoreVehicles[vehicleid][vehLoads] > 0)
		{
			if (PlayerData[playerid][pLoading])
			{
				DisablePlayerCheckpoint(playerid);
				PlayerData[playerid][pLoading] = 0;
			}
			static
			string[64];

			switch (CoreVehicles[vehicleid][vehLoadType])
			{
				case 1: format(string, sizeof(string), "~b~Charger de:~w~ Fournitures 24/7~n~~b~Caisse:~w~ %d/6", CoreVehicles[vehicleid][vehLoads]);
				case 2: format(string, sizeof(string), "~b~Charger de:~w~ Ammunation~n~~b~Caisse:~w~ %d/6", CoreVehicles[vehicleid][vehLoads]);
				case 3: format(string, sizeof(string), "~b~Charger de:~w~ Vetements~n~~b~Caisse:~w~ %d/6", CoreVehicles[vehicleid][vehLoads]);
				case 4: format(string, sizeof(string), "~b~Charger de:~w~ Pizza~n~~b~Caisse:~w~ %d/6", CoreVehicles[vehicleid][vehLoads]);
				case 5: format(string, sizeof(string), "~b~Charger de:~w~ Gasoil~n~~b~Caisse:~w~ %d/6", CoreVehicles[vehicleid][vehLoads]);
				case 6: format(string, sizeof(string), "~b~Charger de:~w~ Fourniture~n~~b~Caisse:~w~ %d/6", CoreVehicles[vehicleid][vehLoads]);
			}
			PlayerTextDrawShow(playerid, PlayerData[playerid][pTextdraws][82]);
			PlayerTextDrawSetString(playerid, PlayerData[playerid][pTextdraws][82], string);
		}
		if (IsVehicleImpounded(vehicleid))
		{
			RemovePlayerFromVehicle(playerid);
			SendClientMessageEx(playerid, COLOR_ERROR, "Ce véhicule est mis en fourrière et vous ne pouvez pas l'utiliser.");
		}
		else if (!IsEngineVehicle(vehicleid))
		{
			SetEngineStatus(vehicleid, true);
		}
		else if (CarData[id][carJob] == JOB_MINER && PlayerData[playerid][pJob] == JOB_MINER)
		{
		    new
				price = 0,
				pointid = -1;
				
			for(new i=0; i<5; i++) if(CarData[id][carMine][i] != -1)
		    {
		        price += OreData[ MineData[ CarData[id][carMine][i] ][mineType] ][Value];
		    }
		    if(price > 0)
			{
				SendClientMessageEx(playerid, COLOR_USAGE, "MISSION: Allez vendre vos minerais d'une valeur de %d$. (point-rouge minimap)", price);
				
				if ((pointid = GetClosestJobDeliver(playerid, JOB_MINER)) != -1)
				{
					SetPlayerCheckpoint(playerid, JobData[pointid][jobDeliver][0], JobData[pointid][jobDeliver][1], JobData[pointid][jobDeliver][2], 3.0);
				}
			}
		}
		else
		{
			if (!GetEngineStatus(vehicleid))
			{
				if (CoreVehicles[vehicleid][vehFuel] < 1)
				ShowPlayerFooter(playerid, "Il n'y a pas de ~r~carburant~w~ dans ce véhicule.");

				else if (ReturnVehicleHealth(vehicleid) <= 300)
				ShowPlayerFooter(playerid, "Le vehicule ~r~est HS~w~");

				else ShowPlayerFooter(playerid, "Veuillez utiliser ~r~/v(ehicule) clef~w~ pour démarrer le moteur.");
			}
			if (IsDoorVehicle(vehicleid) && !Inventory_HasItem(playerid, "Permis de conduire") && !PlayerData[playerid][pDrivingTest])
			{
				SendClientMessage(playerid, COLOR_INFO, "Vous conduisez un véhicule sans permis de conduire.");
			}
		}
		if (IsSpeedoVehicle(vehicleid) && !PlayerData[playerid][pDisableSpeedo]) for (new i = 34; i < 39  && 63 < 64 ; i ++) {
			PlayerTextDrawShow(playerid, PlayerData[playerid][pTextdraws][i]);
		}
		SetPlayerArmedWeapon(playerid, 0);
	}
	if ((oldstate == PLAYER_STATE_DRIVER || oldstate == PLAYER_STATE_PASSENGER) && PlayerData[playerid][pPlayRadio])
	{
		PlayerData[playerid][pPlayRadio] = 0;
		StopAudioStreamForPlayer(playerid);
	}
	if (newstate == PLAYER_STATE_DRIVER || newstate == PLAYER_STATE_PASSENGER)
	{
		if (PlayerData[playerid][pBoombox] != INVALID_PLAYER_ID)
		{
			PlayerData[playerid][pBoombox] = INVALID_PLAYER_ID;
			StopAudioStreamForPlayer(playerid);
		}
		if (IsEngineVehicle(vehicleid) && CoreVehicles[vehicleid][vehRadio])
		{
			static
			url[128];

			strunpack(url, CoreVehicles[vehicleid][vehURL]);

			StopAudioStreamForPlayer(playerid);
			PlayAudioStreamForPlayer(playerid, url);

			PlayerData[playerid][pPlayRadio] = 1;
		}
		foreach (new i : Player) if (PlayerData[i][pSpectator] == playerid) {
			PlayerSpectateVehicle(i, GetPlayerVehicleID(playerid));
		}
		if (PlayerData[playerid][pInjured] == 1)
		{
			RemoveFromVehicle(playerid);
		}
	}
	if (newstate == PLAYER_STATE_PASSENGER)
	{
		switch (GetPlayerWeapon(playerid))
		{
			case 22, 25, 28..33:
				SetPlayerArmedWeapon(playerid, GetPlayerWeapon(playerid));

			default:
				SetPlayerArmedWeapon(playerid, 0);
		}
	}
	else if (oldstate == PLAYER_STATE_DRIVER || oldstate == PLAYER_STATE_PASSENGER)
	{
		foreach (new i : Player) if (PlayerData[i][pSpectator] == playerid) {
			PlayerSpectatePlayer(i, playerid);
		}
	}
	if (newstate == PLAYER_STATE_PASSENGER && IsPlayerInsideTaxi(playerid))
	{
		new driverid = GetVehicleDriver(GetPlayerVehicleID(playerid));

		PlayerData[playerid][pTaxiFee] = 5;
		PlayerData[playerid][pTaxiTime] = 0;
		PlayerData[playerid][pTaxiPlayer] = driverid;

		SendClientMessageEx(driverid, COLOR_INFO, "%s est entré dans le taxi en passager.", ReturnName(playerid));
		SendClientMessageEx(playerid, COLOR_INFO, "%s est entré dans votre taxi.", ReturnName(driverid, 0));
	}
	if (oldstate == PLAYER_STATE_PASSENGER && PlayerData[playerid][pTaxiTime] != 0 && PlayerData[playerid][pTaxiPlayer] != INVALID_PLAYER_ID)
	{
		LeaveTaxi(playerid, PlayerData[playerid][pTaxiPlayer]);
	}
	if ((oldstate == PLAYER_STATE_DRIVER && newstate == PLAYER_STATE_ONFOOT) && TrafiqueFilsTimer[playerid] > 0)
	{
	    KillTimer(TrafiqueFilsKillTimer[playerid]);
        TrafiqueFilsTimer[playerid] = 0;
        SendClientMessageEx(playerid, COLOR_ERROR, "Le trafique a été annulé.");
	}
	return 1;
}

public OnPlayerUpdate(playerid)
{
	static str[64], id = -1, keys[3], vehicleid;

	if (PlayerData[playerid][pKicked])
		return 0;

	if (GetPlayerWeapon(playerid) > 1 && (PlayerData[playerid][pMining] > 0))
		SetPlayerArmedWeapon(playerid, 0);

	if (IsPlayerInAnyVehicle(playerid))
		vehicleid = GetPlayerVehicleID(playerid);
	else
		vehicleid = INVALID_VEHICLE_ID;

	GetPlayerKeys(playerid, keys[0], keys[1], keys[2]);
	
	
	/*
	if (GetPlayerWeapon(playerid) == 25 || GetPlayerWeapon(playerid) == 30 || GetPlayerWeapon(playerid) == 31 || GetPlayerWeapon(playerid) == 33 || GetPlayerWeapon(playerid) == 34)
	{
		if (PlayerData[playerid][pWeapon] == GetPlayerWeapon(playerid))
		{
			AttachArme(playerid, GetWeapon(playerid));
		}
	}*/
	if (GetPlayerWeapon(playerid) != PlayerData[playerid][pWeapon])
	{
		PlayerData[playerid][pWeapon] = GetPlayerWeapon(playerid);

		if (PlayerData[playerid][pWeapon] >= 1 && PlayerData[playerid][pWeapon] <= 45 && PlayerData[playerid][pWeapon] != 40 && PlayerData[playerid][pWeapon] != 2 && PlayerData[playerid][pGuns][g_aWeaponSlots[PlayerData[playerid][pWeapon]]] != GetPlayerWeapon(playerid) && !PlayerHasTazer(playerid) && !PlayerHasBeanBag(playerid))
		{
			/*SendAdminAlert(COLOR_ADMINGROUP, "%s a été banni pour cheat arme. (%s).", ReturnName(playerid), ReturnWeaponName(PlayerData[playerid][pWeapon]));
			Log_Write("logs/cheat_log.txt", "[%s] %s was banned for weapon hacks (%s).", ReturnDate(), ReturnName(playerid), ReturnWeaponName(PlayerData[playerid][pWeapon]));
			Dialog_Show(playerid, ShowOnly, DIALOG_STYLE_MSGBOX, "Bannissement", "Votre compte a été banni du serveur.\n\nNom d'utilisateur: %s\nRaison: Cheat armes.\nAdmin qui vous a banni: Anticheat\n\nAppuyez sur F8 pour prendre un screenshot et poster sur le forum pour des explications.", "X", "", PlayerData[playerid][pUsername]);
			Blacklist_Add(PlayerData[playerid][pIP], PlayerData[playerid][pUsername], "Anticheat", "Cheat armes");
			KickEx(playerid);*/
			OnCheatDetected(playerid, PlayerData[playerid][pIP], 0, 51);
		}
	}
	if (PlayerData[playerid][pMakeGraffiti] != 0)
	{
	    if(GetPlayerWeapon(playerid) == 41 && GetPlayerAmmo(playerid) <= 10)
	    {
	    	if(PlayerData[playerid][pMakeGraffiti] == 1)
	    	{
				 // MODELID
				new
				    Float:pos[4];
				GetPlayerPos(playerid, pos[0], pos[1], pos[2]);
				GetPlayerFacingAngle(playerid, pos[3]);

				PlayerData[playerid][pMakeGraffiti] = 0;


				Graffiti_Create(playerid, TagData_temp[playerid][tagID], pos[0], pos[1], pos[2], pos[3], TagData_temp[playerid][tagColor], TagData_temp[playerid][tagText], TagData_temp[playerid][tagFont], TagData_temp[playerid][tagSize]);
				ResetVar_TempTag(playerid);
	        }
	        else if(PlayerData[playerid][pMakeGraffiti] == 2)
	        {
				 // PERSONNALISE
				new
				    Float:pos[4];
				GetPlayerPos(playerid, pos[0], pos[1], pos[2]);
				GetPlayerFacingAngle(playerid, pos[3]);

				PlayerData[playerid][pMakeGraffiti] = 0;
				
				Graffiti_Create(playerid, -1, pos[0], pos[1], pos[2], pos[3], TagData_temp[playerid][tagColor], TagData_temp[playerid][tagText], TagData_temp[playerid][tagFont], TagData_temp[playerid][tagSize]);
				ResetVar_TempTag(playerid);
	        }
	        
		}
	}
	if (GetPlayerMoney(playerid) != PlayerData[playerid][pMoney])
	{
		ResetPlayerMoney(playerid);
		GivePlayerMoney(playerid, PlayerData[playerid][pMoney]);
	}
	if (GetPlayerScore(playerid) != PlayerData[playerid][pLevel])
	{
		SetPlayerScore(playerid, PlayerData[playerid][pLevel]);
	}
	if (PlayerData[playerid][pWaypoint])
	{
		format(str, sizeof(str), "~b~%s~w~ (%.1fm)", PlayerData[playerid][pLocation], GetPlayerDistanceFromPoint(playerid, PlayerData[playerid][pWaypointPos][0], PlayerData[playerid][pWaypointPos][1], PlayerData[playerid][pWaypointPos][2]));
		PlayerTextDrawSetString(playerid, PlayerData[playerid][pTextdraws][69], str);
	}
	if (PlayerData[playerid][pMaskOn])
	{
		if (!PlayerData[playerid][pHideTags])
		{
			foreach (new i : Player) {
				ShowPlayerNameTagForPlayer(i, playerid, 0);
			}
			format(str, sizeof(str), " ", PlayerData[playerid][pMaskID]);

			PlayerData[playerid][pHideTags] = 1;
			PlayerData[playerid][pNameTag] = CreateDynamic3DTextLabel(str, COLOR_WHITE, 0.0, 0.0, 0.2, 8.0, playerid, INVALID_VEHICLE_ID, 0, -1, -1);
		}
	}
	if (!PlayerData[playerid][pMaskOn] && PlayerData[playerid][pHideTags])
	{
		foreach (new i : Player) {
			ShowPlayerNameTagForPlayer(i, playerid, 1);
		}
		ResetNameTag(playerid);
	}
	if (IsPlayerInAnyVehicle(playerid) && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
	{
		/*	if (IsSpeedoVehicle(vehicleid) && !PlayerData[playerid][pDisableSpeedo])
		{
			static
			Float:fDamage,
			Float:fSpeed,
			Float:fVelocity[3];

			GetVehicleHealth(vehicleid, fDamage);
			GetVehicleVelocity(vehicleid, fVelocity[0], fVelocity[1], fVelocity[2]);

			fDamage = floatdiv(1000 - fDamage, 10) * 1.42999; // 1.33334;
			fSpeed = floatmul(floatsqroot((fVelocity[0] * fVelocity[0]) + (fVelocity[1] * fVelocity[1]) + (fVelocity[2] * fVelocity[2])), 100.0);

			if (fDamage < 0.0) fDamage = 0.0;
			else if (fDamage > 100.0) fDamage = 100.0;

			format(str, sizeof(str), "%d", CoreVehicles[vehicleid][vehFuel]);
			PlayerTextDrawSetString(playerid, PlayerData[playerid][pTextdraws][63], str);

			format(str, sizeof(str), "%d", fSpeed);
			PlayerTextDrawSetString(playerid, PlayerData[playerid][pTextdraws][39], str);

			format(str, sizeof(str), "%.0f", (fDamage > 100.0) ? (100.0) : (fDamage));
			PlayerTextDrawSetString(playerid, PlayerData[playerid][pTextdraws][38], str);

			format(str, sizeof(str), "%s",ReturnVehicleModelName(vehicleid));
			PlayerTextDrawSetString(playerid, PlayerData[playerid][pTextdraws][64], str);
		}*/
		for (new i = 0; i != MAX_BARRICADES; i ++) if (BarricadeData[i][cadeExists] && BarricadeData[i][cadeType] == 1 && IsPlayerInRangeOfPoint(playerid, 3.0, BarricadeData[i][cadePos][0], BarricadeData[i][cadePos][1], BarricadeData[i][cadePos][2]))
		{
			static
			tires[4];

			GetVehicleDamageStatus(vehicleid, tires[0], tires[1], tires[2], tires[3]);

			if (tires[3] != 1111) {
				UpdateVehicleDamageStatus(vehicleid, tires[0], tires[1], tires[2], 1111);
			}
			break;
		}
	}
	switch (PlayerData[playerid][pHouseLights])
	{
		case 0:
		{
			if ((id = House_Inside(playerid)) != -1 && !HouseData[id][houseLights])
			{
				PlayerData[playerid][pHouseLights] = true;
				PlayerTextDrawShow(playerid, PlayerData[playerid][pTextdraws][62]);
			}
			else PlayerTextDrawHide(playerid, PlayerData[playerid][pTextdraws][62]);
		}
		case 1:
		{
			if ((id = House_Inside(playerid)) == -1 || (id != -1 && HouseData[id][houseLights]))
			{
				PlayerData[playerid][pHouseLights] = false;
				PlayerTextDrawHide(playerid, PlayerData[playerid][pTextdraws][62]);
			}
		}
	}
	if (PlayerData[playerid][pDrinking] && GetPlayerSpecialAction(playerid) != SPECIAL_ACTION_DRINK_SPRUNK && !IsPlayerInAnyVehicle(playerid))
	{
		DestroyProgressBar(PlayerData[playerid][pDrinkBar]);
		PlayerData[playerid][pDrinking] = 0;
	}
	if ((id = Speed_Nearest(playerid)) != -1 && GetPlayerSpeed(playerid) > SpeedData[id][speedLimit] && GetPlayerState(playerid) == PLAYER_STATE_DRIVER && IsEngineVehicle(vehicleid) && !PlayerData[playerid][pSpeedTime])
	{
		if (!IsACruiser(vehicleid) && !IsABoat(vehicleid) && !IsAPlane(vehicleid) && !IsAHelicopter(vehicleid))
		{
			new price = 100 + floatround(GetPlayerSpeed(playerid) - SpeedData[id][speedLimit]);

			format(str, sizeof(str), "Vitesse (%.0f/%.0f km/h)", GetPlayerSpeed(playerid), SpeedData[id][speedLimit]);
			SetTimerEx("HidePlayerBox", 500, false, "dd", playerid, _:ShowPlayerBox(playerid, 0xFFFFFF66));

			if (Ticket_Add(playerid, price, str) != -1)
			{
				format(str, sizeof(str), "Vous avez reçu une amende de ~r~%s~w~", FormatNumber(price));
				ShowPlayerFooter(playerid, str);
			}
			PlayerData[playerid][pSpeedTime] = 5;
		}
	}
	if (Detector_Nearest(playerid) != -1)
	{
		if (IsPlayerArmed(playerid) && gettime() > PlayerData[playerid][pDetectorTime] && !(GetFactionType(playerid) == FACTION_POLICE && PlayerData[playerid][pOnDuty]))
		{
			PlayerData[playerid][pDetectorTime] = gettime() + 5;

			SendNearbyMessage(playerid, 15.0, COLOR_PURPLE, "Le détecteur de métaux émet un son. (( %s ))", ReturnName(playerid, 1));
			PlayerPlaySoundEx(playerid, 43000);
		}
	}
	if ((keys[0] & KEY_FIRE) && GetPlayerWeapon(playerid) == 42)
	{
		static
		Float:fX,
		Float:fY,
		Float:fZ;

		for (new i = 0; i < sizeof(g_aFireObjects); i ++)
		{
			GetDynamicObjectPos(g_aFireObjects[i], fX, fY, fZ);

			if ((IsValidDynamicObject(g_aFireObjects[i]) && IsPlayerInRangeOfPoint(playerid, 4.0, fX, fY, fZ)) && ++ g_aFireExtinguished[i] == 32)
			{
				SetTimerEx("DestroyWater", 2000, false, "d", CreateDynamicObject(18744, fX, fY, fZ - 0.2, 0.0, 0.0, 0.0));

				DestroyDynamicObject(g_aFireObjects[i]);
				g_aFireExtinguished[i] = 0;
			}
		}
	}
	if ((keys[0] & KEY_FIRE) && (GetVehicleModel(GetPlayerVehicleID(playerid)) == 407 || GetVehicleModel(GetPlayerVehicleID(playerid)) == 544))
	{
		static
		Float:fX,
		Float:fY,
		Float:fZ,
		Float:fVector[3],
		Float:fCamera[3];

		GetPlayerCameraFrontVector(playerid, fVector[0], fVector[1], fVector[2]);
		GetPlayerCameraPos(playerid, fCamera[0], fCamera[1], fCamera[2]);

		for (new i = 0; i < sizeof(g_aFireObjects); i ++)
		{
			GetDynamicObjectPos(g_aFireObjects[i], fX, fY, fZ);

			if (IsValidDynamicObject(g_aFireObjects[i]) && IsPlayerInRangeOfPoint(playerid, 3050, fX, fY, fZ))
			{
				if (++g_aFireExtinguished[i] == 64 && DistanceCameraTargetToLocation(fCamera[0], fCamera[1], fCamera[2], fX, fY, fZ + 2.5, fVector[0], fVector[1], fVector[2]) < 12.0)
				{
					SetTimerEx("DestroyWater", 2000, false, "d", CreateDynamicObject(18744, fX, fY, fZ - 0.2, 0.0, 0.0, 0.0));

					DestroyDynamicObject(g_aFireObjects[i]);
					g_aFireExtinguished[i] = 0;
				}
			}
		}
	}
	return 1;
}

forward OnQueryFinished(extraid, threadid);
public OnQueryFinished(extraid, threadid)
{
	if (!IsPlayerConnected(extraid))
	return 0;

	static rows, fields;

	switch (threadid)
	{
		case THREAD_LOAD_INVENTORY:
		{
			static
			name[32];

			cache_get_data(rows, fields, g_iHandle);

			for (new i = 0; i < rows && i < MAX_INVENTORY; i ++) {
				InventoryData[extraid][i][invExists] = true;
				InventoryData[extraid][i][invID] = cache_get_field_int(i, "invID");
				InventoryData[extraid][i][invModel] = cache_get_field_int(i, "invModel");
				InventoryData[extraid][i][invQuantity] = cache_get_field_int(i, "invQuantity");

				cache_get_field_content(i, "invItem", name, g_iHandle, 32);
				strpack(InventoryData[extraid][i][invItem], name, 32 char);
			}
		}
		case THREAD_LOAD_CONTACTS:
		{
			cache_get_data(rows, fields, g_iHandle);

			for (new i = 0; i < rows && i < MAX_CONTACTS; i ++) {
				cache_get_field_content(i, "contactName", ContactData[extraid][i][contactName], g_iHandle, 32);

				ContactData[extraid][i][contactExists] = true;
				ContactData[extraid][i][contactID] = cache_get_field_int(i, "contactID");
				ContactData[extraid][i][contactNumber] = cache_get_field_int(i, "contactNumber");
			}
		}
		case THREAD_LOAD_LOCATIONS:
		{
			cache_get_data(rows, fields, g_iHandle);

			for (new i = 0; i < rows && i < MAX_GPS_LOCATIONS; i ++) {
				cache_get_field_content(i, "locationName", LocationData[extraid][i][locationName], g_iHandle, 32);

				LocationData[extraid][i][locationExists] = true;
				LocationData[extraid][i][locationID] = cache_get_field_int(i, "locationID");
				LocationData[extraid][i][locationPos][0] = cache_get_field_float(i, "locationX");
				LocationData[extraid][i][locationPos][1] = cache_get_field_float(i, "locationY");
				LocationData[extraid][i][locationPos][2] = cache_get_field_float(i, "locationZ");
			}
		}
		case THREAD_LOAD_TICKETS:
		{
			cache_get_data(rows, fields, g_iHandle);

			for (new i = 0; i < rows && i < MAX_PLAYER_TICKETS; i ++) {
				cache_get_field_content(i, "ticketReason", TicketData[extraid][i][ticketReason], g_iHandle, 64);
				cache_get_field_content(i, "ticketDate", TicketData[extraid][i][ticketDate], g_iHandle, 32);

				TicketData[extraid][i][ticketExists] = true;
				TicketData[extraid][i][ticketID] = cache_get_field_int(i, "ticketID");
				TicketData[extraid][i][ticketFee] = cache_get_field_int(i, "ticketFee");
			}
		}
	}
	return 1;
}

public OnPlayerConnect(playerid)
{
	DisableAnticheatForPlayer(playerid);
	
	if (IsPlayerNPC(playerid))
	return 1;

	if ((GetTickCount() - PlayerData[playerid][pLeaveTime]) < 2000 && !strcmp(ReturnIP(playerid), PlayerData[playerid][pLeaveIP]))
	{
		SendAdminAlert(COLOR_ADMINGROUP, "%s (%s) a été kick pour hack reconnect.", ReturnName(playerid), ReturnIP(playerid));
		Kick(playerid);
		return 1;
	}
	ResetPlayerWeapons(playerid);
	SetPlayerArmedWeapon(playerid, 0);
	PreloadAnimations(playerid);

	for (new i = 0; i != MAX_PLAYER_ATTACHED_OBJECTS; i ++) {
		RemovePlayerAttachedObject(playerid, i);
	}

	TextDrawShowForPlayer(playerid, Textdraw0);
	TextDrawShowForPlayer(playerid, Textdraw1);
	TextDrawShowForPlayer(playerid, Textdraw2);
	TextDrawShowForPlayer(playerid, Textdraw3);
	TextDrawShowForPlayer(playerid, Textdraw4);

	// Gare parking location véhicule
	RemoveBuildingForPlayer(playerid, 5024, 1748.8438, -1883.0313, 14.1875, 0.25);
	RemoveBuildingForPlayer(playerid, 5083, 1748.8438, -1883.0313, 14.1875, 0.25);
	
	// Ganton
	RemoveBuildingForPlayer(playerid, 714, 2490.6172, -1806.5703, 14.3750, 0.25);
	RemoveBuildingForPlayer(playerid, 17755, 2482.3281, -1783.1484, 14.4453, 0.25);
	RemoveBuildingForPlayer(playerid, 17756, 2497.7656, -1762.3906, 15.6250, 0.25);
	RemoveBuildingForPlayer(playerid, 17757, 2450.8750, -1757.3984, 16.0000, 0.25);
	RemoveBuildingForPlayer(playerid, 17765, 2436.2188, -1788.5625, 15.0234, 0.25);
	RemoveBuildingForPlayer(playerid, 1226, 2489.0859, -1744.2109, 16.2031, 0.25);
	RemoveBuildingForPlayer(playerid, 673, 2500.5391, -1807.8906, 13.7188, 0.25);
	RemoveBuildingForPlayer(playerid, 669, 2496.9766, -1794.3516, 12.8828, 0.25);
	RemoveBuildingForPlayer(playerid, 17520, 2497.7656, -1762.3906, 15.6250, 0.25);
	RemoveBuildingForPlayer(playerid, 669, 2481.6719, -1819.9844, 13.0391, 0.25);
	RemoveBuildingForPlayer(playerid, 616, 2430.3516, -1818.0703, 8.9531, 0.25);
	RemoveBuildingForPlayer(playerid, 17523, 2436.2188, -1788.5625, 15.0234, 0.25);
	RemoveBuildingForPlayer(playerid, 673, 2448.9766, -1800.8281, 13.4219, 0.25);
	RemoveBuildingForPlayer(playerid, 616, 2440.9297, -1804.7344, 12.0078, 0.25);
	RemoveBuildingForPlayer(playerid, 673, 2469.7578, -1803.4922, 13.7188, 0.25);
	RemoveBuildingForPlayer(playerid, 673, 2479.9531, -1797.7031, 13.6406, 0.25);
	RemoveBuildingForPlayer(playerid, 669, 2460.7891, -1795.3438, 12.5781, 0.25);
	RemoveBuildingForPlayer(playerid, 17548, 2482.3281, -1783.1484, 14.4453, 0.25);
	RemoveBuildingForPlayer(playerid, 17519, 2450.8750, -1757.3984, 16.0000, 0.25);
	
	// Idlewood
	RemoveBuildingForPlayer(playerid, 5544, 1873.742, -1682.476, 34.796, 0.250);
	RemoveBuildingForPlayer(playerid, 1524, 1837.664, -1640.382, 13.757, 0.250);
	RemoveBuildingForPlayer(playerid, 620, 1855.718, -1741.539, 10.804, 0.250);
	RemoveBuildingForPlayer(playerid, 620, 1879.507, -1741.484, 10.804, 0.250);
	RemoveBuildingForPlayer(playerid, 620, 1908.218, -1741.484, 10.804, 0.250);
	RemoveBuildingForPlayer(playerid, 712, 1929.578, -1736.906, 21.390, 0.250);
	RemoveBuildingForPlayer(playerid, 620, 1931.039, -1726.328, 10.804, 0.250);
	RemoveBuildingForPlayer(playerid, 620, 1832.382, -1694.312, 9.718, 0.250);
	RemoveBuildingForPlayer(playerid, 1537, 1837.437, -1683.968, 12.304, 0.250);
	RemoveBuildingForPlayer(playerid, 1533, 1837.437, -1683.953, 12.304, 0.250);
	RemoveBuildingForPlayer(playerid, 1537, 1837.437, -1686.984, 12.312, 0.250);
	RemoveBuildingForPlayer(playerid, 620, 1832.898, -1670.765, 9.718, 0.250);
	RemoveBuildingForPlayer(playerid, 1533, 1837.437, -1677.921, 12.296, 0.250);
	RemoveBuildingForPlayer(playerid, 1537, 1837.437, -1680.953, 12.296, 0.250);
	RemoveBuildingForPlayer(playerid, 1533, 1837.437, -1680.937, 12.296, 0.250);
	RemoveBuildingForPlayer(playerid, 5408, 1873.742, -1682.476, 34.796, 0.250);
	RemoveBuildingForPlayer(playerid, 620, 1931.039, -1702.289, 10.804, 0.250);
	RemoveBuildingForPlayer(playerid, 712, 1929.578, -1694.460, 21.390, 0.250);
	RemoveBuildingForPlayer(playerid, 620, 1931.039, -1667.031, 10.804, 0.250);
	RemoveBuildingForPlayer(playerid, 620, 1931.039, -1637.898, 10.804, 0.250);
	RemoveBuildingForPlayer(playerid, 620, 1855.718, -1623.281, 10.804, 0.250);
	RemoveBuildingForPlayer(playerid, 620, 1879.507, -1623.101, 10.804, 0.250);
	RemoveBuildingForPlayer(playerid, 620, 1908.218, -1622.984, 10.804, 0.250);
	RemoveBuildingForPlayer(playerid, 712, 1929.578, -1627.625, 21.390, 0.250);

	// Little Mexico
	RemoveBuildingForPlayer(playerid, 1226, 2118.289, -1939.398, 16.390, 0.250);
	RemoveBuildingForPlayer(playerid, 620, 2114.554, -1928.187, 5.031, 0.250);
	RemoveBuildingForPlayer(playerid, 620, 2113.398, -1925.039, 10.804, 0.250);
	RemoveBuildingForPlayer(playerid, 620, 2115.671, -1922.765, 10.804, 0.250);
	RemoveBuildingForPlayer(playerid, 620, 2123.359, -1928.070, 6.843, 0.250);
	RemoveBuildingForPlayer(playerid, 620, 2122.656, -1916.789, 10.804, 0.250);
	RemoveBuildingForPlayer(playerid, 620, 2116.929, -1916.078, 10.804, 0.250);
	RemoveBuildingForPlayer(playerid, 620, 2121.507, -1909.531, 10.804, 0.250);
	RemoveBuildingForPlayer(playerid, 620, 2110.273, -1906.585, 5.031, 0.250);

	// Liquor Latino
	RemoveBuildingForPlayer(playerid, 4979, 1942.679, -1986.750, 14.898, 0.250);
	RemoveBuildingForPlayer(playerid, 4857, 1942.679, -1986.750, 14.898, 0.250);
	
	// Liquor Pershing Square
	RemoveBuildingForPlayer(playerid, 4191, 1353.257, -1764.531, 15.593, 0.250);
	RemoveBuildingForPlayer(playerid, 4022, 1353.257, -1764.531, 15.593, 0.250);
	RemoveBuildingForPlayer(playerid, 1532, 1353.132, -1759.656, 12.500, 0.250);
	RemoveBuildingForPlayer(playerid, 1226, 1341.453, -1755.484, 16.421, 0.250);
	
	// Eboueurs
	RemoveBuildingForPlayer(playerid, 3686, 2448.132, -2075.632, 16.046, 0.250);
	RemoveBuildingForPlayer(playerid, 3779, 2631.914, -2098.578, 20.007, 0.250);
	RemoveBuildingForPlayer(playerid, 3779, 2653.937, -2092.335, 20.007, 0.250);
	RemoveBuildingForPlayer(playerid, 3567, 2446.828, -2075.843, 13.257, 0.250);
	RemoveBuildingForPlayer(playerid, 3567, 2438.359, -2075.843, 13.257, 0.250);
	RemoveBuildingForPlayer(playerid, 3627, 2448.132, -2075.632, 16.046, 0.250);
	RemoveBuildingForPlayer(playerid, 3637, 2631.914, -2098.578, 20.007, 0.250);
	RemoveBuildingForPlayer(playerid, 3637, 2653.937, -2092.335, 20.007, 0.250);
	
	// Fourrière
	RemoveBuildingForPlayer(playerid, 3707, 2344.101, -2279.664, 20.031, 0.250);
	RemoveBuildingForPlayer(playerid, 3708, 2344.101, -2279.664, 20.031, 0.250);
	RemoveBuildingForPlayer(playerid, 5323, 2336.468, -2322.398, 21.046, 0.250);
	RemoveBuildingForPlayer(playerid, 1306, 2310.945, -2304.796, 19.148, 0.250);
	RemoveBuildingForPlayer(playerid, 1412, 2300.070, -2301.609, 13.773, 0.250);
	RemoveBuildingForPlayer(playerid, 1412, 2296.312, -2297.898, 13.773, 0.250);
	RemoveBuildingForPlayer(playerid, 3578, 2375.000, -2300.414, 13.210, 0.250);

	//Banqye
	RemoveBuildingForPlayer(playerid, 717, 1703.9922, -1150.1484, 23.0938, 0.25);
	RemoveBuildingForPlayer(playerid, 717, 1721.2344, -1150.1484, 23.0938, 0.25);
	RemoveBuildingForPlayer(playerid, 717, 1738.7813, -1150.1484, 23.0938, 0.25);

	// mINERIE
	RemoveBuildingForPlayer(playerid, 3338, -113.4063, -1235.7266, 1.5000, 0.25);
	RemoveBuildingForPlayer(playerid, 3244, -113.4063, -1235.7266, 1.5000, 0.25);
	RemoveBuildingForPlayer(playerid, 17066, -86.8750, -1207.2422, 1.6875, 0.25);

	// Gas pumps
	RemoveBuildingForPlayer(playerid, 1676, 1941.6563, -1767.2891, 14.1406, 6000.00);
	RemoveBuildingForPlayer(playerid, 3465, 2120.8203, 914.7188, 11.2578, 6000.00);
	RemoveBuildingForPlayer(playerid, 1686, -1610.6172, -2721.0000, 47.9297, 6000.00);

	// Sprunk machines
	RemoveBuildingForPlayer(playerid, 1302, 0.0, 0.0, 0.0, 6000.0);
	RemoveBuildingForPlayer(playerid, 1209, 0.0, 0.0, 0.0, 6000.0);
	RemoveBuildingForPlayer(playerid, 955, 0.0, 0.0, 0.0, 6000.0);
	RemoveBuildingForPlayer(playerid, 956, 0.0, 0.0, 0.0, 6000.0);
	RemoveBuildingForPlayer(playerid, 1775, 0.0, 0.0, 0.0, 6000.0);
	RemoveBuildingForPlayer(playerid, 1776, 0.0, 0.0, 0.0, 6000.0);
	RemoveBuildingForPlayer(playerid, 1977, 0.0, 0.0, 0.0, 6000.0);

	// Fire station
	RemoveBuildingForPlayer(playerid, 717, 1703.9922, -1150.1484, 23.0938, 0.25);
	RemoveBuildingForPlayer(playerid, 717, 1721.2344, -1150.1484, 23.0938, 0.25);
	RemoveBuildingForPlayer(playerid, 1300, 1715.4922, -1037.9766, 23.2656, 0.25);
	RemoveBuildingForPlayer(playerid, 1294, 1734.9531, -1156.9922, 27.3516, 0.25);
	RemoveBuildingForPlayer(playerid, 717, 1738.7813, -1150.1484, 23.0938, 0.25);
	RemoveBuildingForPlayer(playerid, 1227, 1789.7734, -1116.0625, 23.8906, 0.25);
	RemoveBuildingForPlayer(playerid, 1227, 1789.9063, -1112.6406, 23.8906, 0.25);
	RemoveBuildingForPlayer(playerid, 717, 1726.0000, -1064.8828, 23.1563, 0.25);
	RemoveBuildingForPlayer(playerid, 4640, 1728.7891, -1065.0938, 24.5000, 0.25);
	RemoveBuildingForPlayer(playerid, 1300, 1730.6328, -1033.6719, 23.2656, 0.25);
	RemoveBuildingForPlayer(playerid, 4598, 1737.2031, -1052.8203, 23.3359, 0.25);
	RemoveBuildingForPlayer(playerid, 4599, 1738.1875, -1044.9922, 22.9844, 0.25);
	RemoveBuildingForPlayer(playerid, 1300, 1747.8594, -1063.2969, 23.2656, 0.25);
	RemoveBuildingForPlayer(playerid, 717, 1758.3828, -1066.3594, 23.1797, 0.25);
	RemoveBuildingForPlayer(playerid, 1300, 1758.0781, -1064.5547, 23.2656, 0.25);
	RemoveBuildingForPlayer(playerid, 717, 1765.1563, -1042.5234, 23.1797, 0.25);
	RemoveBuildingForPlayer(playerid, 1300, 1764.8594, -1040.7188, 23.2656, 0.25);
	RemoveBuildingForPlayer(playerid, 4641, 1788.5391, -1026.3516, 24.5000, 0.25);

	//MAPPING LOGAN
	RemoveBuildingForPlayer(playerid, 3654, 2506.9766, -1991.7813, 14.7422, 0.25);
	RemoveBuildingForPlayer(playerid, 3647, 2485.1094, -2027.0781, 15.2422, 0.25);
	RemoveBuildingForPlayer(playerid, 3591, 2465.2891, -1991.8359, 15.0859, 0.25);
	RemoveBuildingForPlayer(playerid, 3654, 2439.1953, -2027.4297, 14.7422, 0.25);
	RemoveBuildingForPlayer(playerid, 708, 2536.2031, -2003.7656, 12.5547, 0.25);
	RemoveBuildingForPlayer(playerid, 3706, 2466.6172, -2027.3672, 14.9609, 0.25);
	RemoveBuildingForPlayer(playerid, 3706, 2509.1172, -2027.6250, 15.0469, 0.25);
	RemoveBuildingForPlayer(playerid, 3654, 2528.2969, -2022.7656, 14.9141, 0.25);
	RemoveBuildingForPlayer(playerid, 3591, 2527.2422, -1995.6641, 15.1797, 0.25);
	RemoveBuildingForPlayer(playerid, 1407, 2423.7891, -2031.5391, 13.1563, 0.25);
	RemoveBuildingForPlayer(playerid, 3649, 2439.1953, -2027.4297, 14.7422, 0.25);
	RemoveBuildingForPlayer(playerid, 1407, 2423.7891, -2026.8125, 13.1563, 0.25);
	RemoveBuildingForPlayer(playerid, 1468, 2455.7031, -2028.0859, 13.8203, 0.25);
	RemoveBuildingForPlayer(playerid, 3646, 2466.6172, -2027.3672, 14.9609, 0.25);
	RemoveBuildingForPlayer(playerid, 1226, 2425.8281, -2013.8516, 16.2656, 0.25);
	RemoveBuildingForPlayer(playerid, 1407, 2426.1016, -2019.7344, 13.1563, 0.25);
	RemoveBuildingForPlayer(playerid, 1407, 2430.7813, -2019.7344, 13.1563, 0.25);
	RemoveBuildingForPlayer(playerid, 1407, 2423.7891, -2022.0859, 13.1563, 0.25);
	RemoveBuildingForPlayer(playerid, 1407, 2446.3281, -2019.7344, 13.1563, 0.25);
	RemoveBuildingForPlayer(playerid, 1407, 2448.5781, -2022.2188, 13.1563, 0.25);
	RemoveBuildingForPlayer(playerid, 1468, 2455.7031, -2022.8125, 13.8203, 0.25);
	RemoveBuildingForPlayer(playerid, 1468, 2458.3906, -2020.1797, 13.8203, 0.25);
	RemoveBuildingForPlayer(playerid, 1468, 2475.6406, -2022.8125, 13.8203, 0.25);
	RemoveBuildingForPlayer(playerid, 1468, 2472.9453, -2020.2813, 13.7656, 0.25);
	RemoveBuildingForPlayer(playerid, 1468, 2478.3047, -2020.2813, 13.7656, 0.25);
	RemoveBuildingForPlayer(playerid, 1468, 2456.0547, -1995.1406, 13.8203, 0.25);
	RemoveBuildingForPlayer(playerid, 1468, 2458.6172, -1998.6406, 13.8203, 0.25);
	RemoveBuildingForPlayer(playerid, 3590, 2465.2891, -1991.8359, 15.0859, 0.25);
	RemoveBuildingForPlayer(playerid, 1468, 2468.6094, -1999.7266, 13.8203, 0.25);
	RemoveBuildingForPlayer(playerid, 1468, 2471.2109, -1997.0703, 13.8203, 0.25);
	RemoveBuildingForPlayer(playerid, 1446, 2479.5156, -1999.6172, 13.1563, 0.25);
	RemoveBuildingForPlayer(playerid, 1446, 2477.2188, -1997.2813, 13.1563, 0.25);
	RemoveBuildingForPlayer(playerid, 5150, 2482.7031, -2010.9688, 23.6016, 0.25);
	RemoveBuildingForPlayer(playerid, 1535, 2482.6484, -1994.9609, 12.9141, 0.25);
	RemoveBuildingForPlayer(playerid, 3648, 2485.1094, -2027.0781, 15.2422, 0.25);
	RemoveBuildingForPlayer(playerid, 620, 2500.9531, -2025.3672, 9.6719, 0.25);
	RemoveBuildingForPlayer(playerid, 3646, 2509.1172, -2027.6250, 15.0469, 0.25);
	RemoveBuildingForPlayer(playerid, 1468, 2491.6953, -2020.2813, 13.7656, 0.25);
	RemoveBuildingForPlayer(playerid, 1468, 2494.3516, -2022.8750, 13.7656, 0.25);
	RemoveBuildingForPlayer(playerid, 1468, 2516.0313, -2020.5156, 13.8203, 0.25);
	RemoveBuildingForPlayer(playerid, 1446, 2503.0391, -2019.7188, 13.1563, 0.25);
	RemoveBuildingForPlayer(playerid, 1446, 2500.6172, -2021.9531, 13.1563, 0.25);
	RemoveBuildingForPlayer(playerid, 1446, 2490.4609, -1999.6172, 13.1563, 0.25);
	RemoveBuildingForPlayer(playerid, 1446, 2492.7656, -1997.2891, 13.1563, 0.25);
	RemoveBuildingForPlayer(playerid, 1446, 2492.7656, -1992.6797, 13.1563, 0.25);
	RemoveBuildingForPlayer(playerid, 1407, 2497.7578, -1997.3984, 13.2891, 0.25);
	RemoveBuildingForPlayer(playerid, 671, 2498.7344, -1993.1484, 12.4844, 0.25);
	RemoveBuildingForPlayer(playerid, 3649, 2506.9766, -1991.7813, 14.7422, 0.25);
	RemoveBuildingForPlayer(playerid, 1407, 2500.0859, -1999.6484, 13.2891, 0.25);
	RemoveBuildingForPlayer(playerid, 1407, 2512.9922, -1999.6484, 13.2891, 0.25);
	RemoveBuildingForPlayer(playerid, 1407, 2515.3984, -1997.3516, 13.2891, 0.25);
	RemoveBuildingForPlayer(playerid, 1468, 2520.0469, -2023.5313, 13.8203, 0.25);
	RemoveBuildingForPlayer(playerid, 3649, 2528.2969, -2022.7656, 14.9141, 0.25);
	RemoveBuildingForPlayer(playerid, 1468, 2517.6797, -1993.8438, 13.8203, 0.25);
	RemoveBuildingForPlayer(playerid, 3590, 2527.2422, -1995.6641, 15.1797, 0.25);
	RemoveBuildingForPlayer(playerid, 1468, 2456.0547, -1989.8594, 13.8203, 0.25);
	RemoveBuildingForPlayer(playerid, 1468, 2456.0547, -1984.5859, 13.8203, 0.25);
	RemoveBuildingForPlayer(playerid, 5341, 2489.5156, -1987.4219, 14.9453, 0.25);

	//MAPPING BAHAMAS
	RemoveBuildingForPlayer(playerid, 620, 2094.6875, -1693.0547, 10.8047, 0.25);
	RemoveBuildingForPlayer(playerid, 620, 2094.6875, -1667.6953, 10.8047, 0.25);

	//MAPPING EL CORONA
	RemoveBuildingForPlayer(playerid, 3625, 1941.9844, -1970.7031, 14.9844, 0.25);

	//MAPPING GARAGE EL-CORONA
	RemoveBuildingForPlayer(playerid, 5337, 1995.437, -2066.148, 18.531, 0.250);
	RemoveBuildingForPlayer(playerid, 1306, 2001.023, -2024.289, 19.750, 0.250);

	CancelSelectTextDraw(playerid);

	GetPlayerIp(playerid, PlayerData[playerid][pIP], 16);
	GetPlayerName(playerid, PlayerData[playerid][pUsername], MAX_PLAYER_NAME + 1);

	ResetStatistics(playerid);
	CreateTextDraws(playerid);

	//SQL_CheckAccount(playerid);
	return 1;
}

forward SQL_setConnection(playerid, status);
public SQL_setConnection(playerid, status)
{
	new
	    query[150];

 	format(query, sizeof(query), "UPDATE `characters` SET `Connected` = %d WHERE `Username` = '%s'", status, ReturnName(playerid));
	mysql_function_query(g_iHandle, query, false, "", "");
	return 1;
}

forward AccountCheck(playerid);
public AccountCheck(playerid)
{
    SetPlayerVirtualWorld(playerid, VW_LOGIN+playerid);
	random_ViewConnection(playerid);
	SQL_CheckAccount(playerid);
	return 1;
}


/* INSCRIPTION / CONNEXION */
forward SQL_CheckAccount(playerid);
public SQL_CheckAccount(playerid)
{
	static
		str[128];

	format(str, sizeof(str), "SELECT * FROM `blacklist` WHERE `Username` = '%s' OR `IP` = '%s'", ReturnName(playerid), PlayerData[playerid][pIP]);
	mysql_function_query(g_iHandle, str, true, "SQL_CheckBan", "d", playerid);
}
forward SQL_CheckBan(extraid);
public SQL_CheckBan(extraid)
{
	new
		reason[128],
		date[36],
		username[24],
		add_ip[16],
		administrateur[MAX_PLAYER_NAME +1],
		expireDate,
		rows,
		fields;

	cache_get_data(rows, fields, g_iHandle);

	if (rows)
	{
	    expireDate = cache_get_field_int(0, "ExpireDate");
		cache_get_field_content(0, "Username", username, g_iHandle, 24);
		cache_get_field_content(0, "IP", add_ip, g_iHandle, 24);
		cache_get_field_content(0, "Date", date, g_iHandle, 36);
		cache_get_field_content(0, "Reason", reason, g_iHandle, 128);
		cache_get_field_content(0, "BannedBy", administrateur, g_iHandle, MAX_PLAYER_NAME+1);

		if(expireDate == -1)
		{ // Bannissement définitif
			if (!strcmp(username, "Non inscrit", true) || !username[0])
			{
				Dialog_Show(extraid, ShowOnly, DIALOG_STYLE_MSGBOX, "Informations", "Votre IP est banni du serveur.\n\nIP: %s\nDate: %s\nAdministrateur: %s\nDate d'expiration: Jamais\nRaison: %s\n\nPoster une demande de debannissement sur notre forum: lsmemories.net", "X", "", PlayerData[extraid][pIP], date, administrateur, reason);
				KickEx(extraid);
			}
			else
			{
				Dialog_Show(extraid, ShowOnly, DIALOG_STYLE_MSGBOX, "Informations", "Vous êtes banni du serveur.\n\nPseudo: %s\nDate: %s\nAdministrateur: %s\nDate d'expiration: Jamais\nRaison: %s\n\nPoster une demande de debannissement sur notre forum: lsmemories.net", "X", "", PlayerData[extraid][pUsername], date, administrateur, reason);
				KickEx(extraid);
			}
		}
		else
		{ // Bannissement temporaire
		    if(expireDate < gettime())
		    { // Ban temporaire expiré, on le supprime
				static
					query[128];

				format(query, sizeof(query), "DELETE FROM blacklist WHERE `Username` = '%s' OR `IP` = '%s'", username, add_ip);
				mysql_function_query(g_iHandle, query, false, "", "");
				
				SQL_CheckAccount(extraid);
			}
			else
			{ // Ban temporaire non-expiré
			    new
			        formatDate[6],
					stringDate[25];
			        
			    TimestampToDate(expireDate, formatDate[0], formatDate[1], formatDate[2], formatDate[3], formatDate[4], formatDate[5], 0);
			    format(stringDate, sizeof(stringDate), "Le %02d/%02d/%02d à %02dh%02d", formatDate[2], formatDate[1], formatDate[0], formatDate[3], formatDate[4]);
				if (!strcmp(username, "Non inscrit", true) || !username[0])
				{
					Dialog_Show(extraid, ShowOnly, DIALOG_STYLE_MSGBOX, "Informations", "Votre IP est banni du serveur.\n\nIP: %s\nDate: %s\nAdministrateur: %s\nDate d'expiration: %s\nRaison: %s\n\nPoster une demande de debannissement sur notre forum: lsmemories.net", "X", "", PlayerData[extraid][pIP], date, administrateur, stringDate, reason);
					KickEx(extraid);
				}
				else
				{
					Dialog_Show(extraid, ShowOnly, DIALOG_STYLE_MSGBOX, "Informations", "Vous êtes banni du serveur.\n\nPseudo: %s\nDate: %s\nAdministrateur: %s\nDate d'expiration: %s\nRaison: %s\n\nPoster une demande de debannissement sur notre forum: lsmemories.net", "X", "", PlayerData[extraid][pUsername], date, administrateur, stringDate, reason);
					KickEx(extraid);
				}
			}
		}
	}
	else
	{
		static
			query[128];

		format(query, sizeof(query), "SELECT `LoginDate` FROM `characters` WHERE `Username` = '%s'", ReturnName(extraid));
		mysql_function_query(g_iHandle, query, true, "SQL_CheckLogin", "d", extraid);
	}
}

stock random_ViewConnection(playerid)
{
	switch(random(5))
	{
		case 0:
		{
			InterpolateCameraPos(playerid, 2336.388427, -2137.777099, 70.212532, 2782.936767, -2151.058593, 51.020446, 15000);
			InterpolateCameraLookAt(playerid, 2339.507568, -2141.619384, 69.500122, 2782.982666, -2156.026855, 50.460586, 15000);
		}
		case 1:
		{
			InterpolateCameraPos(playerid, 772.440795, -1901.145263, 65.286148, 1129.806152, -1824.774291, 65.286148, 18000);
			InterpolateCameraLookAt(playerid, 770.764892, -1896.436157, 65.162628, 1129.662109, -1819.780761, 65.077224, 18000);
		}
		case 2:
		{
			InterpolateCameraPos(playerid, 1027.668701, -900.544311, 121.795478, 1403.960937, -937.054565, 108.182052, 18000);
			InterpolateCameraLookAt(playerid, 1030.271850, -896.332458, 121.099990, 1404.034667, -932.119018, 107.385169, 18000);
		}
		case 3:
		{
			InterpolateCameraPos(playerid, 1995.980346, -1612.179809, 61.537555, 2003.120483, -1777.303100, 53.130290, 19000);
			InterpolateCameraLookAt(playerid, 2000.820312, -1612.091796, 60.285877, 2007.567016, -1779.148193, 51.779605, 19000);
		}
		case 4:
		{
			InterpolateCameraPos(playerid, 2737.919921, -1509.638061, 113.218658, 2611.173339, -1603.505004, 95.660179, 15000);
			InterpolateCameraLookAt(playerid, 2735.528076, -1505.363037, 112.216697, 2606.644042, -1601.682373, 94.581329, 15000);
		}
	}
}

forward SQL_CheckLogin(extraid);
public SQL_CheckLogin(extraid)
{
	static
	    rows,
		fields;

	cache_get_data(rows, fields, g_iHandle);

    random_ViewConnection(extraid);
    
	StopAudioStreamForPlayer(extraid);
	
	switch(random(2))
	{
	    case 0: PlayAudioStreamForPlayer(extraid, "http://k003.kiwi6.com/hotlink/3zy3t1aa1g/welcome.mp3");
	    case 1: PlayAudioStreamForPlayer(extraid, "http://k003.kiwi6.com/hotlink/lp1h5gnd3c/welcome.mp3");
	}
	
    ClearChat(extraid, 20);
	if (rows)
	{
		static
		loginDate[36];

		cache_get_row(0, 0, loginDate, g_iHandle);

		format(PlayerData[extraid][pLoginDate], 36, loginDate);
		Dialog_Show(extraid, LoginScreen, DIALOG_STYLE_PASSWORD, "{FAA13C}Connexion au serveur", "{FFFFFF}Bienvenue sur {7ea0da}"SERVER_URL"{FFFFFF}!\n\nVotre dernière connexion date du: %s.\n\nEntrer votre {de3838}mot de passe{FFFFFF} ci-dessous pour vous connecter à votre compte:", "Connexion", "X", PlayerData[extraid][pLoginDate]);
	}
	else
	{
	    if(developpementEnabled == true) Kick(extraid);
	    if(IsValidRoleplayName(ReturnName(extraid)))
		{
			TextDrawHideForPlayer(extraid, Textdraw0);
			TextDrawHideForPlayer(extraid, Textdraw1);
			TextDrawHideForPlayer(extraid, Textdraw2);
			TextDrawHideForPlayer(extraid, Textdraw3);
			TextDrawHideForPlayer(extraid, Textdraw4);
		
		    Register_Start(extraid, 0);
	        
			new
			    string[550];

			format(string, sizeof(string), "Bienvenue sur {7EA0DA}%s, {D4D4D4}%s{A9C4E4}.\nVotre compte n'est pas encore inscrit.\n\nVous allez devoir répondre à un questionnaire roleplay pour\npour débuter votre inscription.\n\nN'hésitez pas à allez voir les règles du serveur sur: {FFFFFF}https://lsmemories.net/", SERVER_URL, ReturnName(extraid));
			Dialog_Show(extraid, DIALOG_NULLED_REGISTER, DIALOG_STYLE_MSGBOX, "Inscription sur {7EA0DA}LSMemories.net", string, "Chargement", "");
		}
		else
		{
		    SendClientMessage(extraid, -1, "Vous devez utiliser un nom roleplay. Exemple: Albert_Prater");
		    KickEx(extraid);
		}
	}
}

Dialog:DIALOG_NULLED_REGISTER(playerid, response, listitem, inputtext[])
{
	new
	    string[550];
	    
	format(string, sizeof(string), "Bienvenue sur {7EA0DA}%s, {D4D4D4}%s{A9C4E4}.\nVotre compte n'est pas encore inscrit.\n\nVous allez devoir répondre à un questionnaire roleplay pour\npour débuter votre inscription.\n\nN'hésitez pas à allez voir les règles du serveur sur: {FFFFFF}https://lsmemories.net/", SERVER_URL, ReturnName(playerid));
	Dialog_Show(playerid, DIALOG_NULLED_REGISTER, DIALOG_STYLE_MSGBOX, "Inscription sur {7EA0DA}LSMemories.net", string, "Chargement", "");
	return 1;
}

forward Register_Start(playerid, step);
public Register_Start(playerid, step)
{
	switch(step)
	{
		case 0:
		{
			ClearChat(playerid, 32);

			SetPlayerInterior(playerid, 12);
			//SetPlayerPos(playerid, 451.5724, 514.4718, 1002.1327);

			TogglePlayerSpectating(playerid, 1);

			InterpolateCameraPos(playerid, 451.5724, 514.4718, 1002.1327, 451.5724, 514.4718, 1002.1327, 1000, CAMERA_CUT);
			InterpolateCameraLookAt(playerid, 452.4713, 514.9079, 1002.0330, 452.4713, 514.9079, 1002.0330, 1000, CAMERA_CUT);

		    SetTimerEx("Register_Start", 7000, false, "ii", playerid, 1);
		}
		case 1:
		{
			InterpolateCameraPos(playerid, 451.5724, 514.4718, 1002.1327, 447.841735, 512.579833, 1001.474975, 4000, CAMERA_CUT);
			InterpolateCameraLookAt(playerid, 452.4713, 514.9079, 1002.0330, 444.486022, 516.268371, 1001.840637, 4000, CAMERA_CUT);
			//timer_Intro[playerid][0] = SetTimerEx("ShowPlayerOptionsTextDraws", 4000, 0, "i", playerid);

		    SetTimerEx("Register_Start", 10000, false, "ii", playerid, 2);
		}
		case 2:
		{
		    Dialog_Close(playerid);
		    
			new
				query[200];

		    format(query, sizeof(query), "SELECT * FROM `registerQuestion` ORDER BY rand() LIMIT %d", MAX_QUESTIONS_RP);
		    mysql_function_query(g_iHandle, query, true, "QuestionsRP_Load", "d", playerid);
		}
		case 3:
		{
		    for(new i=0; i != 9; i++)
		        TextDrawHideForPlayer(playerid, TDEditor_INTRO[i]);

		    for(new i=0; i != 3; i++)
		        PlayerTextDrawHide(playerid, TDEditor_PINTRO[playerid][i]);

		    InterpolateCameraPos(playerid, 447.841735, 512.579833, 1001.474975, 446.1460, 508.4398, 1001.6757, 4000, CAMERA_CUT);
			InterpolateCameraLookAt(playerid, 444.486022, 516.268371, 1001.840637, 446.0948, 507.4430, 1004.7795, 4000, CAMERA_CUT);

			timer_Intro[playerid][1] = SetTimerEx("PlayerIntroCallback", 4000, 0, "id", playerid, 0);
			SetTimerEx("Register_Start", 10000, false, "ii", playerid, 4);
		}
		case 4:
		{

			ResetRegisterData(playerid);
			ShowRegisterTextdraws(playerid);

			ClearChat(playerid, 50);
			SelectTextDraw(playerid, 0x808080FF);
		}
		
		
		// UNE FOIS SPAWN ON CACHE ET FAIT APPARAITRE L'ECRAN AVEC "Bienvenu sur LSMEMORIES"
		case 5:
		{
            FadeIn(playerid, 1);
			SetTimerEx("Register_Start", 2000, false, "ii", playerid, 6);
		}
		case 6:
		{
		    FadeOut(playerid, 1);
		}
	}
	

}

/*
	FadeIn(playerid, 0); // Cache écran
	FadeIn(playerid, 1); // Cache écran avec "Bienvenu sur LSMemorie..."
	FadeOut(playerid, 0); // Affiche écran
	FadeOut(playerid, 1); // Affiche écran avec "Bienvenu sur LSMemories..."
*/

forward ShowPlayerOptionsTextDraws(playerid);
public ShowPlayerOptionsTextDraws(playerid)
{
    for(new i=0; i != 9; i++)
        TextDrawHideForPlayer(playerid, TDEditor_INTRO[i]);

    for(new i=0; i != 3; i++)
        PlayerTextDrawHide(playerid, TDEditor_PINTRO[playerid][i]);
        
	return 1;
}

forward PlayerIntroCallback(playerid, type);
public PlayerIntroCallback(playerid, type)
{
    switch(type)
    {
        case 0:
        {
            ScreenStatus[playerid] = 0;
            FadeIn(playerid, 0);
            
            timer_Intro[playerid][1] = SetTimerEx("PlayerIntroCallback", 500, 0, "id", playerid, 1);
        }
        case 1:
        {
            SetPlayerInterior(playerid, 0);
            SetPlayerVirtualWorld(playerid, 1);

            SetPlayerCameraPos(playerid, 0.789825, -16.211435, 3001.437255);
            SetPlayerCameraLookAt(playerid, 0.559437, -15.249842, 3001.288085);

            timer_Intro[playerid][1] = SetTimerEx("PlayerIntroCallback", 5000, 0, "id", playerid, 2);
        }
        case 2:
        {
            ScreenStatus [ playerid ] = 14;
            FadeOut(playerid, 0);
        }
    }
    return 1;
}

forward FadeOut(playerid, tip);
public FadeOut(playerid, tip)
{
    switch(ScreenStatus[playerid])
    {
        case 1:
        {
            if(tip)
            {
                PlayerTextDrawColor( playerid, TDEditor_LOGO[playerid][0], RGBAToHex(176, 0, 176, 238) );
                PlayerTextDrawColor( playerid, TDEditor_LOGO[playerid][1], RGBAToHex(176, 0, 255, 238) );
                PlayerTextDrawColor( playerid, TDEditor_LOGO[playerid][2], RGBAToHex(176, 0, 161, 238) );
                PlayerTextDrawShow( playerid, TDEditor_LOGO[playerid][0] );
                PlayerTextDrawShow( playerid, TDEditor_LOGO[playerid][1] );
                PlayerTextDrawShow( playerid, TDEditor_LOGO[playerid][2] );
            }
            PlayerTextDrawBoxColor( playerid, TDEditor_BACKGROUND[playerid], 0x000000EE );
        }
        case 2:
        {
            if(tip)
            {
                PlayerTextDrawColor( playerid, TDEditor_LOGO[playerid][0], RGBAToHex(176, 0, 176, 221) );
                PlayerTextDrawColor( playerid, TDEditor_LOGO[playerid][1], RGBAToHex(176, 0, 255, 221) );
                PlayerTextDrawColor( playerid, TDEditor_LOGO[playerid][2], RGBAToHex(176, 0, 161, 221) );
                PlayerTextDrawShow( playerid, TDEditor_LOGO[playerid][0] );
                PlayerTextDrawShow( playerid, TDEditor_LOGO[playerid][1] );
                PlayerTextDrawShow( playerid, TDEditor_LOGO[playerid][2] );
            }
            PlayerTextDrawBoxColor( playerid, TDEditor_BACKGROUND[playerid], 0x000000DD );
        }
        case 3:
        {
            if(tip)
            {
                PlayerTextDrawColor( playerid, TDEditor_LOGO[playerid][0], RGBAToHex(176, 0, 176, 204) );
                PlayerTextDrawColor( playerid, TDEditor_LOGO[playerid][1], RGBAToHex(176, 0, 255, 204) );
                PlayerTextDrawColor( playerid, TDEditor_LOGO[playerid][2], RGBAToHex(176, 0, 161, 204) );
                PlayerTextDrawShow( playerid, TDEditor_LOGO[playerid][0] );
                PlayerTextDrawShow( playerid, TDEditor_LOGO[playerid][1] );
                PlayerTextDrawShow( playerid, TDEditor_LOGO[playerid][2] );
            }
            PlayerTextDrawBoxColor( playerid, TDEditor_BACKGROUND[playerid], 0x000000CC );
        }
        case 4:
        {
            if(tip)
            {
                PlayerTextDrawColor( playerid, TDEditor_LOGO[playerid][0], RGBAToHex(176, 0, 176, 187) );
                PlayerTextDrawColor( playerid, TDEditor_LOGO[playerid][1], RGBAToHex(176, 0, 255, 187) );
                PlayerTextDrawColor( playerid, TDEditor_LOGO[playerid][2], RGBAToHex(176, 0, 161, 187) );
                PlayerTextDrawShow( playerid, TDEditor_LOGO[playerid][0] );
                PlayerTextDrawShow( playerid, TDEditor_LOGO[playerid][1] );
                PlayerTextDrawShow( playerid, TDEditor_LOGO[playerid][2] );
            }
            PlayerTextDrawBoxColor( playerid, TDEditor_BACKGROUND[playerid], 0x000000BB );
        }
        case 5:
        {
            if(tip)
            {
                PlayerTextDrawColor( playerid, TDEditor_LOGO[playerid][0], RGBAToHex(176, 0, 176, 170) );
                PlayerTextDrawColor( playerid, TDEditor_LOGO[playerid][1], RGBAToHex(176, 0, 255, 170) );
                PlayerTextDrawColor( playerid, TDEditor_LOGO[playerid][2], RGBAToHex(176, 0, 161, 170) );
                PlayerTextDrawShow( playerid, TDEditor_LOGO[playerid][0] );
                PlayerTextDrawShow( playerid, TDEditor_LOGO[playerid][1] );
                PlayerTextDrawShow( playerid, TDEditor_LOGO[playerid][2] );
            }
            PlayerTextDrawBoxColor( playerid, TDEditor_BACKGROUND[playerid], 0x000000AA );
        }
        case 6:
        {
            if(tip)
            {
                PlayerTextDrawColor( playerid, TDEditor_LOGO[playerid][0], RGBAToHex(176, 0, 176, 153) );
                PlayerTextDrawColor( playerid, TDEditor_LOGO[playerid][1], RGBAToHex(176, 0, 255, 153) );
                PlayerTextDrawColor( playerid, TDEditor_LOGO[playerid][2], RGBAToHex(176, 0, 161, 153) );
                PlayerTextDrawShow( playerid, TDEditor_LOGO[playerid][0] );
                PlayerTextDrawShow( playerid, TDEditor_LOGO[playerid][1] );
                PlayerTextDrawShow( playerid, TDEditor_LOGO[playerid][2] );
            }
            PlayerTextDrawBoxColor( playerid, TDEditor_BACKGROUND[playerid], 0x00000099 );
        }
        case 7:
        {
            if(tip)
            {
                PlayerTextDrawColor( playerid, TDEditor_LOGO[playerid][0], RGBAToHex(176, 0, 176, 136) );
                PlayerTextDrawColor( playerid, TDEditor_LOGO[playerid][1], RGBAToHex(176, 0, 255, 136) );
                PlayerTextDrawColor( playerid, TDEditor_LOGO[playerid][2], RGBAToHex(176, 0, 161, 136) );
                PlayerTextDrawShow( playerid, TDEditor_LOGO[playerid][0] );
                PlayerTextDrawShow( playerid, TDEditor_LOGO[playerid][1] );
                PlayerTextDrawShow( playerid, TDEditor_LOGO[playerid][2] );
            }
            PlayerTextDrawBoxColor( playerid, TDEditor_BACKGROUND[playerid], 0x00000088 );
        }
        case 8:
        {
            if(tip)
            {
                PlayerTextDrawColor( playerid, TDEditor_LOGO[playerid][0], RGBAToHex(176, 0, 176, 119) );
                PlayerTextDrawColor( playerid, TDEditor_LOGO[playerid][1], RGBAToHex(176, 0, 255, 119) );
                PlayerTextDrawColor( playerid, TDEditor_LOGO[playerid][2], RGBAToHex(176, 0, 161, 119) );
                PlayerTextDrawShow( playerid, TDEditor_LOGO[playerid][0] );
                PlayerTextDrawShow( playerid, TDEditor_LOGO[playerid][1] );
                PlayerTextDrawShow( playerid, TDEditor_LOGO[playerid][2] );
            }
            PlayerTextDrawBoxColor( playerid, TDEditor_BACKGROUND[playerid], 0x00000077 );
        }
        case 9:
        {
            if(tip)
            {
                PlayerTextDrawColor( playerid, TDEditor_LOGO[playerid][0], RGBAToHex(176, 0, 176, 102) );
                PlayerTextDrawColor( playerid, TDEditor_LOGO[playerid][1], RGBAToHex(176, 0, 255, 102) );
                PlayerTextDrawColor( playerid, TDEditor_LOGO[playerid][2], RGBAToHex(176, 0, 161, 102) );
                PlayerTextDrawShow( playerid, TDEditor_LOGO[playerid][0] );
                PlayerTextDrawShow( playerid, TDEditor_LOGO[playerid][1] );
                PlayerTextDrawShow( playerid, TDEditor_LOGO[playerid][2] );
            }
            PlayerTextDrawBoxColor( playerid, TDEditor_BACKGROUND[playerid], 0x00000066 );
        }
        case 10:
        {
            if(tip)
            {
                PlayerTextDrawColor( playerid, TDEditor_LOGO[playerid][0], RGBAToHex(176, 0, 176, 85) );
                PlayerTextDrawColor( playerid, TDEditor_LOGO[playerid][1], RGBAToHex(176, 0, 255, 85) );
                PlayerTextDrawColor( playerid, TDEditor_LOGO[playerid][2], RGBAToHex(176, 0, 161, 85) );
                PlayerTextDrawShow( playerid, TDEditor_LOGO[playerid][0] );
                PlayerTextDrawShow( playerid, TDEditor_LOGO[playerid][1] );
                PlayerTextDrawShow( playerid, TDEditor_LOGO[playerid][2] );
            }
            PlayerTextDrawBoxColor( playerid, TDEditor_BACKGROUND[playerid], 0x00000055 );
        }
        case 11:
        {
            if(tip)
            {
                PlayerTextDrawColor( playerid, TDEditor_LOGO[playerid][0], RGBAToHex(176, 0, 176, 68) );
                PlayerTextDrawColor( playerid, TDEditor_LOGO[playerid][1], RGBAToHex(176, 0, 255, 68) );
                PlayerTextDrawColor( playerid, TDEditor_LOGO[playerid][2], RGBAToHex(176, 0, 161, 68) );
                PlayerTextDrawShow( playerid, TDEditor_LOGO[playerid][0] );
                PlayerTextDrawShow( playerid, TDEditor_LOGO[playerid][1] );
                PlayerTextDrawShow( playerid, TDEditor_LOGO[playerid][2] );
            }
            PlayerTextDrawBoxColor( playerid, TDEditor_BACKGROUND[playerid], 0x00000044 );
        }
        case 12:
        {
            if(tip)
            {
                PlayerTextDrawColor( playerid, TDEditor_LOGO[playerid][0], RGBAToHex(176, 0, 176, 51) );
                PlayerTextDrawColor( playerid, TDEditor_LOGO[playerid][1], RGBAToHex(176, 0, 255, 51) );
                PlayerTextDrawColor( playerid, TDEditor_LOGO[playerid][2], RGBAToHex(176, 0, 161, 51) );
                PlayerTextDrawShow( playerid, TDEditor_LOGO[playerid][0] );
                PlayerTextDrawShow( playerid, TDEditor_LOGO[playerid][1] );
                PlayerTextDrawShow( playerid, TDEditor_LOGO[playerid][2] );
            }
            PlayerTextDrawBoxColor( playerid, TDEditor_BACKGROUND[playerid], 0x00000033 );
        }
        case 13:
        {
            if(tip)
            {
                PlayerTextDrawColor( playerid, TDEditor_LOGO[playerid][0], RGBAToHex(176, 0, 176, 34) );
                PlayerTextDrawColor( playerid, TDEditor_LOGO[playerid][1], RGBAToHex(176, 0, 255, 34) );
                PlayerTextDrawColor( playerid, TDEditor_LOGO[playerid][2], RGBAToHex(176, 0, 161, 34) );
                PlayerTextDrawShow( playerid, TDEditor_LOGO[playerid][0] );
                PlayerTextDrawShow( playerid, TDEditor_LOGO[playerid][1] );
                PlayerTextDrawShow( playerid, TDEditor_LOGO[playerid][2] );
            }
            PlayerTextDrawBoxColor( playerid, TDEditor_BACKGROUND[playerid], 0x00000022 );
        }
        case 14:
        {
            if(tip)
            {
                PlayerTextDrawColor( playerid, TDEditor_LOGO[playerid][0], RGBAToHex(176, 0, 176, 17) );
                PlayerTextDrawColor( playerid, TDEditor_LOGO[playerid][1], RGBAToHex(176, 0, 255, 17) );
                PlayerTextDrawColor( playerid, TDEditor_LOGO[playerid][2], RGBAToHex(176, 0, 161, 17) );
                PlayerTextDrawShow( playerid, TDEditor_LOGO[playerid][0] );
                PlayerTextDrawShow( playerid, TDEditor_LOGO[playerid][1] );
                PlayerTextDrawShow( playerid, TDEditor_LOGO[playerid][2] );
            }
            PlayerTextDrawBoxColor( playerid, TDEditor_BACKGROUND[playerid], 0x00000011 );
        }
        case 15:
        {
            if(tip)
            {
                PlayerTextDrawColor( playerid, TDEditor_LOGO[playerid][0], RGBAToHex(176, 0, 176, 00) );
                PlayerTextDrawColor( playerid, TDEditor_LOGO[playerid][1], RGBAToHex(176, 0, 255, 00) );
                PlayerTextDrawColor( playerid, TDEditor_LOGO[playerid][2], RGBAToHex(176, 0, 161, 00) );
                PlayerTextDrawHide( playerid, TDEditor_LOGO[playerid][0] );
                PlayerTextDrawHide( playerid, TDEditor_LOGO[playerid][1] );
                PlayerTextDrawHide( playerid, TDEditor_LOGO[playerid][2] );
            }
            PlayerTextDrawBoxColor( playerid, TDEditor_BACKGROUND[playerid], 0x00000000 );
            PlayerTextDrawHide( playerid, TDEditor_BACKGROUND[playerid] );
            ScreenStatus [ playerid ] = 0;
            return true;
        }
    }
    timer_Intro[playerid][2] = SetTimerEx("FadeOut", 50, 0, "id", playerid, tip);
    PlayerTextDrawShow( playerid, TDEditor_BACKGROUND[playerid] );
    return ScreenStatus [ playerid ] ++;
}

forward FadeIn(playerid, tip);
public FadeIn(playerid, tip)
{
    switch(ScreenStatus[playerid])
    {
        case 0:
        {
            if(tip)
            {
                PlayerTextDrawColor( playerid, TDEditor_LOGO[playerid][0], RGBAToHex(176, 0, 176, 255) );
                PlayerTextDrawColor( playerid, TDEditor_LOGO[playerid][1], RGBAToHex(176, 0, 255, 255) );
                PlayerTextDrawColor( playerid, TDEditor_LOGO[playerid][2], RGBAToHex(176, 0, 161, 255) );
                PlayerTextDrawShow( playerid, TDEditor_LOGO[playerid][0] );
                PlayerTextDrawShow( playerid, TDEditor_LOGO[playerid][1] );
                PlayerTextDrawShow( playerid, TDEditor_LOGO[playerid][2] );
            }
            PlayerTextDrawBoxColor( playerid, TDEditor_BACKGROUND[playerid], 0x000000FF );
            PlayerTextDrawShow( playerid, TDEditor_BACKGROUND[playerid] );
            return 1;
        }
        case 1:
        {
            if(tip)
            {
                PlayerTextDrawColor( playerid, TDEditor_LOGO[playerid][0], RGBAToHex(176, 0, 176, 238) );
                PlayerTextDrawColor( playerid, TDEditor_LOGO[playerid][1], RGBAToHex(176, 0, 255, 238) );
                PlayerTextDrawColor( playerid, TDEditor_LOGO[playerid][2], RGBAToHex(176, 0, 161, 238) );
                PlayerTextDrawShow( playerid, TDEditor_LOGO[playerid][0] );
                PlayerTextDrawShow( playerid, TDEditor_LOGO[playerid][1] );
                PlayerTextDrawShow( playerid, TDEditor_LOGO[playerid][2] );
            }
            PlayerTextDrawBoxColor( playerid, TDEditor_BACKGROUND[playerid], 0x000000EE );
        }
        case 2:
        {
            if(tip)
            {
                PlayerTextDrawColor( playerid, TDEditor_LOGO[playerid][0], RGBAToHex(176, 0, 176, 221) );
                PlayerTextDrawColor( playerid, TDEditor_LOGO[playerid][1], RGBAToHex(176, 0, 255, 221) );
                PlayerTextDrawColor( playerid, TDEditor_LOGO[playerid][2], RGBAToHex(176, 0, 161, 221) );
                PlayerTextDrawShow( playerid, TDEditor_LOGO[playerid][0] );
                PlayerTextDrawShow( playerid, TDEditor_LOGO[playerid][1] );
                PlayerTextDrawShow( playerid, TDEditor_LOGO[playerid][2] );
            }
            PlayerTextDrawBoxColor( playerid, TDEditor_BACKGROUND[playerid], 0x000000DD );
        }
        case 3:
        {
            if(tip)
            {
                PlayerTextDrawColor( playerid, TDEditor_LOGO[playerid][0], RGBAToHex(176, 0, 176, 204) );
                PlayerTextDrawColor( playerid, TDEditor_LOGO[playerid][1], RGBAToHex(176, 0, 255, 204) );
                PlayerTextDrawColor( playerid, TDEditor_LOGO[playerid][2], RGBAToHex(176, 0, 161, 204) );
                PlayerTextDrawShow( playerid, TDEditor_LOGO[playerid][0] );
                PlayerTextDrawShow( playerid, TDEditor_LOGO[playerid][1] );
                PlayerTextDrawShow( playerid, TDEditor_LOGO[playerid][2] );
            }
            PlayerTextDrawBoxColor( playerid, TDEditor_BACKGROUND[playerid], 0x000000CC );
        }
        case 4:
        {
            if(tip)
            {
                PlayerTextDrawColor( playerid, TDEditor_LOGO[playerid][0], RGBAToHex(176, 0, 176, 187) );
                PlayerTextDrawColor( playerid, TDEditor_LOGO[playerid][1], RGBAToHex(176, 0, 255, 187) );
                PlayerTextDrawColor( playerid, TDEditor_LOGO[playerid][2], RGBAToHex(176, 0, 161, 187) );
                PlayerTextDrawShow( playerid, TDEditor_LOGO[playerid][0] );
                PlayerTextDrawShow( playerid, TDEditor_LOGO[playerid][1] );
                PlayerTextDrawShow( playerid, TDEditor_LOGO[playerid][2] );
            }
            PlayerTextDrawBoxColor( playerid, TDEditor_BACKGROUND[playerid], 0x000000BB );
        }
        case 5:
        {
            if(tip)
            {
                PlayerTextDrawColor( playerid, TDEditor_LOGO[playerid][0], RGBAToHex(176, 0, 176, 170) );
                PlayerTextDrawColor( playerid, TDEditor_LOGO[playerid][1], RGBAToHex(176, 0, 255, 170) );
                PlayerTextDrawColor( playerid, TDEditor_LOGO[playerid][2], RGBAToHex(176, 0, 161, 170) );
                PlayerTextDrawShow( playerid, TDEditor_LOGO[playerid][0] );
                PlayerTextDrawShow( playerid, TDEditor_LOGO[playerid][1] );
                PlayerTextDrawShow( playerid, TDEditor_LOGO[playerid][2] );
            }
            PlayerTextDrawBoxColor( playerid, TDEditor_BACKGROUND[playerid], 0x000000AA );
        }
        case 6:
        {
            if(tip)
            {
                PlayerTextDrawColor( playerid, TDEditor_LOGO[playerid][0], RGBAToHex(176, 0, 176, 153) );
                PlayerTextDrawColor( playerid, TDEditor_LOGO[playerid][1], RGBAToHex(176, 0, 255, 153) );
                PlayerTextDrawColor( playerid, TDEditor_LOGO[playerid][2], RGBAToHex(176, 0, 161, 153) );
                PlayerTextDrawShow( playerid, TDEditor_LOGO[playerid][0] );
                PlayerTextDrawShow( playerid, TDEditor_LOGO[playerid][1] );
                PlayerTextDrawShow( playerid, TDEditor_LOGO[playerid][2] );
            }
            PlayerTextDrawBoxColor( playerid, TDEditor_BACKGROUND[playerid], 0x00000099 );
        }
        case 7:
        {
            if(tip)
            {
                PlayerTextDrawColor( playerid, TDEditor_LOGO[playerid][0], RGBAToHex(176, 0, 176, 136) );
                PlayerTextDrawColor( playerid, TDEditor_LOGO[playerid][1], RGBAToHex(176, 0, 255, 136) );
                PlayerTextDrawColor( playerid, TDEditor_LOGO[playerid][2], RGBAToHex(176, 0, 161, 136) );
                PlayerTextDrawShow( playerid, TDEditor_LOGO[playerid][0] );
                PlayerTextDrawShow( playerid, TDEditor_LOGO[playerid][1] );
                PlayerTextDrawShow( playerid, TDEditor_LOGO[playerid][2] );
            }
            PlayerTextDrawBoxColor( playerid, TDEditor_BACKGROUND[playerid], 0x00000088 );
        }
        case 8:
        {
            if(tip)
            {
                PlayerTextDrawColor( playerid, TDEditor_LOGO[playerid][0], RGBAToHex(176, 0, 176, 119) );
                PlayerTextDrawColor( playerid, TDEditor_LOGO[playerid][1], RGBAToHex(176, 0, 255, 119) );
                PlayerTextDrawColor( playerid, TDEditor_LOGO[playerid][2], RGBAToHex(176, 0, 161, 119) );
                PlayerTextDrawShow( playerid, TDEditor_LOGO[playerid][0] );
                PlayerTextDrawShow( playerid, TDEditor_LOGO[playerid][1] );
                PlayerTextDrawShow( playerid, TDEditor_LOGO[playerid][2] );
            }
            PlayerTextDrawBoxColor( playerid, TDEditor_BACKGROUND[playerid], 0x00000077 );
        }
        case 9:
        {
            if(tip)
            {
                PlayerTextDrawColor( playerid, TDEditor_LOGO[playerid][0], RGBAToHex(176, 0, 176, 102) );
                PlayerTextDrawColor( playerid, TDEditor_LOGO[playerid][1], RGBAToHex(176, 0, 255, 102) );
                PlayerTextDrawColor( playerid, TDEditor_LOGO[playerid][2], RGBAToHex(176, 0, 161, 102) );
                PlayerTextDrawShow( playerid, TDEditor_LOGO[playerid][0] );
                PlayerTextDrawShow( playerid, TDEditor_LOGO[playerid][1] );
                PlayerTextDrawShow( playerid, TDEditor_LOGO[playerid][2] );
            }
            PlayerTextDrawBoxColor( playerid, TDEditor_BACKGROUND[playerid], 0x00000066 );
        }
        case 10:
        {
            if(tip)
            {
                PlayerTextDrawColor( playerid, TDEditor_LOGO[playerid][0], RGBAToHex(176, 0, 176, 85) );
                PlayerTextDrawColor( playerid, TDEditor_LOGO[playerid][1], RGBAToHex(176, 0, 255, 85) );
                PlayerTextDrawColor( playerid, TDEditor_LOGO[playerid][2], RGBAToHex(176, 0, 161, 85) );
                PlayerTextDrawShow( playerid, TDEditor_LOGO[playerid][0] );
                PlayerTextDrawShow( playerid, TDEditor_LOGO[playerid][1] );
                PlayerTextDrawShow( playerid, TDEditor_LOGO[playerid][2] );
            }
            PlayerTextDrawBoxColor( playerid, TDEditor_BACKGROUND[playerid], 0x00000055 );
        }
        case 11:
        {
            if(tip)
            {
                PlayerTextDrawColor( playerid, TDEditor_LOGO[playerid][0], RGBAToHex(176, 0, 176, 68) );
                PlayerTextDrawColor( playerid, TDEditor_LOGO[playerid][1], RGBAToHex(176, 0, 255, 68) );
                PlayerTextDrawColor( playerid, TDEditor_LOGO[playerid][2], RGBAToHex(176, 0, 161, 68) );
                PlayerTextDrawShow( playerid, TDEditor_LOGO[playerid][0] );
                PlayerTextDrawShow( playerid, TDEditor_LOGO[playerid][1] );
                PlayerTextDrawShow( playerid, TDEditor_LOGO[playerid][2] );
            }
            PlayerTextDrawBoxColor( playerid, TDEditor_BACKGROUND[playerid], 0x00000044 );
        }
        case 12:
        {
            if(tip)
            {
                PlayerTextDrawColor( playerid, TDEditor_LOGO[playerid][0], RGBAToHex(176, 0, 176, 51) );
                PlayerTextDrawColor( playerid, TDEditor_LOGO[playerid][1], RGBAToHex(176, 0, 255, 51) );
                PlayerTextDrawColor( playerid, TDEditor_LOGO[playerid][2], RGBAToHex(176, 0, 161, 51) );
                PlayerTextDrawShow( playerid, TDEditor_LOGO[playerid][0] );
                PlayerTextDrawShow( playerid, TDEditor_LOGO[playerid][1] );
                PlayerTextDrawShow( playerid, TDEditor_LOGO[playerid][2] );
            }
            PlayerTextDrawBoxColor( playerid, TDEditor_BACKGROUND[playerid], 0x00000033 );
        }
        case 13:
        {
            if(tip)
            {
                PlayerTextDrawColor( playerid, TDEditor_LOGO[playerid][0], RGBAToHex(176, 0, 176, 34) );
                PlayerTextDrawColor( playerid, TDEditor_LOGO[playerid][1], RGBAToHex(176, 0, 255, 34) );
                PlayerTextDrawColor( playerid, TDEditor_LOGO[playerid][2], RGBAToHex(176, 0, 161, 34) );
                PlayerTextDrawShow( playerid, TDEditor_LOGO[playerid][0] );
                PlayerTextDrawShow( playerid, TDEditor_LOGO[playerid][1] );
                PlayerTextDrawShow( playerid, TDEditor_LOGO[playerid][2] );
            }
            PlayerTextDrawBoxColor( playerid, TDEditor_BACKGROUND[playerid], 0x00000022 );
        }
        case 14:
        {
            if(tip)
            {
                PlayerTextDrawColor( playerid, TDEditor_LOGO[playerid][0], RGBAToHex(176, 0, 176, 17) );
                PlayerTextDrawColor( playerid, TDEditor_LOGO[playerid][1], RGBAToHex(176, 0, 255, 17) );
                PlayerTextDrawColor( playerid, TDEditor_LOGO[playerid][2], RGBAToHex(176, 0, 161, 17) );
                PlayerTextDrawShow( playerid, TDEditor_LOGO[playerid][0] );
                PlayerTextDrawShow( playerid, TDEditor_LOGO[playerid][1] );
                PlayerTextDrawShow( playerid, TDEditor_LOGO[playerid][2] );
            }
            PlayerTextDrawBoxColor( playerid, TDEditor_BACKGROUND[playerid], 0x00000011 );
        }
    }
    timer_Intro[playerid][3] = SetTimerEx("FadeIn", 50, 0, "id", playerid, tip);
    PlayerTextDrawShow(playerid, TDEditor_BACKGROUND[playerid]);
    return ScreenStatus [playerid] --;
}

forward SQL_CreateAccount(playerid, password[], birthday[], origin[], skin, sex, astuces);
public SQL_CreateAccount(playerid, password[], birthday[], origin[], skin, sex, astuces)
{
	static
		query[500],
		buffer[129],
		ip_add[16],
		gpci_serial[250];

    GetPlayerIp(playerid, ip_add, sizeof(ip_add));
    gpci(playerid, gpci_serial, sizeof(gpci_serial));
	WP_Hash(buffer, sizeof(buffer), password);

	format(query, sizeof(query), "INSERT INTO `characters` (`Username`, `Password`, `Connected`, `Astuces`, `RegisterDate`, `LoginDate`, `LastGPCI`, `IP`, `Birthdate`, `Origin`, `Skin`, `Gender`) VALUES('%s', '%s', 1, '%d', '%s', '%s', '%s', '%s', '%s', '%s', '%d', '%d')",

	ReturnName(playerid),
	buffer,
	astuces,
	ReturnDate(),
	ReturnDate(),
	gpci_serial,
	ip_add,
	birthday,
	origin,
	skin,
	sex);
	
	mysql_function_query(g_iHandle, query, false, "SQL_Register", "d", playerid);
}

forward SQL_Register(extraid);
public SQL_Register(extraid)
{
	static
		query[500];
		
	PlayerData[extraid][pID] = cache_insert_id();
	PlayerData[extraid][pCreated] = 1;

	format(query, sizeof(query), "SELECT * FROM `characters` WHERE `Username` = '%s'", ReturnName(extraid));
	mysql_function_query(g_iHandle, query, true, "SQL_LoadCharacter", "d", extraid);

	Register_Start(extraid, 5);
	SQL_MessageRegister(extraid);
	
	new
	    add_ip[16];
	    
	GetPlayerIp(extraid, add_ip, sizeof(add_ip));
	Log_Write("logs/login_log.txt", "[%s] %s (%s) was succesfully registered.", ReturnDate(), ReturnName(extraid, 0), add_ip);
	return 1;
}

forward SQL_AttemptLogin(playerid, const password[]);
public SQL_AttemptLogin(playerid, const password[])
{
	static
		query[300],
		buffer[129];

	WP_Hash(buffer, sizeof(buffer), password);

	format(query, sizeof(query), "SELECT `ID` FROM `characters` WHERE `Username` = '%s' AND `Password` = '%s'", PlayerData[playerid][pUsername], buffer);
	mysql_function_query(g_iHandle, query, true, "SQL_Login", "d", playerid);
}

forward SQL_Login(extraid);
public SQL_Login(extraid)
{
	static
	    rows,
		fields;

	cache_get_data(rows, fields, g_iHandle);


	new
	    add_ip[16];

	GetPlayerIp(extraid, add_ip, sizeof(add_ip));
	
	if (!rows)
	{
		PlayerData[extraid][pLoginAttempts]++;
    	random_ViewConnection(extraid);

		if (PlayerData[extraid][pLoginAttempts] >= 3)
		{
		    Log_Write("logs/login_log.txt", "[%s] %s (%s) incorrect password (%d/3).", ReturnDate(), ReturnName(extraid, 0), add_ip, PlayerData[extraid][pLoginAttempts]);
		    
			SendClientMessage(extraid, COLOR_INFO, "Mot de passe incorrect, vous avez été expulsé du serveur.");
			KickEx(extraid);
		}
		else
		{
		    Log_Write("logs/login_log.txt", "[%s] %s (%s) incorrect password (%d/3).", ReturnDate(), ReturnName(extraid, 0), add_ip, PlayerData[extraid][pLoginAttempts]);
		    
			Dialog_Show(extraid, LoginScreen, DIALOG_STYLE_PASSWORD, "{FAA13C}Connexion au serveur", "{FFFFFF}Bienvenue sur {7ea0da}"SERVER_URL"{FFFFFF}!\n\nVotre dernière connexion date du: %s.\n\nEntrer votre {de3838}mot de passe{FFFFFF} ci-dessous pour vous connecter à votre compte:", "Connexion", "X", PlayerData[extraid][pLoginDate]);
			SendClientMessageEx(extraid, COLOR_ERROR, "Mot de passe eronné. (%d/3 tentatives).", PlayerData[extraid][pLoginAttempts]);
		}
	}
	else
	{
		static
			query[128];

		// Update the last login date.
		format(query, sizeof(query), "UPDATE `characters` SET `IP` = '%s', `LoginDate` = '%s' WHERE `Username` = '%s'", PlayerData[extraid][pIP], ReturnDate(), ReturnName(extraid));
		mysql_function_query(g_iHandle, query, false, "", "");

		format(query, sizeof(query), "SELECT * FROM `characters` WHERE `Username` = '%s'", ReturnName(extraid));
		mysql_function_query(g_iHandle, query, true, "SQL_LoadCharacter", "d", extraid);

        SQL_setConnection(extraid, 1);
		SQL_MessageLogin(extraid);
		StopAudioStreamForPlayer(extraid);
		
		Log_Write("logs/login_log.txt", "[%s] %s (%s) was succesfully connected.", ReturnDate(), ReturnName(extraid, 0), add_ip);
	}
}

forward SQL_MessageLogin(extraid);
public SQL_MessageLogin(extraid)
{
	ClearChat(extraid, 20);
	SendClientMessage(extraid, -1, "{7EA0DA}LSMemories.net | {FFFFFF}Retrouvez l'actualité du serveur sur {7EA0DA}www.lsmemories.net !");
	SendClientMessageEx(extraid, -1, "{FFFFFF}Bienvenue, {D4D4D4}%s.", PlayerData[extraid][pUsername]);
	SendClientMessage(extraid, 0xC5C5C5FF, "¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯");
	
	new
	    string[60];
	    
	format(string, sizeof(string),"~w~Bienvenue~n~~y~%s", ReturnName(extraid));
	GameTextForPlayer(extraid, string, 3000, 1);

	if (PlayerData[extraid][pAstuces])
	{
		ClearChat(extraid, 1);
		SendClientMessage(extraid, 0x78C36CFF, "Vous souhaitez apprendre les bases du serveur intuitivement ? Les /challenges sont disponibles.");
	}
}

forward SQL_MessageRegister(extraid);
public SQL_MessageRegister(extraid)
{
	ClearChat(extraid, 20);
	SendClientMessage(extraid, -1, "{7EA0DA}LSMemories.net | {FFFFFF}Retrouvez l'actualité du serveur sur {7EA0DA}www.lsmemories.net.");
	SendClientMessageEx(extraid, -1, "{FFFFFF}Bienvenue, {D4D4D4}%s.", PlayerData[extraid][pUsername]);
	SendClientMessage(extraid, 0xC5C5C5FF, "¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯");
	
	if (PlayerData[extraid][pAstuces])
	{
		ClearChat(extraid, 1);
		SendClientMessage(extraid, 0x78C36CFF, "Vous souhaitez apprendre les bases du serveur intuitivement ? Les /challenges sont disponibles.");
	}
}

forward SQL_LoadCharacter(extraid);
public SQL_LoadCharacter(extraid)
{
	static
		string[128],
		rows,
		fields;

	cache_get_data(rows, fields, g_iHandle);

	if (!rows)
	{
		return 0;
	}

	static
		query[128];

	PlayerData[extraid][pID] = cache_get_field_int(0, "ID");
	PlayerData[extraid][pCreated] = cache_get_field_int(0, "Created");
	PlayerData[extraid][pLevel] = cache_get_field_int(0, "Level");
	PlayerData[extraid][pHours] = cache_get_field_int(0, "Hours");
	PlayerData[extraid][pGender] = cache_get_field_int(0, "Gender");

	cache_get_field_content(0, "Birthdate", PlayerData[extraid][pBirthdate], g_iHandle, 24);
	cache_get_field_content(0, "Origin", PlayerData[extraid][pOrigin], g_iHandle, 32);

	PlayerData[extraid][pSkin] = cache_get_field_int(0, "Skin");
	PlayerData[extraid][pPos][0] = cache_get_field_float(0, "PosX");
	PlayerData[extraid][pPos][1] = cache_get_field_float(0, "PosY");
	PlayerData[extraid][pPos][2] = cache_get_field_float(0, "PosZ");
	PlayerData[extraid][pPos][3] = cache_get_field_float(0, "PosA");
	PlayerData[extraid][pHealth] = cache_get_field_float(0, "Health");
	PlayerData[extraid][pInterior] = cache_get_field_int(0, "Interior");
	PlayerData[extraid][pWorld] = cache_get_field_int(0, "World");
	PlayerData[extraid][pHospital] = cache_get_field_int(0, "Hospital");
	PlayerData[extraid][pHospitalInt] = cache_get_field_int(0, "HospitalInt");
	PlayerData[extraid][pMoney] = cache_get_field_int(0, "Money");
	PlayerData[extraid][pBankMoney] = cache_get_field_int(0, "BankMoney");
	PlayerData[extraid][pIndiceForce] = cache_get_field_float(0, "IndiceForce");
	PlayerData[extraid][pOwnsBillboard] = cache_get_field_int(0, "OwnsBillboard");
	PlayerData[extraid][pSavings] = cache_get_field_int(0, "Savings");
	PlayerData[extraid][pAdmin] = cache_get_field_int(0, "Admin");
	PlayerData[extraid][pHelper] = cache_get_field_int(0, "Helper");
	PlayerData[extraid][pAstuces] = cache_get_field_int(0, "Astuces");
	
	/* PACK DONATEUR */
	new
	    expireTime =  cache_get_field_int(0, "donatorExpiration");
	    
	if(expireTime < gettime())
	{
		format(query, sizeof(query), "UPDATE `characters` SET packDonator = 0, donatorExpiration = 0 WHERE `Username` = '%s'", ReturnName(extraid));
		mysql_function_query(g_iHandle, query, false, "", "");
		
		PlayerData[extraid][pDonator] = 0;
	}
	else
	{
		PlayerData[extraid][pDonator] = cache_get_field_int(0, "packDonator");
	}



	PlayerData[extraid][pJailTime] = cache_get_field_int(0, "JailTime");
	PlayerData[extraid][pMuted] = cache_get_field_int(0, "Muted");
	PlayerData[extraid][pHouse] = cache_get_field_int(0, "House");
	PlayerData[extraid][pAnnuary] = cache_get_field_int(0, "Annuary");
	PlayerData[extraid][pRedList] = cache_get_field_int(0, "RedList");
	PlayerData[extraid][pLocat] = cache_get_field_int(0, "Location");
	PlayerData[extraid][pBusiness] = cache_get_field_int(0, "Business");
	PlayerData[extraid][pEntrance] = cache_get_field_int(0, "Entrance");
	PlayerData[extraid][pPhone] = cache_get_field_int(0, "Phone");
	PlayerData[extraid][pLottery] = cache_get_field_int(0, "Lottery");
	PlayerData[extraid][pLottery] = cache_get_field_int(0, "LotteryB");
	PlayerData[extraid][pPlayingHours] = cache_get_field_int(0, "PlayingHours");
	PlayerData[extraid][pPlayingHoursMax] = cache_get_field_int(0, "PlayingHoursMax");
	PlayerData[extraid][pMinutes] = cache_get_field_int(0, "Minutes");
	PlayerData[extraid][pMinutesCount] = cache_get_field_int(0, "MinutesCount");
	PlayerData[extraid][pArmorStatus] = cache_get_field_float(0, "ArmorStatus");
	PlayerData[extraid][pJob] = cache_get_field_int(0, "Job");
	PlayerData[extraid][pFactionID] = cache_get_field_int(0, "Faction");
	PlayerData[extraid][pFactionRank] = cache_get_field_int(0, "FactionRank");
	PlayerData[extraid][pPrisoned] = cache_get_field_int(0, "Prisoned");
	PlayerData[extraid][pWarrants] = cache_get_field_int(0, "Warrants");
	PlayerData[extraid][pChannel] = cache_get_field_int(0, "Channel");
	PlayerData[extraid][pBleeding] = cache_get_field_int(0, "Bleeding");
	PlayerData[extraid][pAdminHide] = cache_get_field_int(0, "AdminHide");
	PlayerData[extraid][pWarnings] = cache_get_field_int(0, "Warnings");
	PlayerData[extraid][pMaskID] = cache_get_field_int(0, "MaskID");
	PlayerData[extraid][pCapacity] = cache_get_field_int(0, "Capacity");
	PlayerData[extraid][pSpawnPoint] = cache_get_field_int(0, "SpawnPoint");
	PlayerData[extraid][pLocaID] = 0;
	PlayerData[extraid][pCarD] = cache_get_field_int(0, "CarD");
	PlayerData[extraid][pPaVal] = cache_get_field_int(0, "PaVal");
	PlayerData[extraid][pPaVen] = cache_get_field_int(0, "PaVen");
	PlayerData[extraid][pBracelet] = cache_get_field_int(0, "Bracelet");

	cache_get_field_content(0, "Warn1", PlayerData[extraid][pWarn1], g_iHandle, 32);
	cache_get_field_content(0, "Warn2", PlayerData[extraid][pWarn2], g_iHandle, 32);

	for (new i = 0; i < 13; i ++) {
		format(query, sizeof(query), "Gun%d", i + 1);
		PlayerData[extraid][pGuns][i] = cache_get_field_int(0, query);

		format(query, sizeof(query), "Ammo%d", i + 1);
		PlayerData[extraid][pAmmo][i] = cache_get_field_int(0, query);
	}
	PlayerData[extraid][pGlasses] = cache_get_field_int(0, "Glasses");
	PlayerData[extraid][pHat] = cache_get_field_int(0, "Hat");
	PlayerData[extraid][pBandana] = cache_get_field_int(0, "Bandana");

	cache_get_field_content(0, "AstucesChallenges", string, g_iHandle, 128);
	sscanf(string, "p<|>dddddd", AstucesChallenges[extraid][0], AstucesChallenges[extraid][1], AstucesChallenges[extraid][2], AstucesChallenges[extraid][3], AstucesChallenges[extraid][4], AstucesChallenges[extraid][5]);

	cache_get_field_content(0, "GlassesPos", string, g_iHandle, 128);
	sscanf(string, "p<|>fffffffff", AccessoryData[extraid][0][0], AccessoryData[extraid][0][1], AccessoryData[extraid][0][2], AccessoryData[extraid][0][3], AccessoryData[extraid][0][4], AccessoryData[extraid][0][5], AccessoryData[extraid][0][6], AccessoryData[extraid][0][7], AccessoryData[extraid][0][8]);

	cache_get_field_content(0, "HatPos", string, g_iHandle, 128);
	sscanf(string, "p<|>fffffffff", AccessoryData[extraid][1][0], AccessoryData[extraid][1][1], AccessoryData[extraid][1][2], AccessoryData[extraid][1][3], AccessoryData[extraid][1][4], AccessoryData[extraid][1][5], AccessoryData[extraid][1][6], AccessoryData[extraid][1][7], AccessoryData[extraid][1][8]);

	cache_get_field_content(0, "BandanaPos", string, g_iHandle, 128);
	sscanf(string, "p<|>fffffffff", AccessoryData[extraid][2][0], AccessoryData[extraid][2][1], AccessoryData[extraid][2][2], AccessoryData[extraid][2][3], AccessoryData[extraid][2][4], AccessoryData[extraid][2][5], AccessoryData[extraid][2][6], AccessoryData[extraid][2][7], AccessoryData[extraid][2][8]);

	if (!PlayerData[extraid][pMaskID])
	PlayerData[extraid][pMaskID] = random(90000) + 10000;

	if (!PlayerData[extraid][pCapacity])
	PlayerData[extraid][pCapacity] = 35;

	for (new i = 0; i < 82; i ++) {
		if (i < 8 || (i >= 71 && i <= 81)) PlayerTextDrawHide(extraid, PlayerData[extraid][pTextdraws][i]);
	}
	if (PlayerData[extraid][pAdmin] > 0)
	{
		SendClientMessageEx(extraid, COLOR_ADMIN, "Vous êtes connecté en tant qu'administrateur level %d.", PlayerData[extraid][pAdmin]);
	}
	if (PlayerData[extraid][pHelper])
	{
		SendClientMessageEx(extraid, COLOR_ADMIN, "Vous êtes connecté en tant qu'helpeur.");
	}
	PlayerData[extraid][pLogged] = 1;

	format(query, sizeof(query), "SELECT * FROM `inventory` WHERE `ID` = '%d'", PlayerData[extraid][pID]);
	mysql_function_query(g_iHandle, query, true, "OnQueryFinished", "dd", extraid, THREAD_LOAD_INVENTORY);

	format(query, sizeof(query), "SELECT * FROM `contacts` WHERE `ID` = '%d'", PlayerData[extraid][pID]);
	mysql_function_query(g_iHandle, query, true, "OnQueryFinished", "dd", extraid, THREAD_LOAD_CONTACTS);

	format(query, sizeof(query), "SELECT * FROM `tickets` WHERE `ID` = '%d'", PlayerData[extraid][pID]);
	mysql_function_query(g_iHandle, query, true, "OnQueryFinished", "dd", extraid, THREAD_LOAD_TICKETS);

	format(query, sizeof(query), "SELECT * FROM `gps` WHERE `ID` = '%d'", PlayerData[extraid][pID]);
	mysql_function_query(g_iHandle, query, true, "OnQueryFinished", "dd", extraid, THREAD_LOAD_LOCATIONS);

	if(PlayerData[extraid][pOwnsBillboard] == 0)
	{
		PlayerData[extraid][pOwnsBillboard] = -1;
	}
	if (PlayerData[extraid][pFactionID] != -1) {
		PlayerData[extraid][pFaction] = GetFactionByID(PlayerData[extraid][pFactionID]);

		if (PlayerData[extraid][pFaction] == -1) {
			ResetFaction(extraid);
		}
	}

	TextDrawHideForPlayer(extraid, Textdraw0);
	TextDrawHideForPlayer(extraid, Textdraw1);
	TextDrawHideForPlayer(extraid, Textdraw2);
	TextDrawHideForPlayer(extraid, Textdraw3);
	TextDrawHideForPlayer(extraid, Textdraw4);

	TogglePlayerControllable(extraid, 0);
	if(PlayerData[extraid][pCreated])
	{
		SetSpawnInfo(extraid, 0, PlayerData[extraid][pSkin], PlayerData[extraid][pPos][0], PlayerData[extraid][pPos][1], PlayerData[extraid][pPos][2], 0.0, 0, 0, 0, 0, 0, 0);

		TogglePlayerSpectating(extraid, 0);

		CancelSelectTextDraw(extraid);
		//SpawnTimer(extraid);
		SetTimerEx("SpawnTimer", 1000, false, "d", extraid);
	}
	else
	{
		SetSpawnInfo(extraid, 0, PlayerData[extraid][pSkin], 1694.7662, -2260.3911, 39, 327.2981, 0, 0, 0, 0, 0, 0);
		TogglePlayerSpectating(extraid, 0);

	    PlayerData[extraid][pHealth] = 35.0;
		CancelSelectTextDraw(extraid);

		SetTimerEx("SpawnTimer", 3000, false, "d", extraid);
	}
	return 1;
}

Dialog:LoginScreen(playerid, response, listitem, inputtext[])
{
	if (!response)
	return Kick(playerid);
	
    random_ViewConnection(playerid);

	if (isnull(inputtext))
		Dialog_Show(playerid, LoginScreen, DIALOG_STYLE_PASSWORD, "{FAA13C}Connexion au serveur", "{FFFFFF}Bienvenue sur {7ea0da}"SERVER_URL"{FFFFFF}!\n\nVotre dernière connexion date du: %s.\n\nEntrer votre {de3838}mot de passe{FFFFFF} ci-dessous pour vous connecter à votre compte:", "Connexion", "X", PlayerData[playerid][pLoginDate]);

	else
	{
		SQL_AttemptLogin(playerid, inputtext);
	}
	return 1;
}

/*
			FIN DE
	INSCRIPTION / CONNEXION
*/

public OnPlayerDisconnect(playerid, reason)
{
	if(AlreadyWatching[playerid] != -1)
	{
	    new i = AlreadyWatching[playerid];
 		espionInfo[i][Micro] = false;
		AlreadyWatching[playerid] = -1;
	}
	
	InWatch[playerid] = false;
	
	SendNearbyMessage(playerid, 15.0, COLOR_GREY, "%s s'est déconnecté de LSmemories. (%s).",ReturnName(playerid), DisconnectReasons[reason]);
	PlayerData[playerid][pLeaveTime] = GetTickCount();

	if(PlayerData[playerid][pInjured])
	{
		new
		    rapportLevel = PlayerData[playerid][pLevel]*50;

        GiveMoney(playerid, -(1000+rapportLevel)*2);
	}
	if (PlayerData[playerid][pTaxiPNJ] != -1)
	{
		Reset_TaxiCalls(PlayerData[playerid][pTaxiPNJ]);
		PlayerData[playerid][pTaxiPNJ] = -1;
		DisableWaypoint(playerid);
	}
	if (PlayerData[playerid][pJob] == JOB_SORTER && PlayerData[playerid][pSortingVehicle] != 0)
	{
	    DestroyVehicle(PlayerData[playerid][pSortingVehicle]);
	    PlayerData[playerid][pSortingVehicle] = 0;
	    
		DestroyObject(PlayerData[playerid][pSortingObject][0]);
		DestroyObject(PlayerData[playerid][pSortingObject][1]);
		DestroyObject(PlayerData[playerid][pSortingObject][2]);

		PlayerData[playerid][pSortingObject][0] = -1;
		PlayerData[playerid][pSortingObject][1] = -1;
		PlayerData[playerid][pSortingObject][2] = -1;
	}
	
	if(PlayerData[playerid][pTakeCorpse] != -1)
	{
	    new id = PlayerData[playerid][pTakeCorpse];

        CorpseData[id][corpseUsed] = false;
        GetPlayerPos(playerid, CorpseData[id][corpsePos][0], CorpseData[id][corpsePos][1], CorpseData[id][corpsePos][2]);
		GetPlayerFacingAngle(playerid, CorpseData[id][corpsePos][3]);
		
		Corpse_Refresh(id);
	}
	
	format(PlayerData[playerid][pLeaveIP], 16, PlayerData[playerid][pIP]);
	if(DernieVehLoc[playerid] != -1)
	{
		CarData[DernieVehLocID[playerid]][carLocked] = 0;
		CarData[DernieVehLocID[playerid]][carLocaID] = 0;
		Car_Save(DernieVehLocID[playerid]);
		if(reason != 0)
		{
			SetVehicleToRespawn(DernieVehLoc[playerid]);
		}
	}
	TerminateConnection(playerid);
    if(GetFactionType(playerid) == FACTION_POLICE || GetFactionType(playerid) == FACTION_GOV)
    {
		ResetWeapons(playerid);
		SQL_SaveCharacter(playerid);
	}

	REST_PLAYER(playerid);

	HideProgressBarForPlayer(playerid, player_gym_progress[playerid]);
	DestroyProgressBar(player_gym_progress[playerid]);

	for(new i=0; i<3; i++) PlayerTextDrawHide(playerid, GYM_TD[playerid][i]);
    for(new i = 0; i != sizeof(timer_Intro[]); i++) KillTimer(timer_Intro[playerid][i]);

	KillTimer(TimerFaim[playerid]);
	Delete3DTextLabel(SME[playerid]);
	KillTimer(TimerSME[playerid]);
	HaveSME[playerid] = 0;
	Delete3DTextLabel(VME[playerid]);
    KillTimer(TimerVME[playerid]);
	HaveVME[playerid] = 0;

	HideSpecTextdraw(playerid);
	return 1;
}

Server_Save()
{
	new
	File:file = fopen("server.ini", io_write),
	str[128];

	format(str, sizeof(str), "TaxMoney = %d\n", g_TaxVault);
	return (fwrite(file, str), fclose(file));
}

Server_Load()
{
	new File:file = fopen("server.ini", io_read);

	if (file) {
		g_TaxVault = file_parse_int(file, "TaxMoney");

		fclose(file);
	}
	return 1;
}

public OnGameModeExit()
{
	for(new i = 0, j = GetPlayerPoolSize(); i <= j; i++)
	{
		Kick(i);
	}
	TextDrawDestroy(Textdraw0);
	TextDrawDestroy(Textdraw1);
	TextDrawDestroy(Textdraw2);
	TextDrawDestroy(Textdraw3);
	mysql_close(g_iHandle);
    KillTimer(AFKTimer);
	return 1;
}

forward RandomFilling_garbage();
public RandomFilling_garbage()
{
	for(new garbage_id=0; garbage_id<MAX_GARBAGE_BINS; garbage_id++)
	{
	    if(GarbageData[garbage_id][garbageExists])
	    {
	        new
	            randomLuck = random(3);

	        if(randomLuck == 1 && GarbageData[garbage_id][garbageCapacity] < 20)
	        {
				GarbageData[garbage_id][garbageCapacity]++;
				Garbage_Save(garbage_id);
			}
	    }
	}
	return 1;
}

enum e_taxiRandomNames {
	e_Name[35],
	e_Sex, // 0= homme; 1= femme
	e_Skin
};


static const taxi_RandomNames[][e_taxiRandomNames] = {
	{"Coleman Doolittle", 0, 2},
	{"Jeffrey Horner", 0, 3},
	{"James Acosta", 0, 4},
	{"Richard Zimmerman", 0, 6},
	{"Ulysses Hill", 0, 7},
	{"Lewis McCoy", 0, 17},
	{"Kenneth Espinoza", 0, 22},
	{"Michael Stein", 0, 23},
	{"Martin Adams", 0, 34},
	{"Arthur Foltz", 0, 35},
	{"Bob Owens", 0, 37},
	{"Reginald Cunningham", 0, 36},

	{"Peggy Sullivan", 1, 40},
	{"Briana Buchanan", 1, 41},
	{"Mary Higgin", 1, 55},
	{"Nancy Delatte", 1, 56},
	{"Nannie Hassell", 1, 65},
	{"Ruth Lessard", 1, 76},
	{"Barbara Ferreira", 1, 88},
	{"Janice Ballard", 1, 91},
	{"Jennifer Jackson", 1, 129}
	
};

enum e_destPos_taxi {
	Float:e_PosX,
	Float:e_PosY,
	Float:e_PosZ,
	Float:e_Angle
};

static const taxi_RandomDestination[][e_destPos_taxi] = {
	{196.982101, -1465.009033, 12.911499, 234.534301},
	{237.844894, -1424.056762, 13.448200, 220.647506},
	{271.757507, -1403.085327, 13.791500, 212.494796},
	{338.133392, -1369.010131, 14.400300, 208.466506},
	{359.600006, -1358.518554, 14.496199, 208.779800},
	{368.358886, -1344.309936, 14.524900, 300.229003},
	{382.686187, -1376.767578, 14.712800, 29.355699},
	{410.917999, -1370.970825, 14.823699, 32.097400},
	{433.523712, -1356.915893, 14.864899, 29.238599},
	{428.520996, -1316.307006, 15.031200, 208.398696},
	{451.309295, -1294.299194, 15.271900, 210.833099},
	{548.730224, -1260.007690, 16.848199, 35.129699},
	{580.111999, -1243.686889, 17.650499, 14.208700},
	{601.023315, -1207.625366, 18.377099, 200.218795},
	{643.299926, -1188.958129, 18.406299, 214.234893},
	{686.875976, -1313.611206, 13.694700, 178.828002},
	{644.109924, -1308.944946, 13.929699, 88.849700},
	{646.370117, -1330.603515, 13.554400, 90.316497},
	{617.881896, -1440.788696, 14.249699, 272.229888},
	{618.390075, -1465.537963, 14.503499, 270.389007},
	{617.976623, -1524.221191, 15.125300, 265.649810},
	{681.741577, -1576.720947, 14.195099, 174.995605},
	{808.758911, -1641.873657, 13.546899, 250.727203},
	{842.065307, -1618.250732, 13.539099, 52.957000},
	{883.527221, -1566.470092, 13.539099, 186.616592},
	{872.171569, -1536.921752, 13.552700, 0.400700},
	{851.758605, -1512.401123, 12.758399, 268.033203},
	{852.366088, -1520.131469, 13.554699, 266.584014},
	{874.530029, -1505.315307, 12.735500, 91.272399},
	{955.845214, -1333.150024, 13.529199, 0.450100},
	{988.045593, -1339.238647, 13.571200, 268.785797},
	{1029.027343, -1346.646240, 13.726599, 97.621902},
	{1042.144653, -1339.063476, 13.732500, 3.536799},
	{1078.467895, -1287.305053, 13.546899, 357.845886},
	{1148.976196, -1291.193969, 13.666199, 3.911000},
	{1175.188720, -1274.535522, 13.546899, 182.585098},
	{1186.626342, -1343.346313, 13.565199, 270.027587},
	{1186.741577, -1303.139404, 13.551899, 270.626586},
	{1213.056030, -1302.491210, 13.552200, 89.915702},
	{1212.090332, -1351.876342, 13.573699, 92.449897},
	{1208.102661, -1415.070922, 13.382800, 353.010589},
	{1232.142578, -1415.020751, 13.346500, 359.250000},
	{1296.402954, -1415.858154, 13.397399, 0.072599},
	{1299.170776, -1388.985229, 13.475000, 185.248504},
	{1336.904296, -1295.411987, 13.546899, 268.495910},
	{1364.012573, -1275.813720, 13.546899, 91.701797},
	{1363.364868, -1291.545654, 13.546899, 87.504997},
	{1336.713989, -1256.403198, 13.546899, 267.415008},
	{1376.311889, -1234.265136, 13.546899, 178.035903},
	{1391.723999, -1234.826293, 13.546899, 173.962600},
	{1424.928588, -1300.207397, 13.558699, 88.388397},
	{1426.087402, -1351.518432, 13.578100, 93.558296},
	{1445.518798, -1336.055175, 13.532799, 269.361602},
	{1446.947265, -1320.933715, 13.539199, 269.764892},
	{1497.906494, -1280.846069, 14.551600, 182.624298},
	{1546.601318, -1326.268676, 16.484399, 4.016600},
	{1579.265625, -1399.242675, 14.023200, 5.174200},
	{1581.262207, -1404.377197, 13.813799, 270.121795},
	{1581.237548, -1422.446289, 13.546899, 267.105895},
	{1600.151000, -1477.898803, 13.574299, 264.755889},
	{1610.230957, -1527.142822, 13.617799, 60.243198},
	{1652.135498, -1512.924560, 13.546899, 270.485992},
	{1671.757080, -1473.760375, 13.546899, 174.565902},
	{1707.897338, -1498.118164, 13.546899, 89.064300},
	{1693.796142, -1499.336303, 13.546899, 275.521087},
	{1713.133544, -1606.873168, 13.546899, 358.705993},
	{1742.570922, -1588.139404, 13.552499, 172.260894},
	{1757.909301, -1593.860595, 13.532899, 161.366592},
	{1815.585327, -1631.407714, 13.546899, 273.960296},
	{1828.425415, -1672.051879, 13.546899, 89.736000},
	{1828.063842, -1851.705200, 13.578100, 87.301803},
	{1828.153930, -1886.840087, 13.500800, 90.513496},
	{1815.572631, -1874.702880, 13.578100, 271.800201},
	{1767.685424, -1860.232543, 13.579000, 359.450195},
	{1738.434570, -1860.148803, 13.579099, 1.565199},
	{1905.668579, -1926.836547, 13.546899, 178.185195},
	{1946.738891, -1938.156372, 13.546899, 8.172900},
	{1955.776489, -1976.203857, 13.546899, 274.367889},
	{1967.953369, -1987.260375, 13.546899, 88.257698},
	{1921.522705, -2058.468994, 13.546899, 357.742706},
	{1801.169921, -2118.863769, 13.554300, 2.364399},
	{1972.705444, -2174.946533, 13.540599, 0.222000},
	{1635.841918, -2246.970703, 13.495100, 186.606201},
	{1651.518554, -2326.369873, 13.546899, 359.667907},
	{1717.302978, -2246.280273, -2.688400, 182.662094},
	{1731.518920, -2326.181152, -2.679699, 345.825988},
	{1568.447265, -2298.000244, -2.809700, 272.801086},
	{1434.640502, -2278.107177, 13.546899, 91.541900},
	{1967.769653, -1764.182250, 13.546899, 94.234596},
	{2038.213378, -1744.661254, 13.539099, 181.896392},
	{2127.406738, -1783.454956, 13.556400, 93.379096},
	{2127.796630, -1767.836791, 13.560199, 90.329902},
	{2121.108886, -1743.822265, 13.554699, 176.497406},
	{2183.117187, -1811.914550, 13.546899, 356.479797},
	{2153.161132, -1801.331542, 13.566599, 267.178985},
	{2254.771484, -1726.433227, 13.546899, 180.496398},
	{2271.467529, -1755.418457, 13.546899, 0.848999},
	{2475.775390, -1742.878662, 13.546899, 351.812988},
	{2462.524169, -1664.456420, 13.469400, 0.860599},
	{2424.654785, -1653.053344, 13.546899, 183.171493},
	{2336.664062, -1512.833740, 24.000000, 268.332305},
	{2233.226318, -1490.125610, 23.783399, 359.278106},
	{2135.457519, -1493.245605, 23.984399, 95.108299},
	{2131.972167, -1378.122680, 23.977399, 181.784896},
	{2087.801757, -1373.783325, 23.984399, 178.293106},
	{2149.783935, -1213.292236, 23.963300, 182.098205},
	{2206.636718, -1135.940429, 25.807600, 345.518890},
	{2341.187255, -1160.671875, 27.165100, 4.319099},
	{2401.046386, -1250.458496, 23.815000, 182.797393},
	{2410.628417, -1262.945800, 24.049900, 358.091491},
	{2544.541259, -1471.155639, 24.014299, 270.061492},
	{2487.424560, -1515.219970, 23.992200, 178.949096},
	{2422.332031, -1513.146850, 23.992200, 269.973297},
	{2421.823730, -1551.140502, 24.000000, 273.968292},
	{1899.091430, -1352.649658, 13.476799, 182.826705},
	{1963.849243, -1454.467773, 13.547900, 179.313293},
	{2005.642822, -1408.811279, 16.992200, 176.851699},
	{1840.274658, -1282.248901, 13.544500, 270.180908},
	{1760.329589, -1156.163696, 23.828100, 159.820007},
	{1409.456176, -1028.147338, 24.032199, 186.179397},
	{1329.460205, -1161.086791, 23.828100, 183.298599},
	{979.930725, -1045.284912, 30.416099, 4.530399},
	{1146.770019, -1414.252807, 13.674200, 3.551199},
	{1506.688110, -1754.694580, 13.546899, 359.550292},
	{1535.666870, -1692.509521, 13.546899, 95.531097},
	{2775.349121, -1917.380126, 12.970800, 96.324600},
	{2763.600097, -1980.322387, 13.547900, 273.733795}
};

Reset_TaxiCalls(idcall)
{
	if(IsValidActor(TaxiData[idcall][actorID]))
		DestroyActor(TaxiData[idcall][actorID]);
		
	if(IsValidDynamic3DTextLabel(TaxiData[idcall][actorText3D]))
		DestroyDynamic3DTextLabel(TaxiData[idcall][actorText3D]);
	
	TaxiData[idcall][tExists] = false;
	TaxiData[idcall][tSkin] = -1;
	TaxiData[idcall][actorID] = -1;
		
	TaxiData[idcall][tPos][0] = 0.0;
	TaxiData[idcall][tPos][1] = 0.0;
	TaxiData[idcall][tPos][2] = 0.0;
	TaxiData[idcall][tPos][3] = 0.0;

	TaxiData[idcall][tDest][0] = 0.0;
	TaxiData[idcall][tDest][1] = 0.0;
	TaxiData[idcall][tDest][2] = 0.0;
}

Taxi_Nearest(playerid)
{
	for (new i = 0; i != MAX_TAXIS_CALLS; i ++) if (TaxiData[i][tExists] && IsPlayerInRangeOfPoint(playerid, 10.0, TaxiData[i][tPos][0], TaxiData[i][tPos][1], TaxiData[i][tPos][2]))
	{
		return i;
	}
	return -1;
}

forward RandomCalls_taxi();
public RandomCalls_taxi()
{
	for(new i=0; i<MAX_TAXIS_CALLS; i++) if(!TaxiData[i][tExists] && !IsValidActor(TaxiData[i][actorID]))
	{
	    Reset_TaxiCalls(i);
	    
	    new
	        random_Character = random(sizeof(taxi_RandomNames)),
			random_Pos = random(sizeof(taxi_RandomDestination)),
			random_DestPos = random(sizeof(taxi_RandomDestination)),
			string[50];
	        
		TaxiData[i][tExists] = true;
		TaxiData[i][tSkin] = taxi_RandomNames[random_Character][e_Skin];

		// POINT DE DÉPART
		TaxiData[i][tPos][0] = taxi_RandomDestination[random_Pos][e_PosX];
		TaxiData[i][tPos][1] = taxi_RandomDestination[random_Pos][e_PosY];
		TaxiData[i][tPos][2] = taxi_RandomDestination[random_Pos][e_PosZ];
		TaxiData[i][tPos][3] = taxi_RandomDestination[random_Pos][e_Angle];
		
		// DESTINATION
		TaxiData[i][tDest][0] = taxi_RandomDestination[random_DestPos][e_PosX];
		TaxiData[i][tDest][1] = taxi_RandomDestination[random_DestPos][e_PosY];
		TaxiData[i][tDest][2] = taxi_RandomDestination[random_DestPos][e_PosZ];

		format(TaxiData[i][tName], 50, taxi_RandomNames[random_Character][e_Name]);

		TaxiData[i][actorID] = CreateActor(TaxiData[i][tSkin], TaxiData[i][tPos][0], TaxiData[i][tPos][1], TaxiData[i][tPos][2], TaxiData[i][tPos][3]);
		
		format(string, sizeof(string), "%s\n{FFFFFF}Attend son taxi", TaxiData[i][tName]);
		TaxiData[i][actorText3D] = CreateDynamic3DTextLabel(string, COLOR_USAGE, TaxiData[i][tPos][0], TaxiData[i][tPos][1], TaxiData[i][tPos][2], 15.0);

		SendJobMessage(3, COLOR_YELLOW, "%s demande un taxi à %s (utilisez \"/j(ob) appels\" pour accepter).", TaxiData[i][tName], GetLocation(TaxiData[i][tPos][0], TaxiData[i][tPos][1], TaxiData[i][tPos][2]));
		return i;
	}
	return 1;
}

public OnGameModeInit()
{
    CreateAllMine();
	
    developpementEnabled = false;
    
	static
		arrVirtualWorlds[2000];

	g_StatusOOC = 0;

	WeatherRotator();
	SQL_Connect();
	ManualVehicleEngineAndLights();
	//SetTimer("UpdateSpeed", 250, true);
	//SetTimer("RespawnCar", 30000, true);
	new rcon[80];
	format(rcon, sizeof(rcon), "hostname %s", SERVER_NAME);
	SendRconCommand(rcon);
	format(rcon, sizeof(rcon), "weburl %s", SERVER_URL);
	SendRconCommand(rcon);
	format(rcon, sizeof(rcon), "map %s", SERVER_MAP);
	SendRconCommand(rcon);
	format(rcon, sizeof(rcon), "language %s", SERVER_LANG);
	SendRconCommand(rcon);
	
	SetGameModeText(SERVER_REVISION);
	

    mapping_GenerateAllMaps();
	/*	if (mysql_ping(g_iHandle) < 1)t
	return 0;*/

	AFKTimer = SetTimer("AFK", 60000, 1);
	SetTimer("RandomFilling_garbage", 300000, true);
	SetTimer("RandomCalls_taxi", 60000*3, true);

	Server_Load();
	Corpse_Reset();
	for(new i=0; i<MAX_TAXIS_CALLS; i++) Reset_TaxiCalls(i);
	
	mysql_function_query(g_iHandle, "SELECT * FROM `billboards`", true, "Billboard_Load", "");
	mysql_function_query(g_iHandle, "SELECT * FROM `houses`", true, "House_Load", "");
	mysql_function_query(g_iHandle, "SELECT * FROM `businesses`", true, "Business_Load", "");
	mysql_function_query(g_iHandle, "SELECT * FROM `dropped`", true, "Dropped_Load", "");
	mysql_function_query(g_iHandle, "SELECT * FROM `entrances`", true, "Entrance_Load", "");
	mysql_function_query(g_iHandle, "SELECT * FROM `cars` WHERE carOwner = 0", true, "Car_Load", "");
	mysql_function_query(g_iHandle, "SELECT * FROM `jobs`", true, "Job_Load", "");
	mysql_function_query(g_iHandle, "SELECT * FROM `crates`", true, "Crate_Load", "");
	mysql_function_query(g_iHandle, "SELECT * FROM `plants`", true, "Plant_Load", "");
	mysql_function_query(g_iHandle, "SELECT * FROM `factions`", true, "Faction_Load", "");
	mysql_function_query(g_iHandle, "SELECT * FROM `arrestpoints`", true, "Arrest_Load", "");
	mysql_function_query(g_iHandle, "SELECT * FROM `gates`", true, "Gate_Load", "");
	mysql_function_query(g_iHandle, "SELECT * FROM `backpacks`", true, "Backpack_Load", "");
	mysql_function_query(g_iHandle, "SELECT * FROM `impoundlots`", true, "Impound_Load", "");
	mysql_function_query(g_iHandle, "SELECT * FROM `atm`", true, "ATM_Load", "");
	mysql_function_query(g_iHandle, "SELECT * FROM `pickups`", true, "Pickup_Load", "");
	mysql_function_query(g_iHandle, "SELECT * FROM `garbage`", true, "Garbage_Load", "");
	mysql_function_query(g_iHandle, "SELECT * FROM `gym`", true, "Gym_Load", "");
	mysql_function_query(g_iHandle, "SELECT * FROM `cabine`", true, "Cabine_Load", "");
	mysql_function_query(g_iHandle, "SELECT * FROM `vendors`", true, "Vendor_Load", "");
	mysql_function_query(g_iHandle, "SELECT * FROM `gunracks`", true, "Rack_Load", "");
	mysql_function_query(g_iHandle, "SELECT * FROM `speedcameras`", true, "Speed_Load", "");
	mysql_function_query(g_iHandle, "SELECT * FROM `graffiti`", true, "Graffiti_Load", "");
	mysql_function_query(g_iHandle, "SELECT * FROM `detectors`", true, "Detector_Load", "");
	mysql_function_query(g_iHandle, "SELECT * FROM `actors`", true, "Actor_Load", "");
	mysql_function_query(g_iHandle, "SELECT * FROM `sign`", true, "Sign_Load", "");
	mysql_function_query(g_iHandle, "SELECT * FROM `camera`", true, "Camera_Load", "");


	SetModelPreviewRotation(18875, 90.0, 180.0, 0.0);
	SetModelPreviewRotation(2703, -105.0, 0.0, -15.0);
	SetModelPreviewRotation(2702, 90.0, 90.0, 0.0);
	SetModelPreviewRotation(2814, -90.0, 0.0, -90.0);
	SetModelPreviewRotation(2768, -15.0, 0.0, -160.0);
	SetModelPreviewRotation(19142, -20.0, -90.0, 0.0);
	SetModelPreviewRotation(1581, 0.0, 0.0, 180.0);
	SetModelPreviewRotation(2958, -10.0, -15.0, 0.0);
	SetModelPreviewRotation(1575, 0.0, 0.0, 180.0);
	SetModelPreviewRotation(1577, 0.0, 0.0, 180.0);
	SetModelPreviewRotation(1578, 0.0, 0.0, 180.0);
	SetModelPreviewRotation(18634, 90.0, 90.0, 0.0);
	SetModelPreviewRotation(2043, 0.0, 0.0, 90.0);
	SetModelPreviewRotation(1484, -15.0, 30.0, 0.0);
	SetModelPreviewRotation(2226, 0.0, 0.0, 180.0);

	for (new i = 0; i < sizeof(arrVirtualWorlds); i ++) {
		arrVirtualWorlds[i] = i + 7000;
	}
	CreateDynamicPickup(1581, 23, -2033.0439, -117.4885, 1035.1719);
	CreateDynamic3DTextLabel("Auto école\n{FFFFFF}Utilisez /permisconduire pour commencer le test.", COLOR_DEFAULT, -2033.0439, -117.4885, 1035.1719, 10.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, WORLD_DRIVELICENSE);
	CreateDynamic3DTextLabel("License taxi\n{FFFFFF}Utilisez /licensetaxi pour commencer le test.", COLOR_DEFAULT, -2033.0439, -117.4885, 1035.1719, 10.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, WORLD_TAXILICENSE);

	CreateDynamicPickup(1239, 23, 2355.9412, -648.1865, 128.0547);
	CreateDynamic3DTextLabel("Blanchiment\n{FFFFFF}Utilisez /blanchir.", COLOR_DEFAULT, 2355.9412, -648.1865, 128.0547, 10.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1);

	CreateDynamicPickup(1239, 23, 2746.5884, -2436.3462, 13.6432);
	CreateDynamic3DTextLabel("Déchargement\n{FFFFFF}Utilisez /chargercaisse pour commencer le chargement.", COLOR_YELLOW, 2746.5884, -2436.3462, 13.6432, 10.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1);

	CreateDynamicPickupEx(1239, 23, 1455.4907,-1728.5502,1052.0490, 100.0);
	CreateDynamic3DTextLabel("Amendes\n{FFFFFF}Utilisez /amendes pour payer vos amendes.", COLOR_DEFAULT, 1455.4907,-1728.5502,1052.0490, 3.0);

	CreateDynamicPickupEx(1239, 23, 2262.4937,2083.2742,100.4190, 100.0);
	CreateDynamic3DTextLabel("Zone de controle\n{FFFFFF}/p(olice) dashcam\n/p(olice) camera\n/p(olice) sdc", COLOR_DEFAULT, 2262.4937,2083.2742,100.4190, 3.0);

	CreateDynamicPickupEx(1239, 23, 2073.7756,-1831.4014,13.5469, 100.0);
	CreateDynamic3DTextLabel("Pay'n'Spray\n{FFFFFF}Utilisez /spray pour réparer votre véhicule.", COLOR_DEFAULT, 2073.7756,-1831.4014,13.5469, 10.0);

	CreateDynamicPickupEx(1239, 23, -1465.0233, 339.5170, 7.1875, 100.0, arrVirtualWorlds);
	CreateDynamic3DTextLabel("{08A2C4}Caisse\n{FFFFFF}Utilisez \"/mafia achetercaisse\"", COLOR_DEFAULT, -1465.0233,339.5170,7.1875, 10.0);

	CreateDynamicPickup(1239, 23, 2000.0840, -2026.7336, 13.5811);
	CreateDynamic3DTextLabel("{08A2C4}Mécanicien\n {FFFFFF}/j(ob) reparer\n/j(ob) remplir", COLOR_DEFAULT, 2000.0840, -2026.7336, 13.5811, 10.0);

	CreateDynamicPickup(1239, 23, 1993.3275, -2037.2626, 14.5514);
	CreateDynamic3DTextLabel("{08A2C4}Mécanicien\n {FFFFFF}/j(ob) paintjob\n/j(ob) peindre", COLOR_DEFAULT, 1993.3275, -2037.2626, 14.5514, 10.0);

	CreateDynamicPickup(1239, 23, 1993.4744, -2021.8756, 13.5874);
	CreateDynamic3DTextLabel("{08A2C4}Mécanicien\n{FFFFFF}Utilisez \"/j(ob) mcasier\" pour plus d'informations", COLOR_DEFAULT, 1993.4744, -2021.8756, 13.5874, 5.0);

	CreateDynamicPickupEx(1239, 23,1736.2021,-1121.9963,27.7579, 100.0,arrVirtualWorlds);
	CreateDynamic3DTextLabel("{08A2C4}Banque\n {FFFFFF}Utilisez /ccasier", COLOR_DEFAULT, 1736.2021,-1121.9963,27.7579, 3.0);

	CreateDynamicPickupEx(1239, 23,1438.8292,-1001.6400,996.1090, 100.0,arrVirtualWorlds);
	CreateDynamic3DTextLabel("{08A2C4}Banque\n {FFFFFF}Utilisez /forcerporte", COLOR_DEFAULT, 1438.8292,-1001.6400,996.1090, 3.0);

	CreateDynamicPickupEx(1239, 23, 1435.3368, -981.4681, 983.6462, 100.0,arrVirtualWorlds);
	CreateDynamic3DTextLabel("{08A2C4}Banque\n {FFFFFF}Utilisez /poserbombe", COLOR_DEFAULT, 1435.3368, -981.4681, 983.6462, 3.0);

	CreateDynamicPickupEx(1239, 23, 1428.8865, -986.0181, 996.1050, 100.0, arrVirtualWorlds);
	CreateDynamic3DTextLabel("{08A2C4}Banque\n {FFFFFF}Utilisez /banque pour plus d'informations", COLOR_DEFAULT, 1428.8865, -986.0181, 996.1050, 5.0);

	CreateDynamicPickupEx(1239, 23, 1566.3444,23.3079,24.1641, 100.0, arrVirtualWorlds);
	CreateDynamic3DTextLabel("{08A2C4}Usine\n {FFFFFF}Utilisez /acheterbombe", COLOR_DEFAULT, 1566.3444,23.3079,24.1641, 3.0);

	CreateDynamicPickupEx(1239, 23, 1117.0446,-297.6486,73.9922, 100.0);
	CreateDynamic3DTextLabel("Graines\n{FFFFFF}Utilisez \"/gang achetergraine\" pour plus d'informations", COLOR_DEFAULT, 1117.0446,-297.6486,73.9922, 10.0);

	CreateDynamicPickupEx(1239, 23, 288.1275,-76.5828,1001.5156, 100.0, arrVirtualWorlds);
	CreateDynamic3DTextLabel("Ammunation\n{FFFFFF}Utilisez /sniper pour plus d'informations", COLOR_DEFAULT, 288.1275,-76.5828,1001.5156, 10.0);

	CreateDynamicPickupEx(1239, 23, 1455.4802, -1724.3979, 1052.0490, 100.0, arrVirtualWorlds);
	CreateDynamic3DTextLabel("Sortie de véhicule\n{FFFFFF}Utilisez /fourriere pour faire sortir un véhicule", COLOR_DEFAULT, 1455.4802, -1724.3979, 1052.0490, 3.0);

	for (new i = 0; i < sizeof(arrHospitalSpawns); i ++) {
		CreateDynamicMapIcon(arrHospitalSpawns[i][0], arrHospitalSpawns[i][1], arrHospitalSpawns[i][2], 22, 0);

		CreatePickup(1559, 23, arrHospitalSpawns[i][0], arrHospitalSpawns[i][1], arrHospitalSpawns[i][2] + 0.7);
		Create3DTextLabel("Hôpital", COLOR_DEFAULT, arrHospitalSpawns[i][0], arrHospitalSpawns[i][1], arrHospitalSpawns[i][2], 15.0, 0);

		CreatePickup(1240, 23, arrHospitalDeliver[i][0], arrHospitalDeliver[i][1], arrHospitalDeliver[i][2]);
		Create3DTextLabel("Hôpital\n{FFFFFF}/mdeposer pour livrer le patient", COLOR_DEFAULT, arrHospitalDeliver[i][0], arrHospitalDeliver[i][1], arrHospitalDeliver[i][2], 15.0, 0);
	}
	
	// INTRODUCTION
    TDEditor_INTRO[0] = TextDrawCreate(582.232666, 281.413818, "_~n~Bienvenido~n~_");
    TextDrawLetterSize(TDEditor_INTRO[0], 0.405000, 1.351111);
    TextDrawTextSize(TDEditor_INTRO[0], 0.000000, 115.000061);
    TextDrawAlignment(TDEditor_INTRO[0], 2);
    TextDrawColor(TDEditor_INTRO[0], -1);
    TextDrawUseBox(TDEditor_INTRO[0], 1);
    TextDrawBoxColor(TDEditor_INTRO[0], 5934335);
    TextDrawSetShadow(TDEditor_INTRO[0], 0);
    TextDrawSetOutline(TDEditor_INTRO[0], 0);
    TextDrawBackgroundColor(TDEditor_INTRO[0], 255);
    TextDrawFont(TDEditor_INTRO[0], 3);
    TextDrawSetProportional(TDEditor_INTRO[0], 1);
    TextDrawSetShadow(TDEditor_INTRO[0], 0);

    TDEditor_INTRO[1] = TextDrawCreate(524.481994, 323.293853, "DNI");
    TextDrawLetterSize(TDEditor_INTRO[1], 0.260333, 1.064888);
    TextDrawTextSize(TDEditor_INTRO[1], 580.249755, 0.000000);
    TextDrawAlignment(TDEditor_INTRO[1], 1);
    TextDrawColor(TDEditor_INTRO[1], -1);
    TextDrawUseBox(TDEditor_INTRO[1], 1);
    TextDrawBoxColor(TDEditor_INTRO[1], 1515870975);
    TextDrawSetShadow(TDEditor_INTRO[1], 0);
    TextDrawSetOutline(TDEditor_INTRO[1], 0);
    TextDrawBackgroundColor(TDEditor_INTRO[1], 255);
    TextDrawFont(TDEditor_INTRO[1], 3);
    TextDrawSetProportional(TDEditor_INTRO[1], 1);
    TextDrawSetShadow(TDEditor_INTRO[1], 0);

    TDEditor_INTRO[2] = TextDrawCreate(524.481994, 337.527496, "Nombre");
    TextDrawLetterSize(TDEditor_INTRO[2], 0.260333, 1.064888);
    TextDrawTextSize(TDEditor_INTRO[2], 580.249755, 0.000000);
    TextDrawAlignment(TDEditor_INTRO[2], 1);
    TextDrawColor(TDEditor_INTRO[2], -1);
    TextDrawUseBox(TDEditor_INTRO[2], 1);
    TextDrawBoxColor(TDEditor_INTRO[2], 1515870975);
    TextDrawSetShadow(TDEditor_INTRO[2], 0);
    TextDrawSetOutline(TDEditor_INTRO[2], 0);
    TextDrawBackgroundColor(TDEditor_INTRO[2], 255);
    TextDrawFont(TDEditor_INTRO[2], 3);
    TextDrawSetProportional(TDEditor_INTRO[2], 1);
    TextDrawSetShadow(TDEditor_INTRO[2], 0);

    TDEditor_INTRO[3] = TextDrawCreate(524.481994, 351.761138, "Apellido");
    TextDrawLetterSize(TDEditor_INTRO[3], 0.260333, 1.064888);
    TextDrawTextSize(TDEditor_INTRO[3], 580.249755, 0.000000);
    TextDrawAlignment(TDEditor_INTRO[3], 1);
    TextDrawColor(TDEditor_INTRO[3], -1);
    TextDrawUseBox(TDEditor_INTRO[3], 1);
    TextDrawBoxColor(TDEditor_INTRO[3], 1515870975);
    TextDrawSetShadow(TDEditor_INTRO[3], 0);
    TextDrawSetOutline(TDEditor_INTRO[3], 0);
    TextDrawBackgroundColor(TDEditor_INTRO[3], 255);
    TextDrawFont(TDEditor_INTRO[3], 3);
    TextDrawSetProportional(TDEditor_INTRO[3], 1);
    TextDrawSetShadow(TDEditor_INTRO[3], 0);

    TDEditor_INTRO[4] = TextDrawCreate(524.481994, 365.994781, "Sexo");
    TextDrawLetterSize(TDEditor_INTRO[4], 0.260333, 1.064888);
    TextDrawTextSize(TDEditor_INTRO[4], 580.249755, 0.000000);
    TextDrawAlignment(TDEditor_INTRO[4], 1);
    TextDrawColor(TDEditor_INTRO[4], -1);
    TextDrawUseBox(TDEditor_INTRO[4], 1);
    TextDrawBoxColor(TDEditor_INTRO[4], 1515870975);
    TextDrawSetShadow(TDEditor_INTRO[4], 0);
    TextDrawSetOutline(TDEditor_INTRO[4], 0);
    TextDrawBackgroundColor(TDEditor_INTRO[4], 255);
    TextDrawFont(TDEditor_INTRO[4], 3);
    TextDrawSetProportional(TDEditor_INTRO[4], 1);
    TextDrawSetShadow(TDEditor_INTRO[4], 0);

    TDEditor_INTRO[5] = TextDrawCreate(524.481994, 380.228424, "Origen");
    TextDrawLetterSize(TDEditor_INTRO[5], 0.260333, 1.064888);
    TextDrawTextSize(TDEditor_INTRO[5], 580.249755, 0.000000);
    TextDrawAlignment(TDEditor_INTRO[5], 1);
    TextDrawColor(TDEditor_INTRO[5], -1);
    TextDrawUseBox(TDEditor_INTRO[5], 1);
    TextDrawBoxColor(TDEditor_INTRO[5], 1515870975);
    TextDrawSetShadow(TDEditor_INTRO[5], 0);
    TextDrawSetOutline(TDEditor_INTRO[5], 0);
    TextDrawBackgroundColor(TDEditor_INTRO[5], 255);
    TextDrawFont(TDEditor_INTRO[5], 3);
    TextDrawSetProportional(TDEditor_INTRO[5], 1);
    TextDrawSetShadow(TDEditor_INTRO[5], 0);

    TDEditor_INTRO[6] = TextDrawCreate(611.033142, 380.228424, "Liberty_City");
    TextDrawLetterSize(TDEditor_INTRO[6], 0.260333, 1.064888);
    TextDrawTextSize(TDEditor_INTRO[6], 0.000000, 54.249633);
    TextDrawAlignment(TDEditor_INTRO[6], 2);
    TextDrawColor(TDEditor_INTRO[6], -1);
    TextDrawUseBox(TDEditor_INTRO[6], 1);
    TextDrawBoxColor(TDEditor_INTRO[6], 1515870975);
    TextDrawSetShadow(TDEditor_INTRO[6], 0);
    TextDrawSetOutline(TDEditor_INTRO[6], 0);
    TextDrawBackgroundColor(TDEditor_INTRO[6], 255);
    TextDrawFont(TDEditor_INTRO[6], 3);
    TextDrawSetProportional(TDEditor_INTRO[6], 1);
    TextDrawSetShadow(TDEditor_INTRO[6], 0);

    TDEditor_INTRO[7] = TextDrawCreate(524.481994, 394.462066, "Destino");
    TextDrawLetterSize(TDEditor_INTRO[7], 0.260333, 1.064888);
    TextDrawTextSize(TDEditor_INTRO[7], 580.249755, 0.000000);
    TextDrawAlignment(TDEditor_INTRO[7], 1);
    TextDrawColor(TDEditor_INTRO[7], -1);
    TextDrawUseBox(TDEditor_INTRO[7], 1);
    TextDrawBoxColor(TDEditor_INTRO[7], 1515870975);
    TextDrawSetShadow(TDEditor_INTRO[7], 0);
    TextDrawSetOutline(TDEditor_INTRO[7], 0);
    TextDrawBackgroundColor(TDEditor_INTRO[7], 255);
    TextDrawFont(TDEditor_INTRO[7], 3);
    TextDrawSetProportional(TDEditor_INTRO[7], 1);
    TextDrawSetShadow(TDEditor_INTRO[7], 0);

    TDEditor_INTRO[8] = TextDrawCreate(611.033142, 394.462066, "Los Santos");
    TextDrawLetterSize(TDEditor_INTRO[8], 0.260333, 1.064888);
    TextDrawTextSize(TDEditor_INTRO[8], 0.000000, 54.249633);
    TextDrawAlignment(TDEditor_INTRO[8], 2);
    TextDrawColor(TDEditor_INTRO[8], -1);
    TextDrawUseBox(TDEditor_INTRO[8], 1);
    TextDrawBoxColor(TDEditor_INTRO[8], 1515870975);
    TextDrawSetShadow(TDEditor_INTRO[8], 0);
    TextDrawSetOutline(TDEditor_INTRO[8], 0);
    TextDrawBackgroundColor(TDEditor_INTRO[8], 255);
    TextDrawFont(TDEditor_INTRO[8], 3);
    TextDrawSetProportional(TDEditor_INTRO[8], 1);
    TextDrawSetShadow(TDEditor_INTRO[8], 0);

    TDEditor_INTRO[9] = TextDrawCreate(524.148681, 408.695709, "Pulsa_Y_para_confimar,~n~pulsa_N_para_cambiar_el~n~sexo._Gracias_por_su~n~registro_en_SA:MP.");
    TextDrawLetterSize(TDEditor_INTRO[9], 0.260333, 1.064888);
    TextDrawTextSize(TDEditor_INTRO[9], 645.583068, 0.000000);
    TextDrawAlignment(TDEditor_INTRO[9], 1);
    TextDrawColor(TDEditor_INTRO[9], -1);
    TextDrawUseBox(TDEditor_INTRO[9], 1);
    TextDrawBoxColor(TDEditor_INTRO[9], 5934335);
    TextDrawSetShadow(TDEditor_INTRO[9], 0);
    TextDrawSetOutline(TDEditor_INTRO[9], 0);
    TextDrawBackgroundColor(TDEditor_INTRO[9], 255);
    TextDrawFont(TDEditor_INTRO[9], 1);
    TextDrawSetProportional(TDEditor_INTRO[9], 1);
    TextDrawSetShadow(TDEditor_INTRO[9], 0);

	
	// DASHCAM
    DashCam_TD[0] = TextDrawCreate(-13.529455, -46.250000, "box");
    TextDrawLetterSize(DashCam_TD[0], 0.000000, 7.176469);
    TextDrawTextSize(DashCam_TD[0], 666.705566, 0.000000);
    TextDrawAlignment(DashCam_TD[0], 1);
    TextDrawColor(DashCam_TD[0], -1);
    TextDrawUseBox(DashCam_TD[0], 1);
    TextDrawBoxColor(DashCam_TD[0], 150);
    TextDrawSetShadow(DashCam_TD[0], 0);
    TextDrawSetOutline(DashCam_TD[0], 0);
    TextDrawBackgroundColor(DashCam_TD[0], 255);
    TextDrawFont(DashCam_TD[0], 1);
    TextDrawSetProportional(DashCam_TD[0], 1);
    TextDrawSetShadow(DashCam_TD[0], 0);

    DashCam_TD[1] = TextDrawCreate(221.418075, 2.666724, "DDE_________PCOR-_________GeoPnt");
    TextDrawLetterSize(DashCam_TD[1], 0.400000, 1.600000);
    TextDrawAlignment(DashCam_TD[1], 1);
    TextDrawColor(DashCam_TD[1], -1);
    TextDrawSetShadow(DashCam_TD[1], 0);
    TextDrawSetOutline(DashCam_TD[1], 0);
    TextDrawBackgroundColor(DashCam_TD[1], 255);
    TextDrawFont(DashCam_TD[1], 2);
    TextDrawSetProportional(DashCam_TD[1], 1);
    TextDrawSetShadow(DashCam_TD[1], 0);

    DashCam_TD[2] = TextDrawCreate(516.823364, 24.916645, "L.S.P.D");
    TextDrawLetterSize(DashCam_TD[2], 0.770823, 7.083333);
    TextDrawAlignment(DashCam_TD[2], 1);
    TextDrawColor(DashCam_TD[2], -176);
    TextDrawSetShadow(DashCam_TD[2], 256);
    TextDrawSetOutline(DashCam_TD[2], 0);
    TextDrawBackgroundColor(DashCam_TD[2], 255);
    TextDrawFont(DashCam_TD[2], 2);
    TextDrawSetProportional(DashCam_TD[2], 1);
    TextDrawSetShadow(DashCam_TD[2], 256);

    DashCam_TD[3] = TextDrawCreate(517.235290, 81.450157, "LOS_SANTOS_COUNTY");
    TextDrawLetterSize(DashCam_TD[3], 0.283293, 1.751667);
    TextDrawAlignment(DashCam_TD[3], 1);
    TextDrawColor(DashCam_TD[3], -176);
    TextDrawSetShadow(DashCam_TD[3], 0);
    TextDrawSetOutline(DashCam_TD[3], 0);
    TextDrawBackgroundColor(DashCam_TD[3], 255);
    TextDrawFont(DashCam_TD[3], 1);
    TextDrawSetProportional(DashCam_TD[3], 1);
    TextDrawSetShadow(DashCam_TD[3], 0);

    DashCam_TD[4] = TextDrawCreate(519.235107, 112.716445, "box");
    TextDrawLetterSize(DashCam_TD[4], 0.000000, -0.258823);
    TextDrawTextSize(DashCam_TD[4], 614.528991, 0.000000);
    TextDrawAlignment(DashCam_TD[4], 1);
    TextDrawColor(DashCam_TD[4], -1);
    TextDrawUseBox(DashCam_TD[4], 1);
    TextDrawBoxColor(DashCam_TD[4], -176);
    TextDrawSetShadow(DashCam_TD[4], 0);
    TextDrawSetOutline(DashCam_TD[4], 0);
    TextDrawBackgroundColor(DashCam_TD[4], 255);
    TextDrawFont(DashCam_TD[4], 1);
    TextDrawSetProportional(DashCam_TD[4], 1);
    TextDrawSetShadow(DashCam_TD[4], 0);

    DashCam_TD[5] = TextDrawCreate(213.294174, 206.133163, "box");
    TextDrawLetterSize(DashCam_TD[5], 0.000000, -0.258823);
    TextDrawTextSize(DashCam_TD[5], 308.588104, 0.000000);
    TextDrawAlignment(DashCam_TD[5], 1);
    TextDrawColor(DashCam_TD[5], -1);
    TextDrawUseBox(DashCam_TD[5], 1);
    TextDrawBoxColor(DashCam_TD[5], -176);
    TextDrawSetShadow(DashCam_TD[5], 0);
    TextDrawSetOutline(DashCam_TD[5], 0);
    TextDrawBackgroundColor(DashCam_TD[5], 255);
    TextDrawFont(DashCam_TD[5], 1);
    TextDrawSetProportional(DashCam_TD[5], 1);
    TextDrawSetShadow(DashCam_TD[5], 0);

    DashCam_TD[6] = TextDrawCreate(333.482849, 205.433151, "box");
    TextDrawLetterSize(DashCam_TD[6], 0.000000, -0.258823);
    TextDrawTextSize(DashCam_TD[6], 428.776733, 0.000000);
    TextDrawAlignment(DashCam_TD[6], 1);
    TextDrawColor(DashCam_TD[6], -1);
    TextDrawUseBox(DashCam_TD[6], 1);
    TextDrawBoxColor(DashCam_TD[6], -176);
    TextDrawSetShadow(DashCam_TD[6], 0);
    TextDrawSetOutline(DashCam_TD[6], 0);
    TextDrawBackgroundColor(DashCam_TD[6], 255);
    TextDrawFont(DashCam_TD[6], 1);
    TextDrawSetProportional(DashCam_TD[6], 1);
    TextDrawSetShadow(DashCam_TD[6], 0);

    DashCam_TD[7] = TextDrawCreate(319.176452, 197.583312, "X");
    TextDrawLetterSize(DashCam_TD[7], 0.280470, 1.273332);
    TextDrawAlignment(DashCam_TD[7], 1);
    TextDrawColor(DashCam_TD[7], -176);
    TextDrawSetShadow(DashCam_TD[7], 0);
    TextDrawSetOutline(DashCam_TD[7], 0);
    TextDrawBackgroundColor(DashCam_TD[7], 255);
    TextDrawFont(DashCam_TD[7], 2);
    TextDrawSetProportional(DashCam_TD[7], 1);
    TextDrawSetShadow(DashCam_TD[7], 0);

    DashCam_TD[8] = TextDrawCreate(322.999847, 104.816696, "box");
    TextDrawLetterSize(DashCam_TD[8], 0.000000, 9.152941);
    TextDrawTextSize(DashCam_TD[8], 321.743743, 0.000000);
    TextDrawAlignment(DashCam_TD[8], 1);
    TextDrawColor(DashCam_TD[8], -1);
    TextDrawUseBox(DashCam_TD[8], 1);
    TextDrawBoxColor(DashCam_TD[8], -176);
    TextDrawSetShadow(DashCam_TD[8], 0);
    TextDrawSetOutline(DashCam_TD[8], 0);
    TextDrawBackgroundColor(DashCam_TD[8], 255);
    TextDrawFont(DashCam_TD[8], 1);
    TextDrawSetProportional(DashCam_TD[8], 1);
    TextDrawSetShadow(DashCam_TD[8], 0);

    DashCam_TD[9] = TextDrawCreate(323.917816, 221.416931, "box");
    TextDrawLetterSize(DashCam_TD[9], 0.000000, 9.152944);
    TextDrawTextSize(DashCam_TD[9], 322.270874, 0.000000);
    TextDrawAlignment(DashCam_TD[9], 1);
    TextDrawColor(DashCam_TD[9], -1);
    TextDrawUseBox(DashCam_TD[9], 1);
    TextDrawBoxColor(DashCam_TD[9], -176);
    TextDrawSetShadow(DashCam_TD[9], 0);
    TextDrawSetOutline(DashCam_TD[9], 0);
    TextDrawBackgroundColor(DashCam_TD[9], 255);
    TextDrawFont(DashCam_TD[9], 1);
    TextDrawSetProportional(DashCam_TD[9], 1);
    TextDrawSetShadow(DashCam_TD[9], 0);

    DashCam_TD[10] = TextDrawCreate(316.711730, 307.899963, "box");
    TextDrawLetterSize(DashCam_TD[10], 0.000000, -0.399998);
    TextDrawTextSize(DashCam_TD[10], 329.652801, 0.000000);
    TextDrawAlignment(DashCam_TD[10], 1);
    TextDrawColor(DashCam_TD[10], -1);
    TextDrawUseBox(DashCam_TD[10], 1);
    TextDrawBoxColor(DashCam_TD[10], -176);
    TextDrawSetShadow(DashCam_TD[10], 0);
    TextDrawSetOutline(DashCam_TD[10], 0);
    TextDrawBackgroundColor(DashCam_TD[10], 255);
    TextDrawFont(DashCam_TD[10], 1);
    TextDrawSetProportional(DashCam_TD[10], 1);
    TextDrawSetShadow(DashCam_TD[10], 0);

    DashCam_TD[11] = TextDrawCreate(316.193939, 103.633392, "box");
    TextDrawLetterSize(DashCam_TD[11], 0.000000, -0.399998);
    TextDrawTextSize(DashCam_TD[11], 329.135009, 0.000000);
    TextDrawAlignment(DashCam_TD[11], 1);
    TextDrawColor(DashCam_TD[11], -1);
    TextDrawUseBox(DashCam_TD[11], 1);
    TextDrawBoxColor(DashCam_TD[11], -176);
    TextDrawSetShadow(DashCam_TD[11], 0);
    TextDrawSetOutline(DashCam_TD[11], 0);
    TextDrawBackgroundColor(DashCam_TD[11], 255);
    TextDrawFont(DashCam_TD[11], 1);
    TextDrawSetProportional(DashCam_TD[11], 1);
    TextDrawSetShadow(DashCam_TD[11], 0);

    DashCam_TD[12] = TextDrawCreate(212.311706, 200.733520, "box");
    TextDrawLetterSize(DashCam_TD[12], 0.000000, 1.011765);
    TextDrawTextSize(DashCam_TD[12], 209.723266, 0.000000);
    TextDrawAlignment(DashCam_TD[12], 1);
    TextDrawColor(DashCam_TD[12], -1);
    TextDrawUseBox(DashCam_TD[12], 1);
    TextDrawBoxColor(DashCam_TD[12], -176);
    TextDrawSetShadow(DashCam_TD[12], 0);
    TextDrawSetOutline(DashCam_TD[12], 0);
    TextDrawBackgroundColor(DashCam_TD[12], 255);
    TextDrawFont(DashCam_TD[12], 1);
    TextDrawSetProportional(DashCam_TD[12], 1);
    TextDrawSetShadow(DashCam_TD[12], 0);

    DashCam_TD[13] = TextDrawCreate(432.058776, 200.65870, "box");
    TextDrawLetterSize(DashCam_TD[13], 0.000000, 1.011765);
    TextDrawTextSize(DashCam_TD[13], 430.470336, 0.000000);
    TextDrawAlignment(DashCam_TD[13], 1);
    TextDrawColor(DashCam_TD[13], -1);
    TextDrawUseBox(DashCam_TD[13], 1);
    TextDrawBoxColor(DashCam_TD[13], -176);
    TextDrawSetShadow(DashCam_TD[13], 0);
    TextDrawSetOutline(DashCam_TD[13], 0);
    TextDrawBackgroundColor(DashCam_TD[13], 255);
    TextDrawFont(DashCam_TD[13], 1);
    TextDrawSetProportional(DashCam_TD[13], 1);
    TextDrawSetShadow(DashCam_TD[13], 0);

    DashCam_TD[14] = TextDrawCreate(519.110961, 112.666244, "box");
    TextDrawLetterSize(DashCam_TD[14], 0.000000, -0.917647);
    TextDrawTextSize(DashCam_TD[14], 516.993286, 0.000000);
    TextDrawAlignment(DashCam_TD[14], 1);
    TextDrawColor(DashCam_TD[14], -1);
    TextDrawUseBox(DashCam_TD[14], 1);
    TextDrawBoxColor(DashCam_TD[14], -176);
    TextDrawSetShadow(DashCam_TD[14], 0);
    TextDrawSetOutline(DashCam_TD[14], 0);
    TextDrawBackgroundColor(DashCam_TD[14], 255);
    TextDrawFont(DashCam_TD[14], 1);
    TextDrawSetProportional(DashCam_TD[14], 1);
    TextDrawSetShadow(DashCam_TD[14], 0);

    DashCam_TD[15] = TextDrawCreate(215.405899, 360.433044, "box");
    TextDrawLetterSize(DashCam_TD[15], 0.000000, -0.211761);
    TextDrawTextSize(DashCam_TD[15], 431.640838, 0.000000);
    TextDrawAlignment(DashCam_TD[15], 1);
    TextDrawColor(DashCam_TD[15], -1);
    TextDrawUseBox(DashCam_TD[15], 1);
    TextDrawBoxColor(DashCam_TD[15], -176);
    TextDrawSetShadow(DashCam_TD[15], 0);
    TextDrawSetOutline(DashCam_TD[15], 0);
    TextDrawBackgroundColor(DashCam_TD[15], 255);
    TextDrawFont(DashCam_TD[15], 1);
    TextDrawSetProportional(DashCam_TD[15], 1);
    TextDrawSetShadow(DashCam_TD[15], 0);

    DashCam_TD[16] = TextDrawCreate(566.423583, 113.116439, "box");
    TextDrawLetterSize(DashCam_TD[16], 0.000000, -0.917647);
    TextDrawTextSize(DashCam_TD[16], 564.305908, 0.000000);
    TextDrawAlignment(DashCam_TD[16], 1);
    TextDrawColor(DashCam_TD[16], -1);
    TextDrawUseBox(DashCam_TD[16], 1);
    TextDrawBoxColor(DashCam_TD[16], -176);
    TextDrawSetShadow(DashCam_TD[16], 0);
    TextDrawSetOutline(DashCam_TD[16], 0);
    TextDrawBackgroundColor(DashCam_TD[16], 255);
    TextDrawFont(DashCam_TD[16], 1);
    TextDrawSetProportional(DashCam_TD[16], 1);
    TextDrawSetShadow(DashCam_TD[16], 0);

    DashCam_TD[17] = TextDrawCreate(616.682006, 112.766532, "box");
    TextDrawLetterSize(DashCam_TD[17], 0.000000, -0.917647);
    TextDrawTextSize(DashCam_TD[17], 614.564331, 0.000000);
    TextDrawAlignment(DashCam_TD[17], 1);
    TextDrawColor(DashCam_TD[17], -1);
    TextDrawUseBox(DashCam_TD[17], 1);
    TextDrawBoxColor(DashCam_TD[17], -176);
    TextDrawSetShadow(DashCam_TD[17], 0);
    TextDrawSetOutline(DashCam_TD[17], 0);
    TextDrawBackgroundColor(DashCam_TD[17], 255);
    TextDrawFont(DashCam_TD[17], 1);
    TextDrawSetProportional(DashCam_TD[17], 1);
    TextDrawSetShadow(DashCam_TD[17], 0);

    DashCam_TD[18] = TextDrawCreate(533.705688, 97.033363, "LD_BEAT:DOWN");
    TextDrawLetterSize(DashCam_TD[18], 0.000000, 0.000000);
    TextDrawTextSize(DashCam_TD[18], 11.882333, 9.323353);
    TextDrawAlignment(DashCam_TD[18], 1);
    TextDrawColor(DashCam_TD[18], -1);
    TextDrawSetShadow(DashCam_TD[18], 0);
    TextDrawSetOutline(DashCam_TD[18], 0);
    TextDrawBackgroundColor(DashCam_TD[18], 255);
    TextDrawFont(DashCam_TD[18], 4);
    TextDrawSetProportional(DashCam_TD[18], 0);
    TextDrawSetShadow(DashCam_TD[18], 0);

    DashCam_TD[19] = TextDrawCreate(-12.588256, 22.349975, "box");
    TextDrawLetterSize(DashCam_TD[19], 0.000000, 47.552913);
    TextDrawTextSize(DashCam_TD[19], 650.705810, 0.000000);
    TextDrawAlignment(DashCam_TD[19], 1);
    TextDrawColor(DashCam_TD[19], -1);
    TextDrawUseBox(DashCam_TD[19], 1);
    TextDrawBoxColor(DashCam_TD[19], 80);
    TextDrawSetShadow(DashCam_TD[19], 0);
    TextDrawSetOutline(DashCam_TD[19], 0);
    TextDrawBackgroundColor(DashCam_TD[19], 255);
    TextDrawFont(DashCam_TD[19], 1);
    TextDrawSetProportional(DashCam_TD[19], 1);
    TextDrawSetShadow(DashCam_TD[19], 0);
	
	// Textdraws
	gServerTextdraws[2] = TextDrawCreate(11.000000, 430.000000, "~r~UTILISER~w~ /ACCEPTER MORT.");
	TextDrawBackgroundColor(gServerTextdraws[2], 255);
	TextDrawFont(gServerTextdraws[2], 1);
	TextDrawLetterSize(gServerTextdraws[2], 0.300000, 1.100000);
	TextDrawColor(gServerTextdraws[2], -1);
	TextDrawSetOutline(gServerTextdraws[2], 1);
	TextDrawSetProportional(gServerTextdraws[2], 1);
	TextDrawSetSelectable(gServerTextdraws[2], 0);

	gServerTextdraws[3] = TextDrawCreate(237.000000, 409.000000, "~r~Reboot du serveur dans:~w~ 00:00");
	TextDrawBackgroundColor(gServerTextdraws[3], 255);
	TextDrawFont(gServerTextdraws[3], 1);
	TextDrawLetterSize(gServerTextdraws[3], 0.480000, 1.300000);
	TextDrawColor(gServerTextdraws[3], -1);
	TextDrawSetOutline(gServerTextdraws[3], 1);
	TextDrawSetProportional(gServerTextdraws[3], 1);
	TextDrawSetSelectable(gServerTextdraws[3], 0);

    Textdraw0 = TextDrawCreate(650.500000, 0.877777, "usebox");
	TextDrawLetterSize(Textdraw0, 0.000000, 12.008642);
	TextDrawTextSize(Textdraw0, -5.500000, 0.000000);
	TextDrawAlignment(Textdraw0, 1);
	TextDrawColor(Textdraw0, 0);
	TextDrawUseBox(Textdraw0, true);
	TextDrawBoxColor(Textdraw0, 102);
	TextDrawSetShadow(Textdraw0, 0);
	TextDrawSetOutline(Textdraw0, 0);
	TextDrawFont(Textdraw0, 0);

	Textdraw1 = TextDrawCreate(646.000000, 337.255645, "usebox");
	TextDrawLetterSize(Textdraw1, 0.000000, 12.008642);
	TextDrawTextSize(Textdraw1, -11.000000, 0.000000);
	TextDrawAlignment(Textdraw1, 1);
	TextDrawColor(Textdraw1, 0);
	TextDrawUseBox(Textdraw1, true);
	TextDrawBoxColor(Textdraw1, 102);
	TextDrawSetShadow(Textdraw1, 0);
	TextDrawSetOutline(Textdraw1, 0);
	TextDrawFont(Textdraw1, 0);

	Textdraw2 = TextDrawCreate(-1.000000, 111.999954, "LD_SPAC:white");
	TextDrawLetterSize(Textdraw2, 0.000000, 0.000000);
	TextDrawTextSize(Textdraw2, 649.000000, 2.488876);
	TextDrawAlignment(Textdraw2, 1);
	TextDrawColor(Textdraw2, -1);
	TextDrawSetShadow(Textdraw2, 0);
	TextDrawSetOutline(Textdraw2, 0);
	TextDrawFont(Textdraw2, 4);

	Textdraw3 = TextDrawCreate(-6.000000, 332.644500, "LD_SPAC:white");
	TextDrawLetterSize(Textdraw3, 0.000000, 0.000000);
	TextDrawTextSize(Textdraw3, 649.000000, 2.488876);
	TextDrawAlignment(Textdraw3, 1);
	TextDrawColor(Textdraw3, -1);
	TextDrawSetShadow(Textdraw3, 0);
	TextDrawSetOutline(Textdraw3, 0);
	TextDrawFont(Textdraw3, 4);

	Textdraw4 = TextDrawCreate(322.500000, 330.888977, "~r~LSMEMORIES.NET");
	TextDrawLetterSize(Textdraw4, 0.879500, 4.014222);
	TextDrawAlignment(Textdraw4, 1);
	TextDrawColor(Textdraw4, -1);
	TextDrawSetShadow(Textdraw4, 0);
	TextDrawSetOutline(Textdraw4, 1);
	TextDrawBackgroundColor(Textdraw4, 51);
	TextDrawFont(Textdraw4, 2);
	TextDrawSetProportional(Textdraw4, 1);


	Bcasier1 = 	CreateDynamicObject(2332, 1435.49451, -965.26141, 984.18042,   0.00000, 0.00000, 0.00000);
	Bcasier2 =  CreateDynamicObject(2332, 1437.60864, -965.27802, 984.18042,   0.00000, 0.00000, 0.00000);
	Bcasier3 =	CreateDynamicObject(2332, 1433.40186, -965.25720, 984.18042,   0.00000, 0.00000, 0.00000);

	coffreba = CreateDynamicObject(2634, 1435.35193, -980.29688, 984.21887,   0.00000, 0.00000, 179.04001);
	coffreba2 = CreateDynamicObject(1495, 1438.0971, -1002.6653, 995.0795,   0.00000, 0.00000, 0.00000);

	// Driving test
	for (new i = 0; i < MAX_PLAYERS; i ++) {
		arrVirtualWorlds[i] = i + 2000;
	}
	CreateDynamicObjectEx(1319, -2058.461425, -65.593460, 34.525119, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
	CreateDynamicObjectEx(1319, -2058.981201, -69.791046, 34.525119, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
	CreateDynamicObjectEx(1319, -2059.461425, -65.588729, 34.525119, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
	CreateDynamicObjectEx(1319, -2059.981201, -69.786315, 34.525119, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
	CreateDynamicObjectEx(1319, -2060.461425, -65.583999, 34.525119, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
	CreateDynamicObjectEx(1319, -2060.981201, -69.781585, 34.525119, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
	CreateDynamicObjectEx(1319, -2061.461425, -65.579269, 34.525119, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
	CreateDynamicObjectEx(1319, -2061.981201, -69.776855, 34.525119, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
	CreateDynamicObjectEx(1319, -2062.461425, -65.574539, 34.525119, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
	CreateDynamicObjectEx(1319, -2062.981201, -69.772125, 34.525119, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
	CreateDynamicObjectEx(1319, -2063.461425, -65.569808, 34.525119, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
	CreateDynamicObjectEx(1319, -2063.981201, -69.767395, 34.525119, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
	CreateDynamicObjectEx(1319, -2064.461425, -65.565078, 34.525119, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
	CreateDynamicObjectEx(1319, -2064.981201, -69.762664, 34.525119, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
	CreateDynamicObjectEx(1319, -2065.461425, -65.560348, 34.525119, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
	CreateDynamicObjectEx(1319, -2065.981201, -69.757934, 34.525119, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
	CreateDynamicObjectEx(1319, -2066.461425, -65.555618, 34.525119, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
	CreateDynamicObjectEx(1319, -2066.981201, -69.753204, 34.525119, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
	CreateDynamicObjectEx(1319, -2067.461425, -65.550888, 34.525119, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
	CreateDynamicObjectEx(1319, -2067.981201, -69.748474, 34.525119, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
	CreateDynamicObjectEx(1319, -2068.461425, -65.546157, 34.525119, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
	CreateDynamicObjectEx(1319, -2068.981201, -69.743743, 34.525119, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
	CreateDynamicObjectEx(1319, -2069.461425, -65.541427, 34.525119, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
	CreateDynamicObjectEx(1319, -2069.981201, -69.739013, 34.525119, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
	CreateDynamicObjectEx(1319, -2070.461425, -65.536697, 34.525119, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
	CreateDynamicObjectEx(1319, -2070.981201, -69.734283, 34.525119, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
	CreateDynamicObjectEx(1319, -2071.461425, -65.531967, 34.525119, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
	CreateDynamicObjectEx(1319, -2071.981201, -69.729553, 34.525119, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
	CreateDynamicObjectEx(1319, -2072.461425, -65.527236, 34.525119, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
	CreateDynamicObjectEx(1319, -2072.981201, -69.724822, 34.525119, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
	CreateDynamicObjectEx(1319, -2073.461425, -65.522506, 34.525119, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
	CreateDynamicObjectEx(1319, -2073.981201, -69.720092, 34.525119, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
	CreateDynamicObjectEx(1319, -2074.461425, -65.517776, 34.525119, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
	CreateDynamicObjectEx(1319, -2074.981201, -69.715362, 34.525119, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
	CreateDynamicObjectEx(1319, -2075.461425, -65.513046, 34.525119, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
	CreateDynamicObjectEx(1319, -2075.981201, -69.710632, 34.525119, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
	CreateDynamicObjectEx(1319, -2076.461425, -65.508316, 34.525119, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
	CreateDynamicObjectEx(1319, -2076.981201, -69.705902, 34.525119, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
	CreateDynamicObjectEx(1319, -2077.461425, -65.503585, 34.525119, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
	CreateDynamicObjectEx(1319, -2077.981201, -69.701171, 34.525119, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
	CreateDynamicObjectEx(3578, -2104.345214, -70.363998, 34.751861, 0.000000, 0.000000, -0.036066, 0.0, 200.0, arrVirtualWorlds);
	CreateDynamicObjectEx(3578, -2104.343017, -65.663986, 34.751861, 0.000000, 0.000000, -0.036066, 0.0, 200.0, arrVirtualWorlds);
	CreateDynamicObjectEx(3578, -2114.251708, -65.657752, 34.751861, 0.000000, 0.000000, -0.036066, 0.0, 200.0, arrVirtualWorlds);
	CreateDynamicObjectEx(3578, -2114.253662, -70.347732, 34.751861, 0.000000, 0.000000, -0.036066, 0.0, 200.0, arrVirtualWorlds);
	CreateDynamicObjectEx(3578, -2123.241943, -65.652107, 34.751861, 0.000000, 0.000000, -0.036066, 0.0, 200.0, arrVirtualWorlds);
	CreateDynamicObjectEx(3578, -2122.997802, -70.342224, 34.751861, 0.000000, 0.000000, -0.036066, 0.0, 200.0, arrVirtualWorlds);
	CreateDynamicObjectEx(1319, -2171.885742, -106.985626, 34.519943, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
	CreateDynamicObjectEx(1319, -2167.690429, -107.523513, 34.519943, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
	CreateDynamicObjectEx(1319, -2171.894531, -107.985580, 34.519943, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
	CreateDynamicObjectEx(1319, -2167.699218, -108.523468, 34.519943, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
	CreateDynamicObjectEx(1319, -2171.903320, -108.985534, 34.519943, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
	CreateDynamicObjectEx(1319, -2167.708007, -109.523422, 34.519943, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
	CreateDynamicObjectEx(1319, -2171.912109, -109.985488, 34.519943, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
	CreateDynamicObjectEx(1319, -2167.716796, -110.523376, 34.519943, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
	CreateDynamicObjectEx(1319, -2171.920898, -110.985443, 34.519943, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
	CreateDynamicObjectEx(1319, -2167.725585, -111.523330, 34.519943, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
	CreateDynamicObjectEx(1319, -2171.929687, -111.985397, 34.519943, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
	CreateDynamicObjectEx(1319, -2167.734375, -112.523284, 34.519943, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
	CreateDynamicObjectEx(1319, -2171.938476, -112.985351, 34.519943, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
	CreateDynamicObjectEx(1319, -2167.743164, -113.523239, 34.519943, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
	CreateDynamicObjectEx(1319, -2171.947265, -113.985305, 34.519943, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
	CreateDynamicObjectEx(1319, -2167.751953, -114.523193, 34.519943, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
	CreateDynamicObjectEx(1319, -2171.956054, -114.985260, 34.519943, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
	CreateDynamicObjectEx(1319, -2167.760742, -115.523147, 34.519943, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
	CreateDynamicObjectEx(1319, -2171.964843, -115.985214, 34.519943, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
	CreateDynamicObjectEx(1319, -2167.769531, -116.523101, 34.519943, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
	CreateDynamicObjectEx(1319, -2171.973632, -116.985168, 34.519943, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
	CreateDynamicObjectEx(1319, -2167.778320, -117.523056, 34.519943, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
	CreateDynamicObjectEx(1319, -2171.982421, -117.985122, 34.519943, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
	CreateDynamicObjectEx(1319, -2167.787109, -118.523010, 34.519943, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
	CreateDynamicObjectEx(1319, -2171.991210, -118.985076, 34.519943, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
	CreateDynamicObjectEx(1319, -2167.795898, -119.522964, 34.519943, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
	CreateDynamicObjectEx(1319, -2172.000000, -119.985031, 34.519943, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
	CreateDynamicObjectEx(1319, -2167.804687, -120.522918, 34.519943, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
	CreateDynamicObjectEx(1319, -2172.008789, -120.984985, 34.519943, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
	CreateDynamicObjectEx(1319, -2167.813476, -121.522872, 34.519943, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
	CreateDynamicObjectEx(1319, -2172.017578, -121.984939, 34.519943, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
	CreateDynamicObjectEx(1319, -2167.822265, -122.522827, 34.519943, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
	CreateDynamicObjectEx(1319, -2172.026367, -122.984893, 34.519943, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
	CreateDynamicObjectEx(1319, -2167.831054, -123.522781, 34.519943, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
	CreateDynamicObjectEx(1319, -2172.035156, -123.984848, 34.519943, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
	CreateDynamicObjectEx(1319, -2167.839843, -124.522735, 34.519943, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
	CreateDynamicObjectEx(1319, -2172.043945, -124.984802, 34.519943, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
	CreateDynamicObjectEx(1319, -2167.848632, -125.522689, 34.519943, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
	CreateDynamicObjectEx(1319, -2172.052734, -125.984756, 34.519943, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
	CreateDynamicObjectEx(1319, -2167.857421, -126.522644, 34.519943, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
	CreateDynamicObjectEx(3578, -2167.459716, -160.511413, 34.921886, 0.000000, 0.000000, 84.243225, 0.0, 200.0, arrVirtualWorlds);
	CreateDynamicObjectEx(3578, -2169.737548, -170.268875, 34.921886, 0.000000, 0.000000, 69.943244, 0.0, 200.0, arrVirtualWorlds);
	CreateDynamicObjectEx(3578, -2174.539306, -179.056747, 34.921901, 0.000000, 0.000000, 53.343246, 0.0, 200.0, arrVirtualWorlds);
	CreateDynamicObjectEx(3798, -2211.481933, -190.448471, 34.153205, 0.000000, 0.000000, 88.628005, 0.0, 200.0, arrVirtualWorlds);
	CreateDynamicObjectEx(3798, -2209.643066, -190.492553, 34.153205, 0.000000, 0.000000, 88.628005, 0.0, 200.0, arrVirtualWorlds);
	CreateDynamicObjectEx(3798, -2207.663574, -190.539978, 34.153205, 0.000000, 0.000000, 88.628005, 0.0, 200.0, arrVirtualWorlds);
	CreateDynamicObjectEx(3798, -2213.440673, -190.401504, 34.153205, 0.000000, 0.000000, 88.628005, 0.0, 200.0, arrVirtualWorlds);
	CreateDynamicObjectEx(3798, -2215.380615, -190.355041, 34.153205, 0.000000, 0.000000, 88.628005, 0.0, 200.0, arrVirtualWorlds);
	CreateDynamicObjectEx(3798, -2217.260009, -190.309997, 34.153205, 0.000000, 0.000000, 88.628005, 0.0, 200.0, arrVirtualWorlds);
	CreateDynamicObjectEx(3798, -2219.270019, -190.261825, 34.153205, 0.000000, 0.000000, 88.628005, 0.0, 200.0, arrVirtualWorlds);
	CreateDynamicObjectEx(3798, -2221.260253, -190.214187, 34.153205, 0.000000, 0.000000, 88.628005, 0.0, 200.0, arrVirtualWorlds);
	CreateDynamicObjectEx(3798, -2223.209716, -190.167465, 34.153205, 0.000000, 0.000000, 88.628005, 0.0, 200.0, arrVirtualWorlds);
	CreateDynamicObjectEx(3798, -2225.157226, -190.120697, 34.153205, 0.000000, 0.000000, 88.628005, 0.0, 200.0, arrVirtualWorlds);
	CreateDynamicObjectEx(3798, -2207.529052, -184.941589, 34.153205, 0.000000, 0.000000, 88.628005, 0.0, 200.0, arrVirtualWorlds);
	CreateDynamicObjectEx(3798, -2209.478027, -184.894882, 34.153205, 0.000000, 0.000000, 88.628005, 0.0, 200.0, arrVirtualWorlds);
	CreateDynamicObjectEx(3798, -2211.367919, -184.849639, 34.153205, 0.000000, 0.000000, 88.628005, 0.0, 200.0, arrVirtualWorlds);
	CreateDynamicObjectEx(3798, -2213.207031, -184.805572, 34.153205, 0.000000, 0.000000, 88.628005, 0.0, 200.0, arrVirtualWorlds);
	CreateDynamicObjectEx(3798, -2215.197509, -184.757934, 34.153205, 0.000000, 0.000000, 88.628005, 0.0, 200.0, arrVirtualWorlds);
	CreateDynamicObjectEx(3798, -2217.137207, -184.711456, 34.153205, 0.000000, 0.000000, 88.628005, 0.0, 200.0, arrVirtualWorlds);
	CreateDynamicObjectEx(3798, -2219.076171, -184.665054, 34.153205, 0.000000, 0.000000, 88.628005, 0.0, 200.0, arrVirtualWorlds);
	CreateDynamicObjectEx(3798, -2221.026367, -184.618377, 34.153205, 0.000000, 0.000000, 88.628005, 0.0, 200.0, arrVirtualWorlds);
	CreateDynamicObjectEx(3798, -2223.036132, -184.570236, 34.153205, 0.000000, 0.000000, 88.628005, 0.0, 200.0, arrVirtualWorlds);
	CreateDynamicObjectEx(3798, -2225.006835, -184.523101, 34.153205, 0.000000, 0.000000, 88.628005, 0.0, 200.0, arrVirtualWorlds);
	CreateDynamicObjectEx(1319, -2261.793457, -333.091308, 50.210819, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
	CreateDynamicObjectEx(1319, -2257.583496, -333.497985, 50.210819, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
	CreateDynamicObjectEx(1319, -2261.771484, -334.091064, 50.210819, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
	CreateDynamicObjectEx(1319, -2257.561523, -334.497741, 50.210819, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
	CreateDynamicObjectEx(1319, -2261.749511, -335.090820, 50.210819, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
	CreateDynamicObjectEx(1319, -2257.539550, -335.497497, 50.210819, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
	CreateDynamicObjectEx(1319, -2261.727539, -336.090576, 50.210819, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
	CreateDynamicObjectEx(1319, -2257.517578, -336.497253, 50.210819, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
	CreateDynamicObjectEx(1319, -2261.705566, -337.090332, 50.210819, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
	CreateDynamicObjectEx(1319, -2257.495605, -337.497009, 50.210819, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
	CreateDynamicObjectEx(1319, -2261.683593, -338.090087, 50.210819, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
	CreateDynamicObjectEx(1319, -2257.473632, -338.496765, 50.210819, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
	CreateDynamicObjectEx(1319, -2261.661621, -339.089843, 50.210819, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
	CreateDynamicObjectEx(1319, -2257.451660, -339.496520, 50.210819, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
	CreateDynamicObjectEx(1319, -2261.639648, -340.089599, 50.210819, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
	CreateDynamicObjectEx(1319, -2257.429687, -340.496276, 50.210819, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
	CreateDynamicObjectEx(1319, -2261.617675, -341.089355, 50.210819, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
	CreateDynamicObjectEx(1319, -2257.407714, -341.496032, 50.210819, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
	CreateDynamicObjectEx(1319, -2261.595703, -342.089111, 50.210819, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
	CreateDynamicObjectEx(1319, -2257.385742, -342.495788, 50.210819, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
	CreateDynamicObjectEx(1319, -2261.573730, -343.088867, 50.210819, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
	CreateDynamicObjectEx(1319, -2257.363769, -343.495544, 50.210819, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
	CreateDynamicObjectEx(1319, -2261.551757, -344.088623, 50.210819, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
	CreateDynamicObjectEx(1319, -2257.341796, -344.495300, 50.210819, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
	CreateDynamicObjectEx(1319, -2261.529785, -345.088378, 50.210819, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
	CreateDynamicObjectEx(1319, -2257.319824, -345.495056, 50.210819, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
	CreateDynamicObjectEx(1319, -2261.507812, -346.088134, 50.210819, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
	CreateDynamicObjectEx(1319, -2257.297851, -346.494812, 50.210819, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
	CreateDynamicObjectEx(1319, -2261.485839, -347.087890, 50.210819, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
	CreateDynamicObjectEx(1319, -2257.275878, -347.494567, 50.210819, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
	CreateDynamicObjectEx(1319, -2261.463867, -348.087646, 50.210819, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
	CreateDynamicObjectEx(1319, -2257.253906, -348.494323, 50.210819, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
	CreateDynamicObjectEx(1319, -2261.441894, -349.087402, 50.210819, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
	CreateDynamicObjectEx(1319, -2257.231933, -349.494079, 50.210819, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
	CreateDynamicObjectEx(1319, -2261.419921, -350.087158, 50.210819, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
	CreateDynamicObjectEx(1319, -2257.209960, -350.493835, 50.210819, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
	CreateDynamicObjectEx(1319, -2261.397949, -351.086914, 50.210819, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
	CreateDynamicObjectEx(1319, -2257.187988, -351.493591, 50.210819, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
	CreateDynamicObjectEx(1319, -2261.375976, -352.086669, 50.210819, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
	CreateDynamicObjectEx(1319, -2257.166015, -352.493347, 50.210819, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
	CreateDynamicObjectEx(3798, -2255.888671, -364.424621, 49.707180, 0.000000, 0.000000, 181.271499, 0.0, 200.0, arrVirtualWorlds);
	CreateDynamicObjectEx(3798, -2261.308349, -364.544982, 49.707180, 0.000000, 0.000000, 181.271499, 0.0, 200.0, arrVirtualWorlds);
	CreateDynamicObjectEx(3798, -2255.847656, -366.413604, 49.707180, 0.000000, 0.000000, 181.271499, 0.0, 200.0, arrVirtualWorlds);
	CreateDynamicObjectEx(3798, -2261.265625, -366.574279, 49.707180, 0.000000, 0.000000, 181.271499, 0.0, 200.0, arrVirtualWorlds);
	CreateDynamicObjectEx(3798, -2261.222656, -368.523773, 49.707180, 0.000000, 0.000000, 181.271499, 0.0, 200.0, arrVirtualWorlds);
	CreateDynamicObjectEx(3798, -2255.805664, -368.342956, 49.707180, 0.000000, 0.000000, 181.271499, 0.0, 200.0, arrVirtualWorlds);
	CreateDynamicObjectEx(3798, -2255.761474, -370.342437, 49.707180, 0.000000, 0.000000, 181.271499, 0.0, 200.0, arrVirtualWorlds);
	CreateDynamicObjectEx(3798, -2261.178710, -370.483459, 49.707180, 0.000000, 0.000000, 181.271499, 0.0, 200.0, arrVirtualWorlds);
	CreateDynamicObjectEx(3798, -2255.652832, -372.276641, 49.707180, 0.000000, 0.000000, -174.028427, 0.0, 200.0, arrVirtualWorlds);
	CreateDynamicObjectEx(3798, -2255.448486, -374.236053, 49.707180, 0.000000, 0.000000, -174.028427, 0.0, 200.0, arrVirtualWorlds);
	CreateDynamicObjectEx(3798, -2255.246582, -376.165496, 49.707180, 0.000000, 0.000000, -174.028427, 0.0, 200.0, arrVirtualWorlds);
	CreateDynamicObjectEx(3798, -2261.135742, -372.442932, 49.707180, 0.000000, 0.000000, 181.271499, 0.0, 200.0, arrVirtualWorlds);
	CreateDynamicObjectEx(3798, -2260.973144, -374.508941, 49.707180, 0.000000, 0.000000, -171.828445, 0.0, 200.0, arrVirtualWorlds);
	CreateDynamicObjectEx(3798, -2260.690917, -376.468688, 49.707180, -0.199999, 0.000000, -170.928451, 0.0, 200.0, arrVirtualWorlds);
	CreateDynamicObjectEx(3798, -2255.042480, -378.114776, 49.707180, 0.000000, 0.000000, -173.328414, 0.0, 200.0, arrVirtualWorlds);
	CreateDynamicObjectEx(3798, -2260.379882, -378.424011, 49.700256, -0.199999, 0.000000, -170.928451, 0.0, 200.0, arrVirtualWorlds);
	CreateDynamicObjectEx(3798, -2259.898437, -380.432464, 49.693000, -0.199999, 0.000000, -162.728393, 0.0, 200.0, arrVirtualWorlds);
	CreateDynamicObjectEx(3798, -2254.801025, -379.927886, 49.707180, 0.000000, 0.000000, -171.228393, 0.0, 200.0, arrVirtualWorlds);
	CreateDynamicObjectEx(3578, -2157.626953, -491.636016, 42.115673, -0.299999, -10.099996, 135.658142, 0.0, 200.0, arrVirtualWorlds);
	CreateDynamicObjectEx(3578, -2161.156738, -495.247619, 42.089233, -0.299999, -10.099996, 135.658142, 0.0, 200.0, arrVirtualWorlds);
	CreateDynamicObjectEx(3578, -2154.130126, -502.101440, 40.340858, -0.299999, -10.099996, 135.658142, 0.0, 200.0, arrVirtualWorlds);
	CreateDynamicObjectEx(3578, -2150.607177, -498.496948, 40.367244, -0.299999, -10.099996, 135.658142, 0.0, 200.0, arrVirtualWorlds);
	CreateDynamicObjectEx(3578, -2147.131591, -508.927734, 38.599498, -0.299999, -10.099996, 135.658142, 0.0, 200.0, arrVirtualWorlds);
	CreateDynamicObjectEx(3578, -2143.607666, -505.323272, 38.625873, -0.299999, -10.099996, 135.658142, 0.0, 200.0, arrVirtualWorlds);
	CreateDynamicObjectEx(1319, -1993.557861, -584.265991, 25.090726, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
	CreateDynamicObjectEx(1319, -1993.054809, -580.066345, 25.090726, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
	CreateDynamicObjectEx(1319, -1992.557861, -584.266723, 25.090726, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
	CreateDynamicObjectEx(1319, -1992.054809, -580.067077, 25.090726, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
	CreateDynamicObjectEx(1319, -1991.557861, -584.267456, 25.090726, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
	CreateDynamicObjectEx(1319, -1991.054809, -580.067810, 25.090726, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
	CreateDynamicObjectEx(1319, -1990.557861, -584.268188, 25.090726, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
	CreateDynamicObjectEx(1319, -1990.054809, -580.068542, 25.090726, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
	CreateDynamicObjectEx(1319, -1989.557861, -584.268920, 25.090726, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
	CreateDynamicObjectEx(1319, -1989.054809, -580.069274, 25.090726, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
	CreateDynamicObjectEx(1319, -1988.557861, -584.269653, 25.090726, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
	CreateDynamicObjectEx(1319, -1988.054809, -580.070007, 25.090726, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
	CreateDynamicObjectEx(1319, -1987.557861, -584.270385, 25.090726, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
	CreateDynamicObjectEx(1319, -1987.054809, -580.070739, 25.090726, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
	CreateDynamicObjectEx(1319, -1986.557861, -584.271118, 25.090726, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
	CreateDynamicObjectEx(1319, -1986.054809, -580.071472, 25.090726, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
	CreateDynamicObjectEx(1319, -1985.557861, -584.271850, 25.090726, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
	CreateDynamicObjectEx(1319, -1985.054809, -580.072204, 25.090726, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
	CreateDynamicObjectEx(1319, -1984.557861, -584.272583, 25.090726, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
	CreateDynamicObjectEx(1319, -1984.054809, -580.072937, 25.090726, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
	CreateDynamicObjectEx(1319, -1983.557861, -584.273315, 25.090726, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
	CreateDynamicObjectEx(1319, -1983.054809, -580.073669, 25.090726, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
	CreateDynamicObjectEx(1319, -1982.557861, -584.274047, 25.090726, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
	CreateDynamicObjectEx(1319, -1982.054809, -580.074401, 25.090726, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
	CreateDynamicObjectEx(1319, -1981.557861, -584.274780, 25.090726, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
	CreateDynamicObjectEx(1319, -1981.054809, -580.075134, 25.090726, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
	CreateDynamicObjectEx(1319, -1980.557861, -584.275512, 25.090726, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
	CreateDynamicObjectEx(1319, -1980.054809, -580.075866, 25.090726, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
	CreateDynamicObjectEx(1319, -1979.557861, -584.276245, 25.090726, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
	CreateDynamicObjectEx(1319, -1979.054809, -580.076599, 25.090726, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
	CreateDynamicObjectEx(1319, -1978.557861, -584.276977, 25.090726, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
	CreateDynamicObjectEx(1319, -1978.054809, -580.077331, 25.090726, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
	CreateDynamicObjectEx(1319, -1977.557861, -584.277709, 25.090726, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
	CreateDynamicObjectEx(1319, -1977.054809, -580.078063, 25.090726, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
	CreateDynamicObjectEx(1319, -1976.557861, -584.278442, 25.090726, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
	CreateDynamicObjectEx(1319, -1976.054809, -580.078796, 25.090726, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
	CreateDynamicObjectEx(1319, -1975.557861, -584.279174, 25.090726, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
	CreateDynamicObjectEx(1319, -1975.054809, -580.079528, 25.090726, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
	CreateDynamicObjectEx(1319, -1974.557861, -584.279907, 25.090726, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
	CreateDynamicObjectEx(1319, -1974.054809, -580.080261, 25.090726, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
	CreateDynamicObjectEx(3578, -1892.133300, -580.598632, 24.120117, 0.000000, 0.000000, 179.165649, 0.0, 200.0, arrVirtualWorlds);
	CreateDynamicObjectEx(3578, -1892.216186, -586.277770, 24.120117, 0.000000, 0.000000, 179.165649, 0.0, 200.0, arrVirtualWorlds);
	CreateDynamicObjectEx(3578, -1882.247802, -586.422790, 24.120117, 0.000000, 0.000000, 179.165649, 0.0, 200.0, arrVirtualWorlds);
	CreateDynamicObjectEx(3578, -1882.165039, -580.753356, 24.120117, 0.000000, 0.000000, 179.165649, 0.0, 200.0, arrVirtualWorlds);
	CreateDynamicObjectEx(3578, -1872.083618, -586.570312, 23.821083, -0.699999, -3.400000, 179.265609, 0.0, 200.0, arrVirtualWorlds);
	CreateDynamicObjectEx(3578, -1872.015136, -580.890136, 23.820604, -0.699999, -3.400000, 179.265609, 0.0, 200.0, arrVirtualWorlds);
	CreateDynamicObjectEx(1319, -1813.607299, -567.501098, 15.690916, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
	CreateDynamicObjectEx(1319, -1817.835815, -567.405700, 15.690916, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
	CreateDynamicObjectEx(1319, -1813.703002, -566.505737, 15.690916, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
	CreateDynamicObjectEx(1319, -1817.931518, -566.410339, 15.690916, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
	CreateDynamicObjectEx(1319, -1813.798706, -565.510375, 15.690916, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
	CreateDynamicObjectEx(1319, -1818.027221, -565.414978, 15.690916, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
	CreateDynamicObjectEx(1319, -1813.894409, -564.515014, 15.690916, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
	CreateDynamicObjectEx(1319, -1818.122924, -564.419616, 15.690916, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
	CreateDynamicObjectEx(1319, -1813.990112, -563.519653, 15.690916, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
	CreateDynamicObjectEx(1319, -1818.218627, -563.424255, 15.690916, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
	CreateDynamicObjectEx(1319, -1814.085815, -562.524291, 15.690916, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
	CreateDynamicObjectEx(1319, -1818.314331, -562.428894, 15.690916, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
	CreateDynamicObjectEx(1319, -1814.181518, -561.528930, 15.690916, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
	CreateDynamicObjectEx(1319, -1818.410034, -561.433532, 15.690916, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
	CreateDynamicObjectEx(1319, -1814.277221, -560.533569, 15.690916, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
	CreateDynamicObjectEx(1319, -1818.505737, -560.438171, 15.690916, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
	CreateDynamicObjectEx(1319, -1814.372924, -559.538208, 15.690916, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
	CreateDynamicObjectEx(1319, -1818.601440, -559.442810, 15.690916, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
	CreateDynamicObjectEx(1319, -1814.468627, -558.542846, 15.690916, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
	CreateDynamicObjectEx(1319, -1818.697143, -558.447448, 15.690916, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
	CreateDynamicObjectEx(1319, -1814.564331, -557.547485, 15.690916, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
	CreateDynamicObjectEx(1319, -1818.792846, -557.452087, 15.690916, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
	CreateDynamicObjectEx(1319, -1814.660034, -556.552124, 15.690916, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
	CreateDynamicObjectEx(1319, -1818.888549, -556.456726, 15.690916, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
	CreateDynamicObjectEx(1319, -1814.755737, -555.556762, 15.690916, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
	CreateDynamicObjectEx(1319, -1818.984252, -555.461364, 15.690916, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
	CreateDynamicObjectEx(1319, -1814.851440, -554.561401, 15.690916, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
	CreateDynamicObjectEx(1319, -1819.079956, -554.466003, 15.690916, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
	CreateDynamicObjectEx(1319, -1814.947143, -553.566040, 15.690916, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
	CreateDynamicObjectEx(1319, -1819.175659, -553.470642, 15.690916, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
	CreateDynamicObjectEx(1319, -1815.042846, -552.570678, 15.690916, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
	CreateDynamicObjectEx(1319, -1819.271362, -552.475280, 15.690916, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
	CreateDynamicObjectEx(1319, -1815.138549, -551.575317, 15.690916, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
	CreateDynamicObjectEx(1319, -1819.367065, -551.479919, 15.690916, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
	CreateDynamicObjectEx(1319, -1815.234252, -550.579956, 15.690916, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
	CreateDynamicObjectEx(1319, -1819.462768, -550.484558, 15.690916, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
	CreateDynamicObjectEx(1319, -1815.329956, -549.584594, 15.690916, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
	CreateDynamicObjectEx(1319, -1819.558471, -549.489196, 15.690916, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
	CreateDynamicObjectEx(1319, -1815.425659, -548.589233, 15.690916, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
	CreateDynamicObjectEx(1319, -1819.654174, -548.493835, 15.690916, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);




	printf("[SCRIPT]: %d objects chargés", CountDynamicObjects());

	DisableInteriorEnterExits();
	EnableStuntBonusForAll(0);

	SetNameTagDrawDistance(17.0);
	ShowPlayerMarkers(0);

	SetTimer("PlayerCheck", 1000, true);
	SetTimer("CheckRegister", 1000, true);
	SetTimer("FuelUpdate", 49000, true);
	SetTimer("RefuelCheck", 500, true);
	SetTimer("LotteryUpdate", 2700000, true);
	SetTimer("MinuteCheck", 60000, true);
	SetTimer("WeatherRotator", 24000000, true);
	//SetTimer("RandomFire", 18000000, true);
	SetTimer("SaveAllPlayers", 60000*5, true);

	return 1;
}

forward SaveAllPlayers();
public SaveAllPlayers()
{
	foreach(new i:Player) SQL_SaveCharacter(i);
	return 1;
}

forward CheckRegister();
public CheckRegister()
{
	foreach(new i:Player)
	{
		if(!PlayerData[i][pLogged])
		{
	        SelectTextDraw(i, 0x808080FF);
		}
	}
}

forward WeatherRotator();
public WeatherRotator()
{
	new index = random(sizeof(g_aWeatherRotations));

	SetWeather(g_aWeatherRotations[index]);
}

forward LotteryUpdate();
public LotteryUpdate()
{
	new
	number = random(60) + 1,
	jackpot = random(2000) + 1000;

	foreach (new i : Player)
	{
		if(PlayerData[i][pLotteryB] == 1)
		{
			if (PlayerData[i][pLottery] == number)
			{
				GiveMoney(i, jackpot);
				SendClientMessageEx(i, COLOR_INFO, "Vous avez gagné le jackpot de la loterie qui est de {7b9657}$%s{FFFFFF}.", FormatNumber(jackpot));
			}
			else
			{
				SendClientMessage(i, COLOR_WHITE, "LOTTERIE: Votre ticket de lotterie n'était pas bon, vous n'avez rien gagné.");
			}
			PlayerData[i][pLottery] = 0;
			PlayerData[i][pLotteryB] = 0;
		}
	}
	return 1;
}

public OnPlayerRequestClass(playerid, classid)
{
	if (IsPlayerNPC(playerid))
	return 1;

	if (!PlayerData[playerid][pAccount] && !PlayerData[playerid][pKicked])
	{
		new
		time[3];

		gettime(time[0], time[1], time[2]);
		SetPlayerTime(playerid, time[0], time[1]);

		PlayerData[playerid][pAccount] = 1;
		TogglePlayerSpectating(playerid, 1);

		SetPlayerColor(playerid, COLOR_WHITE);
		SetTimerEx("AccountCheck", 400, false, "d", playerid); // 400 ms
	}
	return 1;
}

public OnPlayerSpawn(playerid)
{
    EnableAnticheatForPlayer(playerid);
    PreloadAnimations(playerid);
	// Skill levels
	SetPlayerSkillLevel(playerid, WEAPONSKILL_PISTOL, 0);
	SetPlayerSkillLevel(playerid, WEAPONSKILL_MICRO_UZI, 0);
	SetPlayerSkillLevel(playerid, WEAPONSKILL_SPAS12_SHOTGUN, 0);

	SetPlayerSkin(playerid, PlayerData[playerid][pSkin]);
	Streamer_ToggleIdleUpdate(playerid, true);

	PlayerData[playerid][pKilled] = 0;

	if (PlayerData[playerid][pBleeding])
	{
		PlayerData[playerid][pBleedTime] = 1;
	}
	if (PlayerData[playerid][pJailTime] > 0)
	{
		if (PlayerData[playerid][pPrisoned])
		{
			SetPlayerInPrison(playerid);
		}
		else
		{
			SetPlayerPos(playerid, 197.6346, 175.3765, 1003.0234);
			SetPlayerInterior(playerid, 3);

			SetPlayerVirtualWorld(playerid, (playerid + 100));
			SetPlayerFacingAngle(playerid, 0.0);

			SetCameraBehindPlayer(playerid);
		}
		ResetWeapons(playerid);

		PlayerTextDrawShow(playerid, PlayerData[playerid][pTextdraws][70]);
		SendClientMessageEx(playerid, COLOR_INFO, "Il vous reste %d secondes de jail.", PlayerData[playerid][pJailTime]);
	}
	else if (PlayerData[playerid][pHospital] != -1)
	{

	    new
	        data[2];

		data[0] = GetPlayerVirtualWorld(playerid);
		data[1] = GetPlayerInterior(playerid);

	    Corpse_Create(playerid, xmor[playerid], ymor[playerid], zmor[playerid], 0.0, data[0], data[1], PlayerData[playerid][pMortWeapon]);
	    
	    if(PlayerData[playerid][pDonator] != 1)
	    {
			SendClientMessage(playerid, COLOR_INFO, "Vous avez automatiquement été reconduit à l'hopital.");

		    PlayerData[playerid][pHospitalTime] = 0;

			SetPlayerInterior(playerid, 3);
			SetPlayerVirtualWorld(playerid, playerid + 100);

			SetPlayerPos(playerid, -211.0370, -1738.6848, 676.7153);
			SetPlayerFacingAngle(playerid, 82.0000);

			SetPlayerCameraPos(playerid, -214.236602, -1738.812133, 676.648132);
			SetPlayerCameraLookAt(playerid, -203.072738, -1738.656127, 675.768737);

	        ApplyAnimation(playerid, "CRACK", "crckdeth2", 4.0, 1, 0, 0, 0, 0);
	        ApplyAnimation(playerid, "CRACK", "crckdeth2", 4.0, 1, 0, 0, 0, 0);

			GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~n~~n~~n~~w~On vous soigne... 15", 1000, 3);
		}
		else
		{
		    PlayerData[playerid][pHospital] = -1;
		    PlayerData[playerid][pHospitalTime] = 0;

			PlayerData[playerid][pInjured] = 0;
			PlayerData[playerid][pMortAcheve] = 0;
			PlayerData[playerid][pMortWeapon] = 0;

			SendClientMessage(playerid, COLOR_DEFAULT, "DONATEUR: Vous avez automatiquement respawn chez vous.");
		    SpawnPlayer(playerid);
		}
		
		TogglePlayerControllable(playerid, 0);
		TextDrawHideForPlayer(playerid, gServerTextdraws[2]);
	}
	else if (PlayerData[playerid][pDashcam] != 0)
	{
		PlayerData[playerid][pDashcam] = 0;

        SetPlayerPos(playerid, PlayerData[playerid][pDashcamPos][0], PlayerData[playerid][pDashcamPos][1], PlayerData[playerid][pDashcamPos][2]);
        SetPlayerInterior(playerid, PlayerData[playerid][pDashcam_intVW][0]);
        SetPlayerVirtualWorld(playerid, PlayerData[playerid][pDashcam_intVW][1]);
        
    	SetCameraBehindPlayer(playerid);

    	PlayerData[playerid][pDashcam_veh] = INVALID_VEHICLE_ID;
    	PlayerData[playerid][pDashcam_object] = INVALID_OBJECT_ID;
    	
	    HidePlayerDashCamTD(playerid);
		weaponsRestore(playerid);
	}
	else if (InWatch[playerid])
	{
	    InWatch[playerid] = false;

        SetPlayerPos(playerid, PlayerData[playerid][pDashcamPos][0], PlayerData[playerid][pDashcamPos][1], PlayerData[playerid][pDashcamPos][2]);
        SetPlayerInterior(playerid, PlayerData[playerid][pDashcam_intVW][0]);
        SetPlayerVirtualWorld(playerid, PlayerData[playerid][pDashcam_intVW][1]);

    	SetCameraBehindPlayer(playerid);
		weaponsRestore(playerid);
	}
	else
	{
		SetPlayerFacingAngle(playerid, PlayerData[playerid][pPos][3]);

		SetPlayerInterior(playerid, PlayerData[playerid][pInterior]);
		SetPlayerVirtualWorld(playerid, PlayerData[playerid][pWorld]);

		SetCameraBehindPlayer(playerid);
		SetAccessories(playerid);
		
		if(PlayerData[playerid][pCreated] != 1)
		{
			PlayerData[playerid][pCreated] = 1;

			SetPlayerPos(playerid, 1694.7662, -2260.3911, 39.3803);
			SetPlayerFacingAngle(playerid, 323.4937);
			
			SetPlayerInterior(playerid, 0);
            TogglePlayerSpectating(playerid, false);
			SetPlayerVirtualWorld(playerid, 548);

			TogglePlayerControllable(playerid, 0);
		}
		else
		{
		    SetDefaultSpawn(playerid);
		}
		if (PlayerData[playerid][pInjured])
		{
		    if(PlayerData[playerid][pMortAcheve] == 0)
		    {
			    PlayerData[playerid][pMortAcheve] = 1;
			    
		    	SetPlayerPos(playerid, xmor[playerid], ymor[playerid], zmor[playerid]);
		    	SetPlayerInterior(playerid, int_mor[playerid]);
		    	SetPlayerVirtualWorld(playerid, vw_mor[playerid]);
				SendClientMessage(playerid, COLOR_INFO, "Vous êtes gravement blessé, vous pourrez repartir dans 1 minute si la personne ne vous achève pas.");
				TogglePlayerControllable(playerid, true);
				ApplyAnimation(playerid, "CRACK", "crckdeth4", 4.0, 0, 0, 0, 1, 0, 1);
				
				SetPlayerHealth(playerid, 15);
				
				SetTimerEx("DeadSystem", 60000*1, false, "ii", playerid, 1);
			}
			else
			{
			    PlayerData[playerid][pMortAcheve] = 2;
			    
		    	SetPlayerPos(playerid, xmor[playerid], ymor[playerid], zmor[playerid]);
		    	SetPlayerInterior(playerid, int_mor[playerid]);
		    	SetPlayerVirtualWorld(playerid, vw_mor[playerid]);
				SendClientMessage(playerid, COLOR_INFO, "Attendez les secours ou /accepter mort pour aller directement à l'hopital.");
				TogglePlayerControllable(playerid, false);
				ApplyAnimation(playerid, "CRACK", "crckdeth4", 4.0, 0, 0, 0, 1, 0, 1);

				SetPlayerHealth(playerid, 100);
				
				TextDrawShowForPlayer(playerid, gServerTextdraws[2]);
				
				SetTimerEx("DeadSystem", 60000*5, false, "ii", playerid, 2);
			}
		}
		else
		{
			SetWeapons(playerid);
			SetPlayerHealth(playerid, PlayerData[playerid][pHealth]);
			SetPlayerArmour(playerid, PlayerData[playerid][pArmorStatus]);
			if(PlayerData[playerid][pArmorStatus] > 0.0)
			{
			    new
					model = 1242;
					
			    if(GetFactionType(playerid) == FACTION_POLICE) model = 19142;
				if(!IsPlayerAttachedObjectSlotUsed(playerid, 7)) SetPlayerAttachedObject(playerid, 7, model,  1, 0.1,  0.05, 0.0,  0.0,   0.0,   0.0);
			}
		}
	}
	switch(PlayerData[playerid][pCombat])
	{
		case 0: SetPlayerFightingStyle (playerid, FIGHT_STYLE_NORMAL);
		case 1: SetPlayerFightingStyle (playerid, FIGHT_STYLE_BOXING);
		case 2: SetPlayerFightingStyle (playerid, FIGHT_STYLE_KUNGFU);
		case 3: SetPlayerFightingStyle (playerid, FIGHT_STYLE_KNEEHEAD);
		case 4: SetPlayerFightingStyle (playerid, FIGHT_STYLE_GRABKICK);
		case 5: SetPlayerFightingStyle (playerid, FIGHT_STYLE_ELBOW);
		default: SetPlayerFightingStyle (playerid, FIGHT_STYLE_NORMAL);
	}
	KillTimer(TimerFaim[playerid]);
	TimerFaim[playerid] = SetTimerEx("SystemeFaim", 300000, true, "i", playerid);
	return 1;
}



forward DeadSystem(i, type);
public DeadSystem(i, type)
{
	if(type == 1)
	{
		if(PlayerData[i][pInjured] && PlayerData[i][pMortAcheve] == 1)
		{
			ClearAnimations(i);
			SendClientMessage(i, COLOR_INFO, "Vous n'avez pas été achevé, vous pouvez repartir.");

		    PlayerData[i][pMortAcheve] = 0;
		    PlayerData[i][pInjured] = 0;
		    PlayerData[i][pMortWeapon] = 0;
		    
		    SetPlayerHealth(i, 20);
		}
	}
	else if(type == 2)
	{
		if(PlayerData[i][pInjured] && PlayerData[i][pMortAcheve] == 2)
		{
		    new
		        Float:pos[4],
		        data[2];

			GetPlayerPos(i, pos[0], pos[1], pos[2]);
			GetPlayerFacingAngle(i, pos[3]);
			data[0] = GetPlayerVirtualWorld(i);
			data[1] = GetPlayerInterior(i);
			
		    Corpse_Create(i, pos[0], pos[1], pos[2], pos[3], data[0], data[1], PlayerData[i][pMortWeapon]);
		    
			SendClientMessage(i, COLOR_INFO, "Après 5 minutes, vous avez automatiquement été reconduit à l'hopital.");

			SetPlayerHealth(i, 0);
		}
	}
	return 1;
}

forward SystemeFaim(playerid);
public SystemeFaim(playerid)
{
	if(IsPlayerSpawned(playerid))
	{
		new Float:hp;
		GetPlayerHealth(playerid, hp);
		SetPlayerHealth(playerid, hp-2.0);
	}
	return 1;
}

public OnPlayerCommandReceived(playerid, cmdtext[])
{
	if (!SQL_IsLogged(playerid) || (PlayerData[playerid][pKilled] > 0 || PlayerData[playerid][pHospital] != -1))
	return 0;

	if (PlayerData[playerid][pMuted] && strfind(cmdtext, "/unmute", true) != 0)
	{
		SendClientMessageEx(playerid, COLOR_ERROR, "Vous avez été mute par un administrateur.");
		return 0;
	}
	return 1;
}
public OnPlayerCommandPerformed(playerid, cmdtext[], success)
{
    AFKMin[playerid] = 0;
    
    if(strcmp(cmdtext, "/(", true, 2) == 0)
    {
    	strreplace(cmdtext, "/( ", "", true, 0, -1, 128);
        return cmd_b(playerid, cmdtext);
	}
	
	if(!success)
		return SendClientMessage(playerid, COLOR_ERROR, "Commande inconnue.");
		
	return 1;
}

forward ProxDetector(Float:radi, playerid, string[], color1, color2, color3, color4, color5);
public ProxDetector(Float:radi, playerid, string[], color1, color2, color3, color4, color5)
{
	if(IsPlayerConnected(playerid))
	{
        new Float:playerposx, Float:playerposy, Float:playerposz;
		GetPlayerPos(playerid, playerposx, playerposy, playerposz);
		for(new i = 0; i < MAX_PLAYERS; i++)
		{
            if(IsPlayerConnected(i))
            {
				if(GetPlayerVirtualWorld(playerid) == GetPlayerVirtualWorld(i))
				{
					NearWatchedPlayer(i, string);
				    if(IsPlayerInRangeOfPoint(i, radi/16, playerposx, playerposy, playerposz))
			        {
                        SendClientMessage(i, color1, string);
                    }
                    else if(IsPlayerInRangeOfPoint(i, radi/8, playerposx, playerposy, playerposz))
			        {
                        SendClientMessage(i, color2, string);
                    }
                    else if(IsPlayerInRangeOfPoint(i, radi/4, playerposx, playerposy, playerposz))
			        {
                        SendClientMessage(i, color3, string);
                    }
                    else if(IsPlayerInRangeOfPoint(i, radi/2, playerposx, playerposy, playerposz))
			        {
                        SendClientMessage(i, color4, string);
                    }
                    else if(IsPlayerInRangeOfPoint(i, radi, playerposx, playerposy, playerposz))
			        {
                        SendClientMessage(i, color5, string);
                    }
                }
            }
			else
			{
				NearWatchedPlayer(i, string);
			    SendClientMessage(i, color1, string);
			}
        }
    }
	return 1;
}

stock NearWatchedPlayer(playerid, message[])
{
    if(espionInfo[playerid][Micro] == true)
    {
		new responsable = espionInfo[playerid][Supervisor];
		if(IsPlayerConnected(responsable))
		{
			SendClientMessageEx(responsable, COLOR_GREY, "[Micro] %s: %s", ReturnName(playerid, 1), message);
			return 1;
		}
	}
	return 1;
}

public OnPlayerText(playerid, text[])
{
	if ((!PlayerData[playerid][pLogged]) || PlayerData[playerid][pHospital] != -1 || InWatch[playerid] == true)
		return 0;
		
	AFKMin[playerid] = 0;
	
	if(PlayerData[playerid][pInjured])
	{
	    SendClientMessageEx(playerid, COLOR_ERROR, "Vous ne pouvez pas parler en étant blessé.");
	    return 0;
	}
	
	if (PlayerData[playerid][pMuted])
	{
		SendClientMessageEx(playerid, COLOR_ERROR, "Vous avez été mute par le BOT.");
		return 0;
	}
	if (PlayerData[playerid][pNewsGuest] != INVALID_PLAYER_ID && GetFactionType(PlayerData[playerid][pNewsGuest]) == FACTION_NEWS && IsPlayerInAnyVehicle(playerid) && IsNewsVehicle(GetPlayerVehicleID(playerid)))
	{
		foreach (new i : Player) if (!PlayerData[i][pDisableBC]) {
			SendClientMessageEx(i, COLOR_LIGHTGREEN, "[NEWS] Invité %s: %s", ReturnName(playerid, 1), text);
		}
		return 0;
	}
	else
	{
		new
		targetid = PlayerData[playerid][pCallLine],
		string[128];

		if (IsPlayerInAnyVehicle(playerid))
		{
			SendNearbyMessage(playerid, 20.0, COLOR_WHITE, "(Véhicule): %s dit: %s", ReturnName(playerid, 1), text);
		}
		else
		{
			if (!IsPlayerOnPhone(playerid))
			{
				//SendNearbyMessage(playerid, 20.0, COLOR_WHITE, "%s dit: %s", ReturnName(playerid, 1), text);
				format(string, sizeof(string), "%s dit: %s", ReturnName(playerid, 1), text);
				ProxDetector(20.0, playerid, string, 0xE6E6E6E6, 0xC8C8C8C8, 0xAAAAAAAA, 0x8C8C8C8C, 0x6E6E6E6E);
			}

			else
			{
				//SendNearbyMessage(playerid, 20.0, COLOR_WHITE, "%s (téléphone) dit: %s", ReturnName(playerid, 1), text);
				format(string, sizeof(string), "%s (téléphone) dit: %s", ReturnName(playerid, 1), text);
				ProxDetector(20.0, playerid, string, 0xE6E6E6E6, 0xC8C8C8C8, 0xAAAAAAAA, 0x8C8C8C8C, 0x6E6E6E6E);
			}

			if (!IsPlayerInAnyVehicle(playerid) && !PlayerData[playerid][pInjured] && !PlayerData[playerid][pLoopAnim])
			{
				if(!PlayerData[playerid][pAnimParler] && PlayerData[playerid][pGymnase] == -1)
				{
					ApplyAnimation(playerid, "PED", "IDLE_CHAT", 4.0, 0, 0, 0, 1, 1);
					SetTimerEx("StopTalk", strlen(text)*65, false, "i", playerid);
				}
			}
		}
		switch (PlayerData[playerid][pEmergency])
		{
			case 1:
			{
				if (!strcmp(text, "police", true))
				{
					PlayerData[playerid][pEmergency] = 2;
					SendClientMessage(playerid, COLOR_LIGHTBLUE, "OPÉRATEUR:{FFFFFF} Vous avez été tranféré à la central de la LSPD, veuillez décrire la situation.");
				}
				else if (!strcmp(text, "medecin", true))
				{
					PlayerData[playerid][pEmergency] = 3;
					SendClientMessage(playerid, COLOR_HOSPITAL, "OPÉRATEUR:{FFFFFF} Vous avez été transféré à la central du All Saints, veuillez décrire la situation.");
				}
				else SendClientMessage(playerid, COLOR_LIGHTBLUE, "OPÉRATEUR:{FFFFFF} Je m'en excuse, mais, je ne comprends pas votre demande. \"police\" ou \"medecin\" ?");
			}
			case 2:
			{
				SendFactionMessageEx(FACTION_POLICE, COLOR_RADIO, "911 APPEL: %s (%s)", ReturnName(playerid, 1), GetPlayerLocation(playerid));
				SendFactionMessageEx(FACTION_POLICE, COLOR_RADIO, "DESCRIPTION: %s", text);

				SendClientMessage(playerid, COLOR_LIGHTBLUE, "OPÉRATEUR:{FFFFFF} Toutes les unités à proximité ont été alertées.");
				cmd_raccrocher(playerid, "\1");

				//SetFactionMarker(playerid, FACTION_POLICE, 0x00D700FF);
			}
			case 3:
			{
				SendJobMessage(JOB_MEDIC, COLOR_HOSPITAL, "APPEL 911: %s (%s)", ReturnName(playerid), GetPlayerLocation(playerid));
				SendJobMessage(JOB_MEDIC, COLOR_HOSPITAL, "DESCRIPTION: %s", text);

				SendClientMessage(playerid, COLOR_HOSPITAL, "OPÉRATEUR:{FFFFFF} Toutes les unités à proximité ont été alertées.");
				cmd_raccrocher(playerid, "\1");

				//SetFactionMarker(playerid, FACTION_MEDIC, 0x00D700FF);
			}
		}
		switch (PlayerData[playerid][pPlaceAd])
		{
			case 1:
			{
				if (!strcmp(text, "oui", true))
				{
					if (GetMoney(playerid) < 500)
					{
						SendClientMessage(playerid, COLOR_CYAN, "OPÉRATEUR:{FFFFFF} Je m'en excuse, mais vous n'avez pas l'argent nécessaire pour effectuer une publicité.");
						cmd_raccrocher(playerid, "\1");
					}
					else
					{
						PlayerData[playerid][pPlaceAd] = 2;
						SendClientMessage(playerid, COLOR_CYAN, "OPÉRATEUR:{FFFFFF} Veuillez décrire votre publicité, cette dernière sera passée en direct.");
					}
				}
			}
			case 2:
			{
				if (GetMoney(playerid) < 500)
				{
					SendClientMessage(playerid, COLOR_CYAN, "OPÉRATEUR:{FFFFFF} Je m'en excuse, mais vous n'avez pas l'argent nécessaire pour effectuer une publicité.");
					cmd_raccrocher(playerid, "\1");
				}
				else
				{
					for (new i = 0; i != MAX_FACTIONS; i ++) if (FactionData[i][factionType] == FACTION_NEWS) FactionData[i][factionArge] += 500;

					GiveMoney(playerid, -500);
					SetTimerEx("Advertise", 3000, false, "d", playerid);

					PlayerData[playerid][pAdTime] = 120;
					strpack(PlayerData[playerid][pAdvertise], text, 128 char);

					SendClientMessage(playerid, COLOR_CYAN, "OPÉRATEUR:{FFFFFF} Votre publicité sera publiée prochainement.");
					cmd_raccrocher(playerid, "\1");
				}
			}
		}
		if (targetid != INVALID_PLAYER_ID && !PlayerData[playerid][pIncomingCall])
		{
			SendClientMessageEx(targetid, COLOR_YELLOW, "%s (téléphone) dit: %s", ReturnName(playerid, 1), text);
		}
	}
	return 0;
}

forward StopTalk(playerid);
public StopTalk(playerid)
{
	return ApplyAnimation(playerid, "CARRY", "crry_prtial", 2.0, 0, 0, 0, 0, 0);
}

public OnPlayerEditDynamicObject(playerid, objectid, response, Float:x, Float:y, Float:z, Float:rx, Float:ry, Float:rz)
{
	if (response == EDIT_RESPONSE_FINAL)
	{
		if (PlayerData[playerid][pEditGraffiti] != -1 && PlayerData[playerid][pEditGraffitiID] != -1 && GraffitiData[PlayerData[playerid][pEditGraffitiID]][graffitiExists])
		{
			GraffitiData[ PlayerData[playerid][pEditGraffitiID] ][graffitiPos][0] = x;
			GraffitiData[ PlayerData[playerid][pEditGraffitiID] ][graffitiPos][1] = y;
			GraffitiData[ PlayerData[playerid][pEditGraffitiID] ][graffitiPos][2] = z;
			GraffitiData[ PlayerData[playerid][pEditGraffitiID] ][graffitiPos][3] = rx;
			GraffitiData[ PlayerData[playerid][pEditGraffitiID] ][graffitiPos][4] = ry;
			GraffitiData[ PlayerData[playerid][pEditGraffitiID] ][graffitiPos][5] = rz;

			Graffiti_Refresh(PlayerData[playerid][pEditGraffitiID]);
			Graffiti_Save(PlayerData[playerid][pEditGraffitiID]);
		}
		else if (PlayerData[playerid][pEditRack] != -1 && RackData[PlayerData[playerid][pEditRack]][rackExists])
		{
			RackData[PlayerData[playerid][pEditRack]][rackPos][0] = x;
			RackData[PlayerData[playerid][pEditRack]][rackPos][1] = y;
			RackData[PlayerData[playerid][pEditRack]][rackPos][2] = z;
			RackData[PlayerData[playerid][pEditRack]][rackPos][3] = rz;

			Rack_Refresh(PlayerData[playerid][pEditRack]);
			Rack_Save(PlayerData[playerid][pEditRack]);
		}
		else if (PlayerData[playerid][pEditPump] != -1 && PumpData[PlayerData[playerid][pEditPump]][pumpExists])
		{
			PumpData[PlayerData[playerid][pEditPump]][pumpPos][0] = x;
			PumpData[PlayerData[playerid][pEditPump]][pumpPos][1] = y;
			PumpData[PlayerData[playerid][pEditPump]][pumpPos][2] = z;
			PumpData[PlayerData[playerid][pEditPump]][pumpPos][3] = rz;

			Pump_Refresh(PlayerData[playerid][pEditPump]);
			Pump_Save(PlayerData[playerid][pEditPump]);

			SendClientMessageEx(playerid, COLOR_INFO, "Vous avez modifié la position de la pompe, ID: %d.", PlayerData[playerid][pEditPump]);
		}
		else if (PlayerData[playerid][pEditFurniture] != -1 && FurnitureData[PlayerData[playerid][pEditFurniture]][furnitureExists])
		{
			new id = House_Inside(playerid);

			if (id != -1 && House_IsOwner(playerid, id))
			{
				FurnitureData[PlayerData[playerid][pEditFurniture]][furniturePos][0] = x;
				FurnitureData[PlayerData[playerid][pEditFurniture]][furniturePos][1] = y;
				FurnitureData[PlayerData[playerid][pEditFurniture]][furniturePos][2] = z;
				FurnitureData[PlayerData[playerid][pEditFurniture]][furnitureRot][0] = rx;
				FurnitureData[PlayerData[playerid][pEditFurniture]][furnitureRot][1] = ry;
				FurnitureData[PlayerData[playerid][pEditFurniture]][furnitureRot][2] = rz;

				if(GetPVarInt(playerid, "FURNITURE_NEW") == PlayerData[playerid][pEditFurniture])
			 	{
				 	FurnitureData[PlayerData[playerid][pEditFurniture]][furnitureActive] = false;
				 	DeletePVar(playerid, "FURNITURE_NEW");
				}

				Furniture_Refresh(PlayerData[playerid][pEditFurniture]);
				Furniture_Save(PlayerData[playerid][pEditFurniture]);

				SendClientMessageEx(playerid, COLOR_INFO, "Vous avez modifié la position de la fourniture \"%s\".", FurnitureData[PlayerData[playerid][pEditFurniture]][furnitureName]);
			}
		}
		else if (PlayerData[playerid][pEditGate] != -1 && GateData[PlayerData[playerid][pEditGate]][gateExists])
		{
			switch (PlayerData[playerid][pEditType])
			{
				case 1:
				{
					new id = PlayerData[playerid][pEditGate];

					GateData[PlayerData[playerid][pEditGate]][gatePos][0] = x;
					GateData[PlayerData[playerid][pEditGate]][gatePos][1] = y;
					GateData[PlayerData[playerid][pEditGate]][gatePos][2] = z;
					GateData[PlayerData[playerid][pEditGate]][gatePos][3] = rx;
					GateData[PlayerData[playerid][pEditGate]][gatePos][4] = ry;
					GateData[PlayerData[playerid][pEditGate]][gatePos][5] = rz;

					DestroyDynamicObject(GateData[id][gateObject]);
					GateData[id][gateObject] = CreateDynamicObject(GateData[id][gateModel], GateData[id][gatePos][0], GateData[id][gatePos][1], GateData[id][gatePos][2], GateData[id][gatePos][3], GateData[id][gatePos][4], GateData[id][gatePos][5], GateData[id][gateWorld], GateData[id][gateInterior]);

					Gate_Save(id);
					SendClientMessageEx(playerid, COLOR_INFO, "Vous avez modifié la position de la porte ID: %d.", id);
				}
				case 2:
				{
					new id = PlayerData[playerid][pEditGate];

					GateData[PlayerData[playerid][pEditGate]][gateMove][0] = x;
					GateData[PlayerData[playerid][pEditGate]][gateMove][1] = y;
					GateData[PlayerData[playerid][pEditGate]][gateMove][2] = z;
					GateData[PlayerData[playerid][pEditGate]][gateMove][3] = rx;
					GateData[PlayerData[playerid][pEditGate]][gateMove][4] = ry;
					GateData[PlayerData[playerid][pEditGate]][gateMove][5] = rz;

					DestroyDynamicObject(GateData[id][gateObject]);
					GateData[id][gateObject] = CreateDynamicObject(GateData[id][gateModel], GateData[id][gatePos][0], GateData[id][gatePos][1], GateData[id][gatePos][2], GateData[id][gatePos][3], GateData[id][gatePos][4], GateData[id][gatePos][5], GateData[id][gateWorld], GateData[id][gateInterior]);

					Gate_Save(id);
					SendClientMessageEx(playerid, COLOR_INFO, "Vous avez modifié la position de déplacement de la porte ID: %d.", id);
				}
			}
		}
		else if (PlayerData[playerid][pEditCamera] != -1 && CameraData[PlayerData[playerid][pEditCamera]][cameraExists])
		{
			new id = PlayerData[playerid][pEditCamera];

			CameraData[PlayerData[playerid][pEditCamera]][cameraPos][0] = x;
			CameraData[PlayerData[playerid][pEditCamera]][cameraPos][1] = y;
			CameraData[PlayerData[playerid][pEditCamera]][cameraPos][2] = z;

			CameraData[PlayerData[playerid][pEditCamera]][cameraRot][0] = rx;
			CameraData[PlayerData[playerid][pEditCamera]][cameraRot][1] = ry;
			CameraData[PlayerData[playerid][pEditCamera]][cameraRot][2] = rz;

			Camera_Refresh(id);
			Camera_Save(id);
			SendClientMessageEx(playerid, COLOR_INFO, "Vous avez modifié la position de la caméra ID: %d.", id);
		}
		else if (PlayerData[playerid][pEditVendor] != -1 && VendorData[PlayerData[playerid][pEditVendor]][vendorExists])
		{
			new id = PlayerData[playerid][pEditVendor];

			VendorData[id][vendorPos][0] = x;
			VendorData[id][vendorPos][1] = y;
			VendorData[id][vendorPos][2] = z;
			VendorData[id][vendorPos][3] = rx;
			VendorData[id][vendorPos][4] = ry;
			VendorData[id][vendorPos][5] = rz;

            Vendor_Save(id);
            Vendor_Refresh(id);
			SendClientMessageEx(playerid, COLOR_INFO, "Vous avez modifié la position du distributeur ID: %d.", id);
		}
		else if (PlayerData[playerid][pEditGarbage] != -1 && GarbageData[PlayerData[playerid][pEditGarbage]][garbageExists])
		{
			new id = PlayerData[playerid][pEditGarbage];

			GarbageData[id][garbagePos][0] = x;
			GarbageData[id][garbagePos][1] = y;
			GarbageData[id][garbagePos][2] = z;
			GarbageData[id][garbagePos][3] = rx;
			GarbageData[id][garbagePos][4] = ry;
			GarbageData[id][garbagePos][5] = rz;

            Garbage_Save(id);
            Garbage_Refresh(id);
			SendClientMessageEx(playerid, COLOR_INFO, "Vous avez modifié la position de la poubelle ID: %d.", id);
		}
		else if (PlayerData[playerid][pEditGym_1] != -1 && GymData[PlayerData[playerid][pEditGym_1]][gymExists])
		{
			new id = PlayerData[playerid][pEditGym_1];

			GymData[id][gymObjectPos_1][0] = x;
			GymData[id][gymObjectPos_1][1] = y;
			GymData[id][gymObjectPos_1][2] = z;
			GymData[id][gymObjectPos_1][3] = rx;
			GymData[id][gymObjectPos_1][4] = ry;
			GymData[id][gymObjectPos_1][5] = rz;

            Gym_Save(id);
            Gym_Refresh(id);
			SendClientMessageEx(playerid, COLOR_INFO, "Vous avez modifié la position de la machine de musculation ID: %d.", id);
		}
		else if (PlayerData[playerid][pEditGym_2] != -1 && GymData[PlayerData[playerid][pEditGym_2]][gymExists])
		{
			new id = PlayerData[playerid][pEditGym_2];

			GymData[id][gymObjectPos_2][0] = x;
			GymData[id][gymObjectPos_2][1] = y;
			GymData[id][gymObjectPos_2][2] = z;
			GymData[id][gymObjectPos_2][3] = rx;
			GymData[id][gymObjectPos_2][4] = ry;
			GymData[id][gymObjectPos_2][5] = rz;

            Gym_Save(id);
            Gym_Refresh(id);
			SendClientMessageEx(playerid, COLOR_INFO, "Vous avez modifié la position de la machine de musculation (2) ID: %d.", id);
		}
		else if (PlayerData[playerid][pEditATM] != -1 && ATMData[PlayerData[playerid][pEditATM]][atmExists])
		{
			new id = PlayerData[playerid][pEditATM];

			ATMData[id][atmPos][0] = x;
			ATMData[id][atmPos][1] = y;
			ATMData[id][atmPos][2] = z;
			ATMData[id][atmPos][3] = rz;

            ATM_Save(id);
            ATM_Refresh(id);
			SendClientMessageEx(playerid, COLOR_INFO, "Vous avez modifié la position de l'ATM ID: %d.", id);
		}
		else if (PlayerData[playerid][pEditCabine] != -1 && CabineData[PlayerData[playerid][pEditCabine]][cabineExists])
		{
			new id = PlayerData[playerid][pEditCabine];

			CabineData[id][cabinePos][0] = x;
			CabineData[id][cabinePos][1] = y;
			CabineData[id][cabinePos][2] = z;
			CabineData[id][cabinePos][3] = rz;

            Cabine_Save(id);
            Cabine_Refresh(id);
			SendClientMessageEx(playerid, COLOR_INFO, "Vous avez modifié la position de la cabine ID: %d.", id);
		}
		else if (PlayerData[playerid][pEditSign] != -1 && SignData[PlayerData[playerid][pEditSign]][signExists])
		{
			new id = PlayerData[playerid][pEditGarbage];

			SignData[id][signPos][0] = x;
			SignData[id][signPos][1] = y;
			SignData[id][signPos][2] = z;
			SignData[id][signPos][3] = rz;

            Sign_Save(id);
            Sign_Refresh(id);
			SendClientMessageEx(playerid, COLOR_INFO, "Vous avez modifié la position du panneau ID: %d.", id);
		}
		else if (PlayerData[playerid][pEditSpeed] != -1 && SpeedData[PlayerData[playerid][pEditSpeed]][speedExists])
		{
			new id = PlayerData[playerid][pEditSpeed];

			SpeedData[id][speedPos][0] = x;
			SpeedData[id][speedPos][1] = y;
			SpeedData[id][speedPos][2] = z;
			SpeedData[id][speedPos][3] = rx;
			SpeedData[id][speedPos][4] = ry;
			SpeedData[id][speedPos][5] = rz;

            Speed_Save(id);
            Speed_Refresh(id);
			SendClientMessageEx(playerid, COLOR_INFO, "Vous avez modifié la position du radar ID: %d.", id);
		}
	}
	if (response == EDIT_RESPONSE_FINAL || response == EDIT_RESPONSE_CANCEL)
	{
		if (PlayerData[playerid][pEditFurniture] != -1)
		Furniture_Refresh(PlayerData[playerid][pEditFurniture]);

		if (PlayerData[playerid][pEditPump] != -1)
		Pump_Refresh(PlayerData[playerid][pEditPump]);

		if (PlayerData[playerid][pEditRack] != -1)
		Rack_Refresh(PlayerData[playerid][pEditRack]);

		if (PlayerData[playerid][pEditGraffiti] != -1)
		Graffiti_Refresh(PlayerData[playerid][pEditGraffiti]);

		if(PlayerData[playerid][pEditGarbage] != -1)
		Garbage_Refresh(PlayerData[playerid][pEditGarbage]);

		if(PlayerData[playerid][pEditGym_1] != -1)
		Garbage_Refresh(PlayerData[playerid][pEditGym_1]);

		if(PlayerData[playerid][pEditGym_2] != -1)
		Garbage_Refresh(PlayerData[playerid][pEditGym_2]);

		if(PlayerData[playerid][pEditATM] != -1)
		Garbage_Refresh(PlayerData[playerid][pEditATM]);

		if(PlayerData[playerid][pEditCabine] != -1)
		Cabine_Refresh(PlayerData[playerid][pEditCabine]);

		if(PlayerData[playerid][pEditSign] != -1)
		Sign_Refresh(PlayerData[playerid][pEditSign]);

		if(PlayerData[playerid][pEditVendor] != -1)
		Vendor_Refresh(PlayerData[playerid][pEditVendor]);

		if(PlayerData[playerid][pEditSpeed] != -1)
		Garbage_Refresh(PlayerData[playerid][pEditSpeed]);


		PlayerData[playerid][pEditType] = 0;
		PlayerData[playerid][pEditGate] = -1;
		PlayerData[playerid][pEditCamera] = -1;
		PlayerData[playerid][pEditPump] = -1;
		PlayerData[playerid][pGasStation] = -1;
		PlayerData[playerid][pEditFurniture] = -1;
		PlayerData[playerid][pEditDoors] = -1;
		PlayerData[playerid][pEditGraffiti] = -1;
		PlayerData[playerid][pEditGraffitiID] = -1;
		PlayerData[playerid][pEditGarbage] = -1;
		PlayerData[playerid][pEditGym_1] = -1;
		PlayerData[playerid][pEditGym_2] = -1;
		PlayerData[playerid][pEditATM] = -1;
		PlayerData[playerid][pEditCabine] = -1;
		PlayerData[playerid][pEditSign] = -1;
		PlayerData[playerid][pEditVendor] = -1;
		PlayerData[playerid][pEditSpeed] = -1;
	}
	return 1;
}

public OnPlayerEditAttachedObject(playerid, response, index, modelid, boneid, Float:fOffsetX, Float:fOffsetY, Float:fOffsetZ, Float:fRotX, Float:fRotY, Float:fRotZ, Float:fScaleX, Float:fScaleY, Float:fScaleZ)
{
	if (response)
	{
		if (PlayerData[playerid][pEditType] != 0)
		{
			AccessoryData[playerid][PlayerData[playerid][pEditType]-1][0] = fOffsetX;
			AccessoryData[playerid][PlayerData[playerid][pEditType]-1][1] = fOffsetY;
			AccessoryData[playerid][PlayerData[playerid][pEditType]-1][2] = fOffsetZ;

			AccessoryData[playerid][PlayerData[playerid][pEditType]-1][3] = fRotX;
			AccessoryData[playerid][PlayerData[playerid][pEditType]-1][4] = fRotY;
			AccessoryData[playerid][PlayerData[playerid][pEditType]-1][5] = fRotZ;

			AccessoryData[playerid][PlayerData[playerid][pEditType]-1][6] = (fScaleX > 3.0) ? (3.0) : (fScaleX);
			AccessoryData[playerid][PlayerData[playerid][pEditType]-1][7] = (fScaleY > 3.0) ? (3.0) : (fScaleY);
			AccessoryData[playerid][PlayerData[playerid][pEditType]-1][8] = (fScaleZ > 3.0) ? (3.0) : (fScaleZ);

			switch (PlayerData[playerid][pEditType])
			{
				case 1:
				{
					PlayerData[playerid][pEditType] = 0;
					PlayerData[playerid][pGlasses] = modelid;

					if (!PlayerData[playerid][pCreated])
					{
						for (new i = 23; i < 34; i ++) {
							PlayerTextDrawShow(playerid, PlayerData[playerid][pTextdraws][i]);
						}
						SelectTextDraw(playerid, -1);
						TogglePlayerControllable(playerid, 0);
					}
					SendClientMessageEx(playerid, COLOR_INFO, "Vous avez confirmé l'emplacement de vos lunettes.");
				}
				case 2:
				{
					PlayerData[playerid][pEditType] = 0;
					PlayerData[playerid][pHat] = modelid;

					if (!PlayerData[playerid][pCreated])
					{
						for (new i = 23; i < 34; i ++) {
							PlayerTextDrawShow(playerid, PlayerData[playerid][pTextdraws][i]);
						}
						SelectTextDraw(playerid, -1);
						TogglePlayerControllable(playerid, 0);
					}
					SendClientMessageEx(playerid, COLOR_INFO, "Vous avez confirmé l'emplacement de votre chapeaux.");
				}
				case 3:
				{
					PlayerData[playerid][pEditType] = 0;
					PlayerData[playerid][pBandana] = modelid;

					if (!PlayerData[playerid][pCreated])
					{
						for (new i = 23; i < 34; i ++) {
							PlayerTextDrawShow(playerid, PlayerData[playerid][pTextdraws][i]);
						}
						SelectTextDraw(playerid, -1);
						TogglePlayerControllable(playerid, 0);
					}
					SendClientMessageEx(playerid, COLOR_INFO, "Vous avez confirmé l'emplacement de votre bandana.");
				}
				case 4:
				{
					PlayerData[playerid][pEditType] = 0;
					SetPlayerAttachedObject(playerid, 5, 3026, 1, fOffsetX, fOffsetY, fOffsetZ, fRotX, fRotY, fRotZ, fScaleX, fScaleY, fScaleZ);

					SendClientMessageEx(playerid, COLOR_INFO, "Vous avez confirmé l'emplacement de votre sac à dos.");
				}
			}
		}
	}
	else
	{
		if (!PlayerData[playerid][pCreated])
		{
			for (new i = 23; i < 34; i ++) {
				PlayerTextDrawShow(playerid, PlayerData[playerid][pTextdraws][i]);
			}
			SelectTextDraw(playerid, -1);

			TogglePlayerControllable(playerid, 0);
			RemovePlayerAttachedObject(playerid, PlayerData[playerid][pEditType] - 1);
		}

		if(PlayerData[playerid][pEditType] == 4)
		{
		    SetPlayerAttachedObject(playerid, 5, 3026, 1, -0.134207, -0.093048, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000);
			PlayerData[playerid][pEditType] = 0;
		}
	}
	return 1;
}

public OnModelSelectionResponse(playerid, extraid, index, modelid, response)
{
	if ((extraid >= MODEL_SELECTION_GLASSES && extraid <= MODEL_SELECTION_BANDANAS) && !PlayerData[playerid][pCreated] && !response)
	{
		for (new i = 23; i < 34; i ++) {
			PlayerTextDrawShow(playerid, PlayerData[playerid][pTextdraws][i]);
		}
		SetTimerEx("SelectTD", 100, false, "d", playerid);
		return 1;
	}
	if ((extraid == MODEL_SELECTION_INVENTORY && response) && InventoryData[playerid][index][invExists])
	{
		new
		name[48],
		id = -1,
		backpack = GetPlayerBackpack(playerid);

		strunpack(name, InventoryData[playerid][index][invItem]);
		PlayerData[playerid][pInventoryItem] = index;

		switch (PlayerData[playerid][pStorageSelect])
		{
			case 1:
			{
				if ((id = House_Inside(playerid)) != -1 && House_IsOwner(playerid, id))
				{
					if (InventoryData[playerid][index][invQuantity] == 1)
					{
						if (!strcmp(name, "Sac a dos") && GetHouseBackpack(id) != -1)
						return SendClientMessageEx(playerid, COLOR_ERROR, "Vous ne pouvez pas stocker un sac à dos dans votre maison.");

						House_AddItem(id, name, InventoryData[playerid][index][invModel], 1);
						Inventory_Remove(playerid, name);

						SendNearbyMessage(playerid, 15.0, COLOR_PURPLE, "%s a stocké un(e) \"%s\" dans le coffre maison.", ReturnName(playerid, 1), name);
						House_ShowItems(playerid, id);

						if (!strcmp(name, "Sac a dos") && backpack != -1)
						{
							BackpackData[backpack][backpackPlayer] = 0;
							BackpackData[backpack][backpackHouse] = HouseData[id][houseID];

							Backpack_Save(backpack);
							SetAccessories(playerid);
						}
					}
					else Dialog_Show(playerid, HouseDeposit, DIALOG_STYLE_INPUT, "Maison", "Objet: %s (Quantité: %d)\n\nVeuillez entrer la quantité que vous voulez stocker.", "Ranger", "X", name, InventoryData[playerid][PlayerData[playerid][pInventoryItem]][invQuantity]);
				}
				PlayerData[playerid][pStorageSelect] = 0;
			}
			case 2:
			{
				if ((id = Car_Nearest(playerid)) != -1 && !CarData[id][carLocked])
				{
					if (InventoryData[playerid][index][invQuantity] == 1)
					{
						if (!strcmp(name, "Sac a dos") && GetVehicleBackpack(id) != -1)
						return SendClientMessageEx(playerid, COLOR_ERROR, "Vous ne pouvez pas stocker un sac à dos dans le coffre.");

						Car_AddItem(id, name, InventoryData[playerid][index][invModel], 1);
						Inventory_Remove(playerid, name);

						SendNearbyMessage(playerid, 15.0, COLOR_PURPLE, "%s a stocké un(e) \"%s\" dans le coffre.", ReturnName(playerid, 1), name);
						Car_ShowTrunk(playerid, id);

						if (!strcmp(name, "Sac a dos") && backpack != -1)
						{
							BackpackData[backpack][backpackPlayer] = 0;
							BackpackData[backpack][backpackVehicle] = CarData[id][carID];

							Backpack_Save(backpack);
							SetAccessories(playerid);
						}
					}
					else Dialog_Show(playerid, CarDeposit, DIALOG_STYLE_INPUT, "Coffre du véhicule", "Objet: %s (Quantité: %d)\n\nVeuillez entrer la quantité que vous voulez stocker.", "Ranger", "X", name, InventoryData[playerid][PlayerData[playerid][pInventoryItem]][invQuantity]);
				}
				PlayerData[playerid][pStorageSelect] = 0;
			}
			case 3:
			{
				if (!strcmp(name, "Sac a dos"))
				return SendClientMessageEx(playerid, COLOR_ERROR, "Ce sac à dos ne peut pas être stocké.");

				if (InventoryData[playerid][index][invQuantity] == 1)
				{
					Backpack_Add(GetPlayerBackpack(playerid), name, InventoryData[playerid][index][invModel]);
					Inventory_Remove(playerid, name);

					SendNearbyMessage(playerid, 15.0, COLOR_PURPLE, "** %s a stocké un(e) \"%s\" dans son sac à dos.", ReturnName(playerid, 1), name);
					Backpack_Open(playerid);
				}
				else
				{
					Dialog_Show(playerid, BackpackDeposit, DIALOG_STYLE_INPUT, "Sac à dos", "Objet: %s (Quantité: %d)\n\nVeuillez entrer la quantité que vous voulez stocker.", "Ranger", "X", name, InventoryData[playerid][PlayerData[playerid][pInventoryItem]][invQuantity]);
				}
				PlayerData[playerid][pStorageSelect] = 0;
			}
			default:
			{
				format(name, sizeof(name), "%s (%d)", name, InventoryData[playerid][index][invQuantity]);

				if (Garbage_Nearest(playerid) != -1) {
					Dialog_Show(playerid, Inventory, DIALOG_STYLE_LIST, name, "Utiliser l'objet\nDonner l'objet\nJeter l'objet", "Ok", "X");
				}
				else {
					Dialog_Show(playerid, Inventory, DIALOG_STYLE_LIST, name, "Utiliser l'objet\nDonner l'objet\nPoser l'objet", "Ok", "X");
				}
			}
		}
	}
	if ((response) && (extraid == MODEL_SELECTION_GLASSES))
	{
		if (modelid == 19300)
		{
			for (new i = 23; i < 34; i ++) {
				PlayerTextDrawShow(playerid, PlayerData[playerid][pTextdraws][i]);
			}
			SelectTextDraw(playerid, -1);
			PlayerData[playerid][pGlasses] = 0;

			RemovePlayerAttachedObject(playerid, 0);
			SendClientMessageEx(playerid, COLOR_INFO, "Vous avez retiré vos lunettes.");
		}
		else
		{
			PlayerData[playerid][pEditType] = 1;
			TogglePlayerControllable(playerid, 1);

			SetPlayerAttachedObject(playerid, 0, modelid, 2, 0.094214, 0.044044, -0.007274, 89.675476, 83.514060, 0.000000);
			EditAttachedObject(playerid, 0);
		}
	}
	if ((response) && (extraid == MODEL_SELECTION_HATS))
	{
		if (modelid == 19300)
		{
			for (new i = 23; i < 34; i ++) {
				PlayerTextDrawShow(playerid, PlayerData[playerid][pTextdraws][i]);
			}
			SelectTextDraw(playerid, -1);
			PlayerData[playerid][pHat] = 0;

			RemovePlayerAttachedObject(playerid, 1);
			SendClientMessageEx(playerid, COLOR_INFO, "Vous avez retiré votre chapeaux.");
		}
		else
		{
			PlayerData[playerid][pEditType] = 2;
			TogglePlayerControllable(playerid, 1);

			SetPlayerAttachedObject(playerid, 1, modelid, 2, 0.1565, 0.0273, -0.0002, -7.9245, -1.3224, 15.0999);
			EditAttachedObject(playerid, 1);
		}
	}
	if ((response) && (extraid == MODEL_SELECTION_GATE))
	{
	    new id = PlayerData[playerid][pGateModify];
		GateData[id][gateModel] = modelid;

		DestroyDynamicObject(GateData[id][gateObject]);
		GateData[id][gateObject] = CreateDynamicObject(GateData[id][gateModel], GateData[id][gatePos][0], GateData[id][gatePos][1], GateData[id][gatePos][2], GateData[id][gatePos][3], GateData[id][gatePos][4], GateData[id][gatePos][5], GateData[id][gateWorld], GateData[id][gateInterior]);

		Gate_Save(id);
		SendAdminAlert(COLOR_ADMINGROUP, "%s a ajusté le model de la gate id %d. Nouveau model : %d.", ReturnName(playerid), id, modelid);
	}
	if ((response) && (extraid == MODEL_SELECTION_DOORS))
	{
	    new house_id = PlayerData[playerid][pDoorCreate];
		new id = Gate_Create(playerid);

		GateData[id][gateHouseID] = house_id;
		GateData[id][gateModel] = modelid;

		GateData[id][gateMove][0] = GateData[id][gatePos][0];
		GateData[id][gateMove][1] = GateData[id][gatePos][1];
		GateData[id][gateMove][2] = GateData[id][gatePos][2];
		GateData[id][gateMove][3] = GateData[id][gatePos][3];
		GateData[id][gateMove][4] = GateData[id][gatePos][4];
		GateData[id][gateMove][5] = -90.0;
		
		GateData[id][gateRadius] = 1.7;
		
		DestroyDynamicObject(GateData[id][gateObject]);
		GateData[id][gateObject] = CreateDynamicObject(GateData[id][gateModel], GateData[id][gatePos][0], GateData[id][gatePos][1], GateData[id][gatePos][2], GateData[id][gatePos][3], GateData[id][gatePos][4], GateData[id][gatePos][5], GateData[id][gateWorld], GateData[id][gateInterior]);

		Gate_Save(id);
		GiveMoney(playerid, -1500);
		
		SendClientMessageEx(playerid, COLOR_INFO, "Vous avez créer une porte dans votre maison pour 1500$. (ModelID: %d)", modelid);
	}
	if ((response) && (extraid == MODEL_SELECTION_BANDANAS))
	{
		if (modelid == 19300)
		{
			for (new i = 23; i < 34; i ++) {
				PlayerTextDrawShow(playerid, PlayerData[playerid][pTextdraws][i]);
			}
			SelectTextDraw(playerid, -1);
			PlayerData[playerid][pBandana] = 0;

			RemovePlayerAttachedObject(playerid, 2);
			SendClientMessageEx(playerid, COLOR_INFO, "Vous avez retiré votre bandana.");
		}
		else
		{
			PlayerData[playerid][pEditType] = 3;
			TogglePlayerControllable(playerid, 1);

			SetPlayerAttachedObject(playerid, 2, modelid, 2, 0.099553, 0.044356, -0.000285, 89.675476, 84.277572, 0.000000);
			EditAttachedObject(playerid, 2);
		}
	}
	if ((response) && (extraid == MODEL_SELECTION_SKIN))
	{
		PlayerData[playerid][pSkin] = modelid;

		SetSpawnInfo(playerid, 0, PlayerData[playerid][pSkin], 1684.4392, 1771.6658, 10.8203, 270.0000, 0, 0, 0, 0, 0, 0);
		TogglePlayerSpectating(playerid, 0);
	}
	if ((response) && (extraid == MODEL_SELECTION_CLOTHES))
	{
		new
		bizid = -1,
		price;

		if ((bizid = Business_Inside(playerid)) == -1 || BusinessData[bizid][bizType] != 3)
		return 0;

		if (BusinessData[bizid][bizProducts] < 1)
		return SendClientMessageEx(playerid, COLOR_ERROR, "Ce business n'a plus de stock.");

		price = BusinessData[bizid][bizPrices][PlayerData[playerid][pClothesType] - 1];

		if (GetMoney(playerid) < price)
		return SendClientMessageEx(playerid, COLOR_ERROR, "Achat impossible, vous n'avez pas l'argent nécessaire.");

		GiveMoney(playerid, -price);

		BusinessData[bizid][bizProducts]--;
		BusinessData[bizid][bizVault] += Tax_Percent(price);

		Business_Save(bizid);
		Tax_AddPercent(price);

		switch (PlayerData[playerid][pClothesType])
		{
			case 1:
			{
				PlayerData[playerid][pSkin] = modelid;
				SetPlayerSkin(playerid, modelid);

				SendNearbyMessage(playerid, 15.0, COLOR_PURPLE, "%s paye %s$ et achète une nouvelle tenue.", ReturnName(playerid, 1), FormatNumber(price));
			}
			case 2:
			{
				PlayerData[playerid][pEditType] = 1;
				PlayerData[playerid][pGlasses] = modelid;

				SendNearbyMessage(playerid, 15.0, COLOR_PURPLE, "%s paye %s$ et achète une nouvelle paire de lunettes.", ReturnName(playerid, 1), FormatNumber(price));
				RemovePlayerAttachedObject(playerid, 0);

				SetPlayerAttachedObject(playerid, 0, modelid, 2, 0.094214, 0.044044, -0.007274, 89.675476, 83.514060, 0.000000);
				EditAttachedObject(playerid, 0);
			}
			case 3:
			{
				PlayerData[playerid][pHat] = modelid;
				PlayerData[playerid][pEditType] = 2;

				SendNearbyMessage(playerid, 15.0, COLOR_PURPLE, "%s paye %s$ et achète un nouveau chapeau.", ReturnName(playerid, 1), FormatNumber(price));
				RemovePlayerAttachedObject(playerid, 1);

				SetPlayerAttachedObject(playerid, 1, modelid, 2, 0.1565, 0.0273, -0.0002, -7.9245, -1.3224, 15.0999);
				EditAttachedObject(playerid, 1);
			}
			case 4:
			{
				PlayerData[playerid][pBandana] = modelid;
				PlayerData[playerid][pEditType] = 3;

				SendNearbyMessage(playerid, 15.0, COLOR_PURPLE, "%s paye %s$ et achète un nouveau bandana.", ReturnName(playerid, 1), FormatNumber(price));
				RemovePlayerAttachedObject(playerid, 2);

				SetPlayerAttachedObject(playerid, 2, modelid, 2, 0.099553, 0.044356, -0.000285, 89.675476, 84.277572, 0.000000);
				EditAttachedObject(playerid, 2);
			}
		}
	}
	if ((response) && (extraid == MODEL_SELECTION_DEALER))
	{
		new id = PlayerData[playerid][pDealership];

		if (id != -1 && BusinessData[id][bizExists] && BusinessData[id][bizType] == 5)
		{
			if (!DealershipCars[id][index][vehModel])
			{
				Dialog_Show(playerid, AddVehicle, DIALOG_STYLE_LIST, "Ajouter un véhicule", "Ajouter mon nom\nAjouter une miniature", "Ok", "X");
			}
			else
			{
				PlayerData[playerid][pDealerCar] = index;
				Dialog_Show(playerid, CarOptions, DIALOG_STYLE_LIST, "Concession", "Modifier le prix (%s)\nSupprimer le véhicule", "Ok", "X", FormatNumber(DealershipCars[id][index][vehPrice]));
			}
		}
	}
	if ((response) && (extraid == MODEL_SELECTION_DEALER_ADD))
	{
		new id = PlayerData[playerid][pDealership];

		if (id != -1 && BusinessData[id][bizExists] && BusinessData[id][bizType] == 5)
		{
			for (new i = 0; i != MAX_DEALERSHIP_CARS; i ++)
			{
				if (DealershipCars[id][i][vehModel] == modelid)
				return SendClientMessageEx(playerid, COLOR_ERROR, "Ce véhicule est déjà en vente dans ce concessionaire.");
			}
			PlayerData[playerid][pDealerCar] = modelid;
			Dialog_Show(playerid, DealerCarPrice, DIALOG_STYLE_INPUT, "Entrer le prix", "Veuillez entrer le prix pour la '%s':", "Ok", "X", ReturnVehicleModelName(PlayerData[playerid][pDealerCar]));
		}
	}
	if ((response) && (extraid == MODEL_SELECTION_BUY_CAR))
	{
		new id = Business_Inside(playerid);

		if (id != -1 && BusinessData[id][bizExists] && BusinessData[id][bizType] == 5)
		{
			if (!DealershipCars[id][index][vehModel])
			return SendClientMessageEx(playerid, COLOR_ERROR, "Il n'existe aucun modèle dans le slot sélectionné.");

			if (GetMoney(playerid) < DealershipCars[id][index][vehPrice])
			return SendClientMessageEx(playerid, COLOR_ERROR, "Vous ne pouvez pas payer ce véhicule (%s).", FormatNumber(DealershipCars[id][index][vehPrice]));

			PlayerData[playerid][pDealerCar] = index;
			Dialog_Show(playerid, ConfirmCarBuy, DIALOG_STYLE_MSGBOX, "Confirmer l'achat", "Êtes-vous sûr de vouloir acheter ce véhicule (%s) ?\n\nCe véhicule vous coûtera %s dans cette concession.", "Oui", "X", ReturnVehicleModelName(modelid), FormatNumber(DealershipCars[id][index][vehPrice]));
		}
	}
	if ((response) && (extraid == MODEL_SELECTION_FURNITURE))
	{
		new
		houseid = -1,
		type = PlayerData[playerid][pFurnitureType],
		price;

		if ((houseid = House_Inside(playerid)) != -1 && House_IsOwner(playerid, houseid))
		{
			price = GetPriceFurniture(type);

			if (GetMoney(playerid) < price)
			return SendClientMessageEx(playerid, COLOR_ERROR, "Action impossible, vous n'avez pas l'argent nécessaire.");

			if (Furniture_GetCount(houseid) > MAX_HOUSE_FURNITURE)
			return SendClientMessageEx(playerid, COLOR_ERROR, "Vous ne pouvez pas avoir plus de %d meubles dans votre maison.", MAX_HOUSE_FURNITURE);
			
			static
				Float:x,
				Float:y,
				Float:z,
				Float:angle;

			GetPlayerPos(playerid, x, y, z);
			GetPlayerFacingAngle(playerid, angle);

			x += 5.0 * floatsin(-angle, degrees);
			y += 5.0 * floatcos(-angle, degrees);
			
			new furniture = Furniture_Add(playerid, houseid, GetFurnitureNameByModel(modelid), modelid, x, y, z, 0.0, 0.0, angle);

			if (furniture == -1)
			return SendClientMessageEx(playerid, COLOR_ERROR, "Le serveur a atteint la limite des meubles.");
			
			PlayerData[playerid][pEditFurniture] = furniture;
			EditDynamicObject(playerid, FurnitureData[furniture][furnitureObject]);
			
			GiveMoney(playerid, -price);
			SendClientMessageEx(playerid, COLOR_INFO, "Vous avez acheté un(e) \"%s\" pour la somme de %s.", GetFurnitureNameByModel(modelid), FormatNumber(price));
		}
	}
	/*if ((response) && (extraid == MODEL_SELECTION_COLOR))
	{
		new vehicleid = GetNearestVehicle(playerid);

		if (vehicleid == -1)
		return SendClientMessageEx(playerid, COLOR_ERROR, "Vous n'êtes pas près d'un véhicule.");

		if (!Inventory_HasItem(playerid, "Spray Can"))
		return SendClientMessageEx(playerid, COLOR_ERROR, "Vous n'avez pas de spray can en main.");

		ApplyAnimation(playerid, "GRAFFITI", "null", 4.0, 0, 0, 0, 0, 0, 0);
		ApplyAnimation(playerid, "GRAFFITI", "spraycan_fire", 4.0, 1, 0, 0, 0, 0, 1);
		ApplyAnimation(playerid, "GRAFFITI", "spraycan_fire", 4.0, 1, 0, 0, 0, 0, 1);

		GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~r~Peinture en cours..", 3000, 3);
		SetTimerEx("ResprayCar", 3000, false, "ddd", playerid, vehicleid, modelid);
	}*/
	if ((response) && (extraid == MODEL_SELECTION_SKINS))
	{
		Dialog_Show(playerid, FactionSkin, DIALOG_STYLE_LIST, "Modifier le skin", "Modifier l'ID\n{de3838}Supprimer le skin", "Ok", "X");
		PlayerData[playerid][pSelectedSlot] = index;
	}
	if ((response) && (extraid == MODEL_SELECTION_ADD_SKIN))
	{
		FactionData[PlayerData[playerid][pFactionEdit]][factionSkins][PlayerData[playerid][pSelectedSlot]] = modelid;
		Faction_Save(PlayerData[playerid][pFactionEdit]);

		SendClientMessageEx(playerid, COLOR_INFO, "Vous avez défini l'ID du skin du Slot %d à %d.", PlayerData[playerid][pSelectedSlot], modelid);
	}
	if ((response) && (extraid == MODEL_SELECTION_FACTION_SKIN))
	{
		new factionid = PlayerData[playerid][pFaction];

		if (factionid == -1 || !IsNearFactionLocker(playerid))
		return 0;

		if (modelid == 19300)
		return SendClientMessageEx(playerid, COLOR_ERROR, "Il n'existe aucun modèle dans le slot sélectionné.");

		SetPlayerSkin(playerid, modelid);
		SendNearbyMessage(playerid, 15.0, COLOR_PURPLE, "%s enfile sa tenue de service.", ReturnName(playerid, 1));
	}
	if ((response) && (extraid == MODEL_SELECTION_WHEELS))
	{
		new vehicleid = GetPlayerVehicleID(playerid);

		if (!IsPlayerInAnyVehicle(playerid) || !IsDoorVehicle(vehicleid))
		return 0;

		AddComponent(vehicleid, modelid);
		SendClientMessageEx(playerid, COLOR_INFO, "Vous avez ajouté les jantes \"%s\" à ce véhicule.", GetWheelName(modelid));
	    //GiveMoney(playerid, -100);
	}
	if ((response) && (extraid == MODEL_CADAVRE_INVENTORY))
	{
	    SendClientMessage(playerid, COLOR_ERROR, "Vous ne pouvez pas interargir avec cette inventaire.");
	}
	if (extraid == MODEL_SELECTION_TAXILICENSE)
	{
		if(response)
		{
		    switch(modelid)
		    {
				case 19308: Inventory_Add(playerid, "License de taxi (1)", 19308);
				case 19309: Inventory_Add(playerid, "License de taxi (2)", 19309);
				case 19310: Inventory_Add(playerid, "License de taxi (3)", 19310);
				case 19311: Inventory_Add(playerid, "License de taxi (4)", 19311);
		    }

		    SendClientMessage(playerid, COLOR_INFO, "Félicitation, vous avez maintenant votre license de taxi.");
		}
		else
		{
			Inventory_Add(playerid, "License de taxi (1)", 19308);
	    	SendClientMessage(playerid, COLOR_INFO, "Félicitation, vous avez maintenant votre license de taxi.");
		}
	}
	if (extraid == MODEL_SELECTION_MECANOSKIN)
	{
	    if(response)
	    {
			SetPlayerSkin(playerid, modelid);
			SendNearbyMessage(playerid, 10.0, COLOR_PURPLE, "* %s enfile sa tenue", ReturnName(playerid));
		}
		else
		{
			SetPlayerSkin(playerid, 8);
			SendNearbyMessage(playerid, 10.0, COLOR_PURPLE, "* %s enfile sa tenue", ReturnName(playerid));
		}
	}
	if (extraid == MODEL_SELECTION_TAG)
	{
	    if (!response)
	    {
			ResetVar_TempTag(playerid);
			ShowDialog_tag(playerid);
			return 1;
	    }
	    else
	    {
	        TagData_temp[playerid][tagID] = modelid;
	        
		    new
		        string[500];

			format(string, sizeof(string), "\
			Etes-vous sûr de vouloir créer ce tag avec les\n\
			paramètes indiqués ci-dessous ?\n\n\
			{7EA0DA}ModelID:{FFFFFF} %d",

			TagData_temp[playerid][tagID]);
		    Dialog_Show(playerid, Tag_Create1, DIALOG_STYLE_MSGBOX, "Tag - Confirmation du tag", string, "Oui", "Modifier");
	    }
	}
	return 1;
}

forward ResprayCar(playerid, vehicleid, color);
public ResprayCar(playerid, vehicleid, color)
{
	if (!PlayerData[playerid][pLogged] || GetNearestVehicle(playerid) != vehicleid)
	return 0;

	Inventory_Remove(playerid, "Spray Can");
	ClearAnimations(playerid);

	SetVehicleColor(vehicleid, color, color);
	SendNearbyMessage(playerid, 15.0, COLOR_PURPLE, "%s a fini de peindre la %s.", ReturnName(playerid, 1), ReturnVehicleName(vehicleid));
	return 1;
}

public OnPlayerClickTextDraw(playerid, Text:clickedid)
{
	if (clickedid == Text:INVALID_TEXT_DRAW)
	{
		if (!Dialog_Opened(playerid) && PlayerData[playerid][pDisplayStats] > 0)
		{
			if (PlayerData[playerid][pDisplayStats] == 2) {
				for (new i = 50; i < 58; i ++) PlayerTextDrawHide(playerid, PlayerData[playerid][pTextdraws][i]);
			}
			else for (new i = 40; i < 50; i ++) {
				PlayerTextDrawHide(playerid, PlayerData[playerid][pTextdraws][i]);
			}
			CancelSelectTextDraw(playerid);
			PlayerData[playerid][pDisplayStats] = false;
		}
	}
	return 0;
}
FixString(string[])
{
	new original[50] = {192,193,194,196,198,199,200,201,202,203,204,205,206,207,210,211,212,214,217,218,219,220,223,224,225,226,228,230,231,232,233,234,235,236,237,238,239,242,243,244,246,249,250,251,252,209,241,191,161,176};
	new fixed[50] = {128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,94,124};
	new len = strlen(string);
	for (new i; i < len; i++) {
		for(new j;j < 50;j++) {
			if(string[i] == original[j]) {
				string[i] = fixed[j];
				break;
			}
		}
	}
}

stock ShowContacts(playerid)
{
	new
	string[32 * MAX_CONTACTS],
	count = 0;

	string = "Ajouter un contact\n";

	for (new i = 0; i != MAX_CONTACTS; i ++) if (ContactData[playerid][i][contactExists]) {
		format(string, sizeof(string), "%s%s - #%d\n", string, ContactData[playerid][i][contactName], ContactData[playerid][i][contactNumber]);

		ListedContacts[playerid][count++] = i;
	}
	Dialog_Show(playerid, Contacts, DIALOG_STYLE_LIST, "Mes contacts", string, "Ok", "X");
	return 1;
}

stock GetPlayerID(name[], underscore = 1)
{
	foreach (new i : Player) if (!strcmp(ReturnName(i, underscore), name, true)) {
		return i;
	}
	return INVALID_PLAYER_ID;
}

Dialog:ShowOnly(playerid, response, listitem, inputtext[]) {
	playerid = INVALID_PLAYER_ID;
	response = 0;
	listitem = 0;
	inputtext[0] = '\0';
}
Dialog:Billboards(playerid, response, listitem, inputtext[]) {
	if (response)
	{
		new string[500], szString[100];
		if(BillBoardData[listitem][bbExists] >= 1)
		{
			if(!BillBoardData[listitem][bbOwner])
			{
				BillboardCheckout[playerid] = listitem;
				format(szString, sizeof(szString), "{FFFFFF}Panneau publicitaire - {FF8000}%i{FFFFFF} - {FF8000}$%d", listitem, BillBoardData[listitem][bbPrice]);
				format(string, sizeof(string), "{FFFFFF}Nom: {FF8000}%s{FFFFFF} ({FF8000}%i{FFFFFF})\nPrix: {FF8000}$%d{FFFFFF}\n\n\nLes frais sont récupérés directement sur votre payday.", BillBoardData[listitem][bbName], listitem, BillBoardData[listitem][bbPrice]);
				Dialog_Show(playerid, BillboardRent, DIALOG_STYLE_MSGBOX, szString, string, "Rent", "Cancel");
				return 1;
			}
			if(BillBoardData[listitem][bbOwner] == GetPlayerSQLID(playerid))
			{
				Dialog_Show(playerid, MyBillboardMenu, DIALOG_STYLE_LIST, "Gérer mon panneau", "Modifier la publicité\n{de3838}Délouer le panneau", "Valider", "Annuler");
				return 1;
			}
			else
			{
				SendClientMessageEx(playerid, COLOR_ERROR, "Cette affiche est déjà louée!");
			}
		}
	}
	return 1;
}

Dialog:MyBillboardMenu(playerid, response, listitem, inputtext[]) {
	if (response)
	{
		if(listitem == 0)
		{
			Dialog_Show(playerid, MyBillboardMessage, DIALOG_STYLE_INPUT, "Panneau publicitaire - Message", "Entrez le nouveau message publicitaire qui s'affichera sur votre panneau.\n\n(Maximum 230 caractères)", "Valider", "Annuler");
		}
		if(listitem == 1)
		{
			Dialog_Show(playerid, MyBillboardUnrent, DIALOG_STYLE_MSGBOX, "Panneau publicitaire - Délouer", "Etes-vous sûr de vouloir arrêter la location du panneau publicitaire?\n\nVous aurez la moitié des frais de location de retour.", "Valider", "Annuler");
		}
	}
	return 1;
}

Dialog:MyBillboardMessage(playerid, response, listitem, inputtext[]) {
	if (response)
	{
		if (isnull(inputtext))
		return Dialog_Show(playerid, MyBillboardMessage, DIALOG_STYLE_INPUT, "Panneau publicitaire - Message", "Entrez le nouveau message publicitaire qui s'affichera sur votre panneau.\n\n(Maximum 230 caractères)", "Valider", "Annuler");

		if (strlen(inputtext) > 230)
		return Dialog_Show(playerid, MyBillboardMessage, DIALOG_STYLE_INPUT, "Panneau publicitaire - Message", "Il y a trop de caractère, le maximum est de 230.\n\nEntrez le nouveau message publicitaire qui s'affichera sur votre panneau.\n\n(Maximum 230 caractères)", "Valider", "Annuler");

		format(BillBoardData[PlayerData[playerid][pOwnsBillboard]][bbMessage], 230, inputtext);

		Billboard_Save(PlayerData[playerid][pOwnsBillboard]);
		Billboard_Refresh(PlayerData[playerid][pOwnsBillboard]);
	}
	return 1;
}

Dialog:MyBillboardUnrent(playerid, response, listitem, inputtext[]) {
	if (response)
	{
		new bbid = PlayerData[playerid][pOwnsBillboard];

		GiveMoney(playerid, BillBoardData[bbid][bbPrice]/2);
		BillBoardData[bbid][bbOwner] = 0;
		format(BillBoardData[PlayerData[playerid][pOwnsBillboard]][bbMessage], 230, "Aucun propriétaire");
		Billboard_Save(bbid);
		Billboard_Refresh(bbid);
		PlayerData[playerid][pOwnsBillboard] = -1;
		SendClientMessageEx(playerid, COLOR_LIGHTYELLOW, "Vous avez délouer votre panneau publicitaire");
	}
	return 1;
}

Dialog:BillboardRent(playerid, response, listitem, inputtext[]) {
	if (response)
	{
		new bbid = BillboardCheckout[playerid];
		if(PlayerData[playerid][pBankMoney] < BillBoardData[bbid][bbPrice])
		{
			SendClientMessageEx(playerid, COLOR_ERROR, "Vous n'avez pas assez d'argent dans votre compte bancaire pour les frais de location d'affichage.");
			return 1;
		}
		else
		{
			PlayerData[playerid][pBankMoney] -= BillBoardData[playerid][bbPrice];
			PlayerData[playerid][pOwnsBillboard] = bbid;
			BillBoardData[bbid][bbOwner] = GetPlayerSQLID(playerid);
			Tax_AddMoney(BillBoardData[bbid][bbPrice]);
			Billboard_Save(bbid);
			Billboard_Refresh(bbid);
			SendClientMessageEx(playerid, COLOR_LIGHTYELLOW, "Vous avez acheté un panneau d'affichage, utilisez /mybillboard pour modifier le message.");
		}
	}
	return 1;
}

Dialog:Radio(playerid, response, listitem, inputtext[])
{
	if (response)
	{
		switch (listitem)
		{
			case 0:
				Dialog_Show(playerid, CulturalRadio, DIALOG_STYLE_LIST, "Cultural", "Classical\nInstruments", "Select", "Cancel");

			case 1:
				Dialog_Show(playerid, OldiesRadio, DIALOG_STYLE_LIST, "Oldies", "70's\n80's\n90's", "Select", "Cancel");

			case 2:
				Dialog_Show(playerid, OtherRadio, DIALOG_STYLE_LIST, "Other", "Dance\nGlee\nMash Ups", "Select", "Cancel");

			case 3:
				Dialog_Show(playerid, PopRadio, DIALOG_STYLE_LIST, "Pop", "Korean\nPop\nTop Hits", "Select", "Cancel");

			case 4:
				Dialog_Show(playerid, RNBRadio, DIALOG_STYLE_LIST, "Rhythm & Blues", "R&B\nSoul", "Select", "Cancel");

			case 5:
				Dialog_Show(playerid, RockRadio, DIALOG_STYLE_LIST, "Rock", "Alternative\nClassic\nIndie Rock\nMetal\nPunk\nRock & Roll", "Select", "Cancel");

			case 6:
				Dialog_Show(playerid, TalkRadio, DIALOG_STYLE_LIST, "Talk", "Comedy\nScanners", "Select", "Cancel");

			case 7:
				Dialog_Show(playerid, UrbanRadio, DIALOG_STYLE_LIST, "Urban", "Country\nHip-Hop", "Select", "Cancel");

			case 8:
				Dialog_Show(playerid, ElectricRadio, DIALOG_STYLE_LIST, "Electric", "ElectricFM.com\n1Dance.fm\nDanceTime.fm", "Select", "Cancel");

			case 9:
				Dialog_Show(playerid, RadioPerso, DIALOG_STYLE_INPUT, "UR", "Ecrire l'url de la radio", "Ok", "Fermer");


			case 10:
			{
				new vehicleid = GetPlayerVehicleID(playerid);

				if (GetPlayerState(playerid) != PLAYER_STATE_DRIVER || !IsEngineVehicle(vehicleid))
				return 0;

				StopVehicleRadio(vehicleid);
				SendNearbyMessage(playerid, 15.0, COLOR_PURPLE, "%s éteint la radio de la voiture.", ReturnName(playerid, 1));
			}
		}
	}
	return 1;
}
Dialog:RadioPerso(playerid, response, listitem, inputtext[])
{
	new vehicleid = GetPlayerVehicleID(playerid);
	if (GetPlayerState(playerid) != PLAYER_STATE_DRIVER || !IsEngineVehicle(vehicleid))
	return 0;

	if (response)
	{
		//new radioc[256] = strval(inputtext);

		if (isnull(inputtext))
		return Dialog_Show(playerid, RadioPerso, DIALOG_STYLE_INPUT, "UR", "Ecrire l'url de la radio", "Ok", "Fermer");

		SetVehicleRadio(vehicleid, inputtext);
	}
	else {
		Dialog_Show(playerid, Radio, DIALOG_STYLE_LIST, "Radio", "Culturel\nOldies\nOther\nPop\nRhythm & Blues\nRock\nTalk\nUrban\nElectric\nURL\nEteindre", "Select", "Cancel");
	}
	return 1;
}
Dialog:UrbanRadio(playerid, response, listitem, inputtext[])
{
	if (response)
	{
		new vehicleid = GetPlayerVehicleID(playerid);

		if (GetPlayerState(playerid) != PLAYER_STATE_DRIVER || !IsEngineVehicle(vehicleid))
		return 0;

		switch (listitem)
		{
			case 0:
				Dialog_Show(playerid, Country, DIALOG_STYLE_LIST, "Country", "GotRadio - Today's Country\n181.fm - Highway 181\nHPR1: Traditional Classic Country\nCountry - Sky.fm", "Play", "Cancel");

			case 1:
				Dialog_Show(playerid, HipHop, DIALOG_STYLE_LIST, "Hip-Hop", "100Hits - HipHop\nHot 108 Jamz\n181.fm - The Box\nGotRadio - Urban Jams", "Play", "Cancel");
		}
	}
	return 1;
}

Dialog:Country(playerid, response, listitem, inputtext[])
{
	if (response)
	{
		new vehicleid = GetPlayerVehicleID(playerid);

		if (GetPlayerState(playerid) != PLAYER_STATE_DRIVER || !IsEngineVehicle(vehicleid))
		return 0;

		switch (listitem)
		{
			case 0:
				SetVehicleRadio(vehicleid, "http://206.217.213.235:8100/");

			case 1:
				SetVehicleRadio(vehicleid, "http://relay.181.fm:8018/");

			case 2:
				SetVehicleRadio(vehicleid, "http://108.61.73.119:8024/");

			case 3:
				SetVehicleRadio(vehicleid, "http://scfire-ntc-aa01.stream-aol.com/stream/1019");
		}
	}
	return 1;
}

Dialog:HipHop(playerid, response, listitem, inputtext[])
{
	if (response)
	{
		new vehicleid = GetPlayerVehicleID(playerid);

		if (GetPlayerState(playerid) != PLAYER_STATE_DRIVER || !IsEngineVehicle(vehicleid))
		return 0;

		switch (listitem)
		{
			case 0:
				SetVehicleRadio(vehicleid, "http://listen.radionomy.com/EazyUS.m3u");

			case 1:
				SetVehicleRadio(vehicleid, "http://stream-95.shoutcast.com/hot108_mp3_128kbps");

			case 2:
				SetVehicleRadio(vehicleid, "http://108.61.73.119:8024/");

			case 3:
				SetVehicleRadio(vehicleid, "http://108.61.73.118:8068/");
		}
	}
	return 1;
}

Dialog:ElectricRadio(playerid, response, listitem, inputtext[])
{
	if (response)
	{
		new vehicleid = GetPlayerVehicleID(playerid);

		if (GetPlayerState(playerid) != PLAYER_STATE_DRIVER || !IsEngineVehicle(vehicleid))
		return 0;

		switch (listitem)
		{
			case 0:
				SetVehicleRadio(vehicleid, "http://72.13.83.151/");

			case 1:
				SetVehicleRadio(vehicleid, "http://173.192.207.51:8062/");

			case 2:
				SetVehicleRadio(vehicleid, "http://212.83.60.202:8000/");
		}
	}
	return 1;
}

Dialog:TalkRadio(playerid, response, listitem, inputtext[])
{
	if (response)
	{
		new vehicleid = GetPlayerVehicleID(playerid);

		if (GetPlayerState(playerid) != PLAYER_STATE_DRIVER || !IsEngineVehicle(vehicleid))
		return 0;

		switch (listitem)
		{
			case 0:
				Dialog_Show(playerid, Comedy, DIALOG_STYLE_LIST, "Comedy", "Comedy104\nAddictedToRadio.com - Comedy\n181.fm - Comedy Club", "Play", "Cancel");

			case 1:
				Dialog_Show(playerid, Scanners, DIALOG_STYLE_LIST, "Scanners", "New Orleans Police Department\nSan Diego Police Dispatch\nLong Beach Police Dispatch\nCalifornia Highway Patrol - Los Angeles & Orange County\nLAPD - Citywide Dispatch and Hot Shots/Code 3", "Play", "Cancel");
		}
	}
	return 1;
}

Dialog:Comedy(playerid, response, listitem, inputtext[])
{
	if (response)
	{
		new vehicleid = GetPlayerVehicleID(playerid);

		if (GetPlayerState(playerid) != PLAYER_STATE_DRIVER || !IsEngineVehicle(vehicleid))
		return 0;

		switch (listitem)
		{
			case 0:
				SetVehicleRadio(vehicleid, "http://69.195.140.50:8060/");

			case 1:
				SetVehicleRadio(vehicleid, "http://208.77.21.13:17910/");

			case 2:
				SetVehicleRadio(vehicleid, "http://108.61.73.118:8026/");
		}
	}
	return 1;
}

Dialog:Scanners(playerid, response, listitem, inputtext[])
{
	if (response)
	{
		new vehicleid = GetPlayerVehicleID(playerid);

		if (GetPlayerState(playerid) != PLAYER_STATE_DRIVER || !IsEngineVehicle(vehicleid))
		return 0;

		switch (listitem)
		{
			case 0:
				SetVehicleRadio(vehicleid, "http://www.radioreference.com/scripts/playlists/1/3877/0-5443008964.m3u");

			case 1:
				SetVehicleRadio(vehicleid, "http://www.radioreference.com/scripts/playlists/1/6740/0-5443008116.m3u");

			case 2:
				SetVehicleRadio(vehicleid, "http://www.radioreference.com/scripts/playlists/1/6740/0-5443008116.m3u");

			case 3:
				SetVehicleRadio(vehicleid, "http://radioreference.com/scripts/playlists/1/10239/0-5443007068.m3u");

			case 4:
				SetVehicleRadio(vehicleid, "http://radioreference.com/scripts/playlists/1/10239/0-5443007068.m3u");
		}
	}
	return 1;
}

Dialog:RockRadio(playerid, response, listitem, inputtext[])
{
	if (response)
	{
		new vehicleid = GetPlayerVehicleID(playerid);

		if (GetPlayerState(playerid) != PLAYER_STATE_DRIVER || !IsEngineVehicle(vehicleid))
		return 0;

		switch (listitem)
		{
			case 0:
				Dialog_Show(playerid, Alternative, DIALOG_STYLE_LIST, "Alternative", "GotRadio - Alternative", "Play", "Cancel");

			case 1:
				Dialog_Show(playerid, Classic, DIALOG_STYLE_LIST, "Classic", "181.FM - Rock 181 #1\n.977 The Classic Rock\n181.fm - The Eagle\n181.fm Rock 40\n181.fm Rock 181 #2", "Play", "Cancel");

			case 2:
				Dialog_Show(playerid, IndieRock, DIALOG_STYLE_LIST, "Indie Rock", "GotRadio - Indie Underground\nIndie Rock - LifeJive.com", "Play", "Cancel");

			case 3:
				Dialog_Show(playerid, Metal, DIALOG_STYLE_LIST, "Metal", "GotRadio - Metal Madness\nDepressive Metal Rock radio\nDeath.F(ucking)M(etal)\nDepressive metal rock (Death)\nRepressive metal rock radio (Black)", "Play", "Cancel");

			case 4:
				Dialog_Show(playerid, Punk, DIALOG_STYLE_LIST, "Punk", "Pop Punk - Sky.fm", "Play", "Cancel");

			case 5:
				Dialog_Show(playerid, RockRoll, DIALOG_STYLE_LIST, "Rock & Roll", "Absolute Radio", "Play", "Cancel");
		}
	}
	return 1;
}

Dialog:Alternative(playerid, response, listitem, inputtext[])
{
	if (response)
	{
		new vehicleid = GetPlayerVehicleID(playerid);

		if (GetPlayerState(playerid) != PLAYER_STATE_DRIVER || !IsEngineVehicle(vehicleid))
		return 0;

		switch (listitem)
		{
			case 0:
				SetVehicleRadio(vehicleid, "http://206.217.213.235:8200/");
		}
	}
	return 1;
}

Dialog:Classic(playerid, response, listitem, inputtext[])
{
	if (response)
	{
		new vehicleid = GetPlayerVehicleID(playerid);

		if (GetPlayerState(playerid) != PLAYER_STATE_DRIVER || !IsEngineVehicle(vehicleid))
		return 0;

		switch (listitem)
		{
			case 0:
				SetVehicleRadio(vehicleid, "http://relay.181.fm:8008/");

			case 1:
				SetVehicleRadio(vehicleid, "http://7649.live.streamtheworld.com/977_CLASSROCK_SC");

			case 2:
				SetVehicleRadio(vehicleid, "http://relay.181.fm:8030/");

			case 3:
				SetVehicleRadio(vehicleid, "http://uplink.181.fm:8028/");

			case 4:
				SetVehicleRadio(vehicleid, "http://relay.181.fm:8064/");
		}
	}
	return 1;
}

Dialog:IndieRock(playerid, response, listitem, inputtext[])
{
	if (response)
	{
		new vehicleid = GetPlayerVehicleID(playerid);

		if (GetPlayerState(playerid) != PLAYER_STATE_DRIVER || !IsEngineVehicle(vehicleid))
		return 0;

		switch (listitem)
		{
			case 0:
				SetVehicleRadio(vehicleid, "http://173.244.215.163:8330/");

			case 1:
				SetVehicleRadio(vehicleid, "http://208.53.138.125:8136/");
		}
	}
	return 1;
}

Dialog:Metal(playerid, response, listitem, inputtext[])
{
	if (response)
	{
		new vehicleid = GetPlayerVehicleID(playerid);

		if (GetPlayerState(playerid) != PLAYER_STATE_DRIVER || !IsEngineVehicle(vehicleid))
		return 0;

		switch (listitem)
		{
			case 0:
				SetVehicleRadio(vehicleid, "http://173.244.215.163:8340/");

			case 1:
				SetVehicleRadio(vehicleid, "http://184.154.10.83:8390/");

			case 2:
				SetVehicleRadio(vehicleid, "http://209.9.229.211/");

			case 3:
				SetVehicleRadio(vehicleid, "http://184.154.185.170:8080/");

			case 4:
				SetVehicleRadio(vehicleid, "http://65.60.19.43:8270/");
		}
	}
	return 1;
}

Dialog:Punk(playerid, response, listitem, inputtext[])
{
	if (response)
	{
		new vehicleid = GetPlayerVehicleID(playerid);

		if (GetPlayerState(playerid) != PLAYER_STATE_DRIVER || !IsEngineVehicle(vehicleid))
		return 0;

		switch (listitem)
		{
			case 0:
				SetVehicleRadio(vehicleid, "http://80.94.69.106:6884/");
		}
	}
	return 1;
}

Dialog:RockRoll(playerid, response, listitem, inputtext[])
{
	if (response)
	{
		new vehicleid = GetPlayerVehicleID(playerid);

		if (GetPlayerState(playerid) != PLAYER_STATE_DRIVER || !IsEngineVehicle(vehicleid))
		return 0;

		switch (listitem)
		{
			case 0:
				SetVehicleRadio(vehicleid, "http://mp3-ar-192.as34763.net/");
		}
	}
	return 1;
}

Dialog:RNBRadio(playerid, response, listitem, inputtext[])
{
	if (response)
	{
		new vehicleid = GetPlayerVehicleID(playerid);

		if (GetPlayerState(playerid) != PLAYER_STATE_DRIVER || !IsEngineVehicle(vehicleid))
		return 0;

		switch (listitem)
		{
			case 0:
				Dialog_Show(playerid, RNB, DIALOG_STYLE_LIST, "R&B", "181.fm - True R&B\nDEFJay.de - 100% R&B\nGotRadio - R&B Classics\nSlow Jamz\nAddictedToRadio.com - V101 RnB AAC", "Play", "Cancel");

			case 1:
				Dialog_Show(playerid, SoulRadio, DIALOG_STYLE_LIST, "Soul", "181.fm - Soul\nSoulful Bits", "Play", "Cancel");
		}
	}
	return 1;
}

Dialog:RNB(playerid, response, listitem, inputtext[])
{
	if (response)
	{
		new vehicleid = GetPlayerVehicleID(playerid);

		if (GetPlayerState(playerid) != PLAYER_STATE_DRIVER || !IsEngineVehicle(vehicleid))
		return 0;

		switch (listitem)
		{
			case 0:
				SetVehicleRadio(vehicleid, "http://108.61.73.119:8022/");

			case 1:
				SetVehicleRadio(vehicleid, "http://87.230.56.38/");

			case 2:
				SetVehicleRadio(vehicleid, "http://206.217.213.236:8390/");

			case 3:
				SetVehicleRadio(vehicleid, "http://173.193.32.153:8020/");

			case 4:
				SetVehicleRadio(vehicleid, "http://208.77.21.15:10730/");
		}
	}
	return 1;
}

Dialog:SoulRadio(playerid, response, listitem, inputtext[])
{
	if (response)
	{
		new vehicleid = GetPlayerVehicleID(playerid);

		if (GetPlayerState(playerid) != PLAYER_STATE_DRIVER || !IsEngineVehicle(vehicleid))
		return 0;

		switch (listitem)
		{
			case 0:
				SetVehicleRadio(vehicleid, "http://relay.181.fm:8058/");

			case 1:
				SetVehicleRadio(vehicleid, "http://88.191.137.70/");
		}
	}
	return 1;
}

Dialog:PopRadio(playerid, response, listitem, inputtext[])
{
	if (response)
	{
		new vehicleid = GetPlayerVehicleID(playerid);

		if (GetPlayerState(playerid) != PLAYER_STATE_DRIVER || !IsEngineVehicle(vehicleid))
		return 0;

		switch (listitem)
		{
			case 0:
				Dialog_Show(playerid, KoreanRadio, DIALOG_STYLE_LIST, "Korean", "KPOP TOP 100\nGeneraction\nBig B Radio", "Play", "Cancel");

			case 1:
				Dialog_Show(playerid, Pop, DIALOG_STYLE_LIST, "Pop", "My Tunes FM\nHot Hits IR\nGay FM", "Play", "Cancel");

			case 2:
				Dialog_Show(playerid, TopHits, DIALOG_STYLE_LIST, "Top Hits", "ChartHits.fm - Your Hitz More Music\n181.fm The Office\n100Hitz - Top 40\n1.fm Absolute Top 40\nTop Hits Music - Sky.fm", "Play", "Cancel");
		}
	}
	return 1;
}

Dialog:KoreanRadio(playerid, response, listitem, inputtext[])
{
	if (response)
	{
		new vehicleid = GetPlayerVehicleID(playerid);

		if (GetPlayerState(playerid) != PLAYER_STATE_DRIVER || !IsEngineVehicle(vehicleid))
		return 0;

		switch (listitem)
		{
			case 0:
				SetVehicleRadio(vehicleid, "http://39.119.181.57:8000/128");

			case 1:
				SetVehicleRadio(vehicleid, "http://176.31.241.195:8700/");

			case 2:
				SetVehicleRadio(vehicleid, "http://199.241.187.194:8060/");
		}
	}
	return 1;
}

Dialog:Pop(playerid, response, listitem, inputtext[])
{
	if (response)
	{
		new vehicleid = GetPlayerVehicleID(playerid);

		if (GetPlayerState(playerid) != PLAYER_STATE_DRIVER || !IsEngineVehicle(vehicleid))
		return 0;

		switch (listitem)
		{
			case 0:
				SetVehicleRadio(vehicleid, "http://77.102.253.75:8000/");

			case 1:
				SetVehicleRadio(vehicleid, "http://50.117.26.26:1265/moon.wavestreamer.com:1265/live");

			case 2:
				SetVehicleRadio(vehicleid, "http://80.237.211.85/");
		}
	}
	return 1;
}

Dialog:TopHits(playerid, response, listitem, inputtext[])
{
	if (response)
	{
		new vehicleid = GetPlayerVehicleID(playerid);

		if (GetPlayerState(playerid) != PLAYER_STATE_DRIVER || !IsEngineVehicle(vehicleid))
		return 0;

		switch (listitem)
		{
			case 0:
				SetVehicleRadio(vehicleid, "http://79.141.174.206:22000/");

			case 1:
				SetVehicleRadio(vehicleid, "http://108.61.73.117:8002/");

			case 2:
				SetVehicleRadio(vehicleid, "http://206.217.213.235:8300/");

			case 3:
				SetVehicleRadio(vehicleid, "http://205.164.62.15:7016/");

			case 4:
				SetVehicleRadio(vehicleid, "http://stream-67.shoutcast.com/tophits_skyfm_mp3_96kbps");
		}
	}
	return 1;
}

Dialog:OtherRadio(playerid, response, listitem, inputtext[])
{
	if (response)
	{
		new vehicleid = GetPlayerVehicleID(playerid);

		if (GetPlayerState(playerid) != PLAYER_STATE_DRIVER || !IsEngineVehicle(vehicleid))
		return 0;

		switch (listitem)
		{
			case 0:
				Dialog_Show(playerid, DanceRadio, DIALOG_STYLE_LIST, "Dance", "Dancetime.fm\nPlus Fm - Pure Dance Radio", "Play", "Cancel");

			case 1:
				Dialog_Show(playerid, Glee, DIALOG_STYLE_LIST, "Glee", "AceRadio.net - Glee Radio", "Play", "Cancel");

			case 2:
				Dialog_Show(playerid, MashUps, DIALOG_STYLE_LIST, "Mash Ups", "Mastermix - Base Manic Radio\nMashups\nGotRadio - Mashups\nMashup-Radio24.de\nI love mashup radio", "Play", "Cancel");
		}
	}
	return 1;
}

Dialog:DanceRadio(playerid, response, listitem, inputtext[])
{
	if (response)
	{
		new vehicleid = GetPlayerVehicleID(playerid);

		if (GetPlayerState(playerid) != PLAYER_STATE_DRIVER || !IsEngineVehicle(vehicleid))
		return 0;

		switch (listitem)
		{
			case 0:
				SetVehicleRadio(vehicleid, "http://87.230.53.17:8000/");

			case 1:
				SetVehicleRadio(vehicleid, "http://87.230.82.41/");
		}
	}
	return 1;
}

Dialog:Glee(playerid, response, listitem, inputtext[])
{
	if (response)
	{
		new vehicleid = GetPlayerVehicleID(playerid);

		if (GetPlayerState(playerid) != PLAYER_STATE_DRIVER || !IsEngineVehicle(vehicleid))
		return 0;

		switch (listitem)
		{
			case 0:
				SetVehicleRadio(vehicleid, "http://174.36.42.110:8360/");
		}
	}
	return 1;
}

Dialog:MashUps(playerid, response, listitem, inputtext[])
{
	if (response)
	{
		new vehicleid = GetPlayerVehicleID(playerid);

		if (GetPlayerState(playerid) != PLAYER_STATE_DRIVER || !IsEngineVehicle(vehicleid))
		return 0;

		switch (listitem)
		{
			case 0:
				SetVehicleRadio(vehicleid, "http://184.107.17.34:8046/");

			case 1:
				SetVehicleRadio(vehicleid, "http://67.212.166.210:8413/");

			case 2:
				SetVehicleRadio(vehicleid, "http://206.217.213.236:8530/");

			case 3:
				SetVehicleRadio(vehicleid, "http://188.138.124.98:39710/");

			case 4:
				SetVehicleRadio(vehicleid, "http://87.118.64.205:8040/");
		}
	}
	return 1;
}

Dialog:OldiesRadio(playerid, response, listitem, inputtext[])
{
	if (response)
	{
		new vehicleid = GetPlayerVehicleID(playerid);

		if (GetPlayerState(playerid) != PLAYER_STATE_DRIVER || !IsEngineVehicle(vehicleid))
		return 0;

		switch (listitem)
		{
			case 0:
				Dialog_Show(playerid, 70sRadio, DIALOG_STYLE_LIST, "70's", "181.fm - 70's\nAll Hit 70's\nSky.fm", "Play", "Cancel");

			case 1:
				Dialog_Show(playerid, 80sRadio, DIALOG_STYLE_LIST, "80's", "Golden Radio Italia 80's\n181.fm - Lite 80's\n181.fm - Awesome 80's\n80's, 80's, 80's! - Sky.fm", "Play", "Cancel");

			case 2:
				Dialog_Show(playerid, 90sRadio, DIALOG_STYLE_LIST, "90's", "GotRadio - 90's Alternative\nAddictedToRadio.com\n181.fm - Lite 90's\n181.fm - 90's Alternative\n181.fm - Star 90's", "Play", "Cancel");
		}
	}
	return 1;
}

Dialog:70sRadio(playerid, response, listitem, inputtext[])
{
	if (response)
	{
		new vehicleid = GetPlayerVehicleID(playerid);

		if (GetPlayerState(playerid) != PLAYER_STATE_DRIVER || !IsEngineVehicle(vehicleid))
		return 0;

		switch (listitem)
		{
			case 0:
				SetVehicleRadio(vehicleid, "http://108.61.73.118:8066/");

			case 1:
				SetVehicleRadio(vehicleid, "http://stream-45.shoutcast.com/all_hit_70s_skyfm_mp3_96kbps");
		}
	}
	return 1;
}

Dialog:80sRadio(playerid, response, listitem, inputtext[])
{
	if (response)
	{
		new vehicleid = GetPlayerVehicleID(playerid);

		if (GetPlayerState(playerid) != PLAYER_STATE_DRIVER || !IsEngineVehicle(vehicleid))
		return 0;

		switch (listitem)
		{
			case 0:
				SetVehicleRadio(vehicleid, "http://109.123.116.202:8040/");

			case 1:
				SetVehicleRadio(vehicleid, "http://74.86.186.4:12114/");

			case 2:
				SetVehicleRadio(vehicleid, "http://108.61.73.118:8000/");

			case 3:
				SetVehicleRadio(vehicleid, "http://stream-54.shoutcast.com/the80s_skyfm_mp3_96kbps");
		}
	}
	return 1;
}

Dialog:90sRadio(playerid, response, listitem, inputtext[])
{
	if (response)
	{
		new vehicleid = GetPlayerVehicleID(playerid);

		if (GetPlayerState(playerid) != PLAYER_STATE_DRIVER || !IsEngineVehicle(vehicleid))
		return 0;

		switch (listitem)
		{
			case 0:
				SetVehicleRadio(vehicleid, "http://173.244.215.162:8190/");

			case 1:
				SetVehicleRadio(vehicleid, "http://208.77.21.13:14330/");

			case 2:
				SetVehicleRadio(vehicleid, "http://74.86.186.4:12118/");

			case 3:
				SetVehicleRadio(vehicleid, "http://108.61.73.118:8052/");

			case 4:
				SetVehicleRadio(vehicleid, "http://108.61.73.118:8012/");
		}
	}
	return 1;
}

Dialog:CulturalRadio(playerid, response, listitem, inputtext[])
{
	if (response)
	{
		new vehicleid = GetPlayerVehicleID(playerid);

		if (GetPlayerState(playerid) != PLAYER_STATE_DRIVER || !IsEngineVehicle(vehicleid))
		return 0;

		switch (listitem)
		{
			case 0:
				Dialog_Show(playerid, Classical, DIALOG_STYLE_LIST, "Classical", "Mostly Classical - Sky.fm\nCalmradio.com - Mozart\n1.fm - Otto's classical\nClassical Piano - Sky.fm", "Play", "Cancel");

			case 1:
				Dialog_Show(playerid, Instruments, DIALOG_STYLE_LIST, "Instruments", "Calmradio.com - Solo Piano & Guitar\nGotRadio - Guitar Genius\nGotRadio - Piano Perfect\nPianorama", "Play", "Cancel");
		}
	}
	return 1;
}

Dialog:Classical(playerid, response, listitem, inputtext[])
{
	if (response)
	{
		new vehicleid = GetPlayerVehicleID(playerid);

		if (GetPlayerState(playerid) != PLAYER_STATE_DRIVER || !IsEngineVehicle(vehicleid))
		return 0;

		switch (listitem)
		{
			case 0:
				SetVehicleRadio(vehicleid, "http://stream-135.shoutcast.com/classical_skyfm_mp3_96kbps");

			case 1:
				SetVehicleRadio(vehicleid, "http://159.253.143.15:12128/");

			case 2:
				SetVehicleRadio(vehicleid, "http://205.164.41.18:7070/");

			case 3:
				SetVehicleRadio(vehicleid, "http://72.26.204.28:6874/");
		}
	}
	return 1;
}

Dialog:Instruments(playerid, response, listitem, inputtext[])
{
	if (response)
	{
		new vehicleid = GetPlayerVehicleID(playerid);

		if (GetPlayerState(playerid) != PLAYER_STATE_DRIVER || !IsEngineVehicle(vehicleid))
		return 0;

		switch (listitem)
		{
			case 0:
				SetVehicleRadio(vehicleid, "http://173.192.225.172:8200/");

			case 1:
				SetVehicleRadio(vehicleid, "http://173.244.215.162:8020/");

			case 2:
				SetVehicleRadio(vehicleid, "http://173.244.215.162:8050/");

			case 3:
				SetVehicleRadio(vehicleid, "http://188.127.226.185/");
		}
	}
	return 1;
}

Dialog:NewTasks(playerid, response, listitem, inputtext[])
{
	if (response)
	{
		if (!strcmp(inputtext, "Banque de Los Santos"))
		{
			new id = GetClosestEntrance(playerid, 2);

			if (id == -1)
			return SendClientMessageEx(playerid, COLOR_ERROR, "Il n'y a pas de banque sur le serveur.");

			SetPlayerCheckpoint(playerid, EntranceData[id][entrancePos][0], EntranceData[id][entrancePos][1], EntranceData[id][entrancePos][2], 1.0);
			SendClientMessageEx(playerid, COLOR_INFO, "Le Checkpoint a été réglé à la banque la plus proche (marquée sur le radar).");
		}
		else if (!strcmp(inputtext, "24/7 de Los Santos"))
		{
			new id = GetClosestBusiness(playerid, 1);

			if (id == -1)
			return SendClientMessageEx(playerid, COLOR_ERROR, "Il n'y a pas de 24/7 sur le serveur.");

			SetPlayerCheckpoint(playerid, BusinessData[id][bizPos][0], BusinessData[id][bizPos][1], BusinessData[id][bizPos][2], 1.0);
			SendClientMessageEx(playerid, COLOR_INFO, "Le Checkpoint a été réglé au 24/7 le plus proche (marquée sur le radar).");
		}
		else if (!strcmp(inputtext, "Auto école de Los Santos"))
		{
			new id = GetClosestEntrance(playerid, 1);

			if (id == -1)
			return SendClientMessageEx(playerid, COLOR_ERROR, "Il n'y a pas d'auto école sur le serveur.");

			SetPlayerCheckpoint(playerid, EntranceData[id][entrancePos][0], EntranceData[id][entrancePos][1], EntranceData[id][entrancePos][2], 1.0);
			SendClientMessageEx(playerid, COLOR_INFO, "Le Checkpoint a été réglé à l'auto école la plus proche (marquée sur le radar).");
		}
	}
	return 1;
}

Dialog:PickupItems(playerid, response, listitem, inputtext[])
{
	static
	string[64];

	if (response)
	{
		new id = NearestItems[playerid][listitem];

		if (id != -1 && DroppedItems[id][droppedModel])
		{
			if (DroppedItems[id][droppedWeapon] != 0)
			{
				if (PlayerData[playerid][pLevel] < 2)
				return SendClientMessageEx(playerid, COLOR_ERROR, "Vous devez être level 2 pour utiliser cette commande.");

				GiveWeaponToPlayer(playerid, DroppedItems[id][droppedWeapon], DroppedItems[id][droppedAmmo]);

				Item_Delete(id);
				SendNearbyMessage(playerid, 15.0, COLOR_PURPLE, "%s a ramassé un(e) %s.", ReturnName(playerid, 1), ReturnWeaponName(DroppedItems[id][droppedWeapon]));
			}
			else if (PickupItem(playerid, id))
			{
				format(string, sizeof(string), "~g~%s~w~ ajouté à l'inventaire!", DroppedItems[id][droppedItem]);
				ShowPlayerFooter(playerid, string);
				SendNearbyMessage(playerid, 15.0, COLOR_PURPLE, "%s a ramassé un(e) \"%s\".", ReturnName(playerid, 1), DroppedItems[id][droppedItem]);
			}
			else
				SendClientMessageEx(playerid, COLOR_ERROR, "Il n'y a plus de place dans votre inventaire.");
		}
		else SendClientMessageEx(playerid, COLOR_ERROR, "Cet objet a déjà été ramassé.");
	}
	return 1;
}

Dialog:ListDelivery(playerid, response, listitem, inputtext[])
{
	if(!response)
	    return 1;
	    
	new
	    id_biz;

	sscanf(inputtext, "d", id_biz);

	Waypoint_Set(playerid, BusinessData[id_biz][bizName], BusinessData[id_biz][bizPos][0], BusinessData[id_biz][bizPos][1], BusinessData[id_biz][bizPos][2]);
	SendClientMessageEx(playerid, COLOR_INFO, "Le bizness \"%s\" a été marqué sur votre radar. (point-rouge minimap)", BusinessData[id_biz][bizName]);
	return 1;
}


Dialog:StartDelivery(playerid, response, listitem, inputtext[])
{
	if (response)
	{
		new id = Job_NearestPoint(playerid);

		if (id == -1)
		return 0;

		PlayerData[playerid][pLoadType] = listitem + 1;
		PlayerData[playerid][pLoadCrate] = 1;
		PlayerData[playerid][pLoading] = 1;

		SendClientMessageEx(playerid, COLOR_INFO, "Vous avez choisit de livrer les \"%s\". Chargez les caisses dans un camion pour commencer.", inputtext);
		SetPlayerCheckpoint(playerid, JobData[id][jobPoint][0], JobData[id][jobPoint][1], JobData[id][jobPoint][2], 1.0);

		SetPlayerAttachedObject(playerid, 4, 3014, 1, 0.038192, 0.371544, 0.055191, 0.000000, 90.000000, 357.668670, 1.000000, 1.000000, 1.000000);
		SetPlayerSpecialAction(playerid, SPECIAL_ACTION_CARRY);

		ApplyAnimation(playerid, "CARRY", "liftup", 4.1, 0, 0, 0, 0, 0, 1);
		ShowPlayerFooter(playerid, "Appuyez sur ~y~'N'~w~ pour charger les caisses.");
	}
	return 1;
}

Dialog:GatePass(playerid, response, listitem, inputtext[])
{
	if (response)
	{
		new id = Gate_Nearest(playerid);

		if (id == -1)
			return 0;

		if (isnull(inputtext))
			return Dialog_Show(playerid, GatePass, DIALOG_STYLE_INPUT, "Mot de passe", "Veuillez entrer le mot de passe de la grille:", "Entrer", "X");

		if (strcmp(inputtext, GateData[id][gatePass]) != 0)
			return Dialog_Show(playerid, GatePass, DIALOG_STYLE_INPUT, "Mot de passe", "Mot de passe incorrect.\n\nVeuillez entrer le mot de passe de la grille:", "Entrer", "X");

		Gate_Operate(id);
	}
	return 1;
}

Dialog:EditRanks(playerid, response, listitem, inputtext[])
{
	if (response)
	{
		if (!FactionData[PlayerData[playerid][pFactionEdit]][factionExists])
		return 0;

		PlayerData[playerid][pSelectedSlot] = listitem;
		Dialog_Show(playerid, SetRankName, DIALOG_STYLE_INPUT, "Modification", "Rank: %s (%d)\n\nVeuillez entrer un nouveau nom pour ce rang ci-dessous:", "Modifier", "X", FactionRanks[PlayerData[playerid][pFactionEdit]][PlayerData[playerid][pSelectedSlot]], PlayerData[playerid][pSelectedSlot] + 1);
	}
	return 1;
}

Dialog:SetRankName(playerid, response, listitem, inputtext[])
{
	if (response)
	{
		if (isnull(inputtext))
		return 		Dialog_Show(playerid, SetRankName, DIALOG_STYLE_INPUT, "Modification", "Rank: %s (%d)\n\nVeuillez entrer un nouveau nom pour ce rang ci-dessous:", "Modifier", "X", FactionRanks[PlayerData[playerid][pFactionEdit]][PlayerData[playerid][pSelectedSlot]], PlayerData[playerid][pSelectedSlot] + 1);

		if (strlen(inputtext) > 32)
		return Dialog_Show(playerid, SetRankName, DIALOG_STYLE_INPUT, "Modification", "Erreur:Le rang ne peut dépasser 32caractères.\n\nRang: %s (%d)\n\nEcrire le nom du rang:", "Ok", "Retour", FactionRanks[PlayerData[playerid][pFactionEdit]][PlayerData[playerid][pSelectedSlot]], PlayerData[playerid][pSelectedSlot] + 1);

		format(FactionRanks[PlayerData[playerid][pFactionEdit]][PlayerData[playerid][pSelectedSlot]], 32, inputtext);
		Faction_SaveRanks(PlayerData[playerid][pFactionEdit]);

		Faction_ShowRanks(playerid, PlayerData[playerid][pFactionEdit]);
		SendClientMessageEx(playerid, COLOR_INFO, "Vous avez changé le nom du rang %d à \"%s\".", PlayerData[playerid][pSelectedSlot] + 1, inputtext);
	}
	else Faction_ShowRanks(playerid, PlayerData[playerid][pFactionEdit]);
	return 1;
}

Dialog:AcceptShipment(playerid, response, listitem, inputtext[])
{
	if (response)
	{
		new bizid = strval(inputtext);

		if (!BusinessData[bizid][bizExists])
		return 0;

		if (!BusinessData[bizid][bizShipment])
		return SendClientMessageEx(playerid, COLOR_ERROR, "Cette entreprise ne demande plus d'expédition.");

		if (IsShipmentAccepted(bizid))
		return SendClientMessageEx(playerid, COLOR_ERROR, "Cette livraison a déjà été prise en charge.");

		foreach (new i : Player) if (Business_IsOwner(i, bizid)) {
			SendClientMessageEx(i, COLOR_INFO, "%s a accepté votre demande d'expédition.", ReturnName(playerid));
		}
		PlayerData[playerid][pShipment] = bizid;
		SendClientMessageEx(playerid, COLOR_INFO, "Vous avez accepté l'envoi. Utilisez /livraison pour commencer la livraison.");
	}
	return 1;
}

Dialog:RackWeapons(playerid, response, listitem, inputtext[])
{
	if (response)
	{
		new id = Rack_Nearest(playerid);

		if (id == -1)
		return 0;

		if (!RackData[id][rackWeapons][listitem])
		{
			if (!GetWeapon(playerid))
			return SendClientMessageEx(playerid, COLOR_ERROR, "Vous devez avoir une arme pour la stocker.");

			RackData[id][rackWeapons][listitem] = GetWeapon(playerid);
			RackData[id][rackAmmo][listitem] = GetPlayerAmmo(playerid);

			ResetWeapon(playerid, GetWeapon(playerid));

			Rack_RefreshGuns(id);
			Rack_Save(id);

			ApplyAnimation(playerid, "WEAPONS", "SHP_Ar_Lift", 4.1, 0, 0, 0, 0, 0, 1);
			SendNearbyMessage(playerid, 15.0, COLOR_PURPLE, "%s pose un(e) %s sur l'étagère.", ReturnName(playerid, 1), ReturnWeaponName(RackData[id][rackWeapons][listitem]));
		}
		else
		{
			GiveWeaponToPlayer(playerid, RackData[id][rackWeapons][listitem], RackData[id][rackAmmo][listitem]);
			SendNearbyMessage(playerid, 15.0, COLOR_PURPLE, "%s prend un(e) %s sur l'étagère.", ReturnName(playerid, 1), ReturnWeaponName(RackData[id][rackWeapons][listitem]));

			RackData[id][rackWeapons][listitem] = 0;
			RackData[id][rackAmmo][listitem] = 0;

			Rack_RefreshGuns(id);
			Rack_Save(id);

			ApplyAnimation(playerid, "WEAPONS", "SHP_Tray_Out", 4.1, 0, 0, 0, 0, 0, 1);
		}
	}
	return 1;
}

Dialog:TakeItems(playerid, response, listitem, inputtext[])
{
	if (GetFactionType(playerid) != FACTION_POLICE || PlayerData[playerid][pTakeItems] == INVALID_PLAYER_ID)
	return 0;

	if (response)
	{
		if (!strcmp(inputtext, "Prendre les armes")) {
			ResetWeapons(PlayerData[playerid][pTakeItems]);

			SendNearbyMessage(playerid, 15.0, COLOR_PURPLE, "%s a confisqué les armes de %s.", ReturnName(playerid, 1), ReturnName(PlayerData[playerid][pTakeItems], 0));
		}
		else if (!strcmp(inputtext, "Prendre les graines")) {
			Inventory_Remove(PlayerData[playerid][pTakeItems], "Graines de Marijuana", -1);
			Inventory_Remove(PlayerData[playerid][pTakeItems], "Coca", -1);
			Inventory_Remove(PlayerData[playerid][pTakeItems], "Opium", -1);

			SendNearbyMessage(playerid, 15.0, COLOR_PURPLE, "%s a confisqué les graines de %s.", ReturnName(playerid, 1), ReturnName(PlayerData[playerid][pTakeItems], 0));
		}
		else if (!strcmp(inputtext, "Prendre les drogues")) {
			Inventory_Remove(PlayerData[playerid][pTakeItems], "Marijuana", -1);
			Inventory_Remove(PlayerData[playerid][pTakeItems], "Cocaine", -1);
			Inventory_Remove(PlayerData[playerid][pTakeItems], "Heroine", -1);
			Inventory_Remove(PlayerData[playerid][pTakeItems], "Steroides", -1);

			SendNearbyMessage(playerid, 15.0, COLOR_PURPLE, "%s a confisqué la drogue de %s.", ReturnName(playerid, 1), ReturnName(PlayerData[playerid][pTakeItems], 0));
		}
		else if (!strcmp(inputtext, "Prendre la radio")) {
			Inventory_Remove(PlayerData[playerid][pTakeItems], "Radio", -1);

			SendNearbyMessage(playerid, 15.0, COLOR_PURPLE, "%s a confisqué la radio de %s.", ReturnName(playerid, 1), ReturnName(PlayerData[playerid][pTakeItems], 0));
		}
		else if (!strcmp(inputtext, "Prendre le sac")) {
			Backpack_Delete(GetPlayerBackpack(PlayerData[playerid][pTakeItems]));
			Inventory_Remove(PlayerData[playerid][pTakeItems], "Sac a dos", -1);

			SetAccessories(PlayerData[playerid][pTakeItems]);
			SendNearbyMessage(playerid, 15.0, COLOR_PURPLE, "%s a confisqué le sac à %s", ReturnName(playerid, 1), ReturnName(PlayerData[playerid][pTakeItems], 0));
		}
		else if (!strcmp(inputtext, "Prendre le permis d'arme")) {
			Inventory_Remove(PlayerData[playerid][pTakeItems], "Permis d'arme", -1);

			SendNearbyMessage(playerid, 15.0, COLOR_PURPLE, "%s a confisqué le permis port d'armes à %s.", ReturnName(playerid, 1), ReturnName(PlayerData[playerid][pTakeItems], 0));
		}
		else if (!strcmp(inputtext, "Prendre le permis de conduire")) {
			Inventory_Remove(PlayerData[playerid][pTakeItems], "Permis de conduire", -1);

			SendNearbyMessage(playerid, 15.0, COLOR_PURPLE, "%s a confisqué le permis de conduire à %s.", ReturnName(playerid, 1), ReturnName(PlayerData[playerid][pTakeItems], 0));
		}
	}
	return 1;
}

Dialog:ServerPanel(playerid, response, listitem, inputtext[])
{
	if (PlayerData[playerid][pAdmin] < 6)
	return 0;

	if (response)
	{
		switch (listitem)
		{
			case 0:
			{
				if (g_ServerLocked)
				{
					g_ServerLocked = false;

					SendRconCommand("password 0");
					SendAdminAlert(COLOR_ADMINGROUP, "%s a dévérouillé le serveur.", ReturnName(playerid));
				}
				else Dialog_Show(playerid, LockServer, DIALOG_STYLE_INPUT, "Verrouiller le serveur", "{de3838}Entrez le mot de passe du serveur:", "Vérouiller", "Retour");
			}
			case 1:
				Dialog_Show(playerid, SetHostname, DIALOG_STYLE_INPUT, "Modifier le nom d'hôte", "{de3838}Entrez le nom d'hôte:", "Valider", "Retour");
		}
	}
	return 1;
}

Dialog:LockServer(playerid, response, listitem, inputtext[])
{
	if (PlayerData[playerid][pAdmin] < 6)
	return 0;

	if (response)
	{
		if (isnull(inputtext) || !strcmp(inputtext, "0"))
		return Dialog_Show(playerid, LockServer, DIALOG_STYLE_INPUT, "Vérouiller le serveur", "Entrez le mot de passe du serveur:", "Vérouiller", "Retour");

		if (strlen(inputtext) > 32)
		return Dialog_Show(playerid, LockServer, DIALOG_STYLE_INPUT, "Vérouiller le serveur", "Erreur: Le mot de passe ne doit pas faire plus de 32 caractères.\n\nEntrez le mot de passe du serveur:", "Vérouiller", "Retour");

		static
		str[48];

		format(str, sizeof(str), "password %s", inputtext);
		g_ServerLocked = true;

		SendRconCommand(str);
		SendAdminAlert(COLOR_ADMINGROUP, "%s a vérouillé le serveur (mot de passe: %s).", ReturnName(playerid), inputtext);
	}
	else cmd_panel(playerid, "\1");
	return 1;
}

Dialog:SetHostname(playerid, response, listitem, inputtext[])
{
	if (PlayerData[playerid][pAdmin] < 6)
	return 0;

	if (response)
	{
		if (isnull(inputtext))
		return Dialog_Show(playerid, SetHostname, DIALOG_STYLE_INPUT, "Modifier le nom d'hôte", "Entrez le nom d'hôte:", "Valider", "Retour");

		static
		str[128];

		format(str, sizeof(str), "hostname %s", inputtext);

		SendRconCommand(str);
		SendAdminAlert(COLOR_ADMINGROUP, "%s a modifié le nom d'hôte en \"%s\".", ReturnName(playerid), inputtext);
	}
	else cmd_panel(playerid, "\1");
	return 1;
}

/*Dialog:TuneVehicle(playerid, response, listitem, inputtext[])
{
	new
		vehicleid = GetPlayerVehicleID(RepaID[playerid]);

	if (!IsPlayerInAnyVehicle(playerid) || !IsDoorVehicle(vehicleid))
	return 0;

	if (response)
	{
		switch (listitem)
		{
			case 0:
				ShowModelSelectionMenu(playerid, "Jantes", MODEL_SELECTION_WHEELS, {1025, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1096, 1097, 1098}, 17, 0.0, 0.0, 90.0);

			case 1:
				Dialog_Show(playerid, AddNOS, DIALOG_STYLE_LIST, "Nitro", "2x NOS\n5x NOS\n10x NOS", "OK", "X");

			case 2:
				Dialog_Show(playerid, PotVehi, DIALOG_STYLE_LIST, "ECHAPPEMENTS", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nBack", "OK", "X");

			case 3:
			{
				AddComponent(vehicleid, 1087);
				SendClientMessageEx(playerid, COLOR_INFO, "Vous avez ajouter de l'hydraulique au véhicule)");
			}
		}
	}
	return 1;
}*/
Dialog:PotVehi(playerid, response, listitem, inputtext[])
{
	new vehicleid = GetPlayerVehicleID(playerid);
	if (!IsPlayerInAnyVehicle(playerid) || !IsDoorVehicle(vehicleid))
	return 0;

	if(!response)
	{
		SetCameraBehindPlayer(playerid);
	}
	if(response)
	{
		switch(listitem)
		{
			case 0:
			{
				if(pmodelid[playerid] == 562 ||
				pmodelid[playerid] == 565 ||
				pmodelid[playerid] == 559 ||
				pmodelid[playerid] == 558 ||
				pmodelid[playerid] == 561 ||
				pmodelid[playerid] == 560)
				{
					if(pmodelid[playerid] == 562)
					{
						AddComponent(vehicleid,1034);
						PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						SendClientMessage(playerid,COLOR_WHITE,"[TUNE] Tunning ajouté .");
						Dialog_Show(playerid, PotVehi, DIALOG_STYLE_LIST, "Pot", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nBack", "Ok", "Fermer");
					}
					else if(pmodelid[playerid] == 565)
					{
						AddComponent(vehicleid,1046);
						PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						SendClientMessage(playerid,COLOR_WHITE,"[TUNE] Tunning ajouté .");
						Dialog_Show(playerid, PotVehi, DIALOG_STYLE_LIST, "Pot", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nBack", "Ok", "Fermer");


					}
					else if(pmodelid[playerid] == 559)
					{
						AddComponent(vehicleid,1065);
						PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						SendClientMessage(playerid,COLOR_WHITE,"[TUNE] Tunning ajouté .");
						Dialog_Show(playerid, PotVehi, DIALOG_STYLE_LIST, "Pot", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nBack", "Ok", "Fermer");

					}
					else if(pmodelid[playerid] == 561)
					{
						AddComponent(vehicleid,1064);
						PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						SendClientMessage(playerid,COLOR_WHITE,"[TUNE] Tunning ajouté .");
						Dialog_Show(playerid, PotVehi, DIALOG_STYLE_LIST, "Pot", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nBack", "Ok", "Fermer");

					}
					else if(pmodelid[playerid] == 560)
					{
						AddComponent(vehicleid,1028);
						PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						SendClientMessage(playerid,COLOR_WHITE,"[TUNE] Tunning ajouté .");
						Dialog_Show(playerid, PotVehi, DIALOG_STYLE_LIST, "Pot", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nBack", "Ok", "Fermer");

					}
					else if(pmodelid[playerid] == 558)
					{
						AddVehicleComponent(vehicleid,1089);
						PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						SendClientMessage(playerid,COLOR_WHITE,"[TUNE] Tunning ajouté .");
						Dialog_Show(playerid, PotVehi, DIALOG_STYLE_LIST, "Pot", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nBack", "Ok", "Fermer");
// 1089;
					}
				}
				else
				{
					SendClientMessage(playerid,COLOR_YELLOW,"Incompatible");
					Dialog_Show(playerid, PotVehi, DIALOG_STYLE_LIST, "Pot", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nBack", "Ok", "Fermer");
				}
			}
			case 1:
			{
				if(pmodelid[playerid] == 562 ||
				pmodelid[playerid] == 565 ||
				pmodelid[playerid] == 559 ||
				pmodelid[playerid] == 561 ||
				pmodelid[playerid] == 558 ||
				pmodelid[playerid] == 560)

				{
					if(pmodelid[playerid] == 562)
					{
						AddComponent(vehicleid,1037);
						PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						SendClientMessage(playerid,COLOR_WHITE,"[TUNE] Tunning ajouté .");
						Dialog_Show(playerid, PotVehi, DIALOG_STYLE_LIST, "Pot", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nBack", "Ok", "Fermer");
// 1037;
					}
					else if(pmodelid[playerid] == 565)
					{
						AddComponent(vehicleid,1045);
						PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						SendClientMessage(playerid,COLOR_WHITE,"[TUNE] Tunning ajouté .");
						Dialog_Show(playerid, PotVehi, DIALOG_STYLE_LIST, "Pot", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nBack", "Ok", "Fermer");
// 1045;
					}
					else if(pmodelid[playerid] == 559)
					{
						AddComponent(vehicleid,1066);
						PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						SendClientMessage(playerid,COLOR_WHITE,"[TUNE] Tunning ajouté .");
						Dialog_Show(playerid, PotVehi, DIALOG_STYLE_LIST, "Pot", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nBack", "Ok", "Fermer");
// 1066;
					}
					else if(pmodelid[playerid] == 561)
					{
						AddComponent(vehicleid,1059);
						PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						SendClientMessage(playerid,COLOR_WHITE,"[TUNE] Tunning ajouté .");
						Dialog_Show(playerid, PotVehi, DIALOG_STYLE_LIST, "Pot", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nBack", "Ok", "Fermer");
// 1059;
					}
					else if(pmodelid[playerid] == 560)
					{
						AddComponent(vehicleid,1029);
						PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						SendClientMessage(playerid,COLOR_WHITE,"[TUNE] Tunning ajouté .");
						Dialog_Show(playerid, PotVehi, DIALOG_STYLE_LIST, "Pot", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nBack", "Ok", "Fermer");
// 1029;
					}
					else if(pmodelid[playerid] == 558)
					{
						AddComponent(vehicleid,1092);
						PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						SendClientMessage(playerid,COLOR_WHITE,"[TUNE] Tunning ajouté .");
						Dialog_Show(playerid, PotVehi, DIALOG_STYLE_LIST, "Pot", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nBack", "Ok", "Fermer");
// 1133;
					}
				}
				else
				{
					SendClientMessage(playerid,COLOR_YELLOW,"Incompatible");
					Dialog_Show(playerid, PotVehi, DIALOG_STYLE_LIST, "Pot", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nBack", "Ok", "Fermer");
				}
			}
			case 2:
			{
				if(pmodelid[playerid] == 575 ||
				pmodelid[playerid] == 534 ||
				pmodelid[playerid] == 567 ||
				pmodelid[playerid] == 536 ||
				pmodelid[playerid] == 576 ||
				pmodelid[playerid] == 535)

				{

					if(pmodelid[playerid] == 575) // Brodway
					{
						AddComponent(vehicleid,1044);
						PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						SendClientMessage(playerid,COLOR_WHITE,"[TUNE] Tunning ajouté .");
						Dialog_Show(playerid, PotVehi, DIALOG_STYLE_LIST, "Pot", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nBack", "Ok", "Fermer");
// 1044;
					}
					else if(pmodelid[playerid] == 534)// Remington
					{
						AddComponent(vehicleid,1126);
						PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						SendClientMessage(playerid,COLOR_WHITE,"[TUNE] Tunning ajouté .");
						Dialog_Show(playerid, PotVehi, DIALOG_STYLE_LIST, "Pot", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nBack", "Ok", "Fermer");
// 1126;
					}
					else if(pmodelid[playerid] == 567)// Savanna
					{
						AddComponent(vehicleid,1129);
						PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						SendClientMessage(playerid,COLOR_WHITE,"[TUNE] Tunning ajouté .");
						Dialog_Show(playerid, PotVehi, DIALOG_STYLE_LIST, "Pot", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nBack", "Ok", "Fermer");
// 1129;
					}
					else if(pmodelid[playerid] == 536) // Blade
					{
						AddComponent(vehicleid,1104);
						PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						SendClientMessage(playerid,COLOR_WHITE,"[TUNE] Tunning ajouté .");
						Dialog_Show(playerid, PotVehi, DIALOG_STYLE_LIST, "Pot", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nBack", "Ok", "Fermer");
// 1104;
					}
					else if(pmodelid[playerid] == 535) // Slamvan
					{
						AddComponent(vehicleid,1113);
						PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						SendClientMessage(playerid,COLOR_WHITE,"[TUNE] Tunning ajouté .");
						Dialog_Show(playerid, PotVehi, DIALOG_STYLE_LIST, "Pot", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nBack", "Ok", "Fermer");
// 1113;
					}
					else if(pmodelid[playerid] == 576) // Tornado
					{
						AddComponent(vehicleid,1136);
						PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						SendClientMessage(playerid,COLOR_WHITE,"[TUNE] Tunning ajouté .");
						Dialog_Show(playerid, PotVehi, DIALOG_STYLE_LIST, "Pot", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nBack", "Ok", "Fermer");
// 1136;
					}
				}
				else
				{
					SendClientMessage(playerid,COLOR_YELLOW,"Incompatible");
					Dialog_Show(playerid, PotVehi, DIALOG_STYLE_LIST, "Pot", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nBack", "Ok", "Fermer");
				}
			}
			case 3:
			{
				if(pmodelid[playerid] == 575 ||
				pmodelid[playerid] == 534 ||
				pmodelid[playerid] == 567 ||
				pmodelid[playerid] == 536 ||
				pmodelid[playerid] == 576 ||
				pmodelid[playerid] == 535)
				{

					if(pmodelid[playerid] == 575) // Brodway
					{
						AddComponent(vehicleid,1043);
						PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						SendClientMessage(playerid,COLOR_WHITE,"[TUNE] Tunning ajouté .");
						Dialog_Show(playerid, PotVehi, DIALOG_STYLE_LIST, "Pot", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nBack", "Ok", "Fermer");
// 1043;
					}
					else if(pmodelid[playerid] == 534)// Remington
					{
						AddComponent(vehicleid,1127);
						PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						SendClientMessage(playerid,COLOR_WHITE,"[TUNE] Tunning ajouté .");
						Dialog_Show(playerid, PotVehi, DIALOG_STYLE_LIST, "Pot", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nBack", "Ok", "Fermer");
// 1127;
					}
					else if(pmodelid[playerid] == 567)// Savanna
					{
						AddComponent(vehicleid,1132);
						PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						SendClientMessage(playerid,COLOR_WHITE,"[TUNE] Tunning ajouté .");
						Dialog_Show(playerid, PotVehi, DIALOG_STYLE_LIST, "Pot", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nBack", "Ok", "Fermer");
// 1132;
					}
					else if(pmodelid[playerid] == 536) // Blade
					{
						AddComponent(vehicleid,1105);
						PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						SendClientMessage(playerid,COLOR_WHITE,"[TUNE] Tunning ajouté.");
						Dialog_Show(playerid, PotVehi, DIALOG_STYLE_LIST, "Pot", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nBack", "Ok", "Fermer");
// 1105;
					}

					else if(pmodelid[playerid] == 535) // Slamvan
					{
						AddComponent(vehicleid,1114);
						PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						SendClientMessage(playerid,COLOR_WHITE,"[TUNE] Tunning ajouté .");
						Dialog_Show(playerid, PotVehi, DIALOG_STYLE_LIST, "Pot", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nBack", "Ok", "Fermer");
// 1114;
					}

					else if(pmodelid[playerid] == 576) // Tornado
					{
						AddComponent(vehicleid,1135);
						PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						SendClientMessage(playerid,COLOR_WHITE,"[TUNE] Tunning ajouté .");
						Dialog_Show(playerid, PotVehi, DIALOG_STYLE_LIST, "Pot", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nBack", "Ok", "Fermer");
// 1135;
					}

				}
				else
				{
					SendClientMessage(playerid,COLOR_YELLOW,"Incompatible");
					Dialog_Show(playerid, PotVehi, DIALOG_STYLE_LIST, "Pot", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nBack", "Ok", "Fermer");
				}
			}
			case 4:// Large
			{
				if(
				pmodelid[playerid] == 401 ||//bravura
				pmodelid[playerid] == 518 ||//buccaneer
				pmodelid[playerid] == 527 ||//cadrona
				pmodelid[playerid] == 542 ||//clover
				pmodelid[playerid] == 589 ||//club
				pmodelid[playerid] == 400 ||//landstalker
				pmodelid[playerid] == 517 ||//majestic
				pmodelid[playerid] == 603 ||//phoenix
				pmodelid[playerid] == 426 ||//premier
				pmodelid[playerid] == 547 ||//primo
				pmodelid[playerid] == 405 ||//sentinel
				pmodelid[playerid] == 580 ||//stafford
				pmodelid[playerid] == 550 ||//sunrise
				pmodelid[playerid] == 549 ||//tampa
				pmodelid[playerid] == 477)//zr-350
				{

					if(pmodelid[playerid] == 401) // bravura
					{
						AddComponent(vehicleid,1020);
						PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						SendClientMessage(playerid,COLOR_WHITE,"[TUNE] Tunning ajouté");
						Dialog_Show(playerid, PotVehi, DIALOG_STYLE_LIST, "Pot", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nBack", "Ok", "Fermer");
// 1020;
					}
					if(pmodelid[playerid] == 518) // buccaneer
					{
						AddComponent(vehicleid,1020);
						PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						SendClientMessage(playerid,COLOR_WHITE,"[TUNE] Tunning ajouté ");
						Dialog_Show(playerid, PotVehi, DIALOG_STYLE_LIST, "Pot", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nBack", "Ok", "Fermer");
// 1020;
					}
					if(pmodelid[playerid] == 527) // cadrona
					{
						AddComponent(vehicleid,1020);
						PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						SendClientMessage(playerid,COLOR_WHITE,"[TUNE] Tunning ajouté ");
						Dialog_Show(playerid, PotVehi, DIALOG_STYLE_LIST, "Pot", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nBack", "Ok", "Fermer");
// 1020;
					}
					if(pmodelid[playerid] == 542) // clover
					{
						AddComponent(vehicleid,1020);
						PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						SendClientMessage(playerid,COLOR_WHITE,"[TUNE] Tunning ajouté ");
						Dialog_Show(playerid, PotVehi, DIALOG_STYLE_LIST, "Pot", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nBack", "Ok", "Fermer");
// 1020;
					}
					if(pmodelid[playerid] == 589) // club
					{
						AddComponent(vehicleid,1020);
						PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						SendClientMessage(playerid,COLOR_WHITE,"[TUNE] Tunning ajouté ");
						Dialog_Show(playerid, PotVehi, DIALOG_STYLE_LIST, "Pot", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nBack", "Ok", "Fermer");
// 1020;
					}
					if(pmodelid[playerid] == 400) // landstalker
					{
						AddComponent(vehicleid,1020);
						PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						SendClientMessage(playerid,COLOR_WHITE,"[TUNE] Tunning ajouté ");
						Dialog_Show(playerid, PotVehi, DIALOG_STYLE_LIST, "Pot", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nBack", "Ok", "Fermer");
// 1020;
					}
					if(pmodelid[playerid] == 603) // phoenix
					{
						AddComponent(vehicleid,1020);
						PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						SendClientMessage(playerid,COLOR_WHITE,"[TUNE] Tunning ajouté ");
						Dialog_Show(playerid, PotVehi, DIALOG_STYLE_LIST, "Pot", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nBack", "Ok", "Fermer");
// 1020;
					}
					if(pmodelid[playerid] == 436) // previon
					{
						AddComponent(vehicleid,1020);
						PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						SendClientMessage(playerid,COLOR_WHITE,"[TUNE] Tunning ajouté ");
						Dialog_Show(playerid, PotVehi, DIALOG_STYLE_LIST, "Pot", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nBack", "Ok", "Fermer");
// 1020;
					}
					if(pmodelid[playerid] == 547) // primo
					{
						AddComponent(vehicleid,1020);
						PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						SendClientMessage(playerid,COLOR_WHITE,"[TUNE] Tunning ajouté ");
						Dialog_Show(playerid, PotVehi, DIALOG_STYLE_LIST, "Pot", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nBack", "Ok", "Fermer");
// 1020;
					}
					if(pmodelid[playerid] == 405) // sentinel
					{
						AddComponent(vehicleid,1020);
						PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						SendClientMessage(playerid,COLOR_WHITE,"[TUNE] Tunning ajouté ");
						Dialog_Show(playerid, PotVehi, DIALOG_STYLE_LIST, "Pot", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nBack", "Ok", "Fermer");
// 1020;
					}
					if(pmodelid[playerid] == 580) // stafford
					{
						AddComponent(vehicleid,1020);
						PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						SendClientMessage(playerid,COLOR_WHITE,"[TUNE] Tunning ajouté ");
						Dialog_Show(playerid, PotVehi, DIALOG_STYLE_LIST, "Pot", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nBack", "Ok", "Fermer");
// 1020;
					}
					if(pmodelid[playerid] == 550) // sunrise
					{
						AddComponent(vehicleid,1020);
						PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						SendClientMessage(playerid,COLOR_WHITE,"[TUNE] Tunning ajouté ");
						Dialog_Show(playerid, PotVehi, DIALOG_STYLE_LIST, "Pot", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nBack", "Ok", "Fermer");
// 1020;
					}
					if(pmodelid[playerid] == 549) // tampa
					{
						AddComponent(vehicleid,1020);
						PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						SendClientMessage(playerid,COLOR_WHITE,"[TUNE] Tunning ajouté ");
						Dialog_Show(playerid, PotVehi, DIALOG_STYLE_LIST, "Pot", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nBack", "Ok", "Fermer");
// 1020;
					}
					if(pmodelid[playerid] == 477) // zr-350
					{
						AddComponent(vehicleid,1020);
						PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						SendClientMessage(playerid,COLOR_WHITE,"[TUNE] Tunning ajouté ");
// 1020;
						Dialog_Show(playerid, PotVehi, DIALOG_STYLE_LIST, "Pot", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nBack", "Ok", "Fermer");
					}
					if(pmodelid[playerid] == 517) // majestic
					{
						AddComponent(vehicleid,1020);
						PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						SendClientMessage(playerid,COLOR_WHITE,"[TUNE] Tunning ajouté ");
						Dialog_Show(playerid, PotVehi, DIALOG_STYLE_LIST, "Pot", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nBack", "Ok", "Fermer");
// 1020;
					}
				}
				else
				{
					SendClientMessage(playerid,COLOR_YELLOW,"Incompatible");
					Dialog_Show(playerid, PotVehi, DIALOG_STYLE_LIST, "Pot", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nBack", "Ok", "Fermer");
				}
			}
			case 5: // Medium
			{
				if(
				pmodelid[playerid] == 527 ||//cadrona
				pmodelid[playerid] == 542 ||//clover
				pmodelid[playerid] == 400 ||//landstalker
				pmodelid[playerid] == 426 ||//premier
				pmodelid[playerid] == 436 ||//previon
				pmodelid[playerid] == 547 ||//primo
				pmodelid[playerid] == 405 ||//sentinel
				pmodelid[playerid] == 477)//zr-350
				{

					if(pmodelid[playerid] == 527) // cadrona
					{
						AddComponent(vehicleid,1021);
						PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						SendClientMessage(playerid,COLOR_WHITE,"[TUNE] Tunning ajouté");
						Dialog_Show(playerid, PotVehi, DIALOG_STYLE_LIST, "Pot", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nBack", "Ok", "Fermer");
// 1021;
					}
					if(pmodelid[playerid] == 542) // clover
					{
						AddComponent(vehicleid,1021);
						PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						SendClientMessage(playerid,COLOR_WHITE,"[TUNE] Tunning ajouté ");
						Dialog_Show(playerid, PotVehi, DIALOG_STYLE_LIST, "Pot", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nBack", "Ok", "Fermer");
// 1021;
					}
					if(pmodelid[playerid] == 400) // landstalker
					{
						AddComponent(vehicleid,1021);
						PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
// 1021;
						SendClientMessage(playerid,COLOR_WHITE,"[TUNE] Tunning ajouté ");
						Dialog_Show(playerid, PotVehi, DIALOG_STYLE_LIST, "Pot", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nBack", "Ok", "Fermer");
					}
					if(pmodelid[playerid] == 426) // premier
					{
						AddComponent(vehicleid,1021);
						PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						SendClientMessage(playerid,COLOR_WHITE,"[TUNE] Tunning ajouté ");
// 1021;
						Dialog_Show(playerid, PotVehi, DIALOG_STYLE_LIST, "Pot", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nBack", "Ok", "Fermer");
					}
					if(pmodelid[playerid] == 436) // previon
					{
						AddComponent(vehicleid,1021);
						PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						SendClientMessage(playerid,COLOR_WHITE,"[TUNE] Tunning ajouté ");
						Dialog_Show(playerid, PotVehi, DIALOG_STYLE_LIST, "Pot", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nBack", "Ok", "Fermer");
// 1021;
					}
					if(pmodelid[playerid] == 547) // primo
					{
						AddComponent(vehicleid,1021);
						PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						SendClientMessage(playerid,COLOR_WHITE,"[TUNE] Tunning ajouté ");
// 1021;
						Dialog_Show(playerid, PotVehi, DIALOG_STYLE_LIST, "Pot", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nBack", "Ok", "Fermer");
					}
					if(pmodelid[playerid] == 405) // sentinel
					{
						AddComponent(vehicleid,1021);
						PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						SendClientMessage(playerid,COLOR_WHITE,"[TUNE] Tunning ajouté ");
// 1021;
						Dialog_Show(playerid, PotVehi, DIALOG_STYLE_LIST, "Pot", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nBack", "Ok", "Fermer");
					}
					if(pmodelid[playerid] == 477) // zr350
					{
						AddComponent(vehicleid,1021);
						PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						SendClientMessage(playerid,COLOR_WHITE,"[TUNE] Tunning ajouté ");
						Dialog_Show(playerid, PotVehi, DIALOG_STYLE_LIST, "Pot", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nBack", "Ok", "Fermer");
// 1021;
					}
				}
				else
				{
					SendClientMessage(playerid,COLOR_YELLOW,"Incompatible");
					Dialog_Show(playerid, PotVehi, DIALOG_STYLE_LIST, "Pot", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nBack", "Ok", "Fermer");
				}
			}
			case 6: // Small
			{
				if(
				pmodelid[playerid] == 436)//previon
				{

					if(pmodelid[playerid] == 436) // previon
					{
						AddComponent(vehicleid,1022);
						PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						SendClientMessage(playerid,COLOR_WHITE,"[TUNE] Tunning ajouté ");
						Dialog_Show(playerid, PotVehi, DIALOG_STYLE_LIST, "Pot", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nBack", "Ok", "Fermer");
// 1022;
					}
				}
				else
				{
					SendClientMessage(playerid,COLOR_YELLOW,"Incompatible");
					Dialog_Show(playerid, PotVehi, DIALOG_STYLE_LIST, "Pot", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nBack", "Ok", "Fermer");
				}
			}
			case 7: // Twin
			{
				if(
				pmodelid[playerid] == 518 ||//buccaneer
				pmodelid[playerid] == 415 ||//cheetah
				pmodelid[playerid] == 542 ||//clover
				pmodelid[playerid] == 546 ||//intruder
				pmodelid[playerid] == 400 ||//landstalker
				pmodelid[playerid] == 517 ||//majestic
				pmodelid[playerid] == 603 ||//phoenix
				pmodelid[playerid] == 426 ||//premier
				pmodelid[playerid] == 436 ||//previon
				pmodelid[playerid] == 547 ||//primo
				pmodelid[playerid] == 405 ||//sentinel
				pmodelid[playerid] == 550 ||//sunrise
				pmodelid[playerid] == 549 ||//tampa
				pmodelid[playerid] == 477)//zr-350
				{

					if(pmodelid[playerid] == 518) // buccaneer
					{
						AddComponent(vehicleid,1019);
						PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						SendClientMessage(playerid,COLOR_WHITE,"[TUNE] Tunning ajouté");
						Dialog_Show(playerid, PotVehi, DIALOG_STYLE_LIST, "Pot", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nBack", "Ok", "Fermer");
// 1019;
					}
					if(pmodelid[playerid] == 415) // cheetah
					{
						AddComponent(vehicleid,1019);
						PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						SendClientMessage(playerid,COLOR_WHITE,"[TUNE] Tunning ajouté ");
						Dialog_Show(playerid, PotVehi, DIALOG_STYLE_LIST, "Pot", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nBack", "Ok", "Fermer");
// 1019;
					}
					if(pmodelid[playerid] == 542) // clover
					{
						AddComponent(vehicleid,1019);
						PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						SendClientMessage(playerid,COLOR_WHITE,"[TUNE] Tunning ajouté ");
						Dialog_Show(playerid, PotVehi, DIALOG_STYLE_LIST, "Pot", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nBack", "Ok", "Fermer");
// 1019;
					}
					if(pmodelid[playerid] == 546) // intruder
					{
						AddComponent(vehicleid,1019);
						PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						SendClientMessage(playerid,COLOR_WHITE,"[TUNE] Tunning ajouté ");
						Dialog_Show(playerid, PotVehi, DIALOG_STYLE_LIST, "Pot", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nBack", "Ok", "Fermer");
// 1019;
					}
					if(pmodelid[playerid] == 400) // landstalker
					{
						AddComponent(vehicleid,1019);
						PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						SendClientMessage(playerid,COLOR_WHITE,"[TUNE] Tunning ajouté ");
						Dialog_Show(playerid, PotVehi, DIALOG_STYLE_LIST, "Pot", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nBack", "Ok", "Fermer");
// 1019;
					}
					if(pmodelid[playerid] == 517) // majestic
					{
						AddComponent(vehicleid,1019);
						PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						SendClientMessage(playerid,COLOR_WHITE,"[TUNE] Tunning ajouté ");
						Dialog_Show(playerid, PotVehi, DIALOG_STYLE_LIST, "Pot", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nBack", "Ok", "Fermer");
// 1019;
					}
					if(pmodelid[playerid] == 603) // phoenix
					{
						AddComponent(vehicleid,1019);
						PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						SendClientMessage(playerid,COLOR_WHITE,"[TUNE] Tunning ajouté ");
						Dialog_Show(playerid, PotVehi, DIALOG_STYLE_LIST, "Pot", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nBack", "Ok", "Fermer");
// 1019;
					}
					if(pmodelid[playerid] == 426) // premier
					{
						AddComponent(vehicleid,1019);
						PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						SendClientMessage(playerid,COLOR_WHITE,"[TUNE] Tunning ajouté ");
						Dialog_Show(playerid, PotVehi, DIALOG_STYLE_LIST, "Pot", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nBack", "Ok", "Fermer");
// 1019;
					}
					if(pmodelid[playerid] == 436) // previon
					{
						AddComponent(vehicleid,1019);
						PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						SendClientMessage(playerid,COLOR_WHITE,"[TUNE] Tunning ajouté ");
						Dialog_Show(playerid, PotVehi, DIALOG_STYLE_LIST, "Pot", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nBack", "Ok", "Fermer");
// 1019;
					}
					if(pmodelid[playerid] == 547) // primo
					{
						AddComponent(vehicleid,1019);
						PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						SendClientMessage(playerid,COLOR_WHITE,"[TUNE] Tunning ajouté ");
						Dialog_Show(playerid, PotVehi, DIALOG_STYLE_LIST, "Pot", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nBack", "Ok", "Fermer");
// 1019;
					}
					if(pmodelid[playerid] == 405 ) // sentinel
					{
						AddComponent(vehicleid,1019);
						PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						SendClientMessage(playerid,COLOR_WHITE,"[TUNE] Tunning ajouté ");
						Dialog_Show(playerid, PotVehi, DIALOG_STYLE_LIST, "Pot", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nBack", "Ok", "Fermer");
// 1019;
					}
					if(pmodelid[playerid] == 550) // sunrise
					{
						AddComponent(vehicleid,1019);
						PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						SendClientMessage(playerid,COLOR_WHITE,"[TUNE] Tunning ajouté ");
						Dialog_Show(playerid, PotVehi, DIALOG_STYLE_LIST, "Pot", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nBack", "Ok", "Fermer");
// 1019;
					}
					if(pmodelid[playerid] == 549) // tampa
					{
						AddComponent(vehicleid,1019);
						PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						SendClientMessage(playerid,COLOR_WHITE,"[TUNE] Tunning ajouté ");
						Dialog_Show(playerid, PotVehi, DIALOG_STYLE_LIST, "Pot", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nBack", "Ok", "Fermer");
// 1019;
					}
					if(pmodelid[playerid] == 477) // zr-350
					{
						AddComponent(vehicleid,1019);
						PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						SendClientMessage(playerid,COLOR_WHITE,"[TUNE] Tunning ajouté ");
						Dialog_Show(playerid, PotVehi, DIALOG_STYLE_LIST, "Pot", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nBack", "Ok", "Fermer");
// 1019;
					}
				}
				else
				{
					SendClientMessage(playerid,COLOR_YELLOW,"Incompatible");
					Dialog_Show(playerid, PotVehi, DIALOG_STYLE_LIST, "Pot", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nBack", "Ok", "Fermer");
				}
			}
			case 8: // Upswept
			{
				if(
				pmodelid[playerid] == 401 ||//bravura
				pmodelid[playerid] == 518 ||//buccaneer
				pmodelid[playerid] == 415 ||//cheetah
				pmodelid[playerid] == 542 ||//clover
				pmodelid[playerid] == 546 ||//intruder
				pmodelid[playerid] == 400 ||//landstalker
				pmodelid[playerid] == 517 ||//majestic
				pmodelid[playerid] == 603 ||//phoenix
				pmodelid[playerid] == 426 ||//premier
				pmodelid[playerid] == 415 ||//cheetah
				pmodelid[playerid] == 547 ||//primo
				pmodelid[playerid] == 405 ||//sentinel
				pmodelid[playerid] == 550 ||//sunrise
				pmodelid[playerid] == 549 ||//tampa
				pmodelid[playerid] == 477)//zr-350
				{

					if(pmodelid[playerid] == 415) // cheetah
					{
						AddComponent(vehicleid,1018);
						PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						SendClientMessage(playerid,COLOR_WHITE,"[TUNE] Tunning ajouté");
						Dialog_Show(playerid, PotVehi, DIALOG_STYLE_LIST, "Pot", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nBack", "Ok", "Fermer");
// 1018;
					}
					if(pmodelid[playerid] == 518) // buccaneer
					{
						AddComponent(vehicleid,1018);
						PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						SendClientMessage(playerid,COLOR_WHITE,"[TUNE] Tunning ajouté ");
						Dialog_Show(playerid, PotVehi, DIALOG_STYLE_LIST, "Pot", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nBack", "Ok", "Fermer");
// 1018;
					}
					if(pmodelid[playerid] == 527) // cadrona
					{
						AddComponent(vehicleid,1018);
						PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						SendClientMessage(playerid,COLOR_WHITE,"[TUNE] Tunning ajouté ");
						Dialog_Show(playerid, PotVehi, DIALOG_STYLE_LIST, "Pot", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nBack", "Ok", "Fermer");
// 1018;
					}
					if(pmodelid[playerid] == 542) // clover
					{
						AddComponent(vehicleid,1018);
						PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						SendClientMessage(playerid,COLOR_WHITE,"[TUNE] Tunning ajouté ");
						Dialog_Show(playerid, PotVehi, DIALOG_STYLE_LIST, "Pot", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nBack", "Ok", "Fermer");
// 1018;
					}
					if(pmodelid[playerid] == 589) // club
					{
						AddComponent(vehicleid,1018);
						PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						SendClientMessage(playerid,COLOR_WHITE,"[TUNE] Tunning ajouté ");
						Dialog_Show(playerid, PotVehi, DIALOG_STYLE_LIST, "Pot", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nBack", "Ok", "Fermer");
// 1018;
					}
					if(pmodelid[playerid] == 400) // landstalker
					{
						AddComponent(vehicleid,1018);
						PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						SendClientMessage(playerid,COLOR_WHITE,"[TUNE] Tunning ajouté ");
						Dialog_Show(playerid, PotVehi, DIALOG_STYLE_LIST, "Pot", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nBack", "Ok", "Fermer");
// 1018;
					}
					if(pmodelid[playerid] == 603) // phoenix
					{
						AddComponent(vehicleid,1018);
						PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						SendClientMessage(playerid,COLOR_WHITE,"[TUNE] Tunning ajouté ");
						Dialog_Show(playerid, PotVehi, DIALOG_STYLE_LIST, "Pot", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nBack", "Ok", "Fermer");
// 1018;
					}
					if(pmodelid[playerid] == 546) // intruder
					{
						AddComponent(vehicleid,1018);
						PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						SendClientMessage(playerid,COLOR_WHITE,"[TUNE] Tunning ajouté ");
						Dialog_Show(playerid, PotVehi, DIALOG_STYLE_LIST, "Pot", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nBack", "Ok", "Fermer");
// 1018;
					}
					if(pmodelid[playerid] == 547) // primo
					{
						AddComponent(vehicleid,1018);
						PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						SendClientMessage(playerid,COLOR_WHITE,"[TUNE] Tunning ajouté ");
						Dialog_Show(playerid, PotVehi, DIALOG_STYLE_LIST, "Pot", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nBack", "Ok", "Fermer");
// 1018;
					}
					if(pmodelid[playerid] == 405) // sentinel
					{
						AddComponent(vehicleid,1018);
						PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						SendClientMessage(playerid,COLOR_WHITE,"[TUNE] Tunning ajouté ");
						Dialog_Show(playerid, PotVehi, DIALOG_STYLE_LIST, "Pot", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nBack", "Ok", "Fermer");
// 1018;
					}
					if(pmodelid[playerid] == 580) // stafford
					{
						AddComponent(vehicleid,1018);
						PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						SendClientMessage(playerid,COLOR_WHITE,"[TUNE] Tunning ajouté ");
						Dialog_Show(playerid, PotVehi, DIALOG_STYLE_LIST, "Pot", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nBack", "Ok", "Fermer");
// 1018;
					}
					if(pmodelid[playerid] == 550) // sunrise
					{
						AddComponent(vehicleid,1018);
						SendClientMessage(playerid,COLOR_WHITE,"[TUNE] Tunning ajouté ");
						Dialog_Show(playerid, PotVehi, DIALOG_STYLE_LIST, "Pot", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nBack", "Ok", "Fermer");
// 1018;
					}
					if(pmodelid[playerid] == 549) // tampa
					{
						AddComponent(vehicleid,1018);
						PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						SendClientMessage(playerid,COLOR_WHITE,"[TUNE] Tunning ajouté ");
						Dialog_Show(playerid, PotVehi, DIALOG_STYLE_LIST, "Pot", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nBack", "Ok", "Fermer");
// 1018;
					}
					if(pmodelid[playerid] == 477) // zr-350
					{
						AddComponent(vehicleid,1018);
						PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						SendClientMessage(playerid,COLOR_WHITE,"[TUNE] Tunning ajouté ");
						Dialog_Show(playerid, PotVehi, DIALOG_STYLE_LIST, "Pot", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nBack", "Ok", "Fermer");
// 1018;
					}
					if(pmodelid[playerid] == 517) // majestic
					{
						AddComponent(vehicleid,1018);
						PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						SendClientMessage(playerid,COLOR_WHITE,"[TUNE] Tunning ajouté ");
						Dialog_Show(playerid, PotVehi, DIALOG_STYLE_LIST, "Pot", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nBack", "Ok", "Fermer");
// 1018;
					}
				}
				else
				{
					SendClientMessage(playerid,COLOR_YELLOW,"Incompatible");
					Dialog_Show(playerid, PotVehi, DIALOG_STYLE_LIST, "Pot", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nBack", "Ok", "Fermer");
				}
			}
			case 9: // _
			{
				Dialog_Show(playerid, PotVehi, DIALOG_STYLE_LIST, "Pot", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nBack", "Ok", "Fermer");
			}
			case 10: // Back
			{
				Dialog_Show(playerid, TuneVehicle, DIALOG_STYLE_LIST, "Tuning", "Ajouter des Jantes\nAjouter du NOS\nPot\nAjouter de l'Hydraulique", "OK", "X");
			}
		}
	}
	return 1;
}


Dialog:AddNOS(playerid, response, listitem, inputtext[])
{
	new vehicleid = GetPlayerVehicleID(playerid);

	if (!IsPlayerInAnyVehicle(playerid) || !IsDoorVehicle(vehicleid))
	return 0;

	if (response)
	{
		switch (listitem)
		{
			case 0:
			{
				AddComponent(vehicleid, 1009);
				SendClientMessageEx(playerid, COLOR_INFO, "Vous avez placé 2x NOS sur le véhicule. (200$)");
				GiveMoney(playerid, -200);
			}
			case 1:
			{
				AddComponent(vehicleid, 1008);
				SendClientMessageEx(playerid, COLOR_INFO, "Vous avez placé 5x NOS sur le véhicule. (400$)");
				GiveMoney(playerid, -400);
			}
			case 2:
			{
				AddComponent(vehicleid, 1010);
				SendClientMessageEx(playerid, COLOR_INFO, "Vous avez placé 10x NOS sur le véhicule. (600$)");
				GiveMoney(playerid, -600);
			}
		}
	}
	return 1;
}
/*
Dialog:EntrancePass(playerid, response, listitem, inputtext[])
{
	if (response)
	{
		new id = (Entrance_Inside(playerid) == -1) ? (Entrance_Nearest(playerid)) : (Entrance_Inside(playerid));

		if (id == -1)
		return SendClientMessageEx(playerid, COLOR_ERROR, "Vous n'êtes pas près d'une entrée.");

		if (strcmp(EntranceData[id][entrancePass], inputtext) != 0)
		return SendClientMessageEx(playerid, COLOR_ERROR, "Mot de passe invalide.");

		if (!EntranceData[id][entranceLocked])
		{
			EntranceData[id][entranceLocked] = true;
			Entrance_Save(id);

			ShowPlayerFooter(playerid, "Vous avez ~r~fermé~w~ la porte!");
			PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);
		}
		else
		{
			EntranceData[id][entranceLocked] = false;
			Entrance_Save(id);

			ShowPlayerFooter(playerid, "Vous avez ~g~ouvert~w~ la porte!");
			PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);
		}
	}
	return 1;
}
*/
Dialog:ReleaseCar(playerid, response, listitem, inputtext[])
{
	if (response)
	{
		new
		carid = ListedVehicles[playerid][listitem],
		id = GetImpoundByID(CarData[carid][carImpounded]),
		randomPos = random(sizeof(positionReleaseCar));

		if (carid != -1 && id != -1 && CarData[carid][carExists] && CarData[carid][carImpounded] != -1)
		{
			if (GetMoney(playerid) < CarData[carid][carImpoundPrice])
			return SendClientMessageEx(playerid, COLOR_ERROR, "Vous ne pouvez pas sortir ce véhicule.");

			GiveMoney(playerid, -CarData[carid][carImpoundPrice]);


			CarData[carid][carPos][0] = positionReleaseCar[randomPos][0];
			CarData[carid][carPos][1] = positionReleaseCar[randomPos][1];
			CarData[carid][carPos][2] = positionReleaseCar[randomPos][2];
			CarData[carid][carPos][3] = positionReleaseCar[randomPos][3];

			SetVehiclePos(CarData[carid][carVehicle], CarData[carid][carPos][0], CarData[carid][carPos][1], CarData[carid][carPos][2]);
			SetVehicleZAngle(CarData[carid][carVehicle], CarData[carid][carPos][3]);

			SendClientMessageEx(playerid, COLOR_INFO, "Vous avez sortie votre %s pour %s.", ReturnVehicleModelName(CarData[carid][carModel]), FormatNumber(CarData[carid][carImpoundPrice]));

			CarData[carid][carImpounded] = -1;
			CarData[carid][carImpoundPrice] = 0;

			Car_Save(carid);
		}
	}
	return 1;
}

Dialog:GiveItem(playerid, response, listitem, inputtext[])
{
	if (response)
	{
		static
		userid = -1,
		itemid = -1,
		string[32];

		if (sscanf(inputtext, "u", userid))
		return Dialog_Show(playerid, GiveItem, DIALOG_STYLE_INPUT, "Donner un objet", "Veuillez entrer le pseudo ou l'ID du joueur:", "Entrer", "X");

		if (userid == INVALID_PLAYER_ID)
		return Dialog_Show(playerid, GiveItem, DIALOG_STYLE_INPUT, "Donner un objet", "Erreur: Pseudo invalide.\n\nVeuillez entrer le pseudo ou l'ID du joueur:", "Entrer", "X");

		if (!IsPlayerNearPlayer(playerid, userid, 6.0))
		return Dialog_Show(playerid, GiveItem, DIALOG_STYLE_INPUT, "Donner un objet", "Erreur: Ce joueur n'est pas près de vous.\n\nVeuillez entrer le pseudo ou l'ID du joueur:", "Entrer", "X");

		if (userid == playerid)
		return Dialog_Show(playerid, GiveItem, DIALOG_STYLE_INPUT, "Donner un objet", "Erreur: Vous ne pouvez pas donnez à vous même.\n\nVeuillez entrer le pseudo ou l'ID du joueur:", "Entrer", "X");

		itemid = PlayerData[playerid][pInventoryItem];

		if (itemid == -1)
		return 0;

		strunpack(string, InventoryData[playerid][itemid][invItem]);

		if(!strcmp(string, "Permis d'arme") || !strcmp(string, "Permis de conduire"))
		{
		    format(string, sizeof(string), "%d", userid);
			return cmd_mp(playerid, string);
		}

		if (InventoryData[playerid][itemid][invQuantity] == 1)
		{
			if (!strcmp(string, "Sac a dos") && Inventory_HasItem(userid, "Sac a dos"))
			return SendClientMessageEx(playerid, COLOR_ERROR, "Ce joueur a déjà un sac à dos.");

			new id = Inventory_Add(userid, string, InventoryData[playerid][itemid][invModel]);

			if (id == -1)
			return SendClientMessageEx(playerid, COLOR_ERROR, "Ce joueur n'a plus de place dans son inventaire.");

			if (!strcmp(string, "Sac a dos") && (id = GetPlayerBackpack(playerid)) != -1)
			{
				BackpackData[id][backpackPlayer] = PlayerData[userid][pID];
				Backpack_Save(id);

				SetAccessories(userid);
				Inventory_Remove(playerid, "Sac a dos");
			}
			SendNearbyMessage(playerid, 15.0, COLOR_PURPLE, "* %s sort un(e) \"%s\" puis le donne à %s.", ReturnName(playerid, 1), string, ReturnName(userid, 1));
			SendClientMessageEx(userid, COLOR_INFO, "%s vous a donné un(e) \"%s\" (ajouté à l'inventaire).", ReturnName(playerid, 1), string);

			Inventory_Remove(playerid, string);
			Log_Write("logs/give_log.txt", "[%s] %s (%s) a donner un %s a %s (%s).", ReturnDate(), ReturnName(playerid), PlayerData[playerid][pIP], string, ReturnName(userid, 0), PlayerData[userid][pIP]);
		}
		else
		{
			Dialog_Show(playerid, GiveQuantity, DIALOG_STYLE_INPUT, "Donner un objet", "Item: %s (Quantité: %d)\n\nVeuillez entrer le montant de l'objet que vous voulez donner à %s:", "Donner", "X", string, InventoryData[playerid][itemid][invQuantity], ReturnName(userid, 0));
			PlayerData[playerid][pGiveItem] = userid;
		}
	}
	return 1;
}

Dialog:GiveQuantity(playerid, response, listitem, inputtext[])
{
	if (response && PlayerData[playerid][pGiveItem] != INVALID_PLAYER_ID)
	{
		new
		userid = PlayerData[playerid][pGiveItem],
		itemid = PlayerData[playerid][pInventoryItem],
		string[32];

		strunpack(string, InventoryData[playerid][itemid][invItem]);

		if (isnull(inputtext))
		return Dialog_Show(playerid, GiveQuantity, DIALOG_STYLE_INPUT, "Donner un objet", "Item: %s (Quantité: %d)\n\nVeuillez entrer le montant de l'objet que vous voulez donner à %s:", "Donner", "X", string, InventoryData[playerid][itemid][invQuantity], ReturnName(userid, 0));

		if (strval(inputtext) < 1 || strval(inputtext) > InventoryData[playerid][itemid][invQuantity])
		return  Dialog_Show(playerid, GiveQuantity, DIALOG_STYLE_INPUT, "Donner un objet", "Pas assez.\n\nItem: %s (Quantité: %d)\n\nVeuillez entrer le montant de l'objet que vous voulez donner à %s:", "Donner", "X", string, InventoryData[playerid][itemid][invQuantity], ReturnName(userid, 0));

		new id = Inventory_Add(userid, string, InventoryData[playerid][itemid][invModel], strval(inputtext));

		if (id == -1)
		return SendClientMessageEx(playerid, COLOR_ERROR, "Ce joueur n'a plus de place dans son inventaire.");

		SendNearbyMessage(playerid, 15.0, COLOR_PURPLE, "%s sort un(e) \"%s\" qu'il donne à %s.", ReturnName(playerid, 1), string, ReturnName(userid, 1));
		SendClientMessageEx(userid, COLOR_INFO, "%s vous a donné un(e) \"%s\" (ajouté à l'inventaire).", ReturnName(playerid, 1), string);

		Inventory_Remove(playerid, string, strval(inputtext));
		Log_Write("logs/give_log.txt", "[%s] %s (%s) a donner %d %s a %s (%s).", ReturnDate(), ReturnName(playerid), PlayerData[playerid][pIP], strval(inputtext), string, ReturnName(userid, 0), PlayerData[userid][pIP]);
	}
	return 1;
}

Dialog:BackpackLoot(playerid, response, listitem, inputtext[])
{
	static id = -1;

	if (response)
	{
		if (!strcmp(inputtext, "Récuperer le sac au sol"))
		{
			if (Inventory_HasItem(playerid, "Sac a dos"))
			return SendClientMessageEx(playerid, COLOR_ERROR, "Vous pouvez avoir qu'un seul sac.");

			id = PlayerData[playerid][pBackpackLoot];

			BackpackData[id][backpackPlayer] = PlayerData[playerid][pID];
			BackpackData[id][backpackPos][0] = 0.0;
			BackpackData[id][backpackPos][1] = 0.0;
			BackpackData[id][backpackPos][2] = 0.0;

			DestroyDynamic3DTextLabel(BackpackData[id][backpackText3D]);
			DestroyDynamicObject(BackpackData[id][backpackObject]);

			Backpack_Save(id);
			Inventory_Add(playerid, "Sac a dos", 3026);

			SetAccessories(playerid);
			SendNearbyMessage(playerid, 15.0, COLOR_PURPLE, "%s ramasse un sac à dos au sol.", ReturnName(playerid, 1));
		}
		else if ((id = BackpackListed[playerid][listitem]) != -1)
		{
			new
			string[32];

			strcat(string, BackpackItems[id][bItemName]);

			Inventory_Add(playerid, string, BackpackItems[id][bItemModel], BackpackItems[id][bItemQuantity]);
			Backpack_Remove(BackpackItems[id][bItemBackpack], string, BackpackItems[id][bItemQuantity]);
			SendNearbyMessage(playerid, 15.0, COLOR_PURPLE, "%s récupère son \"%s\" dans son sac à dos.", ReturnName(playerid), string);
		}
	}
	return 1;
}

Dialog:BackpackDeposit(playerid, response, listitem, inputtext[])
{
	static
	string[32];

	strunpack(string, InventoryData[playerid][PlayerData[playerid][pInventoryItem]][invItem]);

	if (response)
	{
		new amount = strval(inputtext);

		if (amount < 1 || amount > InventoryData[playerid][PlayerData[playerid][pInventoryItem]][invQuantity])
		return Dialog_Show(playerid, BackpackDeposit, DIALOG_STYLE_INPUT, "Dépot", "Item: %s (Quantité: %d)\n\nVeuillez entrer la quantité que vous souhaitez déposer:", "Déposer", "X", string, InventoryData[playerid][PlayerData[playerid][pInventoryItem]][invQuantity]);

		Backpack_Add(GetPlayerBackpack(playerid), string, InventoryData[playerid][PlayerData[playerid][pInventoryItem]][invModel], amount);
		Inventory_Remove(playerid, string, amount);

		SendNearbyMessage(playerid, 15.0, COLOR_PURPLE, "%s dépose un(e) \"%s\" dans son sac à dos.", ReturnName(playerid, 1), string);
		Backpack_Open(playerid);
	}
	else Backpack_Open(playerid);
	return 1;
}

Dialog:BackpackTake(playerid, response, listitem, inputtext[])
{
	static
	string[32],
	id = -1;

	if (response)
	{
		new amount = strval(inputtext);

		id = PlayerData[playerid][pStorageItem];

		strunpack(string, BackpackItems[id][bItemName]);

		if (amount < 1 || amount > BackpackItems[id][bItemQuantity])
		return Dialog_Show(playerid, BackpackTake, DIALOG_STYLE_INPUT, "Retrait", "Item: %s (Quantité: %d)\n\nVeuillez entrer la quantité de l'objet que vous souhaitez prendre:", "Prendre", "X", string, BackpackItems[id][bItemQuantity]);

		Inventory_Add(playerid, string, BackpackItems[id][bItemModel], amount);
		Backpack_Remove(GetPlayerBackpack(playerid), string, amount);

		SendNearbyMessage(playerid, 15.0, COLOR_PURPLE, "%s prend un(e) \"%s\" dans son sac à dos.", ReturnName(playerid, 1), string);
		Backpack_Open(playerid);
	}
	else Backpack_Open(playerid);
	return 1;
}

Dialog:BackpackOptions(playerid, response, listitem, inputtext[])
{
	if (response)
	{
		new id = PlayerData[playerid][pStorageItem], string[32];

		switch (listitem)
		{
			case 0:
			{
				strcat(string, BackpackItems[id][bItemName]);
				

				if(IsWeaponItem(BackpackItems[id][bItemModel]))
				{
				    new
						weapons[2];

				    GetPlayerWeaponData(playerid, g_aWeaponSlots[ BackpackItems[id][bItemModel] ], weapons[0], weapons[1]);
				    
				    if(weapons[0] != 0 && weapons[1] >= 1)
				    {
					    SendClientMessage(playerid, COLOR_CLIENT, "Vous avez déjà une arme de ce type sur vous.");
						Backpack_Open(playerid);
				    }
				    else
				    {
						GiveWeaponToPlayer(playerid, BackpackItems[id][bItemModel], BackpackItems[id][bItemQuantity]);
						Backpack_Remove(GetPlayerBackpack(playerid), string, BackpackItems[id][bItemQuantity]);

						SendNearbyMessage(playerid, 15.0, COLOR_PURPLE, "%s prend son \"%s\" dans son sac à dos.", ReturnName(playerid, 1), string);
						Backpack_Open(playerid);
				    }
			    }
			    else
			    {
					if (BackpackItems[id][bItemQuantity] == 1)
					{
						Inventory_Add(playerid, string, BackpackItems[id][bItemModel]);
						Backpack_Remove(GetPlayerBackpack(playerid), string);

						SendNearbyMessage(playerid, 15.0, COLOR_PURPLE, "%s prend son \"%s\" dans son sac à dos.", ReturnName(playerid, 1), string);
						Backpack_Open(playerid);
					}
					else
					{
		   				Dialog_Show(playerid, BackpackTake, DIALOG_STYLE_INPUT, "Retrait", "Item: %s (Quantité: %d)\n\nVeuillez entrer la quantité que vous souhaitez prendre pour cet objet:", "Prendre", "X", string, BackpackItems[id][bItemQuantity]);
					}
			    }
			}
			case 1:
			{
				new itemid = Inventory_GetItemID(playerid, BackpackItems[id][bItemName]);

				if (itemid == -1)
				return SendClientMessageEx(playerid, COLOR_ERROR, "Il n'y a plus de place à cet endroit.");

				strunpack(string, InventoryData[playerid][itemid][invItem]);

				if (IsFurnitureItem(string))
				return SendClientMessageEx(playerid, COLOR_ERROR, "Vous ne pouvez pas stocker de meuble dans votre sac.");

				if (InventoryData[playerid][itemid][invQuantity] == 1)
				{
					Backpack_Add(GetPlayerBackpack(playerid), string, InventoryData[playerid][itemid][invModel]);
					Inventory_Remove(playerid, string);

					SendNearbyMessage(playerid, 15.0, COLOR_PURPLE, "%s dépose un(e) \"%s\" dans son sac à dos", ReturnName(playerid, 1), string);
					Backpack_Open(playerid);
				}
				else
				{
					PlayerData[playerid][pInventoryItem] = itemid;
					Dialog_Show(playerid, BackpackDeposit, DIALOG_STYLE_INPUT, "Dépot", "Item: %s (Quantité: %d)\n\nVeuillez entrer la quantité de l'objet que vous souhaitez déposer:", "Déposer", "X", string, InventoryData[playerid][PlayerData[playerid][pInventoryItem]][invQuantity]);
				}
			}
		}
	}
	else Backpack_Open(playerid);
	return 1;
}

Dialog:Backpack(playerid, response, listitem, inputtext[])
{
	if (response)
	{
		new id = -1, string[48];

		if (listitem == 0)
		{
			if (Backpack_GetItems(GetPlayerBackpack(playerid)) >= MAX_BACKPACK_CAPACITY)
			return SendClientMessageEx(playerid, COLOR_ERROR, "Le sac à dos a atteint les %d objets, il n'a plus de place.", MAX_BACKPACK_CAPACITY);

			OpenInventory(playerid);

			PlayerData[playerid][pStorageSelect] = 3;
		}
		else if(listitem == 1)
		{
		    cmd_rangerarme(playerid, "\1");
		}
		else if ((id = BackpackListed[playerid][listitem-2]) != -1) {
			PlayerData[playerid][pStorageItem] = id;

			format(string, sizeof(string), "%s (Quantité: %d)", BackpackItems[id][bItemName], BackpackItems[id][bItemQuantity]);
			Dialog_Show(playerid, BackpackOptions, DIALOG_STYLE_LIST, string, "Prendre un objet\nDéposer un objet\nPoser un objet", "OK", "X");
		}
	}
	return 1;
}

Dialog:MyTickets(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    static
	        id_ticket;
	        
		sscanf(inputtext, "d", id_ticket);
		
		if (!TicketData[playerid][id_ticket][ticketExists])
		return SendClientMessageEx(playerid, COLOR_ERROR, "Cette amende n'existe pas.");

		if (GetMoney(playerid) < TicketData[playerid][id_ticket][ticketFee])
		return SendClientMessageEx(playerid, COLOR_ERROR, "Vous n'avez pas assez d'argent.");

		GiveMoney(playerid, -TicketData[playerid][id_ticket][ticketFee]);
		Tax_AddMoney(TicketData[playerid][id_ticket][ticketFee]);

		SendClientMessageEx(playerid, COLOR_INFO, "Vous avez payé un(e) %s amende pour \"%s\".", FormatNumber(TicketData[playerid][id_ticket][ticketFee]), TicketData[playerid][id_ticket][ticketReason]);
		Ticket_Remove(playerid, id_ticket);
	}
	return 1;
}

Dialog:MainGPS(playerid, response, listitem, inputtext[])
{
	if (response)
	{
		switch (listitem)
		{

			case 0:
				Dialog_Show(playerid, FindEntrance, DIALOG_STYLE_LIST, "Localisation", "Auto école\nBanque\nMairie\nANPE", "Entrer", "X");

			case 1:
				Dialog_Show(playerid, FindBusiness, DIALOG_STYLE_LIST, "Localisation", "24/7\nAmmunation\nBinco\nPizzeria\nConcession\nStation essence", "Entrer", "X");
				
			case 2:
				Dialog_Show(playerid, FindHouse, DIALOG_STYLE_INPUT, "Localisation", "Veuillez entrez l'adresse de la maison ci-dessous:", "Entrer", "X");

			case 3:
			{
				static
				string[MAX_GPS_LOCATIONS * 32];

				string = "Ajouter une position\n";

				for (new i = 0; i != MAX_GPS_LOCATIONS; i ++) if (LocationData[playerid][i][locationExists]) {
					format(string, sizeof(string), "%s%s\n", string, LocationData[playerid][i][locationName]);
				}
				Dialog_Show(playerid, CustomLocations, DIALOG_STYLE_LIST, "Localisations", string, "OK", "X");
			}
		}
	}
	return 1;
}

Dialog:FindHouse(playerid, response, listitem, inputtext[])
{
	if (response)
	{
		if (isnull(inputtext) || strlen(inputtext) > 32)
		return Dialog_Show(playerid, FindHouse, DIALOG_STYLE_INPUT, "Localisation", "Veuillez entrez l'adresse de la maison ci-dessous:", "Entrer", "X");

		for (new i = 0; i != MAX_HOUSES; i ++)
		{
			if (HouseData[i][houseExists] && !strcmp(HouseData[i][houseAddress], inputtext, true))
			{
				Waypoint_Set(playerid, HouseData[i][houseAddress], HouseData[i][housePos][0], HouseData[i][housePos][1], HouseData[i][housePos][2]);
				return SendClientMessageEx(playerid, COLOR_INFO, "Checkpoint placé à \"%s\" (marqué sur votre radar).", HouseData[i][houseAddress]);
			}
		}
		Dialog_Show(playerid, FindHouse, DIALOG_STYLE_INPUT, "Localisation", "Aucun résultat sur: \"%s\".\n\nVeuillez entrez l'adresse de la maison ci-dessous:", "Entrer", "X", inputtext);
	}
	else cmd_gps(playerid, "\1");
	return 1;
}

Dialog:FindBusiness(playerid, response, listitem, inputtext[])
{
	if (response)
	{
		new bizid = GetClosestBusiness(playerid, listitem + 1);

		if (bizid != -1)
		{
			Waypoint_Set(playerid, BusinessData[bizid][bizName], BusinessData[bizid][bizPos][0], BusinessData[bizid][bizPos][1], BusinessData[bizid][bizPos][2]);
			SendClientMessageEx(playerid, COLOR_INFO, "Checkpoint le plus proche: %s (marqué sur votre radar).", inputtext);
		}
		else
		{
			SendClientMessageEx(playerid, COLOR_ERROR, "Impossible de localiser ce business.");
		}
	}
	else cmd_gps(playerid, "\1");
	return 1;
}

Dialog:FindEntrance(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    new
	        typeEntrance;
	        
	    switch(listitem)
	    {
			case 0: typeEntrance = 1;
			case 1: typeEntrance = 2;
			case 2: typeEntrance = 4;
			case 3:
			{
				Waypoint_Set(playerid, "ANPE", 595.3370, -1241.0620, 18.0421);
				SendClientMessageEx(playerid, COLOR_INFO, "Checkpoint placé à l'ANPE (marqué sur votre radar).", inputtext);
			    return 1;
			}
		}
		
		new id = GetClosestEntrance(playerid, typeEntrance);

		if (id != -1)
		{
			Waypoint_Set(playerid, EntranceData[id][entranceName], EntranceData[id][entrancePos][0], EntranceData[id][entrancePos][1], EntranceData[id][entrancePos][2]);
			SendClientMessageEx(playerid, COLOR_INFO, "Checkpoint placé à %s (marqué sur votre radar).", inputtext);
		}
		else
		{
			SendClientMessageEx(playerid, COLOR_ERROR, "Impossible de localiser cet endroit.");
		}
	}
	else cmd_gps(playerid, "\1");
	return 1;
}

Dialog:FindJob(playerid, response, listitem, inputtext[])
{
	if (response)
	{
		new id = GetClosestJob(playerid, listitem + 1);

		if (id != -1)
		{
			static
			str[32];

			format(str, 32, "%s Job", inputtext);

			Waypoint_Set(playerid, str, JobData[id][jobPos][0], JobData[id][jobPos][1], JobData[id][jobPos][2]);
			SendClientMessageEx(playerid, COLOR_INFO, "Checkpoint placé à %s (marqué sur votre radar).", str);
		}
		else
		{
			SendClientMessageEx(playerid, COLOR_ERROR, "Impossible de localiser ce Job.");
		}
	}
	else cmd_gps(playerid, "\1");
	return 1;
}

Dialog:CustomLocations(playerid, response, listitem, inputtext[])
{
	if (response)
	{
		if (!listitem) {
			Dialog_Show(playerid, AddLocation, DIALOG_STYLE_INPUT, "Localisation", "Veuillez entrez le nom souhaité de l'emplacement ci-dessous:", "Entrer", "X");
		}
		else
		{
			new id = Location_GetID(playerid, inputtext);

			if (id != -1) {
				PlayerData[playerid][pSelectedSlot] = id;

				Dialog_Show(playerid, LocationInfo, DIALOG_STYLE_LIST, inputtext, "Modifier le checkpoint\nSupprimer le checkpoint", "OK", "X");
			}
		}
	}
	else cmd_gps(playerid, "\1");
	return 1;
}

Dialog:AddLocation(playerid, response, listitem, inputtext[])
{
	if (response)
	{
		if (isnull(inputtext))
		return Dialog_Show(playerid, AddLocation, DIALOG_STYLE_INPUT, "Localisation", "Veuillez entrez le nom souhaité de l'emplacement ci-dessous:", "Entrer", "X");

		if (strlen(inputtext) > 32)
		return Dialog_Show(playerid, AddLocation, DIALOG_STYLE_INPUT, "Localisation", "Erreur: Le nom ne peut pas dépasser 32 caractères.\n\nVeuillez entrez le nom souhaité de l'emplacement ci-dessous:", "Entrer", "X");

		static
		Float:fX,
		Float:fY,
		Float:fZ,
		id = -1;

		if ((id = House_Inside(playerid)) != -1) {
			fX = HouseData[id][housePos][0];
			fY = HouseData[id][housePos][1];
			fZ = HouseData[id][housePos][2];
		}
		else if ((id = Business_Inside(playerid)) != -1) {
			fX = BusinessData[id][bizPos][0];
			fY = BusinessData[id][bizPos][1];
			fZ = BusinessData[id][bizPos][2];
		}
		else if ((id = Entrance_Inside(playerid)) != -1) {
			fX = EntranceData[id][entrancePos][0];
			fY = EntranceData[id][entrancePos][1];
			fZ = EntranceData[id][entrancePos][2];
		}
		else GetPlayerPos(playerid, fX, fY, fZ);

		Location_Add(playerid, inputtext, fX, fY, fZ);
		SendClientMessageEx(playerid, COLOR_INFO, "Vous avez ajouté: \"%s\" sur votre GPS.", inputtext);
	}
	else cmd_gps(playerid, "\1");
	return 1;
}

Dialog:LocationInfo(playerid, response, listitem, inputtext[])
{
	if (response)
	{
		new id = PlayerData[playerid][pSelectedSlot];

		switch (listitem)
		{
			case 0:
			{
				Waypoint_Set(playerid, LocationData[playerid][id][locationName], LocationData[playerid][id][locationPos][0], LocationData[playerid][id][locationPos][1], LocationData[playerid][id][locationPos][2]);
				SendClientMessageEx(playerid, COLOR_INFO, "Checkpoint placé à \"%s\" (marqué sur votre radar).", LocationData[playerid][id][locationName]);
			}
			case 1:
			{
				SendClientMessageEx(playerid, COLOR_INFO, "Vous avez retiré \"%s\" de votre GPS.", LocationData[playerid][id][locationName]);

				Location_Delete(playerid, LocationData[playerid][id][locationName]);
				dialog_MainGPS(playerid, 1, 4, "\1");
			}
		}
	}
	else dialog_MainGPS(playerid, 1, 4, "\1");
	return 1;
}

Dialog:Warrants(playerid, response, listitem, inputtext[])
{
	if (GetFactionType(playerid) != FACTION_POLICE || !IsACruiser(GetPlayerVehicleID(playerid)))
	return 0;

	if (response)
	{
		static
		name[64],
		targetid = INVALID_PLAYER_ID;

		strmid(name, inputtext, 0, strfind(inputtext, "(") - 1);

		if ((targetid = GetPlayerID(name, 0)) == INVALID_PLAYER_ID)
		return SendClientMessageEx(playerid, COLOR_ERROR, "Ce joueur n'est pas connecté.");

		if (PlayerData[targetid][pWarrants] < 1)
		return SendClientMessageEx(playerid, COLOR_ERROR, "Ce joueur n'est plus suspecter.");

		PlayerData[playerid][pMDCPlayer] = targetid;

		format(name, sizeof(name), "MDC: %s", name);
		Dialog_Show(playerid, WarrantList, DIALOG_STYLE_LIST, name, "Localiser le joueur\nSupprimer l'avis de recherche", "Ok", "X");
	}
	return 1;
}

Dialog:WarrantList(playerid, response, listitem, inputtext[])
{
	if (GetFactionType(playerid) != FACTION_POLICE || !IsACruiser(GetPlayerVehicleID(playerid)) || PlayerData[playerid][pMDCPlayer] == INVALID_PLAYER_ID)
	return 0;

	if (response)
	{
		switch (listitem)
		{
			case 0:
			{
				SendClientMessageEx(playerid, COLOR_INFO, "Vous tentez maintenant de localiser %s...", ReturnName(PlayerData[playerid][pMDCPlayer], 0));
				PlayerData[playerid][pTrackTime] = 3;
			}
			case 1:
			{
				PlayerData[PlayerData[playerid][pMDCPlayer]][pWarrants] = 0;

				SendClientMessageEx(playerid, COLOR_INFO, "Vous avez supprimé les avis de recherche sur %s.", ReturnName(PlayerData[playerid][pMDCPlayer], 0));
				SendFactionMessage(PlayerData[playerid][pFaction], COLOR_RADIO, "RADIO: %s a supprimé les avis de recherche sur %s.", ReturnName(playerid), ReturnName(PlayerData[playerid][pMDCPlayer], 0));

				PlayerData[playerid][pMDCPlayer] = INVALID_PLAYER_ID;
			}
		}
	}
	else
	{
		PlayerData[playerid][pMDCPlayer] = INVALID_PLAYER_ID;
		dialog_MainMDC(playerid, 1, 0, "\1");
	}
	return 1;
}

Dialog:ChargeName(playerid, response, listitem, inputtext[])
{
	if (GetFactionType(playerid) != FACTION_POLICE || !IsACruiser(GetPlayerVehicleID(playerid)))
	return 0;

	if (response)
	{
		new targetid;

		if (sscanf(inputtext, "u", targetid))
		return Dialog_Show(playerid, ChargeName, DIALOG_STYLE_INPUT, "Placez des charges", "Erreur: Veuillez entrer un utilisateur valide\n\nVeuillez entrer le nom ou l'ID du joueur:", "Entrer", "X");

		if (targetid == INVALID_PLAYER_ID)
		return Dialog_Show(playerid, ChargeName, DIALOG_STYLE_INPUT, "Placez des charges", "Erreur: Veuillez entrer un utilisateur valide\n\nVeuillez entrer le nom ou l'ID du joueur:", "Entrer", "X");

		if (PlayerData[targetid][pWarrants] > 14)
		return Dialog_Show(playerid, ChargeName, DIALOG_STYLE_INPUT, "Placez des charges", "Error: Ce joueur a déjà 15 avis de recherche\n\nVeuillez entrer le nom ou l'ID du joueur:", "Entrer", "X");

		PlayerData[playerid][pMDCPlayer] = targetid;
		Dialog_Show(playerid, PlaceCharge, DIALOG_STYLE_INPUT, "Placez des charges", "Veuillez entrez la description du crime commis par %s:", "Entrer", "X", ReturnName(PlayerData[playerid][pMDCPlayer], 0));
	}
	return 1;
}

Dialog:PlaceCharge(playerid, response, listitem, inputtext[])
{
	if (GetFactionType(playerid) != FACTION_POLICE || !IsACruiser(GetPlayerVehicleID(playerid)) || PlayerData[playerid][pMDCPlayer] == INVALID_PLAYER_ID)
	return 0;

	if (response)
	{
		if (isnull(inputtext))
		return Dialog_Show(playerid, PlaceCharge, DIALOG_STYLE_INPUT, "Placez des charges", "Veuillez entrez la description du crime commis par %s:", "Entrer", "X", ReturnName(PlayerData[playerid][pMDCPlayer], 0));

		PlayerData[PlayerData[playerid][pMDCPlayer]][pWarrants]++;

		AddWarrant(PlayerData[playerid][pMDCPlayer], playerid, inputtext);
		SendFactionMessage(PlayerData[playerid][pFaction], COLOR_RADIO, "RADIO: %s a placé un avis de recherche sur %s pour: \"%s\".", ReturnName(playerid), ReturnName(PlayerData[playerid][pMDCPlayer], 0), inputtext);
	}
	else
	{
		PlayerData[playerid][pMDCPlayer] = INVALID_PLAYER_ID;
	}
	return 1;
}

Dialog:MainMDC(playerid, response, listitem, inputtext[])
{
	if (GetFactionType(playerid) != FACTION_POLICE || !IsACruiser(GetPlayerVehicleID(playerid)))
	return 0;

	if (response)
	{
		switch (listitem)
		{
			case 0:
			{
				static
				string[512];

				string[0] = 0;

				foreach (new i : Player) if (PlayerData[i][pWarrants] > 0) {
					format(string, sizeof(string), "%s%s (%d souscriptions)\n", string, ReturnName(i, 0), PlayerData[i][pWarrants]);
				}
				if (!strlen(string))
				return SendClientMessageEx(playerid, COLOR_ERROR, "Ce joueur n'est pas actif.");

				Dialog_Show(playerid, Warrants, DIALOG_STYLE_LIST, "Avis de recherche", string, "OK", "X");
			}
			case 1:
			{
				Dialog_Show(playerid, ChargeName, DIALOG_STYLE_INPUT, "Placez des charges", "Veuillez entrer le nom ou l'ID du joueur:", "Entrer", "X");
			}
			case 2:
			{
				Dialog_Show(playerid, ViewCharges, DIALOG_STYLE_INPUT, "Avis de recherche", "Veuillez entrer le nom ou l'ID du joueur:", "Entrer", "X");
			}
			case 3:
			{
				Dialog_Show(playerid, ViewInfo, DIALOG_STYLE_INPUT, "Information", "Veuillez entrer ID du joueur:", "Entrer", "X");
			}
		}
	}
	return 1;
}
Dialog:ViewInfo(playerid, response, listitem, inputtext[])
{
	if (GetFactionType(playerid) != FACTION_POLICE || !IsACruiser(GetPlayerVehicleID(playerid)))
	return 0;

	if (response)
	{
		if (isnull(inputtext) || strlen(inputtext) > 24)
		return Dialog_Show(playerid, ViewCharges, DIALOG_STYLE_INPUT, "Avis de recherche", "ID du joueur:", "Entrer", "X");

		if (IsNumeric(inputtext) && IsPlayerConnected(strval(inputtext))) {
			ViewInfo(playerid,strval(inputtext));
		}
		else if (!IsNumeric(inputtext)) {
			Dialog_Show(playerid, ViewInfo, DIALOG_STYLE_INPUT, "Avis de recherche", "Erreur:\nVeuillez entrer le nom ou l'ID du joueur:", "Entrer", "X");
		}
		else {
			Dialog_Show(playerid, ViewInfo, DIALOG_STYLE_INPUT, "Avis de recherche", "Erreur: Pseudo invalide\n\nVeuillez entrer le nom ou l'ID du joueur:", "Entrer", "X");
		}
	}
	return 1;
}

Dialog:ViewCharges(playerid, response, listitem, inputtext[])
{
	if (GetFactionType(playerid) != FACTION_POLICE || !IsACruiser(GetPlayerVehicleID(playerid)))
	return 0;

	if (response)
	{
		if (isnull(inputtext) || strlen(inputtext) > 24)
		return Dialog_Show(playerid, ViewCharges, DIALOG_STYLE_INPUT, "Avis de recherche", "Veuillez entrer le nom ou l'ID du joueur:", "Entrer", "X");

		if (IsNumeric(inputtext) && IsPlayerConnected(strval(inputtext))) {
			ViewCharges(playerid, ReturnName(strval(inputtext)));
		}
		else if (!IsNumeric(inputtext)) {
			ViewCharges(playerid, inputtext);
		}
		else {
			Dialog_Show(playerid, ViewCharges, DIALOG_STYLE_INPUT, "Avis de recherche", "Erreur: Pseudo invalide\n\nVeuillez entrer le nom ou l'ID du joueur:", "Entrer", "X");
		}
	}
	return 1;
}

Dialog:Locker(playerid, response, listitem, inputtext[])
{
	new factionid = PlayerData[playerid][pFaction];

	if (factionid == -1 || !IsNearFactionLocker(playerid))
	return 0;

	if (response)
	{
		static
		skins[8],
		string[512];

		string[0] = 0;

		if (FactionData[factionid][factionType] == FACTION_POLICE || FactionData[factionid][factionType] == FACTION_GOV)
		{
			switch (listitem)
			{
				case 0:
				{
					if (!PlayerData[playerid][pOnDuty])
					{
						PlayerData[playerid][pOnDuty] = true;
						SetPlayerHealth(playerid, 100.0);
						SetFactionColor(playerid);
						SendNearbyMessage(playerid, 15.0, COLOR_PURPLE, "* %s se met en service.", ReturnName(playerid));
					}
					else
					{
						PlayerData[playerid][pOnDuty] = false;
						SetPlayerArmour(playerid, 0.0);
						ResetWeapons(playerid);
						SetPlayerColor(playerid, COLOR_WHITE);
						SetPlayerSkin(playerid, PlayerData[playerid][pSkin]);

						SendNearbyMessage(playerid, 15.0, COLOR_PURPLE, "* %s se retire de son service.", ReturnName(playerid));
					}
				}
				case 1:
				{
                    if (PlayerData[playerid][pFactionRank] < 4) { SetPlayerArmour(playerid, 45.0); }
                    if (PlayerData[playerid][pFactionRank] >= 4) { SetPlayerArmour(playerid, 99.0); }
					SetPlayerHealth(playerid, 99.0);
					if(!IsPlayerAttachedObjectSlotUsed(playerid, 7)) SetPlayerAttachedObject(playerid, 7, 19142,  1, 0.1,  0.05, 0.0,  0.0,   0.0,   0.0);
					SendNearbyMessage(playerid, 15.0, COLOR_PURPLE, "* %s enfile un gilet pare-balles au niveau de son torse.", ReturnName(playerid));
				}
				case 2:
				{
					for (new i = 0; i < sizeof(skins); i ++)
					skins[i] = (FactionData[factionid][factionSkins][i]) ? (FactionData[factionid][factionSkins][i]) : (19300);

					ShowModelSelectionMenu(playerid, "Tenues", MODEL_SELECTION_FACTION_SKIN, skins, sizeof(skins), -16.0, 0.0, -55.0);
				}
				case 3:
				{
					ShowWeapons_faction(playerid, factionid);
				}
				case 4:
				{
					format(string, sizeof(string), "Argent {9CE59C}(%d$)\nRetirer\nDeposer\n",FactionData[factionid][factionArge]);

					Dialog_Show(playerid, LockerArgent, DIALOG_STYLE_LIST, "Coffre", string, "Ok", "X");
				}
			}
		}
		else
		{
			switch (listitem)
			{
				case 0:
				{
					for (new i = 0; i < sizeof(skins); i ++)
					skins[i] = (FactionData[factionid][factionSkins][i]) ? (FactionData[factionid][factionSkins][i]) : (19300);

					ShowModelSelectionMenu(playerid, "Tenues", MODEL_SELECTION_FACTION_SKIN, skins, sizeof(skins), -16.0, 0.0, -55.0);
				}
				case 1:
				{
					format(string, sizeof(string), "Argent {9CE59C}(%d$)\nRetirer\nDeposer\n",FactionData[factionid][factionArge]);

					Dialog_Show(playerid, LockerArgent, DIALOG_STYLE_LIST, "Coffre", string, "Ok", "X");
				}
				case 2:
				{
					for (new i = 0; i < 10; i ++)
					{
						if (FactionData[factionid][factionWeapons][i] && GetFactionType(playerid) != FACTION_GANG || GetFactionType(playerid) != FACTION_MAFIA)
						format(string, sizeof(string), "%sArme %d: %s\n", string, i + 1, ReturnWeaponName(FactionData[factionid][factionWeapons][i]));

						else if (FactionData[factionid][factionWeapons][i] && GetFactionType(playerid) == FACTION_GANG || GetFactionType(playerid) == FACTION_MAFIA )
						format(string, sizeof(string), "%sArme %d: %s (%d munitions)\n", string, i + 1, ReturnWeaponName(FactionData[factionid][factionWeapons][i]), FactionData[factionid][factionAmmo][i]);

						else format(string, sizeof(string), "%sVide\n", string);
					}
					Dialog_Show(playerid, LockerWeapons, DIALOG_STYLE_LIST, "Casier", string, "Ok", "X");
				}
			}
		}
	}
	return 1;
}

stock ShowWeapons_faction(playerid, factionid)
{
	new
	    string[512];
	    
	for (new i = 0; i < 10; i ++)
	{
		if (FactionData[factionid][factionWeapons][i])
		format(string, sizeof(string), "%sArme %d: %s\n", string, i + 1, ReturnWeaponName(FactionData[factionid][factionWeapons][i]));

		else format(string, sizeof(string), "%sVide\n", string);
	}
	Dialog_Show(playerid, LockerWeapons, DIALOG_STYLE_LIST, "Armurerie", string, "Ok", "X");
}

Dialog:LockerArgent(playerid, response, listitem, inputtext[])
{
	new factionid = PlayerData[playerid][pFaction];

	if (factionid == -1 || !IsNearFactionLocker(playerid))
	return 0;

	if (response)
	{
		switch (listitem)
		{
			case 1:
			{
				if (PlayerData[playerid][pFactionRank] == FactionData[factionid][factionRanks] || PlayerData[playerid][pFactionRank] == FactionData[factionid][factionRanks]-1)
				{
					Dialog_Show(playerid, RetirerF, DIALOG_STYLE_INPUT, "Retirer", "Coffre: %s\n\nVeuillez entrer le montant que vous souhaitez retirer:", "Retirer", "X", FormatNumber(FactionData[factionid][factionArge]));
				}
			}
			case 2:
			{
				if (PlayerData[playerid][pFactionRank] == FactionData[factionid][factionRanks] || PlayerData[playerid][pFactionRank] == FactionData[factionid][factionRanks]-1)
				{
					Dialog_Show(playerid, DeposerF, DIALOG_STYLE_INPUT, "Deposer", "Argent: %s\n\nVeuillez entrer le montant que vous souhaitez déposer:", "Deposer", "X", FormatNumber(PlayerData[playerid][pMoney]));
				}
			}
		}
	}
	return 1;
}
Dialog:RetirerF(playerid, response, listitem, inputtext[])
{
	new factionid = PlayerData[playerid][pFaction];

	if (factionid == -1 || !IsNearFactionLocker(playerid))
	return 0;


	if (response)
	{
		new amount = strval(inputtext);

		if (isnull(inputtext))
		return Dialog_Show(playerid, RetirerF, DIALOG_STYLE_INPUT, "Retirer", "Coffre: %s\n\nVeuillez entrer le montant que vous souhaitez retirer:", "Retirer", "X", FormatNumber(FactionData[factionid][factionArge]));

		if (amount < 1 || amount > FactionData[factionid][factionArge])
		return Dialog_Show(playerid, RetirerF, DIALOG_STYLE_INPUT, "Retrait", "{de3838}Le coffre ne contient pas autant d'argent.{FFFFFF}\n\nCoffre: %s\n\nEntrer le montant que vous souhaitez retirer.", "Retrait", "X", FormatNumber(FactionData[factionid][factionArge]));

		FactionData[factionid][factionArge] -= amount;
		GiveMoney(playerid, amount);

		SendNearbyMessage(playerid, 8.0, COLOR_WHITE, "%s a pris de l'argent du coffre faction.", ReturnName(playerid));
		SendFactionMessageEx(GetFactionType(playerid), COLOR_WHITE, "%s a pris {13B7BA}%d${F2F2F2} du coffre faction.", ReturnName(playerid),amount);
		Dialog_Show(playerid, RetirerF, DIALOG_STYLE_INPUT, "Retrait", "Coffre: %s$\n\nEntrer le montant que vous souhaitez retirer.", "Retirer", "X", FormatNumber(FactionData[factionid][factionArge]));
		Log_Write("logs/faction_chat.txt", "[%s] %s a retirer %d$ du coffre", ReturnDate(),ReturnName(playerid),amount);
		Faction_Save(factionid);
	}
	else {
		Dialog_Show(playerid, LockerArgent, DIALOG_STYLE_LIST, "Coffre", "Retirer\nDeposer\n", "Ok", "X");
	}
	return 1;
}
Dialog:DeposerF(playerid, response, listitem, inputtext[])
{
	new factionid = PlayerData[playerid][pFaction];

	if (factionid == -1 || !IsNearFactionLocker(playerid))
	return 0;

	if (response)
	{
		new amount = strval(inputtext);

		if (isnull(inputtext))
		return Dialog_Show(playerid, DeposerF, DIALOG_STYLE_INPUT, "Dépôt", "Ton argent: %s$\n\nEntrer le montant que vous voulez deposez:", "Retirer", "X", FormatNumber(PlayerData[playerid][pMoney]));

		if (amount < 1 || amount > PlayerData[playerid][pMoney])
		return Dialog_Show(playerid, DeposerF, DIALOG_STYLE_INPUT, "Dépôt", "{de3838}Vous ne disposez pas de ce montant.\n\n{de3838}Votre solde est de $%s.\n\nVeuillez entrer le montant que vous souhaitez retirer.", "Retrait", "X", FormatNumber(PlayerData[playerid][pMoney]));

		FactionData[factionid][factionArge] += amount;
		GiveMoney(playerid, -amount);

		SendNearbyMessage(playerid, 8.0, COLOR_WHITE,"%s a déposé de l'argent dans le coffre.", ReturnName(playerid));
		SendFactionMessageEx(GetFactionType(playerid), COLOR_WHITE, "%s a posé {13B7BA}%d${F2F2F2} dans le coffre faction.", ReturnName(playerid),amount);
		Dialog_Show(playerid, DeposerF, DIALOG_STYLE_INPUT, "Dépôt", "Votre solde: %s\n\nVeuillez entrer le montant que vous souhaitez déposer.", "Déposer", "X", FormatNumber(PlayerData[playerid][pMoney]));
		Log_Write("logs/faction_chat.txt", "[%s] %s a déposé %s dans le coffre faction", ReturnDate(),ReturnName(playerid),amount);
		Faction_Save(factionid);
	}
	else {
		Dialog_Show(playerid, LockerArgent, DIALOG_STYLE_LIST, "Coffre", "Retirer\nDéposer\n", "Ok", "X");
	}
	return 1;
}

Dialog:LockerWeapons(playerid, response, listitem, inputtext[])
{
	new factionid = PlayerData[playerid][pFaction];

	if (factionid == -1 || !IsNearFactionLocker(playerid))
	return 0;

	if (response)
	{
		new
		weaponid = FactionData[factionid][factionWeapons][listitem],
		ammo = FactionData[factionid][factionAmmo][listitem];

		if (weaponid)
		{
			if (PlayerHasWeapon(playerid, weaponid))
			return SendClientMessageEx(playerid, COLOR_ERROR, "Vous avez déjà cette arme.");

			GiveWeaponToPlayer(playerid, weaponid, ammo);
			SendNearbyMessage(playerid, 15.0, COLOR_PURPLE, "* %s récupère un(e) %s de l'armurerie.", ReturnName(playerid), ReturnWeaponName(weaponid));

            ShowWeapons_faction(playerid, factionid);
			if (GetFactionType(playerid) == FACTION_GANG)
			{
				FactionData[factionid][factionWeapons][listitem] = 0;
				FactionData[factionid][factionAmmo][listitem] = 0;

				Faction_Save(factionid);
			}
		}
		else
		{
			if (GetFactionType(playerid) == FACTION_GANG)
			{
				if ((weaponid = GetWeapon(playerid)) == 0)
				return SendClientMessageEx(playerid, COLOR_ERROR, "Vous n'avez pas d'arme en main.");

				FactionData[factionid][factionWeapons][listitem] = weaponid;
				FactionData[factionid][factionAmmo][listitem] = GetPlayerAmmo(playerid);

				Faction_Save(factionid);

				ResetWeapon(playerid, weaponid);
				SendNearbyMessage(playerid, 15.0, COLOR_PURPLE, "* %s récupère un(e) %s qu'il range dans l'armurerie.", ReturnName(playerid), ReturnWeaponName(weaponid));
			}
			else
			{
				SendClientMessageEx(playerid, COLOR_ERROR, "Ce slot est actuellement vide.");
			}
		}
	}
	else {
		cmd_fcasier(playerid, "\1");
	}
	return 1;
}

Dialog:FactionLocker(playerid, response, listitem, inputtext[])
{
	if (PlayerData[playerid][pFactionEdit] == -1)
	return 0;

	if (response)
	{
		switch (listitem)
		{
			case 0:
			{
			    if(!FactionHasLocker(PlayerData[playerid][pFactionEdit]))
				return SendClientMessageEx(playerid, COLOR_ERROR, "Cette faction ne peut pas avoir de casier.");
				
				static
				Float:x,
				Float:y,
				Float:z;

				GetPlayerPos(playerid, x, y, z);

				FactionData[PlayerData[playerid][pFactionEdit]][factionLockerPos][0] = x;
				FactionData[PlayerData[playerid][pFactionEdit]][factionLockerPos][1] = y;
				FactionData[PlayerData[playerid][pFactionEdit]][factionLockerPos][2] = z;

				FactionData[PlayerData[playerid][pFactionEdit]][factionLockerInt] = GetPlayerInterior(playerid);
				FactionData[PlayerData[playerid][pFactionEdit]][factionLockerWorld] = GetPlayerVirtualWorld(playerid);

				Faction_Refresh(PlayerData[playerid][pFactionEdit]);
				Faction_Save(PlayerData[playerid][pFactionEdit]);
				SendClientMessageEx(playerid, COLOR_INFO, "Tu as ajusté la position du casier. (ID: %d)", PlayerData[playerid][pFactionEdit]);
			}
			case 1:
			{
			    if(!FactionHasLocker(PlayerData[playerid][pFactionEdit]))
				return SendClientMessageEx(playerid, COLOR_ERROR, "Cette faction ne peut pas avoir de casier.");
				
				static
				string[512];

				string[0] = 0;

				for (new i = 0; i < 10; i ++)
				{
					if (FactionData[PlayerData[playerid][pFactionEdit]][factionWeapons][i])
					format(string, sizeof(string), "%sArmes %d: %s\n", string, i + 1, ReturnWeaponName(FactionData[PlayerData[playerid][pFactionEdit]][factionWeapons][i]));

					else format(string, sizeof(string), "%sSlot vide\n", string);
				}
				Dialog_Show(playerid, FactionWeapons, DIALOG_STYLE_LIST, "Casier", string, "Ok", "X");
			}
		}
	}
	return 1;
}

Dialog:FactionWeapons(playerid, response, listitem, inputtext[])
{
	if (PlayerData[playerid][pFactionEdit] == -1)
	return 0;

	if (response)
	{
		PlayerData[playerid][pSelectedSlot] = listitem;
		Dialog_Show(playerid, FactionWeapon, DIALOG_STYLE_LIST, "Modifier l'armurerie", "Arme présente dans le slot (%d)\nMunitions de l'arme (%d)\n{DE3838}Supprimer l'arme", "Ok", "Retour", FactionData[PlayerData[playerid][pFactionEdit]][factionWeapons][PlayerData[playerid][pSelectedSlot]], FactionData[PlayerData[playerid][pFactionEdit]][factionAmmo][PlayerData[playerid][pSelectedSlot]]);
	}
	return 1;
}

Dialog:FactionWeapon(playerid, response, listitem, inputtext[])
{
	if (PlayerData[playerid][pFactionEdit] == -1)
	return 0;

	if (response)
	{
		switch (listitem)
		{
			case 0:
				Dialog_Show(playerid, FactionWeaponID, DIALOG_STYLE_INPUT, "Arme", "Arme actuel: %s (%d)\n\nVeuillez entrer l'ID de la nouvelle arme du SLOT %d:", "Ok", "Retour", ReturnWeaponName(FactionData[PlayerData[playerid][pFactionEdit]][factionWeapons][PlayerData[playerid][pSelectedSlot]]), FactionData[PlayerData[playerid][pFactionEdit]][factionWeapons][PlayerData[playerid][pSelectedSlot]], PlayerData[playerid][pSelectedSlot]);

			case 1:
				Dialog_Show(playerid, FactionWeaponAmmo, DIALOG_STYLE_INPUT, "Munitions", "Munitions actuelles: %d\n\nVeuillez entrer le nouveau montant de munitions du SLOT %d:", "Ok", "Retour", FactionData[PlayerData[playerid][pFactionEdit]][factionAmmo][PlayerData[playerid][pSelectedSlot]], PlayerData[playerid][pSelectedSlot]);

			case 2:
			{
				FactionData[PlayerData[playerid][pFactionEdit]][factionWeapons][PlayerData[playerid][pSelectedSlot]] = 0;
				FactionData[PlayerData[playerid][pFactionEdit]][factionAmmo][PlayerData[playerid][pSelectedSlot]] = 0;

				Faction_Save(PlayerData[playerid][pFactionEdit]);

				dialog_FactionLocker(playerid, 1, 1, "\1");
				SendClientMessageEx(playerid, COLOR_INFO, "Vous avez retiré l'arme que contenait le slot %d.", PlayerData[playerid][pSelectedSlot] + 1);
			}
		}
	}
	else {
		dialog_FactionLocker(playerid, 1, 1, "\1");
	}
	return 1;
}

Dialog:FactionWeaponID(playerid, response, listitem, inputtext[])
{
	if (PlayerData[playerid][pFactionEdit] == -1)
	return 0;

	if (response)
	{
		new weaponid = strval(inputtext);

		if (isnull(inputtext))
		return Dialog_Show(playerid, FactionWeaponID, DIALOG_STYLE_INPUT, "Modifier les armes", "Arme actuelle: %s (%d)\n\nEntrez l'ID de la nouvelle arme pour le slot %d:", "Valider", "Annuler", ReturnWeaponName(FactionData[PlayerData[playerid][pFactionEdit]][factionWeapons][PlayerData[playerid][pSelectedSlot]]), FactionData[PlayerData[playerid][pFactionEdit]][factionWeapons][PlayerData[playerid][pSelectedSlot]], PlayerData[playerid][pSelectedSlot]);

		if (weaponid < 0 || weaponid > 46)
		return Dialog_Show(playerid, FactionWeaponID, DIALOG_STYLE_INPUT, "Modifier les armes", "Erreur: L'arme doit être comprise entre 0 et 46.\n\nArme actuelle: %s (%d)\n\nEntrez l'ID de la nouvelle arme pour le slot %d:", "Valider", "Annuler", ReturnWeaponName(FactionData[PlayerData[playerid][pFactionEdit]][factionWeapons][PlayerData[playerid][pSelectedSlot]]), FactionData[PlayerData[playerid][pFactionEdit]][factionWeapons][PlayerData[playerid][pSelectedSlot]], PlayerData[playerid][pSelectedSlot]);

		FactionData[PlayerData[playerid][pFactionEdit]][factionWeapons][PlayerData[playerid][pSelectedSlot]] = weaponid;
		Faction_Save(PlayerData[playerid][pFactionEdit]);

		Dialog_Show(playerid, FactionWeapon, DIALOG_STYLE_LIST, "Modifier les armes", "Arme présente dans le slot (%d)\nMunitions de l'arme (%d)\n{DE3838}Supprimer l'arme", "Valider", "Annuler", FactionData[PlayerData[playerid][pFactionEdit]][factionWeapons][PlayerData[playerid][pSelectedSlot]], FactionData[PlayerData[playerid][pFactionEdit]][factionAmmo][PlayerData[playerid][pSelectedSlot]]);

		if (weaponid) {
			SendClientMessageEx(playerid, COLOR_INFO, "Vous avez modifié l'arme du slot %d en %s.", PlayerData[playerid][pSelectedSlot] + 1, ReturnWeaponName(weaponid));
		}
		else {
			SendClientMessageEx(playerid, COLOR_INFO, "Vous avez supprimé l'arme du slot %d.", PlayerData[playerid][pSelectedSlot] + 1);
		}
	}
	return 1;
}

Dialog:FactionWeaponAmmo(playerid, response, listitem, inputtext[])
{
	if (PlayerData[playerid][pFactionEdit] == -1)
	return 0;

	if (response)
	{
		new ammo = strval(inputtext);

		if (isnull(inputtext))
		return Dialog_Show(playerid, FactionWeaponAmmo, DIALOG_STYLE_INPUT, "Modifier les armes", "Munitions actuelle: %d\n\nEntrez le nouveau nombre de munition pour le slot %d:", "Valider", "Annuler", FactionData[PlayerData[playerid][pFactionEdit]][factionAmmo][PlayerData[playerid][pSelectedSlot]], PlayerData[playerid][pSelectedSlot]);

		if (ammo < 1 || ammo > 15000)
		return Dialog_Show(playerid, FactionWeaponAmmo, DIALOG_STYLE_INPUT, "Modifier les armes", "Erreur: Les munitions doivent être comprises entre 1 et 15000.\n\nMunitions actuelle: %d\n\nEntrez le nouveau nombre de munition pour le slot %d:", "Valider", "Annuler", FactionData[PlayerData[playerid][pFactionEdit]][factionAmmo][PlayerData[playerid][pSelectedSlot]], PlayerData[playerid][pSelectedSlot]);

		FactionData[PlayerData[playerid][pFactionEdit]][factionAmmo][PlayerData[playerid][pSelectedSlot]] = ammo;
		Faction_Save(PlayerData[playerid][pFactionEdit]);

		Dialog_Show(playerid, FactionWeapon, DIALOG_STYLE_LIST, "Modifier les armes", "Arme présente dans le slot (%d)\nMunitions de l'arme (%d)\n{DE3838}Supprimer l'arme", "Valider", "Annuler", FactionData[PlayerData[playerid][pFactionEdit]][factionWeapons][PlayerData[playerid][pSelectedSlot]], FactionData[PlayerData[playerid][pFactionEdit]][factionAmmo][PlayerData[playerid][pSelectedSlot]]);
		SendClientMessageEx(playerid, COLOR_INFO, "Vous avez modifié les munitions du slot %d à %d.", PlayerData[playerid][pSelectedSlot] + 1, ammo);
	}
	return 1;
}

Dialog:FactionSkin(playerid, response, listitem, inputtext[])
{
	if (PlayerData[playerid][pFactionEdit] == -1)
	return 0;

	if (response)
	{
		static
		skins[312];

		switch (listitem)
		{
			case 0:
				Dialog_Show(playerid, FactionModel, DIALOG_STYLE_INPUT, "Ajouter un skin avec l'ID", "Entrez l'ID du skin désiré (1-311):", "Ajouter", "Annuler");

			case 1:
			{
				for (new i = 0; i < sizeof(skins); i ++)
				skins[i] = i + 1;

				ShowModelSelectionMenu(playerid, "Ajouter un skin", MODEL_SELECTION_ADD_SKIN, skins, sizeof(skins), -16.0, 0.0, -55.0);
			}
			case 2:
			{
				FactionData[PlayerData[playerid][pFactionEdit]][factionSkins][PlayerData[playerid][pSelectedSlot]] = 0;

				Faction_Save(PlayerData[playerid][pFactionEdit]);
				SendClientMessageEx(playerid, COLOR_INFO, "Vous avez supprimé le skin ID %d.", PlayerData[playerid][pSelectedSlot] + 1);
			}
		}
	}
	return 1;
}

Dialog:FactionModel(playerid, response, listitem, inputtext[])
{
	if (PlayerData[playerid][pFactionEdit] == -1)
	return 0;

	if (response)
	{
		new skin = strval(inputtext);

		if (isnull(inputtext))
		return Dialog_Show(playerid, FactionModel, DIALOG_STYLE_INPUT, "Ajouter un skin avec l'ID", "Entrez l'ID du skin désiré (0-311):", "Ajouter", "Annuler");

		if (skin < 0 || skin > 311)
		return Dialog_Show(playerid, FactionModel, DIALOG_STYLE_INPUT, "Ajouter un skin avec l'ID", "Erreur: Le skin doit être comprit entre 0 et 311.\n\nEntrez l'ID du skin désiré (0-311):", "Ajouter", "Annuler");

		FactionData[PlayerData[playerid][pFactionEdit]][factionSkins][PlayerData[playerid][pSelectedSlot]] = skin;
		Faction_Save(PlayerData[playerid][pFactionEdit]);

		if (skin) {
			SendClientMessageEx(playerid, COLOR_INFO, "Vous avez modifier le skin du slot %d à %d.", PlayerData[playerid][pSelectedSlot] + 1, skin);
		}
		else {
			SendClientMessageEx(playerid, COLOR_INFO, "Vous avez supprimer le skin du slot %d.", PlayerData[playerid][pSelectedSlot] + 1);
		}
	}
	return 1;
}

Dialog:JobHelp(playerid, response, listitem, inputtext[])
{
	if (!response) cmd_job(playerid, "\1");
	return 1;
}

Dialog:Crates(playerid, response, listitem, inputtext[])
{
	if (response)
	{
		if (PlayerData[playerid][pCarryCrate] != -1)
		return SendClientMessageEx(playerid, COLOR_ERROR, "Vous portez déjà une caisse.");

		new id = strfind(inputtext, "#");

		if (id != -1) {
			id = strval(inputtext[id + 1]);

			CrateData[id][crateVehicle] = INVALID_VEHICLE_ID;
			PlayerData[playerid][pCarryCrate] = id;

			SetPlayerAttachedObject(playerid, 4, 964, 1, -0.157020, 0.413313, 0.000000, 0.000000, 88.000000, 180.000000, 0.500000, 0.500000, 0.500000);
			SetPlayerSpecialAction(playerid, SPECIAL_ACTION_CARRY);

			SendNearbyMessage(playerid, 15.0, COLOR_PURPLE, "%s prend une caisse du véhicule.", ReturnName(playerid, 1));
			SendClientMessageEx(playerid, COLOR_INFO, "Vous avez pris une %s caisse du véhicule.", Crate_GetType(CrateData[id][crateType]));
		}
	}
	else
	{
		static
		    carid = -1;
		    
		if((carid = Car_Nearest(playerid)) != -1) Car_ShowTrunk(playerid, carid);
	}
	return 1;
}

Dialog:AddVehicleModel(playerid, response, listitem, inputtext[])
{
	if (response)
	{
		new id = PlayerData[playerid][pDealership];

		if (id != -1 && BusinessData[id][bizExists] && BusinessData[id][bizType] == 5)
		{
			if (isnull(inputtext))
			return Dialog_Show(playerid, AddVehicleModel, DIALOG_STYLE_INPUT, "Ajouter un véhicule", "Entrez le ModelID du véhicule que vous voulez ajouter:", "Ajouter", "Annuler");

			new model = GetVehicleModelByName(inputtext);

			if (!model)
			return Dialog_Show(playerid, AddVehicleModel, DIALOG_STYLE_INPUT, "Ajouter un véhicule", "Erreur: Le model entrer n'existe pas.\n\nEntrez le ModelID du véhicule que vous voulez ajouter:", "Ajouter", "Annuler");

			for (new i = 0; i != MAX_DEALERSHIP_CARS; i ++)
			{
				if (DealershipCars[id][i][vehModel] == model)
				return Dialog_Show(playerid, AddVehicleModel, DIALOG_STYLE_INPUT, "Ajouter un véhicule", "Erreur: Ce model est déjà en vente dans une concession.\n\nEntrez le ModelID du véhicule que vous voulez ajouter:", "Ajouter", "Annuler");
			}
			PlayerData[playerid][pDealerCar] = model;
			Dialog_Show(playerid, DealerCarPrice, DIALOG_STYLE_INPUT, "Entrer un prix", "Entrez un prix pour '%s':", "Submit", "Cancel", ReturnVehicleModelName(PlayerData[playerid][pDealerCar]));
		}
	}
	return 1;
}

Dialog:AddVehicle(playerid, response, listitem, inputtext[])
{
	if (response)
	{
		new id = PlayerData[playerid][pDealership];

		if (id != -1 && BusinessData[id][bizExists] && BusinessData[id][bizType] == 5)
		{
			if (!listitem)
			{
				Dialog_Show(playerid, AddVehicleModel, DIALOG_STYLE_INPUT, "Ajouter un véhicule", "Entrez le ModelID du véhicule que vous voulez ajouter:", "Ajouter", "Annuler");
			}
			else
			{
				static
				cars[212];

				for (new i = 0; i < sizeof(cars); i ++)
				cars[i] = i + 400;

				ShowModelSelectionMenu(playerid, "Ajouter un véhicule", MODEL_SELECTION_DEALER_ADD, cars, sizeof(cars), -16.0, 0.0, -55.0);
			}
		}
	}
	return 1;
}

Dialog:EnterNumber(playerid, response, listitem, inputtext[])
{
	if (response)
	{
		static
		string[128];

		if (isnull(inputtext) || !IsNumeric(inputtext))
		return Dialog_Show(playerid, EnterNumber, DIALOG_STYLE_INPUT, "Contact", "Nom: %s\n\nVeuillez entrer le numéro du contact que vous souhaitez enregistrer:", "Entrer", "X", PlayerData[playerid][pEditingItem]);

		for (new i = 0; i != MAX_CONTACTS; i ++)
		{
			if (!ContactData[playerid][i][contactExists])
			{
				ContactData[playerid][i][contactExists] = true;
				ContactData[playerid][i][contactNumber] = strval(inputtext);

				format(ContactData[playerid][i][contactName], 32, PlayerData[playerid][pEditingItem]);

				format(string, sizeof(string), "INSERT INTO `contacts` (`ID`, `contactName`, `contactNumber`) VALUES('%d', '%s', '%d')", PlayerData[playerid][pID], SQL_ReturnEscaped(PlayerData[playerid][pEditingItem]), ContactData[playerid][i][contactNumber]);
				mysql_function_query(g_iHandle, string, false, "OnContactAdd", "dd", playerid, i);

				SendClientMessageEx(playerid, COLOR_INFO, "Vous avez ajouté \"%s\" à vos contacts.", PlayerData[playerid][pEditingItem]);
				return 1;
			}
		}
		SendClientMessageEx(playerid, COLOR_ERROR, "Vous n'avez plus de place dans votre répertoire.");
	}
	else {
		ShowContacts(playerid);
	}
	return 1;
}

Dialog:NewContact(playerid, response, listitem, inputtext[])
{
	if (response)
	{
		if (isnull(inputtext))
		return Dialog_Show(playerid, NewContact, DIALOG_STYLE_INPUT, "Nouveau contact", "Erreur: Veuillez entrer le nom du contact.\n\nVeuillez entrer le nom du contact ci-dessous:", "Entrer", "X");

		if (strlen(inputtext) > 32)
		return Dialog_Show(playerid, NewContact, DIALOG_STYLE_INPUT, "Nouveau contact", "Erreur: Le nom du contact ne peut pas dépasser 32 caractères.\n\nVeuillez entrer le nom du contact ci-dessous:", "Entrer", "X");

		format(PlayerData[playerid][pEditingItem], 32, inputtext);

		Dialog_Show(playerid, EnterNumber, DIALOG_STYLE_INPUT, "Numér", "Nom du contact: %s\n\nVeuillez entrer le numéro de téléphone pour ce contact:", "Entrer", "X", inputtext);
	}
	else {
		ShowContacts(playerid);
	}
	return 1;
}

Dialog:ContactInfo(playerid, response, listitem, inputtext[])
{
	if (response)
	{
		new
		id = PlayerData[playerid][pContact],
		string[72];

		switch (listitem)
		{
			case 0:
			{
				format(string, 16, "%d", ContactData[playerid][id][contactNumber]);
				cmd_appeler(playerid, string);
			}
			case 1:
			{
				format(string, sizeof(string), "DELETE FROM `contacts` WHERE `ID` = '%d' AND `contactID` = '%d'", PlayerData[playerid][pID], ContactData[playerid][id][contactID]);
				mysql_function_query(g_iHandle, string, false, "", "");

				SendClientMessageEx(playerid, COLOR_INFO, "Vous avez supprimé \"%s\" de votre répertoire.", ContactData[playerid][id][contactName]);

				ContactData[playerid][id][contactExists] = false;
				ContactData[playerid][id][contactNumber] = 0;
				ContactData[playerid][id][contactID] = 0;

				ShowContacts(playerid);
			}
		}
	}
	else {
		ShowContacts(playerid);
	}
	return 1;
}

Dialog:Contacts(playerid, response, listitem, inputtext[])
{
	if (response)
	{
		if (!listitem) {
			Dialog_Show(playerid, NewContact, DIALOG_STYLE_INPUT, "Nouveau contact", "Veuillez entrer le nom du contact ci-dessous:", "Entrer", "X");
		}
		else {
			PlayerData[playerid][pContact] = ListedContacts[playerid][listitem - 1];

			Dialog_Show(playerid, ContactInfo, DIALOG_STYLE_LIST, ContactData[playerid][PlayerData[playerid][pContact]][contactName], "Appeler\nSupprimer le contact", "OK", "X");
		}
	}
	else {
		//cmd_telephone(playerid, "\1");
	}
	for (new i = 0; i != MAX_CONTACTS; i ++) {
		ListedContacts[playerid][i] = -1;
	}
	return 1;
}

Dialog:DialNumber(playerid, response, listitem, inputtext[])
{
	if (response)
	{
		new
		string[16];

		if (isnull(inputtext) || !IsNumeric(inputtext))
		return Dialog_Show(playerid, DialNumber, DIALOG_STYLE_INPUT, "Appel", "Veuillez entrer le numéro que vous souhaitez appeler ci-dessous:", "Appel", "X");

		format(string, 16, "%d", strval(inputtext));
		cmd_appeler(playerid, string);
	}
	else {
		//cmd_telephone(playerid, "\1");
	}
	return 1;
}

Dialog:SendText(playerid, response, listitem, inputtext[])
{
	if (response)
	{
		new number = strval(inputtext);

		if (isnull(inputtext) || !IsNumeric(inputtext))
		return Dialog_Show(playerid, SendText, DIALOG_STYLE_INPUT, "SMS", "Veuillez entrer le numéro de la personne que vous souhaitez SMS:", "SMS", "X");

		if (GetNumberOwner(number) == INVALID_PLAYER_ID)
		return Dialog_Show(playerid, SendText, DIALOG_STYLE_INPUT, "SMS", "Erreur: Le numéro ne répond pas.\n\nVeuillez entrer le numéro de la personne que vous souhaitez SMS:", "SMS", "X");

		PlayerData[playerid][pContact] = GetNumberOwner(number);
		Dialog_Show(playerid, TextMessage, DIALOG_STYLE_INPUT, "SMS", "Veuillez entrer le message que vous souhaitez envoyer à %s:", "SMS", "X", ReturnName(PlayerData[playerid][pContact], 0));
	}
	return 1;
}

Dialog:TextMessage(playerid, response, listitem, inputtext[])
{
	if (response)
	{
		if (isnull(inputtext))
		return Dialog_Show(playerid, TextMessage, DIALOG_STYLE_INPUT, "SMS", "Erreur: Veuillez entrer un message.\n\nVeuillez entrer le message que vous souhaitez envoyer à %s:", "SMS", "X", ReturnName(PlayerData[playerid][pContact], 0));

		new targetid = PlayerData[playerid][pContact];

		if (!IsPlayerConnected(targetid) || !PlayerData[targetid][pPhone])
		return SendClientMessageEx(playerid, COLOR_ERROR, "Le numéro que vous avez specifié n'existe pas.");

		GiveMoney(playerid, -1);
		ShowPlayerFooter(playerid, "Vous avez ~r~payé~w~ $1 pour cet SMS.");

		SendClientMessageEx(targetid, COLOR_YELLOW, "SMS: %s - %s (%d)", inputtext, ReturnName(playerid), PlayerData[playerid][pPhone]);
		SendClientMessageEx(playerid, COLOR_YELLOW, "SMS: %s - %s (%d)", inputtext, ReturnName(playerid), PlayerData[playerid][pPhone]);

		PlayerPlaySoundEx(targetid, 21001);
		SendClientMessage(playerid, COLOR_WHITE, "SMS envoyé.");
	}
	else {
		Dialog_Show(playerid, SendText, DIALOG_STYLE_INPUT, "SMS", "Veuillez entrer le numéro de la personne que vous souhaitez SMS:", "Entrer", "X");
	}
	return 1;
}

Dialog:MyPhone(playerid, response, listitem, inputtext[])
{
	if (response)
	{
		switch (listitem)
		{
			case 0:
			{
				if (PlayerData[playerid][pPhoneOff])
				return SendClientMessageEx(playerid, COLOR_ERROR, "Votre téléphone doit être allumer.");

				Dialog_Show(playerid, DialNumber, DIALOG_STYLE_INPUT, "Appel", "Veuillez entrer le numéro que vous souhaitez composer ci-dessous:", "Entrer", "X");
			}
			case 1:
			{
				if (PlayerData[playerid][pPhoneOff])
				return SendClientMessageEx(playerid, COLOR_ERROR, "Votre téléphone doit être allumé.");

				ShowContacts(playerid);
			}
			case 2:
			{
				if (PlayerData[playerid][pPhoneOff])
				return SendClientMessageEx(playerid, COLOR_ERROR, "Votre téléphone doit être allumé.");

				Dialog_Show(playerid, SendText, DIALOG_STYLE_INPUT, "SMS", "Veuillez entrer le numéro que vous souhaitez composer ci-dessous:", "SMS", "X");
			}
			case 3:
			{
				if (!PlayerData[playerid][pPhoneOff])
				{
					if (PlayerData[playerid][pCallLine] != INVALID_PLAYER_ID) {
						CancelCall(playerid);
					}
					PlayerData[playerid][pPhoneOff] = 1;
					SendNearbyMessage(playerid, 15.0, COLOR_PURPLE, "%s eteint son téléphone portable.", ReturnName(playerid, 1));
				}
				else
				{
					PlayerData[playerid][pPhoneOff] = 0;
					SendNearbyMessage(playerid, 15.0, COLOR_PURPLE, "%s allume son téléphone portable.", ReturnName(playerid, 1));
				}
			}
		}
	}
	return 1;
}

Dialog:ListedFurniture(playerid, response, listitem, inputtext[])
{
	if (response)
	{
		new id = House_Inside(playerid);

		if (id != -1 && House_IsOwner(playerid, id))
		{
			PlayerData[playerid][pEditFurniture] = ListedFurniture[playerid][listitem];

			if( FurnitureData[PlayerData[playerid][pEditFurniture]][furnitureActive])
			Dialog_Show(playerid, FurnitureList, DIALOG_STYLE_LIST, FurnitureData[PlayerData[playerid][pEditFurniture]][furnitureName], "Modifier la position\nRendre invisible l'objet\n\nAjouter un nom personnalisé\nSupprimer l'objet", "OK", "Annuler");

			else
			Dialog_Show(playerid, FurnitureList, DIALOG_STYLE_LIST, FurnitureData[PlayerData[playerid][pEditFurniture]][furnitureName], "Modifier la position\nRendre visible l'objet\nAjouter un nom personnalisé\nSupprimer l'objet", "OK", "Annuler");
		}
	}
	for (new i = 0; i != MAX_FURNITURE; i ++) {
		ListedFurniture[playerid][i] = -1;
	}
	return 1;
}

Dialog:ListedDoors(playerid, response, listitem, inputtext[])
{
	if (response)
	{
		new id = House_Inside(playerid);

		if (id != -1 && House_IsOwner(playerid, id))
		{
			PlayerData[playerid][pEditDoors] = ListedDoors[playerid][listitem];
			Dialog_Show(playerid, DoorList, DIALOG_STYLE_LIST, "Gestion de la porte", "Modifier la position\nModifier l'ouverture\nSupprimer la porte", "OK", "Annuler");
		}
	}
	for (new i = 0; i != MAX_GATES; i ++) {
		ListedDoors[playerid][i] = -1;
	}
	return 1;
}

Dialog:DoorList(playerid, response, listitem, inputtext[])
{
	if (response)
	{
		new
			id = House_Inside(playerid),
			gate_id = PlayerData[playerid][pEditDoors];

		if (id != -1 && House_IsOwner(playerid, id))
		{
			switch (listitem)
			{
				case 0:
				{
					ResetEditing(playerid);
					EditDynamicObject(playerid, GateData[ gate_id ][gateObject]);

					PlayerData[playerid][pEditGate] = gate_id;
					PlayerData[playerid][pEditType] = 1;

					SendClientMessageEx(playerid, COLOR_INFO, "Vous modifiez la position de la porte %d.", gate_id);
				}
				case 1:
				{
					ResetEditing(playerid);
					EditDynamicObject(playerid, GateData[ gate_id ][gateObject]);

					PlayerData[playerid][pEditGate] = gate_id;
					PlayerData[playerid][pEditType] = 2;

					SendClientMessageEx(playerid, COLOR_INFO, "Vous modifiez la position d'ouverture de la porte %d.", gate_id);
				}
				case 2:
				{
					SendClientMessageEx(playerid, COLOR_INFO, "Vous avez supprimé la porte %d de votre maison.", PlayerData[playerid][pEditDoors]);
					
					Gate_Delete(PlayerData[playerid][pEditDoors]);
					PlayerData[playerid][pEditDoors] = -1;
				}
			}
		}
		else {
			PlayerData[playerid][pEditDoors] = -1;
		}
	}
	else {
		PlayerData[playerid][pEditDoors] = -1;
	}
	return 1;
}

Dialog:FurnitureList(playerid, response, listitem, inputtext[])
{
	if (response)
	{
		new id = House_Inside(playerid);

		if (id != -1 && House_IsOwner(playerid, id))
		{
			switch (listitem)
			{
				case 0:
				{
					EditDynamicObject(playerid, FurnitureData[PlayerData[playerid][pEditFurniture]][furnitureObject]);
					SendClientMessageEx(playerid, COLOR_INFO, "Vous êtes modifiez la position de la fourniture \"%s\".", FurnitureData[PlayerData[playerid][pEditFurniture]][furnitureName]);
				}
				case 1:
				{
					if(FurnitureData[PlayerData[playerid][pEditFurniture]][furnitureActive])
					{
					    FurnitureData[PlayerData[playerid][pEditFurniture]][furnitureActive] = false;
					    Furniture_Refresh(PlayerData[playerid][pEditFurniture]);
					    
					    
					    SendClientMessageEx(playerid, COLOR_INFO, "Vous rendez invisible votre fourniture \"%s\"", FurnitureData[PlayerData[playerid][pEditFurniture]][furnitureName]);
					}
					else
					{
					    FurnitureData[PlayerData[playerid][pEditFurniture]][furnitureActive] = true;
					    Furniture_Refresh(PlayerData[playerid][pEditFurniture]);

					    
					    SendClientMessageEx(playerid, COLOR_INFO, "Vous rendez visible votre fourniture \"%s\"", FurnitureData[PlayerData[playerid][pEditFurniture]][furnitureName]);
					}
				}
				case 2:
				{
					Dialog_Show(playerid, FurnitureList_name, DIALOG_STYLE_INPUT, FurnitureData[PlayerData[playerid][pEditFurniture]][furnitureName], "Entrez le nom personnalisé pour cette fourniture:\nLaissez vide pour remettre le nom par défaut.", "OK", "Annuler");
				}
				case 3:
				{
					Furniture_Delete(PlayerData[playerid][pEditFurniture]);
					SendClientMessageEx(playerid, COLOR_INFO, "Vous avez supprimer la fourniture \"%s\".", FurnitureData[PlayerData[playerid][pEditFurniture]][furnitureName]);

					CancelEdit(playerid);
					PlayerData[playerid][pEditFurniture] = -1;
				}
			}
		}
		else {
			PlayerData[playerid][pEditFurniture] = -1;
		}
	}
	else {
		PlayerData[playerid][pEditFurniture] = -1;
	}
	return 1;
}

Dialog:FurnitureList_name(playerid, response, listitem, inputtext[])
{
	new
	    result[32];
	    
	if(!sscanf(inputtext, "s[32]", result))
	{
	    format(FurnitureData[PlayerData[playerid][pEditFurniture]][furnitureName], 32, "%s", result);
	    SendClientMessageEx(playerid, COLOR_INFO, "Vous avez modifier le nom de votre fourniture avec : \"%s\"", result);
	}
	else
	{
	    format(FurnitureData[PlayerData[playerid][pEditFurniture]][furnitureName], 32, "%s", GetFurnitureNameByModel(FurnitureData[PlayerData[playerid][pEditFurniture]][furnitureModel]));
	    SendClientMessageEx(playerid, COLOR_INFO, "Vous avez remit le nom par défaut de votre fourniture : \"%s\"", GetFurnitureNameByModel(FurnitureData[PlayerData[playerid][pEditFurniture]][furnitureModel]));
	}
	return 1;
}

Dialog:Trunk(playerid, response, listitem, inputtext[])
{
	new carid = Car_Nearest(playerid);

	if (CarData[carid][carImpounded] != -1)
	return SendClientMessageEx(playerid, COLOR_ERROR, "Ce véhicule est mis en fourrière et vous ne pouvez pas l'utiliser.");

	if (carid != -1 && !CarData[carid][carLocked])
	{
		if (response)
		{
			if (!CarData[carid][carWeapons][listitem])
			{
				if (!GetWeapon(playerid))
				return SendClientMessageEx(playerid, COLOR_ERROR, "Vous n'avez pas d'arme en main.");

				if (GetWeapon(playerid) == 23 && PlayerData[playerid][pTazer])
				return SendClientMessageEx(playerid, COLOR_ERROR, "Vous ne pouvez pas placer un tazer dans le coffre.");

				if (GetWeapon(playerid) == 25 && PlayerData[playerid][pBeanBag])
				return SendClientMessageEx(playerid, COLOR_ERROR, "Vous ne pouvez pas placer un flashball dans le coffre.");

				if (!Car_IsOwner(playerid, carid) && GetFactionType(playerid) == FACTION_POLICE)
				return SendClientMessageEx(playerid, COLOR_ERROR, "Vous ne pouvais pas poser d'armes en tant que LSPD.");

				CarData[carid][carWeapons][listitem] = GetWeapon(playerid);
				CarData[carid][carAmmo][listitem] = GetPlayerAmmo(playerid);

				ResetWeapon(playerid, CarData[carid][carWeapons][listitem]);
				SendNearbyMessage(playerid, 15.0, COLOR_PURPLE, "%s dépose un(e) %s dans le coffre du véhicule.", ReturnName(playerid, 1), ReturnWeaponName(CarData[carid][carWeapons][listitem]));

				Car_Save(carid);
				Car_WeaponStorage(playerid, carid);
			}
			else
			{
				GiveWeaponToPlayer(playerid, CarData[carid][carWeapons][listitem], CarData[carid][carAmmo][listitem]);
				SendNearbyMessage(playerid, 15.0, COLOR_PURPLE, "%s prend un(e) %s dans le coffre du véhicule.", ReturnName(playerid, 1), ReturnWeaponName(CarData[carid][carWeapons][listitem]));

				CarData[carid][carWeapons][listitem] = 0;
				CarData[carid][carAmmo][listitem] = 0;

				Car_Save(carid);
				Car_WeaponStorage(playerid, carid);
			}
		}
		else {
			Car_ShowTrunk(playerid, carid);
		}
	}
	return 1;
}

Dialog:ConfirmCarBuy(playerid, response, listitem, inputtext[])
{
	if (response)
	{
		new
		bizid = Business_Inside(playerid),
		carid = PlayerData[playerid][pDealerCar],
		price = DealershipCars[bizid][carid][vehPrice];

		if (bizid != -1 && BusinessData[bizid][bizExists] && BusinessData[bizid][bizType] == 5)
		{
			if (GetMoney(playerid) < price)
			return SendClientMessageEx(playerid, COLOR_ERROR, "Vous n'avez pas assez d'argent pour acheter.");

			if (Car_GetCount(playerid) >= MAX_OWNABLE_CARS)
			return SendClientMessageEx(playerid, COLOR_ERROR, "Vous avez déjà %d véhicules, vous ne pouvez pas en avoir plus.", MAX_OWNABLE_CARS);

			new id = Car_Create(PlayerData[playerid][pID], DealershipCars[bizid][carid][vehModel], BusinessData[bizid][bizSpawn][0], BusinessData[bizid][bizSpawn][1], BusinessData[bizid][bizSpawn][2], BusinessData[bizid][bizSpawn][3], 1, 1,-1,-1,-1,price);

			if (id != -1)
			{
				Tax_AddPercent(price);

				BusinessData[bizid][bizVault] += Tax_Percent(price);
				Business_Save(bizid);

				SendClientMessageEx(playerid, COLOR_INFO, "Vous avez acheté un(e) %s pour la somme de %s!", ReturnVehicleModelName(DealershipCars[bizid][carid][vehModel]), FormatNumber(price));
				GiveMoney(playerid, -price);
				
				Business_RemoveVehicle(id, DealershipCars[bizid][carid][vehModel]);

				ShowPlayerFooter(playerid, "~w~Véhicule~g~ acheté!");
				Log_Write("logs/car_log.txt", "[%s] %s has purchased a %s for %s.", ReturnDate(), ReturnName(playerid), ReturnVehicleModelName(DealershipCars[bizid][carid][vehModel]), FormatNumber(price));
			}
		}
	}
	return 1;
}

Dialog:DealerCarPrice(playerid, response, listitem, inputtext[])
{
	if (response)
	{
		new id = PlayerData[playerid][pDealership];

		if (id != -1 && BusinessData[id][bizExists] && BusinessData[id][bizType] == 5)
		{
			if (isnull(inputtext) || strval(inputtext) < 1)
			return Dialog_Show(playerid, DealerCarPrice, DIALOG_STYLE_INPUT, "Modification", "Veuillez entrer le prix pour le véhhicule '%s':", "Modifier", "X", ReturnVehicleModelName(PlayerData[playerid][pDealerCar]));

			Business_AddVehicle(id, PlayerData[playerid][pDealerCar], strval(inputtext));
			Business_EditCars(playerid, id);

			SendClientMessageEx(playerid, COLOR_INFO, "Vous avez ajouté un(e) '%s' à la concession.", ReturnVehicleModelName(PlayerData[playerid][pDealerCar]));
			return 1;
		}
	}
	return 1;
}

Dialog:CarPrice(playerid, response, listitem, inputtext[])
{
	if (response)
	{
		new id = PlayerData[playerid][pDealership];

		if (id != -1 && BusinessData[id][bizExists] && BusinessData[id][bizType] == 5)
		{
			if (isnull(inputtext) || strval(inputtext) < 1)
			return Dialog_Show(playerid, CarPrice, DIALOG_STYLE_INPUT, "Modification", "Le prix actuel de '%s' est de %s.\n\nVeuillez entrer le nouveau prix ci-dessous.", "Ok", "Retour", ReturnVehicleModelName(DealershipCars[id][PlayerData[playerid][pDealerCar]][vehModel]), FormatNumber(DealershipCars[id][PlayerData[playerid][pDealerCar]][vehPrice]));

			new
			string[128];

			DealershipCars[id][PlayerData[playerid][pDealerCar]][vehPrice] = strval(inputtext);

			format(string, sizeof(string), "UPDATE `dealervehicles` SET `vehPrice` = '%d' WHERE `ID` = '%d' AND `vehID` = '%d'", strval(inputtext), BusinessData[id][bizID], DealershipCars[id][PlayerData[playerid][pDealerCar]][vehID]);
			mysql_function_query(g_iHandle, string, false, "", "");

			SendClientMessageEx(playerid, COLOR_INFO, "Vous avez modifié le prix de '%s' à %s$.", ReturnVehicleModelName(DealershipCars[id][PlayerData[playerid][pDealerCar]][vehModel]), FormatNumber(DealershipCars[id][PlayerData[playerid][pDealerCar]][vehPrice]));
			Business_EditCars(playerid, id);
		}
		return 1;
	}
	return 1;
}

Dialog:CarOptions(playerid, response, listitem, inputtext[])
{
	if (response)
	{
		new id = PlayerData[playerid][pDealership];

		if (id != -1 && BusinessData[id][bizExists] && BusinessData[id][bizType] == 5)
		{
			if (listitem == 0)
			{
				Dialog_Show(playerid, CarPrice, DIALOG_STYLE_INPUT, "Modification prix", "Le prix actuel de '%s'est de %s.\n\nVeuillez entrer le nouveau prix ci-dessous.", "Ok", "Retour", ReturnVehicleModelName(DealershipCars[id][PlayerData[playerid][pDealerCar]][vehModel]), FormatNumber(DealershipCars[id][PlayerData[playerid][pDealerCar]][vehPrice]));
			}
			else if (listitem == 1)
			{
				new model = DealershipCars[id][PlayerData[playerid][pDealerCar]][vehModel];
				Business_RemoveVehicle(id, model);

				SendClientMessageEx(playerid, COLOR_INFO, "Vous avez supprimé '%s' de la concession.", ReturnVehicleModelName(model));
				Business_EditCars(playerid, id);
			}
		}
	}
	return 1;
}

Dialog:BankAccount(playerid, response, listitem, inputtext[])
{
	if (!IsPlayerInBank(playerid) && ATM_Nearest(playerid) == -1)
	return 0;

	if (response)
	{
		switch (listitem)
		{
			case 0:
			{
				Dialog_Show(playerid, Withdraw, DIALOG_STYLE_INPUT, "Retirer", "Solde: %s\n\nEntrer le montant que vous souhaitez retirer ci-dessous.", "Retirer", "X", FormatNumber(PlayerData[playerid][pBankMoney]));
			}
			case 1:
			{
				Dialog_Show(playerid, Deposit, DIALOG_STYLE_INPUT, "Deposer", "Solde: %s\n\nEntrer le montant que vous souhaitez déposer ci-dessous.", "Déposer", "X", FormatNumber(PlayerData[playerid][pBankMoney]));
			}
			case 2:
			{
				if(PlayerData[playerid][pLevel] < 10){
					Dialog_Show(playerid, TransferNivo, DIALOG_STYLE_MSGBOX, "Niveaux", "Le transfert nécessite un niveau équivalent ou supérieur à 10.", "Ok", "X");
				}
				else Dialog_Show(playerid, Transfer, DIALOG_STYLE_INPUT, "Transfert", "Solde: $%s\n\nVeuillez entrer le montant que vous souhaitez transférer:", "Suivant", "X", FormatNumber(PlayerData[playerid][pBankMoney]));
			}
		}
	}
	else
	{
		cmd_banque(playerid, "\1");
	}
	return 1;
}

Dialog:Transfer(playerid, response, listitem, inputtext[])
{
	if (!IsPlayerInBank(playerid) && ATM_Nearest(playerid) == -1)
	return 0;

	if (response)
	{
		static
		userid;

		if (sscanf(inputtext, "u", userid))
		return Dialog_Show(playerid, Transfer, DIALOG_STYLE_INPUT, "Transfert", "Solde: $%s\n\nVeuillez entrer le Pseudo du joueur:", "Continuer", "X", FormatNumber(PlayerData[playerid][pBankMoney]));

		if (userid == INVALID_PLAYER_ID)
		return Dialog_Show(playerid, Transfer, DIALOG_STYLE_INPUT, "Transfert", "Erreur: Pseudo invalide.\n\nBalance: %s\n\nVeuillez entrer le Pseudo du joueur:", "Continuer", "X", FormatNumber(PlayerData[playerid][pBankMoney]));

		if (userid == playerid)
		return Dialog_Show(playerid, Transfer, DIALOG_STYLE_INPUT, "Transfert", "Erreur: Vous ne pouvez pas envoyer à vous même.\n\nVotre solde: %s\n\nnVeuillez entrer le Pseudo du joueur:", "Continuer", "X", FormatNumber(PlayerData[playerid][pBankMoney]));

		PlayerData[playerid][pTransfer] = userid;
		Dialog_Show(playerid, TransferCash, DIALOG_STYLE_INPUT, "Transfert", "Votre compte contient: %s\n\nVeuillez entrer le montant que vous souhaitez envoyer à %s:", "Continuer", "X", FormatNumber(PlayerData[playerid][pBankMoney]), ReturnName(PlayerData[playerid][pTransfer], 0));
	}
	else {
		Dialog_Show(playerid, BankAccount, DIALOG_STYLE_LIST, "Compte", "Retrait\nDépôt\nTransfert", "Ok", "Retour");
	}
	return 1;
}

Dialog:TransferCash(playerid, response, listitem, inputtext[])
{
	if (!IsPlayerInBank(playerid) && ATM_Nearest(playerid) == -1)
	return 0;

	if (response)
	{
		new amount = strval(inputtext);

		if (isnull(inputtext))
		return Dialog_Show(playerid, TransferCash, DIALOG_STYLE_INPUT, "Transfert", "Solde: $%s\n\nVeuillez entrer le montant que vous souhaitez envoyer à %s:", "Continuer", "X", FormatNumber(PlayerData[playerid][pBankMoney]), ReturnName(PlayerData[playerid][pTransfer], 0));

		if (amount < 1 || amount > PlayerData[playerid][pBankMoney])
		return Dialog_Show(playerid, TransferCash, DIALOG_STYLE_INPUT, "Transfert", "Erreur: Solde insuffisant.\n\nVotre solde: %s\n\nVeuillez entrer le montant que vous souhaitez envoyer à %s:", "Continue", "Back", FormatNumber(PlayerData[playerid][pBankMoney]), ReturnName(PlayerData[playerid][pTransfer], 0));

		if (!strcmp(PlayerData[playerid][pIP], PlayerData[PlayerData[playerid][pTransfer]][pIP])) {
			SendAdminAlert(COLOR_ADMINGROUP, "%s (%s) a transférer %s à %s (%s).", ReturnName(playerid), PlayerData[playerid][pIP], FormatNumber(amount), ReturnName(PlayerData[playerid][pTransfer], 0), PlayerData[playerid][pIP]);
		}
		PlayerData[playerid][pBankMoney] -= amount;
		PlayerData[PlayerData[playerid][pTransfer]][pBankMoney] += amount;

		SendClientMessageEx(playerid, COLOR_INFO, "Vous avez transfèrer %s sur le compte de %s.", FormatNumber(amount), ReturnName(PlayerData[playerid][pTransfer], 0));
		SendClientMessageEx(PlayerData[playerid][pTransfer], COLOR_INFO, "%s vous a transférer %s sur votre compte.", ReturnName(playerid), FormatNumber(amount));

		Dialog_Show(playerid, BankAccount, DIALOG_STYLE_LIST, "Compte", "Retrait\nDépot\nTransfert", "OK", "X");
		Log_Write("logs/transfer_log.txt", "[%s] %s (%s) has transferred %s to %s (%s).", ReturnDate(), ReturnName(playerid), PlayerData[playerid][pIP], FormatNumber(amount), ReturnName(PlayerData[playerid][pTransfer]), PlayerData[PlayerData[playerid][pTransfer]][pIP]);
	}
	else {
		Dialog_Show(playerid, BankAccount, DIALOG_STYLE_LIST, "Compte", "Retrait\nDépot\nTransfert", "OK", "X");
	}
	return 1;
}

Dialog:Savings(playerid, response, listitem, inputtext[])
{
	if (!IsPlayerInBank(playerid) && ATM_Nearest(playerid) == -1)
	return 0;

	if (response)
	{
		switch (listitem)
		{
			case 0:
			{
				Dialog_Show(playerid, SavingsWithdraw, DIALOG_STYLE_INPUT, "Retrait", "Vous avez sauvegarder: %s\n\nEntrer le montant que vous voulez withdraw:", "Withdraw", "Back", FormatNumber(PlayerData[playerid][pSavings]));
			}
			case 1:
			{
				Dialog_Show(playerid, SavingsDeposit, DIALOG_STYLE_INPUT, "Dépot", "Vous avez sauvegarder: %s\n\nEntrer le montant que vous souhaitez déposer.", "deposer", "Back", FormatNumber(PlayerData[playerid][pSavings]));
			}
		}
	}
	else
	{
		Dialog_Show(playerid, Bank, DIALOG_STYLE_LIST, "Compte", "Compte: %s\nVotre solde: %s", "Ok", "X", FormatNumber(PlayerData[playerid][pBankMoney]), FormatNumber(PlayerData[playerid][pSavings]));
	}
	return 1;
}

Dialog:Withdraw(playerid, response, listitem, inputtext[])
{
	if (!IsPlayerInBank(playerid) && ATM_Nearest(playerid) == -1)
	return 0;

	if (response)
	{
		new amount = strval(inputtext);

		if (isnull(inputtext))
		return Dialog_Show(playerid, Withdraw, DIALOG_STYLE_INPUT, "Retrait", "Solde: $%s\n\nEntrer le montant que vous souhaitez retirer.", "Retrait", "X", FormatNumber(PlayerData[playerid][pBankMoney]));

		if (amount < 1 || amount > PlayerData[playerid][pBankMoney])
		return Dialog_Show(playerid, Withdraw, DIALOG_STYLE_INPUT, "Retrait", "Erreur: Vous n'avez pas assez d'argent\n\nVotre solde: %s\n\nEntrer le montant que vous souhaitez retirer.", "Retrait", "X", FormatNumber(PlayerData[playerid][pBankMoney]));

		PlayerData[playerid][pBankMoney] -= amount;
		GiveMoney(playerid, amount);

		SendClientMessageEx(playerid, COLOR_INFO, "Vous avez retiré %s de votre compte en banque.", FormatNumber(amount));
		Dialog_Show(playerid, Withdraw, DIALOG_STYLE_INPUT, "Retirer", "Solde: $%s\n\nEntrer le montant que vous souhaitez retirer.", "Retrait", "X", FormatNumber(PlayerData[playerid][pBankMoney]));
		
		if(!AstucesChallenges[playerid][3] && PlayerData[playerid][pAstuces])
		{
		    ValidChallenges(playerid, 3);
		    SendClientMessage(playerid, COLOR_GREEN, "Vous avez débloqué le challenge \"{33CC33}Allez retirer de l'argent à la banque ou à un ATM{FFFFFF}\". +1 point respect (/challenges)");
		}
		
	}
	else {
		Dialog_Show(playerid, BankAccount, DIALOG_STYLE_LIST, "Compte", "Retrait\nDépôt\nTransfert", "OK", "X");
	}
	return 1;
}

Dialog:Deposit(playerid, response, listitem, inputtext[])
{
	if (!IsPlayerInBank(playerid) && ATM_Nearest(playerid) == -1)
	return 0;

	if (response)
	{
		new amount = strval(inputtext);

		if (isnull(inputtext))
		return Dialog_Show(playerid, Deposit, DIALOG_STYLE_INPUT, "Deposer", "Solde: $%s\n\nEntrer le montant que vous souhaitez déposer.", "Dépot", "X", FormatNumber(PlayerData[playerid][pBankMoney]));

		if (amount < 1 || amount > GetMoney(playerid))
		return Dialog_Show(playerid, Deposit, DIALOG_STYLE_INPUT, "Deposer", "Vous n'avez pas assez.\n\nLe solde de votre compte: %s\n\nEntrer le montant que vous souhaitez déposer.", "Dépot", "X", FormatNumber(PlayerData[playerid][pBankMoney]));

		PlayerData[playerid][pBankMoney] += amount;
		GiveMoney(playerid, -amount);

		SendClientMessageEx(playerid, COLOR_INFO, "Vous avez déposer %s dans votre compte en banque.", FormatNumber(amount));
		Dialog_Show(playerid, Deposit, DIALOG_STYLE_INPUT, "Deposer", "Solde: $%s\n\nEntrer le montant que vous souhaitez déposer.", "Dépot", "X", FormatNumber(PlayerData[playerid][pBankMoney]));
	}
	else {
		Dialog_Show(playerid, BankAccount, DIALOG_STYLE_LIST, "Compte", "Retrait\nDépôt\nTransfert", "OK", "X");
	}
	return 1;
}

Dialog:SavingsWithdraw(playerid, response, listitem, inputtext[])
{
	if (!IsPlayerInBank(playerid) && ATM_Nearest(playerid) == -1)
	return 0;

	if (response)
	{
		new amount = strval(inputtext);

		if (isnull(inputtext))
		return Dialog_Show(playerid, SavingsWithdraw, DIALOG_STYLE_INPUT, "Retrait", "Vous avez sauvegarder: %s\n\nEntrer le montant que vous souhaitez retirer.", "Retrait", "X", FormatNumber(PlayerData[playerid][pSavings]));

		if (amount < 1 || amount > PlayerData[playerid][pSavings])
		return Dialog_Show(playerid, SavingsWithdraw, DIALOG_STYLE_INPUT, "Retrait", "Vous n'avez pas assez d'argent dans votre compte en banque.\n\nVous avez sauvegarder: %s\n\nEntrer le montant que vous souhaitez retirer.", "Retrait", "X", FormatNumber(PlayerData[playerid][pSavings]));

		PlayerData[playerid][pSavings] -= amount;
		GiveMoney(playerid, amount);

		SendClientMessageEx(playerid, COLOR_INFO, "Vous avez retiré %s de votre compte en banque.", FormatNumber(amount));
		Dialog_Show(playerid, SavingsWithdraw, DIALOG_STYLE_INPUT, "Retirer", "Vous avez sauvegarder: %s\n\nEntrer le montant que vous souhaitez retirer.", "Retrait", "X", FormatNumber(PlayerData[playerid][pSavings]));
	}
	else {
		Dialog_Show(playerid, Savings, DIALOG_STYLE_LIST, "Compte en banque", "Retirer\nDépôt", "OK", "X");
	}
	return 1;
}

Dialog:SavingsDeposit(playerid, response, listitem, inputtext[])
{
	if (!IsPlayerInBank(playerid) && ATM_Nearest(playerid) == -1)
	return 0;

	if (response)
	{
		new amount = strval(inputtext);

		if (isnull(inputtext))
		return Dialog_Show(playerid, SavingsDeposit, DIALOG_STYLE_INPUT, "Dépôt", "Vous avez sauvegardé: %s\n\nEntrer le montant que vous souhaitez déposer.", "Dépot", "X", FormatNumber(PlayerData[playerid][pSavings]));

		if (amount < 1 || amount > GetMoney(playerid))
		return Dialog_Show(playerid, SavingsDeposit, DIALOG_STYLE_INPUT, "Dépôt", "Vous n'avez pas assez d'argent sur vous.\n\nVous avez sauvegardé: %s\n\nEntrer le montant que vous souhaitez déposer.", "Dépot", "X", FormatNumber(PlayerData[playerid][pSavings]));

		PlayerData[playerid][pSavings] += amount;
		GiveMoney(playerid, -amount);

		SendClientMessageEx(playerid, COLOR_INFO, "Vous avez déposer %s dans votre compte.", FormatNumber(amount));
		Dialog_Show(playerid, SavingsDeposit, DIALOG_STYLE_INPUT, "Dépôt", "Vous avez sauvegardé: %s\n\nEntrer le montant que vous souhaitez déposer.", "Dépot", "X", FormatNumber(PlayerData[playerid][pSavings]));
	}
	else {
		Dialog_Show(playerid, Savings, DIALOG_STYLE_LIST, "Compte en banque", "Retirer\nDépôt", "OK", "X");
	}
	return 1;
}
Dialog:Bank(playerid, response, listitem, inputtext[])
{
	if (!IsPlayerInBank(playerid) && ATM_Nearest(playerid) == -1)
	return 0;

	if (response)
	{
		switch (listitem)
		{
			case 0:
			{
				Dialog_Show(playerid, BankAccount, DIALOG_STYLE_LIST, "Compte Bancaire", "Retrait\nDépôt\nTransfert", "OK", "X");
			}
			case 1:
			{
				Dialog_Show(playerid, Savings, DIALOG_STYLE_LIST, "Sauvegarde du compte", "Retrait\nDépôt", "OK", "X");
			}
		}
	}
	return 1;
}

Dialog:TeleportInterior(playerid, response, listitem, inputtext[])
{
	if (response)
	{
		SetPlayerInterior(playerid, g_arrInteriorData[listitem][e_InteriorID]);
		SetPlayerPos(playerid, g_arrInteriorData[listitem][e_InteriorX], g_arrInteriorData[listitem][e_InteriorY], g_arrInteriorData[listitem][e_InteriorZ]);
	}
	return 1;
}

Dialog:LeaveTest(playerid, response, listitem, inputtext[])
{
	if (response)
	{
		CancelDrivingTest(playerid);
		SendClientMessageEx(playerid, COLOR_ERROR, "Vous avez abandonné lors de l'examen, vous ne recevez pas votre permis.");
	}
	else
	{
		PutPlayerInVehicle(playerid, PlayerData[playerid][pTestCar], 0);
	}
	return 1;
}


Dialog:LeaveTest_taxi(playerid, response, listitem, inputtext[])
{
	if (response)
	{
		CancelLicenseTaxiTest(playerid);
		SendClientMessageEx(playerid, COLOR_ERROR, "Vous avez annulé le test pour votre license de taxi.");
	}
	else
	{
		PutPlayerInVehicle(playerid, PlayerData[playerid][pTestCar], 0);
	}
	return 1;
}

Dialog:Inventory(playerid, response, listitem, inputtext[])
{
	if (response)
	{
		new
		itemid = PlayerData[playerid][pInventoryItem],
		string[64];

		strunpack(string, InventoryData[playerid][itemid][invItem]);

		switch (listitem)
		{
			case 0:
			{
				CallLocalFunction("OnPlayerUseItem", "dds", playerid, itemid, string);
			}
			case 1:
			{
				PlayerData[playerid][pInventoryItem] = itemid;
				Dialog_Show(playerid, GiveItem, DIALOG_STYLE_INPUT, "Donner un objet", "Veuillez entrer le nom ou l'ID du joueur:", "Donner", "X");
			}
			case 2:
			{
				new id = -1;
				if (IsPlayerInAnyVehicle(playerid) || !IsPlayerSpawned(playerid))
				return SendClientMessageEx(playerid, COLOR_ERROR, "Vous ne pouvez pas déplacer des objets pour l'instant.");

				else if (!strcmp(string, "Sac a dos"))
				return cmd_sac(playerid, "poser");

				else if (!strcmp(string, "Permis de conduire"))
				return SendClientMessage(playerid, COLOR_ERROR, "Vous ne pouvez pas poser votre permis.");

				else if ((id = Garbage_Nearest(playerid)) != -1)
				{
					if (GarbageData[id][garbageCapacity] >= 20)
					return SendClientMessageEx(playerid, COLOR_ERROR, "Cette poubelle est pleine d'ordures.");

					GarbageData[id][garbageCapacity]++;
					Garbage_Save(id);

					Inventory_Remove(playerid, string);
					SendNearbyMessage(playerid, 15.0, COLOR_PURPLE, "%s jette un(e) \"%s\" dans la poubelle.", ReturnName(playerid), string);

					format(string, sizeof(string), "{FFFFFF}Capacité: %d/20", GarbageData[id][garbageCapacity]);
					UpdateDynamic3DTextLabelText(GarbageData[id][garbageText3D], COLOR_DEFAULT, string);
				}
				else if (InventoryData[playerid][itemid][invQuantity] == 1)
				DropPlayerItem(playerid, itemid);

				else
					Dialog_Show(playerid, DropItem, DIALOG_STYLE_INPUT, "Poser un objet", "Item: %s - Quantité: %d\n\nVeuillez spécifier la quantité de l'article que vous souhaitez déposer:", "Déposer", "X", string, InventoryData[playerid][itemid][invQuantity]);
			}
		}
	}
	return 1;
}

Dialog:DropItem(playerid, response, listitem, inputtext[])
{
	new
	itemid = PlayerData[playerid][pInventoryItem],
	string[32];

	strunpack(string, InventoryData[playerid][itemid][invItem]);

	if (response)
	{
		if (isnull(inputtext))
		return Dialog_Show(playerid, DropItem, DIALOG_STYLE_INPUT, "Poser un objet", "Item: %s - Quantité: %d\n\nVeuillez spécifier la quantité de l'article que vous souhaitez déposer:", "Déposer", "X", string, InventoryData[playerid][itemid][invQuantity]);

		if (strval(inputtext) < 1 || strval(inputtext) > InventoryData[playerid][itemid][invQuantity])
		return Dialog_Show(playerid, DropItem, DIALOG_STYLE_INPUT, "Poser un objet", "Montant invalide, veuillez ré-essayer.\n\nItem: %s - Quantité: %d\n\nVeuillez spécifier la quantité de l'article que vous souhaitez déposer:", "Déposer", "X", string, InventoryData[playerid][itemid][invQuantity]);

		DropPlayerItem(playerid, itemid, strval(inputtext));
	}
	return 1;
}

Dialog:BusinessBuy(playerid, response, listitem, inputtext[])
{
	static
	bizid = -1,
	price,
	string[64];

	if ((bizid = Business_Inside(playerid)) != -1 && response)
	{
		price = BusinessData[bizid][bizPrices][listitem];

		if (GetMoney(playerid) < price)
		return SendClientMessageEx(playerid, COLOR_ERROR, "Vous n'avez pas assez d'argent.");

		if (BusinessData[bizid][bizProducts] < 1)
		return SendClientMessageEx(playerid, COLOR_ERROR, "Cette entreprise est en rupture de stock.");

		if (BusinessData[bizid][bizType] == 1 || BusinessData[bizid][bizType] == 6)
		{
			switch (listitem)
			{
				case 0:
				{
					if (Inventory_HasItem(playerid, "Téléphone"))
					return SendClientMessageEx(playerid, COLOR_ERROR, "Vous avez déjà un téléphone portable.");

					new id = Inventory_Add(playerid, "Téléphone", 330);

					if (id == -1)
					return SendClientMessageEx(playerid, COLOR_ERROR, "Il n'y a plus de place dans votre inventaire.");

					PlayerData[playerid][pPhone] = random(90000) + 10000;

					GiveMoney(playerid, -price);

					BusinessData[bizid][bizProducts]--;
					BusinessData[bizid][bizVault] += Tax_Percent(price);

					Business_Save(bizid);
					Tax_AddPercent(price);

					format(string, sizeof(string), "Votre nouveau numéro est le: ~p~%d.", PlayerData[playerid][pPhone]);
					ShowPlayerFooter(playerid, string);

					SendClientMessageEx(playerid, COLOR_INFO, "Votre numéro de téléphone est le: %d.", PlayerData[playerid][pPhone]);
				}
				case 1:
				{
					if (Inventory_HasItem(playerid, "GPS"))
					return SendClientMessageEx(playerid, COLOR_ERROR, "Vous avez déjà un GPS.");

					new id = Inventory_Add(playerid, "GPS", 18875);

					if (id == -1)
					return SendClientMessageEx(playerid, COLOR_ERROR, "Il n'y a plus de place dans votre inventaire.");

					GiveMoney(playerid, -price);

					BusinessData[bizid][bizProducts]--;
					BusinessData[bizid][bizVault] += Tax_Percent(price);

					Business_Save(bizid);
					Tax_AddPercent(price);

					format(string, sizeof(string), "Vous avez bien acheté un GPS.");
					ShowPlayerFooter(playerid, string);
				}
				case 2:
				{
					if (Inventory_Count(playerid, "Spray Can") >= 3)
					return SendClientMessageEx(playerid, COLOR_ERROR, "Vous avez déjà 3 spray-can.");

					new id = Inventory_Add(playerid, "Spray Can", 365);

					if (id == -1)
					return SendClientMessageEx(playerid, COLOR_ERROR, "Il n'y a plus de place dans votre inventaire.");

					GiveMoney(playerid, -price);
					BusinessData[bizid][bizProducts]--;
					BusinessData[bizid][bizVault] += Tax_Percent(price);

					Business_Save(bizid);
					Tax_AddPercent(price);

					format(string, sizeof(string), "Vous avez bien acheté un Spray-can.");
					ShowPlayerFooter(playerid, string);
				}
				case 3:
				{
					if (Inventory_HasItem(playerid, "Sac a dos"))
					return SendClientMessageEx(playerid, COLOR_ERROR, "Vous avez déjà un sac a dos.");

					new id = Inventory_Add(playerid, "Sac a dos", 3026);

					if (id == -1)
					return SendClientMessageEx(playerid, COLOR_ERROR, "Il n'y a plus de place dans votre inventaire.");

					if (Backpack_Create(playerid) == -1)
					return SendClientMessageEx(playerid, COLOR_ERROR, "The server has reached the internal limit for backpacks.");

					SetAccessories(playerid);

					GiveMoney(playerid, -price);

					BusinessData[bizid][bizProducts]--;
					BusinessData[bizid][bizVault] += Tax_Percent(price);

					Business_Save(bizid);
					Tax_AddPercent(price);

					format(string, sizeof(string), "Vous avez bien acheté un sac a dos.");
					ShowPlayerFooter(playerid, string);
				}
				case 4:
				{
					if (PlayerData[playerid][pLottery])
					return SendClientMessageEx(playerid, COLOR_ERROR, "Vous avez déjà un ticket de loterie.");

					Dialog_Show(playerid, LotteryNumber, DIALOG_STYLE_INPUT, "Loterie", "Entrer un numéro de loterie entre 1 et 60.", "Choisir", "X");
				}
				case 5:
				{
					if (Inventory_HasItem(playerid, "Radio"))
					return SendClientMessageEx(playerid, COLOR_ERROR, "Vous avez déjà cette objet.");

					new id = Inventory_Add(playerid, "Radio", 18868);

					if (id == -1)
					return SendClientMessageEx(playerid, COLOR_ERROR, "Il n'y a plus de place dans votre inventaire.");

					GiveMoney(playerid, -price);

					BusinessData[bizid][bizProducts]--;
					BusinessData[bizid][bizVault] += Tax_Percent(price);

					Business_Save(bizid);
					Tax_AddPercent(price);

					format(string, sizeof(string), "Vous avez acheté une Radio.");
					ShowPlayerFooter(playerid, string);
				}
				case 6:
				{
					if (Inventory_Count(playerid, "Jerrican") >= 3)
					return SendClientMessageEx(playerid, COLOR_ERROR, "Vous avez déjà 3 Jérrican.");

					new id = Inventory_Add(playerid, "Jerrican", 1650);

					if (id == -1)
					return SendClientMessageEx(playerid, COLOR_ERROR, "Il n'y a plus de place dans votre inventaire.");

					GiveMoney(playerid, -price);

					BusinessData[bizid][bizProducts]--;
					BusinessData[bizid][bizVault] += Tax_Percent(price);

					Business_Save(bizid);
					Tax_AddPercent(price);

					format(string, sizeof(string), "Vous avez bien acheté un Jerrican.");
					ShowPlayerFooter(playerid, string);
				}
				case 7:
				{
					if (Inventory_HasItem(playerid, "Boombox"))
					return SendClientMessageEx(playerid, COLOR_ERROR, "Vous avez déjà une boombox.");

					new id = Inventory_Add(playerid, "Boombox", 2226);

					if (id == -1)
					return SendClientMessageEx(playerid, COLOR_ERROR, "Il n'y a plus de place dans votre inventaire.");

					GiveMoney(playerid, -price);

					BusinessData[bizid][bizProducts]--;
					BusinessData[bizid][bizVault] += Tax_Percent(price);

					Business_Save(bizid);
					Tax_AddPercent(price);

					format(string, sizeof(string), "Vous avez acheté une boombox.");
					ShowPlayerFooter(playerid, string);
				}
				/*case 8:
				{
					if (Inventory_HasItem(playerid, "Masque"))
					return SendClientMessageEx(playerid, COLOR_ERROR, "Vous avez déjà un masque.");

					if (PlayerData[playerid][pLevel] < 8)
					return SendClientMessageEx(playerid, COLOR_ERROR, "Vous devez être level 8 pour pouvoir acheter un masque.");

					new id = Inventory_Add(playerid, "Masque", 19036);

					if (id == -1)
					return SendClientMessageEx(playerid, COLOR_ERROR, "Il n'y a plus de place dans votre inventaire.");

					GiveMoney(playerid, -price);

					BusinessData[bizid][bizProducts]--;
					BusinessData[bizid][bizVault] += Tax_Percent(price);

					Business_Save(bizid);
					Tax_AddPercent(price);

					format(string, sizeof(string), "Vous avez acheter un Masque (/masque)");
					ShowPlayerFooter(playerid, string);
				}*/
				case 8:
				{
					if (Inventory_Count(playerid, "Caisse à outils") >= 3)
					return SendClientMessageEx(playerid, COLOR_ERROR, "Vous avez déjà 3 caisse à outils..");

					new id = Inventory_Add(playerid, "Caisse à outils", 920);

					if (id == -1)
					return SendClientMessageEx(playerid, COLOR_ERROR, "Il n'y a plus de place dans votre inventaire.");

					GiveMoney(playerid, -price);
					BusinessData[bizid][bizProducts]--;
					BusinessData[bizid][bizVault] += Tax_Percent(price);

					Business_Save(bizid);
					Tax_AddPercent(price);

					format(string, sizeof(string), "Vous avez acheté une caisse à outils.");
					ShowPlayerFooter(playerid, string);
				}
				case 9:
				{
					if (PlayerHasWeapon(playerid, 5))
					return SendClientMessageEx(playerid, COLOR_ERROR, "Vous avez déjà cet objet.");

					GiveWeaponToPlayer(playerid, 5, 1);

					GiveMoney(playerid, -price);

					BusinessData[bizid][bizProducts]--;
					BusinessData[bizid][bizVault] += Tax_Percent(price);

					Business_Save(bizid);
					Tax_AddPercent(price);

					format(string, sizeof(string), "Vous avez acheté une batte de baseball");
					ShowPlayerFooter(playerid, string);
				}
				case 10:
				{
					if (Inventory_HasItem(playerid, "Pied de biche"))
					return SendClientMessageEx(playerid, COLOR_ERROR, "Vous avez déjà un pied de biche.");

					if (PlayerData[playerid][pLevel] < 5)
					return SendClientMessageEx(playerid, COLOR_ERROR, "Vous devez être level 5 pour pouvoir acheter un pied de biche.");

					new id = Inventory_Add(playerid, "Pied de biche", 18634);

					if (id == -1)
					return SendClientMessageEx(playerid, COLOR_ERROR, "Il n'y a plus de place dans votre inventaire.");

					GiveMoney(playerid, -price);

					BusinessData[bizid][bizProducts]--;
					BusinessData[bizid][bizVault] += Tax_Percent(price);

					Business_Save(bizid);
					Tax_AddPercent(price);

					format(string, sizeof(string), "Vous avez acheté un pied de biche");
					ShowPlayerFooter(playerid, string);
				}
				case 11:
				{
					if (Inventory_HasItem(playerid, "Briquet"))
					return SendClientMessageEx(playerid, COLOR_ERROR, "Vous avez déjà un briquet.");

					new id = Inventory_Add(playerid, "Briquet", 19998);

					if (id == -1)
					return SendClientMessageEx(playerid, COLOR_ERROR, "Il n'y a plus de place dans votre inventaire.");

					GiveMoney(playerid, -price);

					BusinessData[bizid][bizProducts]--;
					BusinessData[bizid][bizVault] += Tax_Percent(price);

					Business_Save(bizid);
					Tax_AddPercent(price);

					format(string, sizeof(string), "Vous avez acheté un briquet");
					ShowPlayerFooter(playerid, string);
				}
				case 12:
				{
					if (PlayerData[playerid][pAnnuary])
					return SendClientMessageEx(playerid, COLOR_ERROR, "Vous avez déjà un annuaire.");

					PlayerData[playerid][pAnnuary] = true;

					GiveMoney(playerid, -price);

					BusinessData[bizid][bizProducts]--;
					BusinessData[bizid][bizVault] += Tax_Percent(price);

					Business_Save(bizid);
					Tax_AddPercent(price);

					format(string, sizeof(string), "Vous avez acheté un annuaire");
					ShowPlayerFooter(playerid, string);
				}
			}
		}
		else if (BusinessData[bizid][bizType] == 2)
		{
		    new
		        weapons[2];
		        
			switch (listitem)
			{
				case 0:
				{
					if (!Inventory_HasItem(playerid, "Permis d'arme"))
					return SendClientMessageEx(playerid, COLOR_ERROR, "Ce magasin vend uniquement aux personnes possédant une licence d'arme.");

					if (Inventory_Count(playerid, "Munitions") >= 10)
					return SendClientMessageEx(playerid, COLOR_ERROR, "Vous disposez déjà de 10 cartouches de munitions, vous ne pouvez plus en acheter.");

					new id = Inventory_Add(playerid, "Munitions", 2358);

					if (id == -1)
					return SendClientMessageEx(playerid, COLOR_ERROR, "Il n'y a plus de place dans votre inventaire.");

					GiveMoney(playerid, -price);
					SendNearbyMessage(playerid, 15.0, COLOR_PURPLE, "%s achète des munitions pour la somme de %s.", ReturnName(playerid, 1), FormatNumber(price));

					BusinessData[bizid][bizProducts]--;
					BusinessData[bizid][bizVault] += Tax_Percent(price);

					Business_Save(bizid);
					Tax_AddPercent(price);
				}
				case 1:
				{
					if (!Inventory_HasItem(playerid, "Permis d'arme"))
					return SendClientMessageEx(playerid, COLOR_ERROR, "Ce magasin vend uniquement aux personnes possédant une licence d'arme.");

					if (Inventory_Count(playerid, "Gilet pare balle") >= 1)
					return SendClientMessageEx(playerid, COLOR_ERROR, "Vous avez déjà un gilet pare balle, vous ne pouvez plus acheter.");

					new id = Inventory_Add(playerid, "Gilet pare balle", 19142);

					if (id == -1)
					return SendClientMessageEx(playerid, COLOR_ERROR, "Il n'y a plus de place dans votre inventaire.");

					GiveMoney(playerid, -price);
					SendNearbyMessage(playerid, 15.0, COLOR_PURPLE, "%s achète un gilet pare balle pour la somme de %s.", ReturnName(playerid, 1), FormatNumber(price));
					SendClientMessage(playerid, COLOR_USAGE, "Utilisez \"/gilet\" pour récuperer le gilet pare-balle dans votre inventaire.");

					BusinessData[bizid][bizProducts]--;
					BusinessData[bizid][bizVault] += Tax_Percent(price);

					Business_Save(bizid);
					Tax_AddPercent(price);
				}
				case 2:
				{
					if (!Inventory_HasItem(playerid, "Permis d'arme"))
					return SendClientMessageEx(playerid, COLOR_ERROR, "Ce magasin vend uniquement aux personnes possédant une licence d'arme.");

					if (PlayerData[playerid][pLevel] < 2)
					return SendClientMessageEx(playerid, COLOR_ERROR, "Vous devez être level 2 pour acheter cette arme.");


					GetPlayerWeaponData(playerid, g_aWeaponSlots[24], weapons[0], weapons[1]);
					
                    if(weapons[0] != 0 && weapons[1] >= 1)
                    return SendClientMessage(playerid, COLOR_ERROR, "Vous avez déjà une arme de ce type sur vous.");

					GiveWeaponToPlayer(playerid, 24, 25);

					GiveMoney(playerid, -price);
					SendNearbyMessage(playerid, 15.0, COLOR_PURPLE, "%s achète un Desert Eagle pour la somme de %s.", ReturnName(playerid, 1), FormatNumber(price));

					BusinessData[bizid][bizProducts]--;
					BusinessData[bizid][bizVault] += Tax_Percent(price);

					Business_Save(bizid);
					Tax_AddPercent(price);
				}
				case 3:
				{
					if (!Inventory_HasItem(playerid, "Permis d'arme"))
					return SendClientMessageEx(playerid, COLOR_ERROR, "Une licence d'arme est nécessaire pour acheter dans ce magasin.");

					if (PlayerData[playerid][pLevel] < 2)
					return SendClientMessageEx(playerid, COLOR_ERROR, "Vous devez être level 2 pour acheter cette arme.");

					GetPlayerWeaponData(playerid, g_aWeaponSlots[25], weapons[0], weapons[1]);

                    if(weapons[0] != 0 && weapons[1] >= 1)
                    return SendClientMessage(playerid, COLOR_ERROR, "Vous avez déjà une arme de ce type sur vous.");

					GiveWeaponToPlayer(playerid, 25, 15);

					GiveMoney(playerid, -price);
					SendNearbyMessage(playerid, 15.0, COLOR_PURPLE, "%s achète un Shotgun pour la somme de %s.", ReturnName(playerid, 1), FormatNumber(price));

					BusinessData[bizid][bizProducts]--;
					BusinessData[bizid][bizVault] += Tax_Percent(price);

					Business_Save(bizid);
					Tax_AddPercent(price);
				}
				case 4:
				{
					if (!Inventory_HasItem(playerid, "Permis d'arme"))
					return SendClientMessageEx(playerid, COLOR_ERROR, "Une licence d'arme est nécessaire pour acheter sur ce site.");

					if (PlayerData[playerid][pLevel] < 5)
					return SendClientMessageEx(playerid, COLOR_ERROR, "Vous devez être level 5 pour acheter cette arme.");

					GetPlayerWeaponData(playerid, g_aWeaponSlots[33], weapons[0], weapons[1]);

                    if(weapons[0] != 0 && weapons[1] >= 1)
                    return SendClientMessage(playerid, COLOR_ERROR, "Vous avez déjà une arme de ce type sur vous.");

					GiveWeaponToPlayer(playerid, 33, 10);

					GiveMoney(playerid, -price);
					SendNearbyMessage(playerid, 15.0, COLOR_PURPLE, "%s achète un Rifle pour la somme de %s.", ReturnName(playerid, 1), FormatNumber(price));

					BusinessData[bizid][bizProducts]--;
					BusinessData[bizid][bizVault] += Tax_Percent(price);

					Business_Save(bizid);
					Tax_AddPercent(price);
				}
			}
		}
		else if (BusinessData[bizid][bizType] == 3)
		{
			switch (listitem)
			{
				case 0:
				{
					PlayerData[playerid][pClothesType] = 1;

					switch (PlayerData[playerid][pGender])
					{
						case 1:
							ShowModelSelectionMenu(playerid, "Skins", MODEL_SELECTION_CLOTHES, g_aMaleSkins, sizeof(g_aMaleSkins), -16.0, 0.0, -55.0);

						case 2:
							ShowModelSelectionMenu(playerid, "Skins", MODEL_SELECTION_CLOTHES, g_aFemaleSkins, sizeof(g_aFemaleSkins), -16.0, 0.0, -55.0);
					}
				}
				case 1:
				{
					PlayerData[playerid][pClothesType] = 2;
					ShowModelSelectionMenu(playerid, "Lunettes", MODEL_SELECTION_CLOTHES, {19006, 19007, 19008, 19009, 19010, 19011, 19012, 19013, 19014, 19015, 19016, 19017, 19018, 19019, 19020, 19021, 19022, 19023, 19024, 19025, 19026, 19027, 19028, 19029, 19030, 19031, 19032, 19033, 19034, 19035}, 30, 0.0, 0.0, 90.0);
				}
				case 2:
				{
					PlayerData[playerid][pClothesType] = 3;
					ShowModelSelectionMenu(playerid, "Chapeaux", MODEL_SELECTION_CLOTHES, {18926, 18927, 18928, 18929, 18930, 18931, 18932, 18933, 18934, 18935, 18944, 18945, 18946, 18947, 18948, 18949, 18950, 18951, 18926, 18961, 18939, 18940, 18941, 18942, 18943, 19472}, 18, -20.0, -90.0, 0.0);
				}
				case 3:
				{
					PlayerData[playerid][pClothesType] = 4;
					ShowModelSelectionMenu(playerid, "Bandanas", MODEL_SELECTION_CLOTHES, {18911, 18912, 18913, 18914, 18915, 18916, 18917, 18918, 18919, 18920, 18891, 18892, 18893, 18894, 18895, 18896, 18897, 18898, 18899, 18900, 18901, 18902, 18903, 18904, 18905}, 10, 80.0, -173.0, 0.0);
				}
			}
		}
		else if (BusinessData[bizid][bizType] == 4)
		{
			new Float:health;
			GetPlayerHealth(playerid,health);
			switch (listitem)
			{
				case 0:
				{

					GiveMoney(playerid, -price);
					SendNearbyMessage(playerid, 15.0, COLOR_PURPLE, "%s paye la somme de %s pour une bouteille d'eau.", ReturnName(playerid, 1), FormatNumber(price));

					BusinessData[bizid][bizProducts]--;
					BusinessData[bizid][bizVault] += Tax_Percent(price);
					SetPlayerHealth(playerid, health+10);
					Business_Save(bizid);
					Tax_AddPercent(price);
					if(health >= 90){
					SetPlayerHealth(playerid,100);
					}
					else SetPlayerHealth(playerid, health+10);
				}
				case 1:
				{

					GiveMoney(playerid, -price);
					SendNearbyMessage(playerid, 15.0, COLOR_PURPLE, "%s paye la somme de %s pour un soda.", ReturnName(playerid, 1), FormatNumber(price));

					BusinessData[bizid][bizProducts]--;
					BusinessData[bizid][bizVault] += Tax_Percent(price);
					SetPlayerHealth(playerid, health+20);
					Business_Save(bizid);
					Tax_AddPercent(price);
					if(health >= 80){
					SetPlayerHealth(playerid,100);
					}
					else SetPlayerHealth(playerid, health+20);
				}
				case 2:
				{


					GiveMoney(playerid, -price);
					SendNearbyMessage(playerid, 15.0, COLOR_PURPLE, "%s paye la somme de %s pour une barquette de frites.", ReturnName(playerid, 1), FormatNumber(price));

					BusinessData[bizid][bizProducts]--;
					BusinessData[bizid][bizVault] += Tax_Percent(price);
					SetPlayerHealth(playerid, health+30);
					Business_Save(bizid);
					Tax_AddPercent(price);
					if(health >= 70){
					SetPlayerHealth(playerid,100);
					}
					else SetPlayerHealth(playerid, health+30);
				}
				case 3:
				{

					GiveMoney(playerid, -price);
					SendNearbyMessage(playerid, 15.0, COLOR_PURPLE, "%s paye la somme de %s pour un cheeseburger.", ReturnName(playerid, 1), FormatNumber(price));

					BusinessData[bizid][bizProducts]--;
					BusinessData[bizid][bizVault] += Tax_Percent(price);
					SetPlayerHealth(playerid, health+40);
					Business_Save(bizid);
					Tax_AddPercent(price);
					if(health >= 60){
					SetPlayerHealth(playerid,100);
					}
					else SetPlayerHealth(playerid, health+40);
				}
				case 4:
				{

					GiveMoney(playerid, -price);
					SendNearbyMessage(playerid, 15.0, COLOR_PURPLE, "%s paye la somme de %s pour un burger.", ReturnName(playerid, 1), FormatNumber(price));

					BusinessData[bizid][bizProducts]--;
					BusinessData[bizid][bizVault] += Tax_Percent(price);
					Business_Save(bizid);
					Tax_AddPercent(price);
					if(health >= 50){
					SetPlayerHealth(playerid,100);
					}
					else SetPlayerHealth(playerid, health+50);
				}
				case 5:
				{
					GiveMoney(playerid, -price);
					SendNearbyMessage(playerid, 15.0, COLOR_PURPLE, "%s paye la somme de %s pour des nuggets.", ReturnName(playerid, 1), FormatNumber(price));

					BusinessData[bizid][bizProducts]--;
					BusinessData[bizid][bizVault] += Tax_Percent(price);
					SetPlayerHealth(playerid, health+60);
					Business_Save(bizid);
					Tax_AddPercent(price);
					if(health >= 40){
					SetPlayerHealth(playerid,100);
					}
					else SetPlayerHealth(playerid, health+60);
				}
				case 6:
				{
					GiveMoney(playerid, -price);
					SendNearbyMessage(playerid, 15.0, COLOR_PURPLE, "%s paye la somme de %s pour une salade.", ReturnName(playerid, 1), FormatNumber(price));

					BusinessData[bizid][bizProducts]--;
					BusinessData[bizid][bizVault] += Tax_Percent(price);
					SetPlayerHealth(playerid, health+70);
					Business_Save(bizid);
					Tax_AddPercent(price);
					if(health >= 30){
					SetPlayerHealth(playerid,100);
					}
					else SetPlayerHealth(playerid, health+70);
				}
			}
		}
	}
	return 1;
}
Dialog:FurnituresBuy(playerid, response, listitem, inputtext[])
{
	if(!response) return 1;
	
	new
	items[50] = {-1, ...},
	count;

	for (new i = 0; i < sizeof(g_aFurnitureData); i ++) if (g_aFurnitureData[i][e_FurnitureType] == listitem + 1) {
		items[count++] = g_aFurnitureData[i][e_FurnitureModel];
	}
	PlayerData[playerid][pFurnitureType] = listitem;

	if (listitem == 3) {
		ShowModelSelectionMenu(playerid, "Fourniture", MODEL_SELECTION_FURNITURE, items, count, -12.0, 0.0, 0.0);
	}
	else {
		ShowModelSelectionMenu(playerid, "Fourniture", MODEL_SELECTION_FURNITURE, items, count);
	}
	return 1;
}

Dialog:LotteryNumber(playerid, response, listitem, inputtext[])
{
	if (response)
	{
		new bizid = Business_Inside(playerid);

		if (bizid != -1)
		{
			if (isnull(inputtext) || (strval(inputtext) < 1 || strval(inputtext) > 60)) {
				return Dialog_Show(playerid, LotteryNumber, DIALOG_STYLE_INPUT, "Lotto", "Veuillez entrez votre numéro de loterie ci-dessous (entre 1-60):", "Entrer", "X");
			}
			PlayerData[playerid][pLottery] = strval(inputtext);
			PlayerData[playerid][pLotteryB] = 1;

			GiveMoney(playerid, -BusinessData[bizid][bizPrices][6]);
			SendNearbyMessage(playerid, 15.0, COLOR_PURPLE, "%s achète un ticket de lotterie pour la somme de %s.", ReturnName(playerid, 1), FormatNumber(BusinessData[bizid][bizPrices][6]));

			BusinessData[bizid][bizProducts]--;
			BusinessData[bizid][bizVault] += Tax_Percent(BusinessData[bizid][bizPrices][6]);

			Business_Save(bizid);
			Tax_AddPercent(BusinessData[bizid][bizPrices][6]);
		}
	}
	return 1;
}

Dialog:EditProduct(playerid, response, listitem, inputtext[])
{
	static
	bizid = -1;

	if (((bizid = Business_Inside(playerid)) != -1 && Business_IsOwner(playerid, bizid)) || (PlayerData[playerid][pAdmin] >= 5))
	{
		if (response)
		{
			static
			item[24];

			strmid(item, inputtext, 0, strfind(inputtext, "-") - 1);
			format(PlayerData[playerid][pEditingItem], 32, item);

			PlayerData[playerid][pProductModify] = listitem;
			Dialog_Show(playerid, PriceSet, DIALOG_STYLE_INPUT, "Modification", "Veuillez entrer le nouveau prix du produit pour \"%s (%s)\":", "Modifier", "X", item, inputtext);
		}
	}
	return 1;
}

Dialog:PriceSet(playerid, response, listitem, inputtext[])
{
	static
	bizid = -1,
	item[32];

	if (((bizid = Business_Inside(playerid)) != -1 && Business_IsOwner(playerid, bizid)) || (PlayerData[playerid][pAdmin] >= 5))
	{
		if (response)
		{
			format(item, 32, PlayerData[playerid][pEditingItem]);

			if (isnull(inputtext))
			return Dialog_Show(playerid, PriceSet, DIALOG_STYLE_INPUT, "Modification", "Veuillez entrer le nouveau prix du produit pour \"%s\":", "Modifier", "X", item);

			if (strval(inputtext) < 1)
			return Dialog_Show(playerid, PriceSet, DIALOG_STYLE_INPUT, "Modification", "Veuillez entrer le nouveau prix du produit pour \"%s\" (minimum 1$)", "Modifier", "X", item);

			BusinessData[bizid][bizPrices][PlayerData[playerid][pProductModify]] = strval(inputtext);
			Business_Save(bizid);

			SendClientMessageEx(playerid, COLOR_INFO, "Vous avez fixé le prix du \"%s\" à: %s!", item, FormatNumber(strval(inputtext)));
			Business_ProductMenu(playerid, bizid);
		}
		else
		{
			Business_ProductMenu(playerid, bizid);
		}
	}
	return 1;
}

Dialog:CarDeposit(playerid, response, listitem, inputtext[])
{
	static
	carid = -1,
	string[32];

	if ((carid = Car_Nearest(playerid)) != -1 && !CarData[carid][carLocked])
	{
		strunpack(string, InventoryData[playerid][PlayerData[playerid][pInventoryItem]][invItem]);

		if (response)
		{
			new amount = strval(inputtext);

			if (amount < 1 || amount > InventoryData[playerid][PlayerData[playerid][pInventoryItem]][invQuantity])
			return Dialog_Show(playerid, CarDeposit, DIALOG_STYLE_INPUT, "Coffre", "Objet: %s (Quantité: %d)\n\nVeuillez entrer la quantité que vous souhaitez déposer:", "Déposer", "X", string, InventoryData[playerid][PlayerData[playerid][pInventoryItem]][invQuantity]);

			Car_AddItem(carid, string, InventoryData[playerid][PlayerData[playerid][pInventoryItem]][invModel], amount);
			Inventory_Remove(playerid, string, amount);

			SendNearbyMessage(playerid, 15.0, COLOR_PURPLE, "%s dépose un(e) \"%s\" du coffre du véhicule.", ReturnName(playerid, 1), string);
			Car_ShowTrunk(playerid, carid);
		}
		else Car_ShowTrunk(playerid, carid);
	}
	return 1;
}

Dialog:CarTake(playerid, response, listitem, inputtext[])
{
	static
	carid = -1,
	string[32];

	if ((carid = Car_Nearest(playerid)) != -1 && !CarData[carid][carLocked])
	{
		strunpack(string, CarStorage[carid][PlayerData[playerid][pStorageItem]][cItemName]);

		if (response)
		{
			new amount = strval(inputtext);

			if (amount < 1 || amount > CarStorage[carid][PlayerData[playerid][pStorageItem]][cItemQuantity])
			return Dialog_Show(playerid, CarTake, DIALOG_STYLE_INPUT, "Coffre", "Item: %s (Quantité: %d)\n\nVeuillez entrer la quantité que vous souhaitez prendre:", "Prendre", "X", string, CarStorage[carid][PlayerData[playerid][pInventoryItem]][cItemQuantity]);

			new id = Inventory_Add(playerid, string, CarStorage[carid][PlayerData[playerid][pStorageItem]][cItemModel], amount);

			if (id == -1)
			return SendClientMessageEx(playerid, COLOR_ERROR, "Il n'y a plus de place dans votre inventaire.");

			Car_RemoveItem(carid, string, amount);

			SendNearbyMessage(playerid, 15.0, COLOR_PURPLE, "%s prend un(e) \"%s\" du coffre du véhicule.", ReturnName(playerid, 1), string);
			Car_ShowTrunk(playerid, carid);
		}
		else Car_ShowTrunk(playerid, carid);
	}
	return 1;
}

Dialog:CarStorage(playerid, response, listitem, inputtext[])
{
	static
	carid = -1,
	string[64];

	if ((carid = Car_Nearest(playerid)) != -1 && !CarData[carid][carLocked])
	{
		if (response)
		{
			if (listitem == MAX_CAR_STORAGE) {
				Car_WeaponStorage(playerid, carid);
			}
			else if(listitem == MAX_CAR_STORAGE+1)
			{
			    new
			        corpseid;
			        
			    if((corpseid = Corpse_Car(carid)) == -1)
			    { // IL Y A AUCUN CADAVRE DANS LE VEHICULE
				    if(PlayerData[playerid][pTakeCorpse] == -1)
				        return SendClientMessage(playerid, COLOR_ERROR, "Vous devez avoir un cadavre dans les mains. {FFFFFF}(/cadavre porter)");

					corpseid = PlayerData[playerid][pTakeCorpse];
					    
					CorpseData[corpseid][corpseCar] = carid;
					PlayerData[playerid][pTakeCorpse] = -1;
					
					if(IsPlayerAttachedObjectSlotUsed(playerid, 9)) RemovePlayerAttachedObject(playerid, 9);
                    
					SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
                    
					SendClientMessage(playerid, COLOR_INFO, "Vous avez poser le cadavre dans le coffre.");
			    }
			    else
			    { // IL Y A 1 CADAVRE DANS LE COFFRE
				    if(PlayerData[playerid][pTakeCorpse] != -1)
				        return SendClientMessage(playerid, COLOR_ERROR, "Vous avez déjà un cadavre dans les mains, allez le poser. {FFFFFF}(/cadavre poser)");

					new
					    Float:pos[3];
					
					GetPlayerPos(playerid, pos[0], pos[1], pos[2]);
					
					SetPlayerAttachedObject(playerid, 9, 2907, 5, 0.1, 0.1, 0.2, 90.0, 0.0, 180.0);
				    
				    PlayerData[playerid][pTakeCorpse] = corpseid;
				    CorpseData[corpseid][corpseCar] = INVALID_VEHICLE_ID;
				    
				    ApplyAnimation(playerid, "CARRY", "liftup", 4.1, 0, 0, 0, 0, 0, 1);
					SetPlayerSpecialAction(playerid, SPECIAL_ACTION_CARRY);
					
					SendClientMessage(playerid, COLOR_INFO, "Vous avez récuperer le cadavre dans le coffre.");
				}
			}
			else if(listitem == MAX_CAR_STORAGE+2)
			{
		    	static
					string2[512];

				string2[0] = '\0';
				
				printf("carid: %d | carVehicle: %d | IsLoadable: %d | IsPlayerNear: %d", carid, CarData[carid][carVehicle], IsLoadableVehicle(CarData[carid][carVehicle]), IsPlayerNearBoot(playerid, CarData[carid][carVehicle]));

				if (IsLoadableVehicle(CarData[carid][carVehicle]) && IsPlayerNearBoot(playerid, CarData[carid][carVehicle]))
				{
					if (GetVehicleCrates(CarData[carid][carVehicle]) < 1)
					return SendClientMessageEx(playerid, COLOR_ERROR, "Il n'y a pas de caisses dans ce véhicule.");

					for (new j = 0; j != MAX_CRATES; j ++) if (CrateData[j][crateExists] && CrateData[j][crateVehicle] == CarData[carid][carVehicle]) {
						format(string2, sizeof(string2), "%sCaisse #%d: %s\n", string2, j, Crate_GetType(CrateData[j][crateType]));
					}
					return Dialog_Show(playerid, Crates, DIALOG_STYLE_LIST, "Coffre - Stockage de caisse", string2, "Prendre", "X");
				}
				SendClientMessageEx(playerid, COLOR_ERROR, "Vous n'êtes pas à portée du coffre d'un véhicule chargeable.");
			}
			else if(listitem == MAX_CAR_STORAGE+3)
			{
			    new
			        string2[500],
					count = 0;

				for(new i=0; i<5; i++) if(CarData[carid][carMine][i] != -1)
				{
				    count++;
					format(string2, sizeof(string2), "%s{FFFFFF}- {%06x}%s\n", string2, OreData[ MineData[ CarData[carid][carMine][i] ][mineType] ][Color] >>> 8, OreData[ MineData[ CarData[carid][carMine][i] ][mineType] ][Name]);
				}
				if(count == 0) return SendClientMessage(playerid, COLOR_ERROR, "Il n'y a aucun minerais dans le coffre.");

				ShowPlayerDialog(playerid, 9999, DIALOG_STYLE_LIST, "Coffre - Liste des minerais", string2, "Ok", "X");
			}
			else if (CarStorage[carid][listitem][cItemExists])
			{
				PlayerData[playerid][pStorageItem] = listitem;
				PlayerData[playerid][pInventoryItem] = listitem;

				strunpack(string, CarStorage[carid][listitem][cItemName]);

				format(string, sizeof(string), "%s (Quantité: %d)", string, CarStorage[carid][listitem][cItemQuantity]);
				Dialog_Show(playerid, TrunkOptions, DIALOG_STYLE_LIST, string, "Prendre\nDéposer", "Ok", "X");
			}
			else {
				OpenInventory(playerid);

				PlayerData[playerid][pStorageSelect] = 2;
			}
		}
	}
	return 1;
}

Dialog:TrunkOptions(playerid, response, listitem, inputtext[])
{
	static
	carid = -1,
	itemid = -1,
	backpack = -1,
	string[32];

	if ((carid = Car_Nearest(playerid)) != -1 && !CarData[carid][carLocked])
	{
		itemid = PlayerData[playerid][pStorageItem];

		strunpack(string, CarStorage[carid][itemid][cItemName]);

		if (response)
		{
			switch (listitem)
			{
				case 0:
				{
					if (CarStorage[carid][itemid][cItemQuantity] == 1)
					{
						if (!strcmp(string, "Sac a dos") && Inventory_HasItem(playerid, "Sac a dos"))
						return SendClientMessageEx(playerid, COLOR_ERROR, "Vous avez déjà un sac dans votre inventaire.");

						new id = Inventory_Add(playerid, string, CarStorage[carid][itemid][cItemModel], 1);

						if (id == -1)
						return SendClientMessageEx(playerid, COLOR_ERROR, "Il n'y a plus de place dans votre inventaire.");

						if (!strcmp(string, "Sac a dos") && (backpack = GetVehicleBackpack(carid)) != -1)
						{
							BackpackData[backpack][backpackVehicle] = 0;
							BackpackData[backpack][backpackPlayer] = PlayerData[playerid][pID];

							Backpack_Save(backpack);
							SetAccessories(playerid);
						}
						Car_RemoveItem(carid, string);

						SendNearbyMessage(playerid, 15.0, COLOR_PURPLE, "%s a pris un(e) \"%s\" dans le coffre du véhicule.", ReturnName(playerid, 1), string);
						Car_ShowTrunk(playerid, carid);
					}
					else
					{
						Dialog_Show(playerid, CarTake, DIALOG_STYLE_INPUT, "Coffre du véhicule", "Item: %s (Quantité: %d)\n\nEntrer la quantité que vous voulez prendre:", "Prendre", "X", string, CarStorage[carid][itemid][cItemQuantity]);
					}
				}
				case 1:
				{
					new id = Inventory_GetItemID(playerid, string);

					if (!strcmp(string, "Sac a dos")) {
						Car_ShowTrunk(playerid, carid);

						return SendClientMessageEx(playerid, COLOR_ERROR, "Vous ne pouvez pas placer de sac à dos dans le coffre.");
					}
					else if (id == -1) {
						Car_ShowTrunk(playerid, carid);

						return SendClientMessageEx(playerid, COLOR_ERROR, "Il n'y a plus d'item à cette endroit.");
					}
					else if (InventoryData[playerid][id][invQuantity] == 1)
					{
						Car_AddItem(carid, string, InventoryData[playerid][id][invModel], 1);
						Inventory_Remove(playerid, string);

						SendNearbyMessage(playerid, 15.0, COLOR_PURPLE, "%s dépose un(e) \"%s\" dans le coffre du véhicule.", ReturnName(playerid, 1), string);
						Car_ShowTrunk(playerid, carid);
					}
					else if (InventoryData[playerid][id][invQuantity] > 1) {
						PlayerData[playerid][pInventoryItem] = id;

						Dialog_Show(playerid, CarDeposit, DIALOG_STYLE_INPUT, "Coffre du véhicule", "Item: %s (Quantiter: %d)\n\nEntrer le montant que vous voulez entrer:", "Déposer", "X", string, InventoryData[playerid][id][invQuantity]);
					}
				}
			}
		}
		else
		{
			Car_ShowTrunk(playerid, carid);
		}
	}
	return 1;
}

Dialog:HouseWeapons(playerid, response, listitem, inputtext[])
{
	static
	houseid = -1;

	if ((houseid = House_Inside(playerid)) != -1 && (House_IsOwner(playerid, houseid) || GetFactionType(playerid) == FACTION_POLICE))
	{
		if (response)
		{
			if (HouseData[houseid][houseWeapons][listitem] != 0)
			{
				GiveWeaponToPlayer(playerid, HouseData[houseid][houseWeapons][listitem], HouseData[houseid][houseAmmo][listitem]);

				SendNearbyMessage(playerid, 15.0, COLOR_PURPLE, "%s a pris un(e) \"%s\" dans le coffre maison.", ReturnName(playerid, 1), ReturnWeaponName(HouseData[houseid][houseWeapons][listitem]));
				Log_Write("logs/storage_log.txt", "[%s] %s has taken a \"%s\" from house ID: %d (owner: %s).", ReturnDate(), ReturnName(playerid), ReturnWeaponName(HouseData[houseid][houseWeapons][listitem]), HouseData[houseid][houseID], (House_IsOwner(playerid, houseid)) ? ("Oui") : ("Non"));

				HouseData[houseid][houseWeapons][listitem] = 0;
				HouseData[houseid][houseAmmo][listitem] = 0;

				House_Save(houseid);
				House_WeaponStorage(playerid, houseid);
			}
			else
			{
				new
				weaponid = GetWeapon(playerid),
				ammo = GetPlayerAmmo(playerid);

				if (!weaponid)
				return SendClientMessageEx(playerid, COLOR_ERROR, "Vous n'avez pas d'arme en main.");

				if (weaponid == 23 && PlayerData[playerid][pTazer])
				return SendClientMessageEx(playerid, COLOR_ERROR, "Vous ne pouvez pas poser de tazer dans votre coffre maison.");

				if (weaponid == 25 && PlayerData[playerid][pBeanBag])
				return SendClientMessageEx(playerid, COLOR_ERROR, "Vous ne pouvez pas poser un flashball dans votre coffre maison.");

				ResetWeapon(playerid, weaponid);
				SendNearbyMessage(playerid, 15.0, COLOR_PURPLE, "%s dépose un(e) \"%s\" dans le coffre maison.", ReturnName(playerid, 1), ReturnWeaponName(weaponid));

				HouseData[houseid][houseWeapons][listitem] = weaponid;
				HouseData[houseid][houseAmmo][listitem] = ammo;

				House_Save(houseid);
				House_WeaponStorage(playerid, houseid);
			}
		}
		else
		{
			House_OpenStorage(playerid, houseid);
		}
	}
	return 1;
}

Dialog:HouseDeposit(playerid, response, listitem, inputtext[])
{
	static
	houseid = -1,
	string[32];

	if ((houseid = House_Inside(playerid)) != -1 && (House_IsOwner(playerid, houseid) || GetFactionType(playerid) == FACTION_POLICE))
	{
		strunpack(string, InventoryData[playerid][PlayerData[playerid][pInventoryItem]][invItem]);

		if (response)
		{
			new amount = strval(inputtext);

			if (amount < 1 || amount > InventoryData[playerid][PlayerData[playerid][pInventoryItem]][invQuantity])
			return Dialog_Show(playerid, HouseDeposit, DIALOG_STYLE_INPUT, "Maison", "Item: %s (Quantité: %d)\n\nEntrer le montant que vous voulez déposer:", "Déposer", "X", string, InventoryData[playerid][PlayerData[playerid][pInventoryItem]][invQuantity]);

			House_AddItem(houseid, string, InventoryData[playerid][PlayerData[playerid][pInventoryItem]][invModel], amount);
			Inventory_Remove(playerid, string, amount);

			SendNearbyMessage(playerid, 15.0, COLOR_PURPLE, "%s a déposé un(e) \"%s\" dans son coffre maison", ReturnName(playerid, 1), string);
			House_ShowItems(playerid, houseid);
		}
		else House_OpenStorage(playerid, houseid);
	}
	return 1;
}

Dialog:HouseTake(playerid, response, listitem, inputtext[])
{
	static
	houseid = -1,
	string[32];

	if ((houseid = House_Inside(playerid)) != -1 && (House_IsOwner(playerid, houseid) || GetFactionType(playerid) == FACTION_POLICE))
	{
		strunpack(string, HouseStorage[houseid][PlayerData[playerid][pStorageItem]][hItemName]);

		if (response)
		{
			new amount = strval(inputtext);

			if (amount < 1 || amount > HouseStorage[houseid][PlayerData[playerid][pStorageItem]][hItemQuantity])
			return Dialog_Show(playerid, HouseTake, DIALOG_STYLE_INPUT, "Coffre maison", "Item: %s (Quantité: %d)\n\nVeuillez entrer la quantité que vous souhaitez prendre.", "Prendre", "X", string, HouseStorage[houseid][PlayerData[playerid][pInventoryItem]][hItemQuantity]);

			new id = Inventory_Add(playerid, string, HouseStorage[houseid][PlayerData[playerid][pStorageItem]][hItemModel], amount);

			if (id == -1)
			return SendClientMessageEx(playerid, COLOR_ERROR, "Il n'y a plus de place dans votre inventaire.");

			House_RemoveItem(houseid, string, amount);
			SendNearbyMessage(playerid, 15.0, COLOR_PURPLE, "%s prend un(e) \"%s\" dans le coffre maison.", ReturnName(playerid, 1), string);

			House_ShowItems(playerid, houseid);
			Log_Write("logs/storage_log.txt", "[%s] %s has taken %d \"%s\" from house ID: %d (owner: %s).", ReturnDate(), ReturnName(playerid), amount, string, HouseData[houseid][houseID], (House_IsOwner(playerid, houseid)) ? ("Oui") : ("Non"));
		}
		else House_OpenStorage(playerid, houseid);
	}
	return 1;
}

Dialog:HouseWithdrawCash(playerid, response, listitem, inputtext[])
{
	static
	houseid = -1;

	if ((houseid = House_Inside(playerid)) != -1 && House_IsOwner(playerid, houseid))
	{
		if (response)
		{
			new amount = strval(inputtext);

			if (isnull(inputtext))
			return Dialog_Show(playerid, HouseWithdrawCash, DIALOG_STYLE_INPUT, "Coffre maison", "Balance: %s\n\nEntrer le montant que vous souhaitez retirer:", "Retrait", "X", FormatNumber(HouseData[houseid][houseMoney]));

			if (amount < 1 || amount > HouseData[houseid][houseMoney])
			return Dialog_Show(playerid, HouseWithdrawCash, DIALOG_STYLE_INPUT, "Coffre maison", "Fonds insuffisant.\n\nBalance: %s\n\nEntrer le montant que vous souhaitez retirer:", "Retrait", "X", FormatNumber(HouseData[houseid][houseMoney]));

			HouseData[houseid][houseMoney] -= amount;
			GiveMoney(playerid, amount);

			House_Save(houseid);
			House_OpenStorage(playerid, houseid);

			SendClientMessageEx(playerid, COLOR_GREY, "Vous avez retiré %s du coffre de votre maison.", FormatNumber(amount));
		}
		else Dialog_Show(playerid, HouseMoney, DIALOG_STYLE_LIST, "Coffre maison", "Retrait\nDépôt", "Ok", "X");
	}
	return 1;
}

Dialog:HouseDepositCash(playerid, response, listitem, inputtext[])
{
	static
	houseid = -1;

	if ((houseid = House_Inside(playerid)) != -1 && House_IsOwner(playerid, houseid))
	{
		if (response)
		{
			new amount = strval(inputtext);

			if (isnull(inputtext))
			return Dialog_Show(playerid, HouseDepositCash, DIALOG_STYLE_INPUT, "Coffre maison", "Balance: %s\n\nEntrer le montant que vous souhaitez retirer:", "Retrait", "X", FormatNumber(HouseData[houseid][houseMoney]));

			if (amount < 1 || amount > GetMoney(playerid))
			return Dialog_Show(playerid, HouseDepositCash, DIALOG_STYLE_INPUT, "Coffre maison", "Fonds insuffisant\n\nBalance: %s\n\nEntrer le montant que vous souhaitez deposer:", "Deposer", "X", FormatNumber(HouseData[houseid][houseMoney]));

			HouseData[houseid][houseMoney] += amount;
			GiveMoney(playerid, -amount);

			House_Save(houseid);
			House_OpenStorage(playerid, houseid);

			SendClientMessageEx(playerid, COLOR_GREY, "Vous avez déposé %s du coffre de votre maison.", FormatNumber(amount));
		}
		else Dialog_Show(playerid, HouseMoney, DIALOG_STYLE_LIST, "Coffre maison", "Retrait\nDeposer", "Ok", "X");
	}
	return 1;
}

Dialog:HouseMoney(playerid, response, listitem, inputtext[])
{
	static
	houseid = -1;

	if ((houseid = House_Inside(playerid)) != -1 && House_IsOwner(playerid, houseid))
	{
		if (response)
		{
			switch (listitem)
			{
				case 0: {
					Dialog_Show(playerid, HouseWithdrawCash, DIALOG_STYLE_INPUT, "Coffre maison", "Balance: %s\n\nVeuillez entrer le montant que vous souhaitez retirer:", "Retrait", "X", FormatNumber(HouseData[houseid][houseMoney]));
				}
				case 1: {
					Dialog_Show(playerid, HouseDepositCash, DIALOG_STYLE_INPUT, "Coffre maison", "Balance: %s\n\nVeuillez entrer le montant que vous souhaitez déposer", "Déposer", "X", FormatNumber(HouseData[houseid][houseMoney]));
				}
			}
		}
		else House_OpenStorage(playerid, houseid);
	}
	return 1;
}

Dialog:HouseItems(playerid, response, listitem, inputtext[])
{
	static
	houseid = -1,
	string[64];

	if ((houseid = House_Inside(playerid)) != -1 && (House_IsOwner(playerid, houseid) || GetFactionType(playerid) == FACTION_POLICE))
	{
		if (response)
		{
			if (HouseStorage[houseid][listitem][hItemExists])
			{
				PlayerData[playerid][pStorageItem] = listitem;
				PlayerData[playerid][pInventoryItem] = listitem;

				strunpack(string, HouseStorage[houseid][listitem][hItemName]);

				format(string, sizeof(string), "%s (Quantité: %d)", string, HouseStorage[houseid][listitem][hItemQuantity]);
				Dialog_Show(playerid, StorageOptions, DIALOG_STYLE_LIST, string, "Prendre\nDéposer", "Ok", "X");
			}
			else {
				OpenInventory(playerid);

				PlayerData[playerid][pStorageSelect] = 1;
			}
		}
		else House_OpenStorage(playerid, houseid);
	}
	return 1;
}

Dialog:HouseStorage(playerid, response, listitem, inputtext[])
{
	static
	houseid = -1;

	if ((houseid = House_Inside(playerid)) != -1 && (House_IsOwner(playerid, houseid) || GetFactionType(playerid) == FACTION_POLICE))
	{
		if (response)
		{
			if (listitem == 0) {
				House_ShowItems(playerid, houseid);
			}
			else if (listitem == 1) {
				House_WeaponStorage(playerid, houseid);
			}
			else if (listitem == 2) {
				Dialog_Show(playerid, HouseMoney, DIALOG_STYLE_LIST, "Coffre maison - Argent", "Retrait\nDeposer", "Ok", "X");
			}
		}
	}
	return 1;
}

Dialog:StorageOptions(playerid, response, listitem, inputtext[])
{
	static
	houseid = -1,
	itemid = -1,
	backpack = -1,
	string[32];

	if ((houseid = House_Inside(playerid)) != -1 && (House_IsOwner(playerid, houseid) || GetFactionType(playerid) == FACTION_POLICE))
	{
		itemid = PlayerData[playerid][pStorageItem];

		strunpack(string, HouseStorage[houseid][itemid][hItemName]);

		if (response)
		{
			switch (listitem)
			{
				case 0:
				{
					if (HouseStorage[houseid][itemid][hItemQuantity] == 1)
					{
						if (!strcmp(string, "Sac a dos") && Inventory_HasItem(playerid, "Sac a dos"))
						return SendClientMessageEx(playerid, COLOR_ERROR, "Vous avez déjà un sac dans votre inventaire.");

						new id = Inventory_Add(playerid, string, HouseStorage[houseid][itemid][hItemModel], 1);

						if (id == -1)
						return SendClientMessageEx(playerid, COLOR_ERROR, "Il n'y a plus de place dans votre inventaire.");

						if (!strcmp(string, "Sac a dos") && (backpack = GetHouseBackpack(houseid)) != -1)
						{
							BackpackData[backpack][backpackHouse] = 0;
							BackpackData[backpack][backpackPlayer] = PlayerData[playerid][pID];

							Backpack_Save(backpack);
							SetAccessories(playerid);
						}
						House_RemoveItem(houseid, string);
						SendNearbyMessage(playerid, 15.0, COLOR_PURPLE, "%s a pris un(e) \"%s\" de son coffre maison.", ReturnName(playerid, 1), string);

						House_ShowItems(playerid, houseid);
						Log_Write("logs/storage_log.txt", "[%s] %s has taken \"%s\" from house ID: %d (owner: %s).", ReturnDate(), ReturnName(playerid), string, HouseData[houseid][houseID], (House_IsOwner(playerid, houseid)) ? ("Oui") : ("Non"));
					}
					else
					{
						Dialog_Show(playerid, HouseTake, DIALOG_STYLE_INPUT, "Coffre maison", "Objet: %s (Quantité: %d)\n\nVeuillez entrer le montant que vous souhaitez retirer:", "Retrait", "X", string, HouseStorage[houseid][itemid][hItemQuantity]);
					}
				}
				case 1:
				{
					new id = Inventory_GetItemID(playerid, string);

					if (!strcmp(string, "Sac a dos")) {
						House_ShowItems(playerid, houseid);

						return SendClientMessageEx(playerid, COLOR_ERROR, "Vous ne pouvez pas stocker un sac dans votre maison.");
					}
					else if (id == -1) {
						House_ShowItems(playerid, houseid);

						return SendClientMessageEx(playerid, COLOR_ERROR, "Vous n'avez à rien stocké à cette endroit.");
					}
					else if (InventoryData[playerid][id][invQuantity] == 1)
					{
						House_AddItem(houseid, string, InventoryData[playerid][id][invModel]);
						Inventory_Remove(playerid, string);

						SendNearbyMessage(playerid, 15.0, COLOR_PURPLE, "%s a déposé un(e) \"%s\" dans son coffre maison.", ReturnName(playerid, 1), string);
						House_ShowItems(playerid, houseid);
					}
					else if (InventoryData[playerid][id][invQuantity] > 1) {
						PlayerData[playerid][pInventoryItem] = id;

						Dialog_Show(playerid, HouseDeposit, DIALOG_STYLE_INPUT, "Coffre maison", "Item: %s (Quantité: %d)\n\nEntrer le montant que vous souhaitez déposer:", "Déposer", "X", string, InventoryData[playerid][id][invQuantity]);
					}
				}
			}
		}
		else
		{
			House_ShowItems(playerid, houseid);
		}
	}
	return 1;
}

Dialog:EditGlasses(playerid, response, listitem, inputtext[])
{
	if (response)
	{
		switch (listitem)
		{
			case 0:
			{
				if (!IsPlayerAttachedObjectSlotUsed(playerid, 0))
				{
					PlayerData[playerid][pToggleGlasses] = 0;
					SetPlayerAttachedObject(playerid, 0, PlayerData[playerid][pGlasses], 2, AccessoryData[playerid][0][0], AccessoryData[playerid][0][1], AccessoryData[playerid][0][2], AccessoryData[playerid][0][3], AccessoryData[playerid][0][4], AccessoryData[playerid][0][5], AccessoryData[playerid][0][6], AccessoryData[playerid][0][7], AccessoryData[playerid][0][8]);
					ShowPlayerFooter(playerid, "Vous avez ~g~attaché~w~ vos lunettes.");
				}
				else
				{
					PlayerData[playerid][pToggleGlasses] = 1;
					RemovePlayerAttachedObject(playerid, 0);
					ShowPlayerFooter(playerid, "Vous avez ~r~detaché~w~ vos lunettes.");
				}
			}
			case 1:
			{
				PlayerData[playerid][pToggleGlasses] = 0;
				SetPlayerAttachedObject(playerid, 0, PlayerData[playerid][pGlasses], 2, AccessoryData[playerid][0][0], AccessoryData[playerid][0][1], AccessoryData[playerid][0][2], AccessoryData[playerid][0][3], AccessoryData[playerid][0][4], AccessoryData[playerid][0][5], AccessoryData[playerid][0][6], AccessoryData[playerid][0][7], AccessoryData[playerid][0][8]);

				EditAttachedObject(playerid, 0);
				PlayerData[playerid][pEditType] = 1;
			}
			case 2:
			{
				RemovePlayerAttachedObject(playerid, 0);
				PlayerData[playerid][pGlasses] = 0;
				SendClientMessageEx(playerid, COLOR_INFO, "Vous avez supprimé vos lunettes.");
			}
		}
	}
	return 1;
}

Dialog:EditHat(playerid, response, listitem, inputtext[])
{
	if (response)
	{
		switch (listitem)
		{
			case 0:
			{
				if (!IsPlayerAttachedObjectSlotUsed(playerid, 1))
				{
					PlayerData[playerid][pToggleHat] = 0;
					SetPlayerAttachedObject(playerid, 1, PlayerData[playerid][pHat], 2, AccessoryData[playerid][1][0], AccessoryData[playerid][1][1], AccessoryData[playerid][1][2], AccessoryData[playerid][1][3], AccessoryData[playerid][1][4], AccessoryData[playerid][1][5], AccessoryData[playerid][1][6], AccessoryData[playerid][1][7], AccessoryData[playerid][1][8]);
					ShowPlayerFooter(playerid, "Vous avez ~g~attaché~w~ votre chapeau.");
				}
				else
				{
					PlayerData[playerid][pToggleHat] = 1;
					RemovePlayerAttachedObject(playerid, 1);
					ShowPlayerFooter(playerid, "Vous avez ~r~detaché~w~ votre chapeau.");
				}
			}
			case 1:
			{
				PlayerData[playerid][pToggleHat] = 0;
				SetPlayerAttachedObject(playerid, 1, PlayerData[playerid][pHat], 2, AccessoryData[playerid][1][0], AccessoryData[playerid][1][1], AccessoryData[playerid][1][2], AccessoryData[playerid][1][3], AccessoryData[playerid][1][4], AccessoryData[playerid][1][5], AccessoryData[playerid][1][6], AccessoryData[playerid][1][7], AccessoryData[playerid][1][8]);

				EditAttachedObject(playerid, 1);
				PlayerData[playerid][pEditType] = 2;
			}
			case 2:
			{
				RemovePlayerAttachedObject(playerid, 1);
				PlayerData[playerid][pHat] = 0;
				SendClientMessageEx(playerid, COLOR_INFO, "Vous avez supprimé votre chapeau.");
			}
		}
	}
	return 1;
}

Dialog:EditBandana(playerid, response, listitem, inputtext[])
{
	if (response)
	{
		switch (listitem)
		{
			case 0:
			{
				if (!IsPlayerAttachedObjectSlotUsed(playerid, 2))
				{
					PlayerData[playerid][pToggleBandana] = 0;
					SetPlayerAttachedObject(playerid, 2, PlayerData[playerid][pBandana], 2, AccessoryData[playerid][2][0], AccessoryData[playerid][2][1], AccessoryData[playerid][2][2], AccessoryData[playerid][2][3], AccessoryData[playerid][2][4], AccessoryData[playerid][2][5], AccessoryData[playerid][2][6], AccessoryData[playerid][2][7], AccessoryData[playerid][2][8]);
					ShowPlayerFooter(playerid, "Vous avez ~g~attaché~w~ votre bandana.");
				}
				else
				{
					PlayerData[playerid][pToggleBandana] = 1;
					RemovePlayerAttachedObject(playerid, 2);
					ShowPlayerFooter(playerid, "Vous avez ~r~detaché~w~ votre bandana.");
				}
			}
			case 1:
			{
				PlayerData[playerid][pToggleBandana] = 0;
				SetPlayerAttachedObject(playerid, 2, PlayerData[playerid][pBandana], 2, AccessoryData[playerid][2][0], AccessoryData[playerid][2][1], AccessoryData[playerid][2][2], AccessoryData[playerid][2][3], AccessoryData[playerid][2][4], AccessoryData[playerid][2][5], AccessoryData[playerid][2][6], AccessoryData[playerid][2][7], AccessoryData[playerid][2][8]);

				EditAttachedObject(playerid, 2);
				PlayerData[playerid][pEditType] = 3;
			}
			case 2:
			{
				RemovePlayerAttachedObject(playerid, 2);
				PlayerData[playerid][pBandana] = 0;
				SendClientMessageEx(playerid, COLOR_INFO, "Vous avez supprimé votre bandana.");
			}
		}
	}
	return 1;
}

Dialog:Accessory(playerid, response, listitem, inputtext[])
{
	if (response)
	{
		switch (listitem)
		{
			case 0:
			{
				if (!PlayerData[playerid][pGlasses])
				return SendClientMessageEx(playerid, COLOR_ERROR, "Vous ne possédez aucune paire de lunettes.");

				Dialog_Show(playerid, EditGlasses, DIALOG_STYLE_LIST, "Lunettes", "Mettre / Retirer\nEditer\nSupprimer", "Ok", "X");
			}
			case 1:
			{
				if (!PlayerData[playerid][pHat])
				return SendClientMessageEx(playerid, COLOR_ERROR, "Vous ne possédez pas de chapeau.");

				Dialog_Show(playerid, EditHat, DIALOG_STYLE_LIST, "Chapeau", "Mettre / Retirer\nEditer\nSupprimer", "Ok", "X");
			}
			case 2:
			{
				if (!PlayerData[playerid][pBandana])
				return SendClientMessageEx(playerid, COLOR_ERROR, "Vous ne possédez pas de bandana.");

				Dialog_Show(playerid, EditBandana, DIALOG_STYLE_LIST, "Bandana", "Mettre / Retirer\nEditer\nSupprimer", "Ok", "X");
			}
			case 3:
			{
				if (!Inventory_HasItem(playerid, "Sac a dos"))
				return SendClientMessageEx(playerid, COLOR_ERROR, "Vous ne possédez pas de sac à dos.");

				Dialog_Show(playerid, EditSac, DIALOG_STYLE_LIST, "Sac à dos", "Mettre / Retirer\nEditer", "Ok", "X");
			}
		}
	}
	return 1;
}

Dialog:EditSac(playerid, response, listitem, inputtext[])
{
    new id = GetPlayerBackpack(playerid);
	if (response)
	{
		switch (listitem)
		{
			case 0:
			{
				EditDynamicObject(playerid, BackpackData[id][backpackObject]);
			}
			case 1:
			{
			    if(PlayerData[playerid][pSac]) RemovePlayerAttachedObject(playerid, 5);
				if(!PlayerData[playerid][pSac]) BackpackData[id][backpackObject] = CreateDynamicObject(3026, BackpackData[id][backpackPos][0], BackpackData[id][backpackPos][1], BackpackData[id][backpackPos][2] - 0.8, -90.0, 0.0, 0.0, BackpackData[id][backpackWorld], BackpackData[id][backpackInterior]);
			}
		}
	}
	return 1;
}
Dialog:Gender(playerid, response, listitem, inputtext[])
{
	if (response)
	{
		PlayerData[playerid][pGender] = listitem + 1;

		switch (listitem) {
			case 0: {
				PlayerTextDrawSetString(playerid, PlayerData[playerid][pTextdraws][16], "~r~Sexe:~w~ Masculin");
				PlayerTextDrawSetPreviewModel(playerid, PlayerData[playerid][pTextdraws][13], 98);

				PlayerTextDrawHide(playerid, PlayerData[playerid][pTextdraws][13]);
				PlayerTextDrawShow(playerid, PlayerData[playerid][pTextdraws][13]);
			}
			case 1: {
				PlayerTextDrawSetString(playerid, PlayerData[playerid][pTextdraws][16], "~r~Sexe:~w~ Feminin");
				PlayerTextDrawSetPreviewModel(playerid, PlayerData[playerid][pTextdraws][13], 233);

				PlayerTextDrawHide(playerid, PlayerData[playerid][pTextdraws][13]);
				PlayerTextDrawShow(playerid, PlayerData[playerid][pTextdraws][13]);
			}
		}
		PlayerData[playerid][pSkin] = (listitem) ? (233) : (98);
		SetTimerEx("SelectTD", 200, false, "d", playerid);
	}
	else SetTimerEx("SelectTD", 200, false, "d", playerid);
	return 1;
}

Dialog:DateBirth(playerid, response, listitem, inputtext[])
{
	if (response)
	{
		new
		iDay,
		iMonth,
		iYear,
		str[64];

		static const
		arrMonthDays[] = {31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};

		if (sscanf(inputtext, "p</>ddd", iDay, iMonth, iYear)) {
			Dialog_Show(playerid, DateBirth, DIALOG_STYLE_INPUT, "Date de naissance", "Entrer votre date de naissance (JJ/MOIS/ANNEE):", "Modifier", "X");
		}
		else if (iYear < 1900 || iYear > 2014) {
			Dialog_Show(playerid, DateBirth, DIALOG_STYLE_INPUT, "Date de naissance", "Entrer votre date de naissance (JJ/MOIS/ANNEE):", "Modifier", "X");
		}
		else if (iMonth < 1 || iMonth > 12) {
			Dialog_Show(playerid, DateBirth, DIALOG_STYLE_INPUT, "Date de naissance", "Entrer votre date de naissance (JJ/MOIS/ANNEE):", "Modifier", "X");
		}
		else if (iDay < 1 || iDay > arrMonthDays[iMonth - 1]) {
			Dialog_Show(playerid, DateBirth, DIALOG_STYLE_INPUT, "Date de naissance", "Entrer votre date de naissance (JJ/MOIS/ANNEE):", "Modifier", "X");
		}
		else {
			format(PlayerData[playerid][pBirthdate], 24, inputtext);

			format(str, sizeof(str), "~r~Date de Naissance:~w~ %s", inputtext);
			PlayerTextDrawSetString(playerid, PlayerData[playerid][pTextdraws][15], str);
		}
	}
	return 1;
}

Dialog:Origin(playerid, response, listitem, inputtext[])
{
	if (response)
	{
		new str[64];

		if (isnull(inputtext) || strlen(inputtext) > 32) {
			Dialog_Show(playerid, Origin, DIALOG_STYLE_INPUT, "Origine", "Veuillez entrer l'origine de votre personne:", "Modifier", "X");
		}
		else for (new i = 0, len = strlen(inputtext); i != len; i ++) {
			if ((inputtext[i] >= 'A' && inputtext[i] <= 'Z') || (inputtext[i] >= 'a' && inputtext[i] <= 'z') || (inputtext[i] >= '0' && inputtext[i] <= '9') || (inputtext[i] == ' ') || (inputtext[i] == ',') || (inputtext[i] == '.'))
			continue;

			else return Dialog_Show(playerid, Origin, DIALOG_STYLE_INPUT, "Origine", "Seules les lettres et les chiffres sont acceptés dans l'origine.\n\nEntrer l'origine de votre personnage ci-dessous:", "Modifier", "X");
		}
		format(PlayerData[playerid][pOrigin], 32, inputtext);

		format(str, sizeof(str), "~r~Origine:~w~ %s", inputtext);
		PlayerTextDrawSetString(playerid, PlayerData[playerid][pTextdraws][17], str);
	}
	return 1;
}

CMD:pack(playerid, params[])
{
	new
	    query[250];

	format(query, sizeof(query), "SELECT Tokens, packRename, packDonator, donatorExpiration FROM `characters` WHERE `Username` = '%s'", ReturnName(playerid));
	mysql_function_query(g_iHandle, query, true, "SQL_LoadPack", "d", playerid);
	return 1;
}

CMD:astuces(playerid, params[])
return cmd_challenges(playerid, params);

CMD:astuce(playerid, params[])
return cmd_challenges(playerid, params);

CMD:challenge(playerid, params[])
return cmd_challenges(playerid, params);


stock ValidChallenges(playerid, challengeID)
{
	// On ajoute +1 respect
	PlayerData[playerid][pPlayingHours]++;
	
	if(PlayerData[playerid][pPlayingHours] >= PlayerData[playerid][pPlayingHoursMax])
	{
		PlayerData[playerid][pLevel] += 1;
		PlayerData[playerid][pPlayingHours] = 0;
		PlayerData[playerid][pPlayingHoursMax] = PlayerData[playerid][pLevel]*2;
	}
	
	AstucesChallenges[playerid][challengeID] = true;
	
	new
	    checker = 0;
	for(new i=0; i<MAX_CHALLENGES; i++)
	{
		if(!AstucesChallenges[playerid][i])
		{
		    checker = 1;
		    break;
		}
	}
	if(checker == 0)
	{
	    PlayerData[playerid][pAstuces] = false;
	}
	return 1;
}

Dialog:DIALOG_CHALLENGES_1(playerid, response, listitem, inputtext[])
{
	if(!response)
		return 1;

	PlayerData[playerid][pAstuces] = true;
	SendClientMessage(playerid, COLOR_INFO, "Vos astuces sont activés.");

	cmd_challenges(playerid, "\1");
	return 1;
}

Dialog:DIALOG_CHALLENGES_2(playerid, response, listitem, inputtext[])
{
	return cmd_challenges(playerid, "\1");
}

Dialog:DIALOG_CHALLENGES(playerid, response, listitem, inputtext[])
{
	if(!response)
		return 1;

	new
	    string[2500];

	if(AstucesChallenges[playerid][listitem])
	    return cmd_challenge(playerid, "\1");
	    
	switch(listitem)
	{
	    case 0:
	    { // Louer un scooter ou appeler un taxi
	        
	        format(string, sizeof(string), "Challenge:{FFFFFF} Louer un scooter ou appeler un taxi\n\n{A9C4E4}\
				Des véhicules sont disponibles en location à la gare, ils vous permettront de vous déplacez\n\
				pour le prix de 200$.\n");
	        format(string, sizeof(string), "%sLorsque vous aurez de l'argent, vous serez libre d'acheter vous même votre propre véhicule\n\
				en vous rendant dans un des concessionnaires de la ville (/gps).\n\n\
				{33CCFF}Retrouvez la location de véhicule au checkpoint sur votre mini-map.", string);
				
			Dialog_Show(playerid, DIALOG_CHALLENGES_2, DIALOG_STYLE_MSGBOX, "Liste de vos challenges", string, "Oui", "Non");
				
			Waypoint_Set(playerid, "Location de vehicule", 1814.1772, -1862.4608, 13.5781);
	    }
	    case 1:
	    { // Rendez-vous dans un 24/7
			Dialog_Show(playerid, DIALOG_CHALLENGES_2, DIALOG_STYLE_MSGBOX, "Liste de vos challenges", "\
				Challenge:{FFFFFF} Rendez-vous dans un 24/7\n\n{A9C4E4}\
				Les 24/7 sont des boutiques où vous pouvez-y trouver un large choix de produits\n\
				tels qu'un téléphone, un gps, un sac à dos et bien d'autres encore...\n\
				Vous trouverez un 24/7 à la gare, à Pershing-Square et dans tous les quartiers fréquentés.\n\n\
				{33CCFF}Retrouvez un 24/7 au checkpoint sur votre mini-map.\
				", "Oui", "Non");

			Waypoint_Set(playerid, "24/7", 1831.6650, -1842.2889, 13.5781);
	    }
	    case 2:
	    { // Trouvez-vous un logement
			Dialog_Show(playerid, DIALOG_CHALLENGES_2, DIALOG_STYLE_MSGBOX, "Liste de vos challenges", "\
				Challenge:{FFFFFF} Trouvez-vous un logement\n\n{A9C4E4}\
				Des centaines de maisons sont disponibles en vente dans la ville, il vous suffit de trouvez la votre.\n\
				Si vous n'avez pas assez d'argent pour en acheter une, vous pouvez louer une chambre\n\
				au prix fixé par le propriétaire: {33CCFF}/ma(ison louer)\
				", "Oui", "Non");
	    }
	    case 3:
	    { // Allez retirer de l'argent à la banque ou à un ATM
			Dialog_Show(playerid, DIALOG_CHALLENGES_2, DIALOG_STYLE_MSGBOX, "Liste de vos challenges", "\
				Challenge:{FFFFFF} Allez retirer de l'argent à la banque ou à un ATM\n\n{A9C4E4}\
				Pour retirer de l'argent vous pouvez soit aller à la banque ou vous à un distributeur\n\
				d'argent. Il y en a partout dans la ville!\n\n\
				{33CCFF}Retrouvez la banque au checkpoint sur votre mini-map.\
				", "Oui", "Non");

			Waypoint_Set(playerid, "Banque", 1461.1255, -1024.7206, 23.8281);
	    }
	    case 4:
	    { // Dirigez-vous à l'auto-école et passer votre permis
			Dialog_Show(playerid, DIALOG_CHALLENGES_2, DIALOG_STYLE_MSGBOX, "Liste de vos challenges", "\
				Challenge:{FFFFFF}Dirigez-vous à l'auto-école et passer votre permis\n\n{A9C4E4}\
				Rouler sans permis est un délit et passible de prison. C'est pourquoi il est préférable\n\
				d'aller le passer rapidement.\n\
				{33CCFF}Retrouvez l'auto-école au checkpoint sur votre mini-map.\
				", "Oui", "Non");

			Waypoint_Set(playerid, "Auto ecole", 2054.1694, -1910.5031, 13.5469);
	    }
	    case 5:
	    { // Trouver un emploi disponible à l'ANPE
			Dialog_Show(playerid, DIALOG_CHALLENGES_2, DIALOG_STYLE_MSGBOX, "Liste de vos challenges", "\
				Challenge:{FFFFFF}Trouver un emploi disponible à l'ANPE\n\n{A9C4E4}\
				Différents emplois sont disponibles à l'ANPE, il vous suffit de vous y rendre\n\
				et chercher le métier de vos rêves.\n\n\
				{33CCFF}Retrouvez l'ANPE au checkpoint sur votre mini-map.\
				", "Oui", "Non");

			Waypoint_Set(playerid, "ANPE", 595.3370, -1241.0620, 18.0421);
	    }
	}
	return 1;
}

CMD:challenges(playerid, params[])
{
	if (PlayerData[playerid][pLevel] > 4)
	    return SendClientMessage(playerid, COLOR_ERROR, "Vous devez être trop haut level pour utiliser cette commande.");

	if (!PlayerData[playerid][pAstuces])
	{
		Dialog_Show(playerid, DIALOG_CHALLENGES_1, DIALOG_STYLE_MSGBOX, "Liste de vos challenges", "Vos astuces ne sont pas activés.\nSouhaitez-vous les activés ?", "Oui", "Non");
	}
	else
	{
		new
		    string[850];

		format(string, sizeof(string), "Description\tStatus\n");
		format(string, sizeof(string), "%s1. Louer un véhicule ou appeler un taxi\t%s\n", string, (AstucesChallenges[playerid][0]) ? ("{33CC33}Validé") : ("{FF0000}Non validé"));
		format(string, sizeof(string), "%s2. Rendez-vous dans un 24/7\t%s\n", string, (AstucesChallenges[playerid][1]) ? ("{33CC33}Validé") : ("{FF0000}Non validé"));
		format(string, sizeof(string), "%s3. Trouvez-vous un logement\t%s\n", string, (AstucesChallenges[playerid][2]) ? ("{33CC33}Validé") : ("{FF0000}Non validé"));
		format(string, sizeof(string), "%s4. Allez retirer de l'argent à la banque ou à un ATM\t%s\n", string, (AstucesChallenges[playerid][3]) ? ("{33CC33}Validé") : ("{FF0000}Non validé"));
		format(string, sizeof(string), "%s5. Dirigez-vous à l'auto-école et passer votre permis\t%s\n", string, (AstucesChallenges[playerid][4]) ? ("{33CC33}Validé") : ("{FF0000}Non validé"));
		format(string, sizeof(string), "%s6. Trouver un emploi disponible à l'ANPE\t%s\n", string, (AstucesChallenges[playerid][5]) ? ("{33CC33}Validé") : ("{FF0000}Non validé"));

		Dialog_Show(playerid, DIALOG_CHALLENGES, DIALOG_STYLE_TABLIST_HEADERS, "Liste de vos challenges", string, "Valider", "Annuler");
	}

	return 1;
}

CMD:acceptrename(playerid, params[])
{
	static
	    userid;

	if (PlayerData[playerid][pAdmin] < 2)
		return SendClientMessageEx(playerid, COLOR_ERROR, "Vous n'avez pas la permission d'utiliser cette commande.");

	if (sscanf(params, "u", userid))
		return SendClientMessageEx(playerid, COLOR_USAGE, "/acceptrename <PlayerID/PlayerName>");

	if (userid == INVALID_PLAYER_ID || !IsPlayerConnected(userid))
		return SendClientMessageEx(playerid, COLOR_ERROR, "Ce joueur n'est pas valide.");

	if(isnull(waitingRename[userid]))
	    return SendClientMessageEx(playerid, COLOR_ERROR, "Ce joueur n'a fait aucune demande de rename. (/pack)");

    new
        query[250];

    format(query, sizeof(query), "UPDATE `characters` SET packRename = packRename-1, `Username` = '%s' WHERE `Username` = '%s'", waitingRename[userid], ReturnName(userid));
	mysql_function_query(g_iHandle, query, false, "", "");

	SendClientMessageEx(userid, COLOR_INFO, "L'administrateur %s a validé votre rename. Nouveau nom: \"%s\".", ReturnName(playerid), waitingRename[userid]);
	SendClientMessageEx(playerid, COLOR_INFO, "Vous avez validé le rename de %s. Nouveau nom: \"%s\".", ReturnName(userid), waitingRename[userid]);

	SetPlayerName(userid, waitingRename[userid]);
	waitingRename[userid][0] = 0;
	return 1;
}

CMD:refusrename(playerid, params[])
{
	static
	    userid;

	if (PlayerData[playerid][pAdmin] < 2)
		return SendClientMessageEx(playerid, COLOR_ERROR, "Vous n'avez pas la permission d'utiliser cette commande.");

	if (sscanf(params, "u", userid))
		return SendClientMessageEx(playerid, COLOR_USAGE, "/refusrename <PlayerID/PlayerName>");

	if (userid == INVALID_PLAYER_ID || !IsPlayerConnected(userid))
		return SendClientMessageEx(playerid, COLOR_ERROR, "Ce joueur n'est pas valide.");

	if(isnull(waitingRename[userid]))
	    return SendClientMessageEx(playerid, COLOR_ERROR, "Ce joueur n'a fait aucune demande de rename. (/pack)");

	SendClientMessageEx(userid, COLOR_INFO, "L'administrateur %s a refusé votre rename.", ReturnName(playerid));
	SendClientMessageEx(playerid, COLOR_INFO, "Vous avez refusé le rename de %s.", ReturnName(userid));

	waitingRename[userid][0] = 0;
	return 1;
}

forward SQL_LoadPack(playerid);
public SQL_LoadPack(playerid)
{
	static
		rows,
		fields;

	cache_get_data(rows, fields, g_iHandle);

	if (!rows)
		return 0;

	new
		tokens = cache_get_field_int(0, "Tokens"),
		packRename = cache_get_field_int(0, "packRename"),
		packDonator = cache_get_field_int(0, "packDonator"),
		donatorExpiration = cache_get_field_int(0, "donatorExpiration");
		

	SetPVarInt(playerid, "Tokens", tokens);
	SetPVarInt(playerid, "packRename", packRename);
	
	new
	    string[250],
		title[150],
		donatorStatus[80],
		renameStatus[50];
		
    if(packDonator == 1) format(donatorStatus, sizeof(donatorStatus), "{33CC33}Disponible{FFFFFF} (Expire le %s)", unixtodate(donatorExpiration));
    else format(donatorStatus, sizeof(donatorStatus), "{FF0000}Non disponible");
    
	if(packRename <= 0) format(renameStatus, sizeof(renameStatus), "{FF0000}Non disponible");
	else if(packRename == 1) format(renameStatus, sizeof(renameStatus), "{33CC33}%d disponible", packRename);
	else format(renameStatus, sizeof(renameStatus), "{33CC33}%d disponibles", packRename);
	
	format(title, sizeof(title), "Vos packs (vous avez %d jetons)", tokens);
	format(string, sizeof(string), "Pack rename\t%s\nPack donateur\t%s", renameStatus, donatorStatus);
	
	Dialog_Show(playerid, DIALOG_PACK, DIALOG_STYLE_TABLIST, title, string, "Valider", "Annuler");
  	return 1;
}

Dialog:DIALOG_PACK(playerid, response, listitem, inputtext[])
{
	if(!response)
	    return 1;
	    
	switch(listitem)
	{
		case 0:
		{
		    if(GetPVarInt(playerid, "packRename") < 1)
		        return SendClientMessage(playerid, COLOR_ERROR, "Vous n'avez aucun pack rename d'activé."), cmd_pack(playerid, "\1");

			Dialog_Show(playerid, DIALOG_PACK_RENAME, DIALOG_STYLE_INPUT, "Renommer votre personnage", "Insérez le nom de votre personnage sous la forme Prénom_Nom\n\nVotre demande sera soumise à une validation manuelle\npar l'administration.", "Valider", "Annuler");
		}
		case 1:
		{
  			SendClientMessage(playerid, COLOR_INFO, "Activez votre pack donateur directement sur le forum.");
  			SendClientMessage(playerid, COLOR_INFO, "Une reconnexion sera nécéssaire pour l'activation.");
		}
	}
	return 1;
}

Dialog:DIALOG_PACK_RENAME(playerid, response, listitem, inputtext[])
{
	if(!response)
	{
	    SendClientMessage(playerid, COLOR_INFO, "Vous avez annulé votre rename.");
		return 1;
	}
	
	if(AccountExist(inputtext))
	{
	    Dialog_Show(playerid, DIALOG_PACK_RENAME, DIALOG_STYLE_INPUT, "Renommer votre personnage", "{DE3838}Ce nom d'utilisateur est déjà utilisé par un autre joueur.\n\n{a9c4e4}Insérez le nom de votre personnage sous la forme Prénom_Nom\n\nVotre demande sera soumise à une validation manuelle\npar l'administration.", "Valider", "Annuler");
		return 1;
	}
	
	if(strlen(inputtext) > 5 && strlen(inputtext) < 22 && IsValidRoleplayName(inputtext))
	{
	    format(waitingRename[playerid], MAX_PLAYER_NAME +1, inputtext);
		SendClientMessageEx(playerid, COLOR_INFO, "Votre demande de rename pour le pseudo \"%s\" a été envoyée à l'administration.", inputtext);
		SendClientMessageEx(playerid, COLOR_INFO, "Vous recevrez une réponse le plus rapidement possible.");
		
		SendAdminAlert(COLOR_ADMINGROUP, "RENAME: %s(%d) a fait une demande de rename en %s (/acceptrename %d | /refusname %d)", ReturnName(playerid), playerid, inputtext, playerid, playerid);
	}
	else
	{
		SendClientMessage(playerid, COLOR_ERROR, "Le nom que vous avez entré est incorrect.");
	    Dialog_Show(playerid, DIALOG_PACK_RENAME, DIALOG_STYLE_INPUT, "Renommer votre personnage", "Insérez le nom de votre personnage sous la forme Prénom_Nom\n\nVotre demande sera soumise à une validation manuelle\npar l'administration.", "Valider", "Annuler");
	}
	return 1;
}

CMD:spray(playerid,params[])
{
	if(!IsPlayerInRangeOfPoint(playerid, 2.5, 2073.7756,-1831.4014,13.5469))
		return SendClientMessageEx(playerid, COLOR_ERROR, "Vous n'êtes pas devant un Pay'n'Spray.");

	if(!IsPlayerInAnyVehicle(playerid))
		return SendClientMessageEx(playerid, COLOR_ERROR, "Vous devez être dans un véhicule.");

	if(IsPlayerInAnyVehicle(playerid) && GetPlayerVehicleSeat(playerid) != 0)
		return SendClientMessageEx(playerid, COLOR_ERROR, "Vous devez être conducteur du véhicule.");

	if(GetMoney(playerid) < 600)
		return SendClientMessageEx(playerid, COLOR_ERROR, "Vous n'avez pas assez d'argent ($600).");

	SetTimerEx("pns_out", 10000, false, "ii", playerid, GetPlayerVehicleID(playerid));
	
	TogglePlayerControllable(playerid,false);
	ShowPlayerFooter(playerid, "Patientez ~r~10 secondes, ~w~le temps de la réparation");
	
	if(PlayerData[playerid][pDonator] != 1) GiveMoney(playerid, -600);
	return 1;
}

forward pns_out(playerid, vehicleid);
public pns_out(playerid, vehicleid)
{
	if(IsPlayerConnected(playerid))
	{
		ShowPlayerFooter(playerid, "Votre véhicule est maintenant réparé");
	    TogglePlayerControllable(playerid,true);
	}
	if(IsValidVehicle(vehicleid))
	{
	    SetVehicleHealth(vehicleid, 1000);
	    RepairVehicle(vehicleid);
	}
    return 1;
}



CMD:exit(playerid, params[])
return cmd_sortir(playerid, params);
CMD:sortir(playerid, params[])
{
	DisableCheatIDTemporary(playerid, 6, 1500);
	
	static
	id = -1;
	if(IsPlayerInAnyVehicle(playerid)) return SendClientMessageEx(playerid, COLOR_ERROR, "Vous êtes dans un véhicule.");
	if ((id = House_Inside(playerid)) != -1 && IsPlayerInRangeOfPoint(playerid, 1.0, HouseData[id][houseInt][0], HouseData[id][houseInt][1], HouseData[id][houseInt][2]))
	{
		SetPlayerPosEx(playerid, HouseData[id][housePos][0], HouseData[id][housePos][1], HouseData[id][housePos][2], 1500);
		SetPlayerFacingAngle(playerid, HouseData[id][housePos][3] - 180.0);

		SetPlayerInterior(playerid, HouseData[id][houseExterior]);
		SetPlayerVirtualWorld(playerid, HouseData[id][houseExteriorVW]);

		SetCameraBehindPlayer(playerid);
		PlayerData[playerid][pHouse] = -1;
		return 1;
	}
	if ((id = Business_Inside(playerid)) != -1 && IsPlayerInRangeOfPoint(playerid, 1.5, BusinessData[id][bizInt][0], BusinessData[id][bizInt][1], BusinessData[id][bizInt][2]))
	{
	    if(BraquageTimer[playerid] > 0)
		{
		    KillTimer(BraquageKillTimer[playerid]);
	        BraquageTimer[playerid] = 0;
			SendClientMessageEx(playerid, COLOR_ERROR, "Vous avez échouer le braquage, prenez la fuite.");
      	}
		SetPlayerPos(playerid, BusinessData[id][bizPos][0], BusinessData[id][bizPos][1], BusinessData[id][bizPos][2]);
		SetPlayerFacingAngle(playerid, BusinessData[id][bizPos][3] - 180.0);

		SetPlayerInterior(playerid, BusinessData[id][bizExterior]);
		SetPlayerVirtualWorld(playerid, BusinessData[id][bizExteriorVW]);

		SetCameraBehindPlayer(playerid);
		PlayerData[playerid][pBusiness] = -1;
		return 1;
	}
	if ((id = Entrance_Inside(playerid)) != -1 && IsPlayerInRangeOfPoint(playerid, 1.5, EntranceData[id][entranceInt][0], EntranceData[id][entranceInt][1], EntranceData[id][entranceInt][2]))
	{
		if (EntranceData[id][entranceCustom])
			SetPlayerPos(playerid, EntranceData[id][entrancePos][0], EntranceData[id][entrancePos][1], EntranceData[id][entrancePos][2]);

		else
			SetPlayerPos(playerid, EntranceData[id][entrancePos][0], EntranceData[id][entrancePos][1], EntranceData[id][entrancePos][2]);

		SetPlayerFacingAngle(playerid, EntranceData[id][entrancePos][3] - 180.0);

		SetPlayerInterior(playerid, EntranceData[id][entranceExterior]);
		SetPlayerVirtualWorld(playerid, EntranceData[id][entranceExteriorVW]);

		SetCameraBehindPlayer(playerid);
		PlayerData[playerid][pEntrance] = Entrance_GetLink(playerid);
		return 1;
	}
	if ((id = Entrance_NearestInside(playerid)) != -1 && IsPlayerInRangeOfPoint(playerid, 1.5, EntranceData[id][entranceInt][0], EntranceData[id][entranceInt][1], EntranceData[id][entranceInt][2]))
	{
		if (EntranceData[id][entranceCustom])
			SetPlayerPos(playerid, EntranceData[id][entrancePos][0], EntranceData[id][entrancePos][1], EntranceData[id][entrancePos][2]);

		else
			SetPlayerPos(playerid, EntranceData[id][entrancePos][0], EntranceData[id][entrancePos][1], EntranceData[id][entrancePos][2]);

		SetPlayerFacingAngle(playerid, EntranceData[id][entrancePos][3] - 180.0);

		SetPlayerInterior(playerid, EntranceData[id][entranceExterior]);
		SetPlayerVirtualWorld(playerid, EntranceData[id][entranceExteriorVW]);

		SetCameraBehindPlayer(playerid);
		PlayerData[playerid][pEntrance] = Entrance_GetLink(playerid);
		return 1;
	}
	return 1;
}

Dialog:ENTRANCE_PASS(playerid, response, listitem, inputtext[])
{
	if(!response) return 1;
	
	new
	    id = GetPVarInt(playerid, "ENTRANCE_ID");

	if (!strcmp(EntranceData[id][entrancePass], inputtext, true))
	{
		if (EntranceData[id][entranceCustom])
			SetPlayerPos(playerid, EntranceData[id][entranceInt][0], EntranceData[id][entranceInt][1], EntranceData[id][entranceInt][2]);

		else
			SetPlayerPosEx(playerid, EntranceData[id][entranceInt][0], EntranceData[id][entranceInt][1], EntranceData[id][entranceInt][2]);

		SetPlayerFacingAngle(playerid, EntranceData[id][entranceInt][3]);

		SetPlayerInterior(playerid, EntranceData[id][entranceInterior]);
		SetPlayerVirtualWorld(playerid, EntranceData[id][entranceWorld]);

		SetCameraBehindPlayer(playerid);
		PlayerData[playerid][pEntrance] = EntranceData[id][entranceID];
	}
	else
	{
		Dialog_Show(playerid, ENTRANCE_PASS, DIALOG_STYLE_INPUT, "Mot de passe", "{FF0000}Mot de passe incorrect.\n{A9C4E4}Entrez le mot de passe:", "Valider", "Annuler");
	}
	return 1;
}

CMD:enter(playerid, params[])
return cmd_entrer(playerid, params);
CMD:entrer(playerid, params[])
{
	DisableCheatIDTemporary(playerid, 6, 1500);
	
	static
	id = -1;
	if(IsPlayerInAnyVehicle(playerid)) return SendClientMessageEx(playerid, COLOR_ERROR, "Vous êtes dans un véhicule.");
	for (new i = 0; i < sizeof(arrHospitalSpawns); i ++) if (IsPlayerInRangeOfPoint(playerid, 3.0, arrHospitalSpawns[i][0], arrHospitalSpawns[i][1], arrHospitalSpawns[i][2]))
	{
		SetPlayerPos(playerid, 197.2141,1884.7640,369.3091);
		SetPlayerFacingAngle(playerid, 268.0000);

		SetPlayerVirtualWorld(playerid, i +1);

		SetCameraBehindPlayer(playerid);
		PlayerData[playerid][pHospitalInt] = i;

		return 1;
	}
	if ((id = House_Nearest(playerid)) != -1)
	{
		if (HouseData[id][houseLocked] && PlayerData[playerid][pLocat] != id)
		return SendClientMessageEx(playerid, COLOR_ERROR, "La maison est fermée à clé.");

		if(HouseData[id][houseFaction] == PlayerData[playerid][pFaction])
		{
			if(GetFactionType(playerid) == FACTION_MAFIA) SendClientMessageEx(playerid, COLOR_GREY, "PLANQUE: /mafia creerarme");
			if(GetFactionType(playerid) == FACTION_GANG) SendClientMessageEx(playerid, COLOR_GREY, "PLANQUE: /gang achetergraines");
		}

		SetPlayerPos(playerid, HouseData[id][houseInt][0], HouseData[id][houseInt][1], HouseData[id][houseInt][2]);
		SetPlayerFacingAngle(playerid, HouseData[id][houseInt][3]);

		SetPlayerInterior(playerid, HouseData[id][houseInterior]);
		SetPlayerVirtualWorld(playerid, HouseData[id][houseID] + 5000);

		SetCameraBehindPlayer(playerid);
		PlayerData[playerid][pHouse] = HouseData[id][houseID];
		return 1;
	}
	if ((id = Business_Nearest(playerid)) != -1)
	{
		if (BusinessData[id][bizLocked])
		return SendClientMessageEx(playerid, COLOR_ERROR, "Ce business est fermée à clé.");

		if(BusinessData[id][bizType] == 1)
		{
			if(!AstucesChallenges[playerid][1] && PlayerData[playerid][pAstuces])
			{
			    ValidChallenges(playerid, 1);
			    SendClientMessage(playerid, COLOR_GREEN, "Vous avez débloqué le challenge \"{33CC33}Rendez-vous dans un 24/7{FFFFFF}\". +1 point respect (/challenges)");
			}
		}
		
		if(BusinessData[id][bizCustom])
			SetPlayerPosEx(playerid, BusinessData[id][bizInt][0], BusinessData[id][bizInt][1], BusinessData[id][bizInt][2]);
		else
			SetPlayerPos(playerid, BusinessData[id][bizInt][0], BusinessData[id][bizInt][1], BusinessData[id][bizInt][2]);

		SetPlayerFacingAngle(playerid, BusinessData[id][bizInt][3]);

		SetPlayerInterior(playerid, BusinessData[id][bizInterior]);
		SetPlayerVirtualWorld(playerid, BusinessData[id][bizID] + 6000);

		SetCameraBehindPlayer(playerid);
		PlayerData[playerid][pBusiness] = BusinessData[id][bizID];

		if (strlen(BusinessData[id][bizMessage]) && strcmp(BusinessData[id][bizMessage], "Non inscrit", true)) {
			SendClientMessage(playerid, COLOR_DEFAULT, BusinessData[id][bizMessage]);
		}
		return 1;
	}

	if ((id = Entrance_Nearest(playerid)) != -1)
	{
		if (EntranceData[id][entranceLocked])
		return SendClientMessageEx(playerid, COLOR_ERROR, "Cette entrée est verrouillée pour le moment.");

		if (!isnull(EntranceData[id][entrancePass]))
		{
			Dialog_Show(playerid, ENTRANCE_PASS, DIALOG_STYLE_INPUT, "Mot de passe", "Entrez le mot de passe:", "Valider", "Annuler");
	    	SetPVarInt(playerid, "ENTRANCE_ID", id);
	    	return 1;
		}
		if (PlayerData[playerid][pTask])
		{
			if (EntranceData[id][entranceType] == 2 && !PlayerData[playerid][pBankTask])
			{
				PlayerData[playerid][pBankTask] = 1;
				Dialog_Show(playerid, ShowOnly, DIALOG_STYLE_MSGBOX, "Banque", "Ici, se dresse la grande et prestigieuse banque de Los Santos.\nChaque citoyen peut y ouvrir un compte bancaire libre.\n\nVous pourrez gérer vos finances à l'intérieur en communiquant avec les différents conseillers présents.\nAfin de faciliter la gestion des finances des citoyens, de nombreux ATM sont disposés dans l'intégralité de la ville.", "X", "");

				if (IsTaskCompleted(playerid))
				{
					PlayerData[playerid][pTask] = 0;
					ShowPlayerFooter(playerid, "Vous avez ~g~complété~w~ toutes vos tâches!");
				}
			}
			else if (EntranceData[id][entranceType] == 1 && !PlayerData[playerid][pTestTask])
			{
				PlayerData[playerid][pTestTask] = 1;
				Dialog_Show(playerid, ShowOnly, DIALOG_STYLE_MSGBOX, "DMV", "L'une des plus réputées écoles de conduite de Los Santos.\nVous ne devrez pas dépasser une certaine limite de vitesse ou endommager le véhicule durant votre test.", "X", "");

				if (IsTaskCompleted(playerid))
				{
					PlayerData[playerid][pTask] = 0;
					ShowPlayerFooter(playerid, "Vous avez ~g~complété~w~ toutes vos tâches!");
				}
			}
		}
		if (EntranceData[id][entranceCustom])
			SetPlayerPosEx(playerid, EntranceData[id][entranceInt][0], EntranceData[id][entranceInt][1], EntranceData[id][entranceInt][2]);

		else
			SetPlayerPosEx(playerid, EntranceData[id][entranceInt][0], EntranceData[id][entranceInt][1], EntranceData[id][entranceInt][2]);

		SetPlayerFacingAngle(playerid, EntranceData[id][entranceInt][3]);

		SetPlayerInterior(playerid, EntranceData[id][entranceInterior]);
		SetPlayerVirtualWorld(playerid, EntranceData[id][entranceWorld]);

		SetCameraBehindPlayer(playerid);
		PlayerData[playerid][pEntrance] = EntranceData[id][entranceID];
	}
	return 1;
}

CMD:ram(playerid, params[])
return cmd_ramasser(playerid, params);
CMD:ramasser(playerid, params[])
{
	if (GetPlayerSpecialAction(playerid) == SPECIAL_ACTION_DUCK)
	{
		new
		count = 0,
		id = Item_Nearest(playerid),
		string[256];
		if (id != -1)
		{
			string = "";

			for (new i = 0; i < MAX_DROPPED_ITEMS; i ++) if (count < MAX_LISTED_ITEMS && DroppedItems[i][droppedModel] && IsPlayerInRangeOfPoint(playerid, 1.5, DroppedItems[i][droppedPos][0], DroppedItems[i][droppedPos][1], DroppedItems[i][droppedPos][2]) && GetPlayerInterior(playerid) == DroppedItems[i][droppedInt] && GetPlayerVirtualWorld(playerid) == DroppedItems[i][droppedWorld]) {
				NearestItems[playerid][count++] = i;

				strcat(string, DroppedItems[i][droppedItem]);
				strcat(string, "\n");
			}
			if (count == 1)
			{
				if (DroppedItems[id][droppedWeapon] != 0)
				{
					if (PlayerData[playerid][pLevel] < 2)
					return SendClientMessageEx(playerid, COLOR_ERROR, "Vous devez être level 2 pour utiliser cette commande.");

					GiveWeaponToPlayer(playerid, DroppedItems[id][droppedWeapon], DroppedItems[id][droppedAmmo]);

					Item_Delete(id);
					SendNearbyMessage(playerid, 15.0, COLOR_PURPLE, "%s a ramassé un(e) %s", ReturnName(playerid, 1), ReturnWeaponName(DroppedItems[id][droppedWeapon]));
					Log_Write("logs/droppick.txt", "[%s] %s picked up a %s.", ReturnDate(), ReturnName(playerid), ReturnWeaponName(DroppedItems[id][droppedWeapon]));

				}
				else if (PickupItem(playerid, id))
				{
					format(string, sizeof(string), "~g~%s~w~ ajouté à l'inventaire.", DroppedItems[id][droppedItem]);
					ShowPlayerFooter(playerid, string);
					SendNearbyMessage(playerid, 15.0, COLOR_PURPLE, "%s a ramassé un(e) \"%s\".", ReturnName(playerid, 1), DroppedItems[id][droppedItem]);
					Log_Write("logs/droppick.txt", "[%s] %s has picked up a \"%s\".", ReturnDate(), ReturnName(playerid), DroppedItems[id][droppedItem]);
				}
				else
					SendClientMessageEx(playerid, COLOR_ERROR, "Il n'y a plus de place dans votre inventaire.");
			}
			else Dialog_Show(playerid, PickupItems, DIALOG_STYLE_LIST, "Articles", string, "Ramasser", "X");
		}
		else
			SendClientMessageEx(playerid, COLOR_ERROR, "Tu n'es pas à genoux ou il n'y a rien à ramasser.");
	}
	return 1;
}

CMD:animtest(playerid, params[])
{
	if (PlayerData[playerid][pAdmin] < 1)
	return SendClientMessageEx(playerid, COLOR_ERROR, "Vous n'avez pas la permission d'utiliser cette commande.");

	static animName[50], animLib[50];
    if (sscanf(params, "s[50]s[50]", animName, animLib))
    {
        SendClientMessage(playerid, -1, "/animtest <AnimName> <AnimLibrairie>");
		return 1;
	}

	ApplyAnimation(playerid, animLib, animName, 4.1, 1, 1, 1, 1, 1, 1);
	return 1;
}

CMD:selectobject(playerid, params[])
{
	if (PlayerData[playerid][pAdmin] < 1)
	return SendClientMessageEx(playerid, COLOR_ERROR, "Vous n'avez pas la permission d'utiliser cette commande.");
	
	SelectObject(playerid);
	return 1;
}

public OnPlayerSelectObject(playerid, type, objectid, modelid, Float:fX, Float:fY, Float:fZ)
{
	SendClientMessageEx(playerid, COLOR_DEFAULT, "(%s) ObjectID: %d | ModelID: %d | fX: %.4f | fY: %.4f | fZ: %.4f", (type) ? ("GlobalObj") : ("PlayerObj"), objectid, modelid, fX, fY, fZ);
	return 1;
}


Dialog:DIALOG_BRACELETS_LISTE(playerid, response, listitem, inputtext[])
{
	if(!response) return 1;
	
	static
		userid,
		content[400],
		title[50];
		
	sscanf(inputtext, "u", userid);
	SetPVarInt(playerid, "BRACELET_PLAYER", userid);
	
	// Information sur Prénom_Nom
	// Localiser
	// Supprimer le bracelet éléctronique
	
	
	format(title, sizeof(title), "Bracelet éléctronique de %s (ID:%d)", ReturnName(userid), userid);
	format(content, sizeof(content), "Informations sur %s\nLocaliser\nSupprimer le bracelet éléctronique", ReturnName(userid));
	Dialog_Show(playerid, DIALOG_BRACELETS_LISTE2, DIALOG_STYLE_LIST, title, content, "Valider", "Annuler");
	return 1;
}

Dialog:DIALOG_BRACELETS_LISTE2(playerid, response, listitem, inputtext[])
{
	if(!response) return cmd_police(playerid, "bracelet liste");
	
	new
		userid = GetPVarInt(playerid, "BRACELET_PLAYER");
		
	switch(listitem)
	{
	    case 0:
		{ // Information sur %s
			ViewInfo(playerid, userid);
		}
		case 1:
		{ // Localiser
			new
			    Float:pos[3],
				title[50];

			GetPlayerLocationEx(userid, pos[0], pos[1], pos[2]);
			format(title, sizeof(title), "Bracelet de %s", ReturnName(userid));
			
			Waypoint_Set(playerid, title, pos[0], pos[1], pos[2]);
			
			SendClientMessageEx(playerid, COLOR_INFO, "Le bracelet éléctronique de %s (ID:%d) a été localisé à %s.", ReturnName(userid), userid, GetPlayerLocation(userid));
		}
		case 2:
		{ // Supprimer le bracelet éléctronique
		    PlayerData[userid][pBracelet] = 0;

		    SendClientMessageEx(playerid, COLOR_INFO, "Vous avez supprimé le bracelet éléctronique de %s (ID:%d)", ReturnName(userid), userid);
		    SendClientMessageEx(userid, COLOR_INFO, "%s (ID:%d) vous a supprimé votre bracelet éléctronique.", ReturnName(playerid), playerid);
		}
	}
	return 1;
}


Dialog:DIALOG_DASHCAM(playerid, response, listitem, inputtext[])
{
	if(!response) return 1;

	static
	    vehicleid,
		string[20];
	    
	sscanf(inputtext, "d", vehicleid);
	
	format(string, sizeof(string), "dashcam voir %d", vehicleid);
	cmd_police(playerid, string);
	return 1;
}

stock AddCamera(id, zone[], localisation[], etat, Float: cpx, Float: cpy, Float: cpz, Float: cplx, Float: cply, Float: cplz)
{
	CamInfo[id][Existance] = 1;
	format(CamInfo[id][Zone], 24, zone);
	format(CamInfo[id][Localisation], 24, localisation);
	CamInfo[id][Etat] = etat;
	CamInfo[id][cpX] = cpx;
	CamInfo[id][cpY] = cpy;
	CamInfo[id][cpZ] = cpz;
	CamInfo[id][cplX] = cplx;
	CamInfo[id][cplY] = cply;
	CamInfo[id][cplZ] = cplz;
	return true;
}

Dialog:ChooseCamera(playerid, response, listitem, inputtext[])
{
	if(response)
	{
        Dialog_Show(playerid, CameraMenu, DIALOG_STYLE_LIST, "Gestion de la caméra", "Surveiller la caméra\nAllumer la caméra\nÉteindre la caméra", "OK", "X");
        SetPVarInt(playerid, "CAMERA_ID", listitem);
	}
	return true;
}
Dialog:CameraMenu(playerid, response, listitem, inputtext[])
{
	if(!response)
		return 1;
	
	new
		cameraid = GetPVarInt(playerid, "CAMERA_ID");
	
	switch(listitem)
	{
	    case 0:
	    {
		    if(!CameraData[cameraid][cameraStatus])
				return SendClientMessage(playerid, COLOR_ERROR, "Cette caméra n'est pas allumée.");
		    
			GetPlayerPos(playerid, PlayerData[playerid][pDashcamPos][0], PlayerData[playerid][pDashcamPos][1], PlayerData[playerid][pDashcamPos][2]);

	        PlayerData[playerid][pDashcam_intVW][0] = GetPlayerInterior(playerid);
	        PlayerData[playerid][pDashcam_intVW][1] = GetPlayerVirtualWorld(playerid);

			weaponsSave(playerid);
			
			SetPlayerVirtualWorld(playerid, CameraData[cameraid][cameraWorld]);
			SetPlayerInterior(playerid, CameraData[cameraid][cameraInterior]);
			
			SetPlayerPos(playerid, CameraData[cameraid][cameraPos][0], CameraData[cameraid][cameraPos][1], CameraData[cameraid][cameraPos][2]-20);

			SetPlayerCameraPos(playerid, CameraData[cameraid][cameraPos][0]+1.5, CameraData[cameraid][cameraPos][1]-1.5, CameraData[cameraid][cameraPos][2]);
			SetPlayerCameraLookAt(playerid, CameraData[cameraid][cameraPos][3], CameraData[cameraid][cameraPos][4], CameraData[cameraid][cameraPos][5]);

			TogglePlayerControllable(playerid, false);

			InWatch[playerid] = true;
			
			SendClientMessage(playerid, COLOR_INFO, "Vous commencez à surveiller l'endroit sélectionné. (/p camera pour quitter)");
	    }
	    case 1:
	    {
		    CameraData[cameraid][cameraStatus] = 1;
		    SendClientMessage(playerid, COLOR_INFO, "Vous avez allumé la caméra.");
	    }
	    case 2:
	    {
		    CameraData[cameraid][cameraStatus] = 0;
		    SendClientMessage(playerid, COLOR_INFO, "Vous avez éteint la caméra.");
	    }
	}
	return 1;
}

Dialog:DIALOG_SDC(playerid, response, listitem, inputtext[])
{
	if(!response)
	    return 1;
	    
	switch(listitem)
	{
		case 0:
		{ // Rechercher les informations d'une personne
		    Dialog_Show(playerid, DIALOG_SDC_0, DIALOG_STYLE_INPUT, "Zone de contrôle", "Entrez le nom de la personne que vous voulez rechercher:", "Valider", "Annuler");
		}
		case 1:
		{ // Retracer un numéro
		    Dialog_Show(playerid, DIALOG_SDC_1, DIALOG_STYLE_INPUT, "Zone de contrôle", "Entrez le numéro que vous désirez géolocaliser:", "Valider", "Annuler");
		}
	}
	return 1;
}

Dialog:DIALOG_SDC_0(playerid, response, listitem, inputtext[])
{
	if(!response)
	    return cmd_police(playerid, "sdc");

	static
	    targetid;

	if(sscanf(inputtext, "u", targetid))
	{
	    Dialog_Show(playerid, DIALOG_SDC_0, DIALOG_STYLE_INPUT, "Zone de contrôle", "{FF0000}Vous avez entrer un pseudo invalide.\n\n{a9c4e4}Entrez le nom de la personne que vous voulez rechercher:", "Valider", "Annuler");
	    return 1;
	}

	ViewInfo(playerid, targetid);
	return 1;
}

Dialog:DIALOG_SDC_1(playerid, response, listitem, inputtext[])
{
	if(!response)
	    return cmd_police(playerid, "sdc");

	static
	    number;

	if(sscanf(inputtext, "d", number))
	{
	    Dialog_Show(playerid, DIALOG_SDC_1, DIALOG_STYLE_INPUT, "Zone de contrôle", "{FF0000}Vous avez entrer un numéro invalide.\n\n{a9c4e4}Entrez le numéro que vous désirez géolocaliser:", "Valider", "Annuler");
	    return 1;
	}

	new
	    count = 0;
	    
	foreach(new i:Player) if(PlayerData[i][pPhone] == number)
	{
	    count++;
	    
		SendClientMessageEx(playerid, COLOR_DEFAULT, "Le numéro %d a été géolocalisé à %s", number, GetPlayerLocation(i));
 		return 1;
	}
	
	if(count <= 0) SendClientMessage(playerid, COLOR_ERROR, "Impossible de localiser ce numéro.");
	return 1;
}


CMD:pol(playerid, params[])
return cmd_police(playerid, params);
CMD:p(playerid, params[])
return cmd_police(playerid, params);
CMD:police(playerid, params[])
{
	if (GetFactionType(playerid) != FACTION_POLICE) return SendClientMessageEx(playerid, COLOR_ERROR, "Vous devez être un agent du LSPD.");

    static nom[24], scmd[128];
    if (sscanf(params, "s[24]S()[128]", nom, scmd))
    {
        SendClientMessageEx(playerid, COLOR_USAGE, "/(p)(ol)ice <options>");
        SendClientMessage(playerid, COLOR_USAGE, "OPTIONS: service, unit, tazer, flashball, menotter, sirene, specialite");
        SendClientMessage(playerid, COLOR_USAGE, "OPTIONS: detenir, mdc, balise, bouclier, arreter, prendre,  defoncer");
        SendClientMessage(playerid, COLOR_USAGE, "OPTIONS: amende, herse, empreinte, fourriere, m(egaphone)");
        SendClientMessage(playerid, COLOR_USAGE, "OPTIONS: jetergun, micro, bracelet, demenotter");
        if (PlayerData[playerid][pFactionRank] >= 2) SendClientMessage(playerid, COLOR_USAGE, "OPTIONS R2: sabot, herse, micro");
        if (PlayerData[playerid][pFactionRank] >= 3) SendClientMessage(playerid, COLOR_USAGE, "OPTIONS R3: barrage, dashcam");
        if (PlayerData[playerid][pFactionRank] >= 5) SendClientMessage(playerid, COLOR_USAGE, "OPTIONS R5: annonce, permisarme");
        return 1;
    }
    if (!strcmp(nom, "service", true))
    {
        return cmd_fcasier(playerid, params);
    }
    if (PlayerData[playerid][pOnDuty] == 0) return SendClientMessage(playerid, COLOR_WHITE, "Vous devez être en service.");

    if (!strcmp(nom, "jetergun", true))
    {
		new weapon = GetWeapon(playerid);

		if (!GetWeapon(playerid))
			return SendClientMessageEx(playerid, COLOR_ERROR, "Vous n'avez pas d'arme en main.");

		ResetWeapon(playerid, weapon);
		SendClientMessageEx(playerid, COLOR_INFO, "vous avez jeté votre %s.", ReturnWeaponName(weapon));
    }
	if (!strcmp(nom, "permisarme", true))
	{
		if (PlayerData[playerid][pFactionRank] < 5) return SendClientMessageEx(playerid, COLOR_ERROR, "Vous n'avez pas la permission d'utiliser cette commande, il faut être rang 5.");

    	new choose[24], string[128];
		if(sscanf(scmd, "s[24]S()[128]", choose, string))
		{
			SendClientMessageEx(playerid, COLOR_USAGE, "/p(olice) permisarme <options>");
			SendClientMessage(playerid, COLOR_USAGE, "OPTIONS: donner, retirer");
			return 1;
		}

        if (!strcmp(choose, "donner", true))
        {
			new userid, prix;

			if (sscanf(string, "ud", userid,prix))
			{
				SendClientMessageEx(playerid, COLOR_USAGE, "/p(olice) permisarme donner <PlayerID/PlayerName> <Prix>");
				return 1;
			}
			if (userid == INVALID_PLAYER_ID || !IsPlayerNearPlayer(playerid, userid, 5.0)) return SendClientMessageEx(playerid, COLOR_ERROR, "Ce joueur n'est pas près de vous ou il n'est pas connecté.");
			if (Inventory_HasItem(userid, "Permis d'arme")) return SendClientMessageEx(playerid, COLOR_ERROR, "Ce joueur possède déjà le permis port d'armes");
			if (prix <= 0 || prix > 20000) return SendClientMessageEx(playerid, COLOR_ERROR, "Le prix de la licence du port d'arme ne peut excéder 20000$.");

			SendClientMessageEx(userid, COLOR_INFO, "Utilisez /accepter permis pour accepter le permis port d'arme, pour la somme de %d$.",prix);

			PaID[userid] = playerid;
			PaPri[userid] = prix;
        }
        if (!strcmp(choose, "retirer", true))
        {
			new userid;
			if (sscanf(string, "u", userid))
			{
				SendClientMessageEx(playerid, COLOR_USAGE, "/p(olice) permisarme retirer <PlayerID/PlayerName>");
				return 1;
			}
			if (userid == INVALID_PLAYER_ID || !IsPlayerNearPlayer(playerid, userid, 5.0)) return SendClientMessageEx(playerid, COLOR_ERROR, "Ce joueur n'est pas près de vous où pas connecter.");
			if (userid == playerid) return SendClientMessageEx(playerid, COLOR_ERROR, "Vous ne pouvez pas vous retirer votre propre permis.");
			if (!Inventory_HasItem(userid, "Permis d'arme")) return SendClientMessageEx(playerid, COLOR_ERROR, "Ce joueur n'a pas de permis port d'armes.");

			Inventory_Remove(userid, "Permis d'arme");

			SendClientMessageEx(playerid, COLOR_INFO, "Vous avez retiré le permis port d'armes à %s.", ReturnName(userid, 0));
			SendClientMessageEx(userid, COLOR_INFO, "Votre permis port d'armes a été retiré par %s.", ReturnName(playerid));

			SendNearbyMessage(playerid, 15.0, COLOR_PURPLE, "%s retire le permis port d'armes à %s.", ReturnName(playerid), ReturnName(userid, 0));
        }
	}
    if (!strcmp(nom, "megaphone", true) || !strcmp(nom, "m", true))
    {
		if(!IsPlayerInAnyVehicle(playerid))
	    return SendClientMessageEx(playerid, COLOR_ERROR, "Impossible d'utiliser le mégaphone hors du véhicule.");

		new
		    text[90];

		if(sscanf(scmd, "s[90]", text))
		{
			SendClientMessageEx(playerid, COLOR_USAGE, "/police (m)egaphone <Texte>");
			return 1;
		}

		SendNearbyMessage(playerid, 15.0, 0xFFFF00FF, "(Mégaphone) %s dit: %s", ReturnName(playerid, 1), text);

    }
    if (!strcmp(nom, "camera", true))
    {
		new
			string[125*MAX_CAMERAS],
			camstatus[20];
			
		if(InWatch[playerid] == true)
		{
		    TogglePlayerControllable(playerid, true);
			SpawnPlayer(playerid);
			
			DeletePVar(playerid, "CAMERA_ID");
			
			SendClientMessage(playerid, -1, "Fin de surveillance.");
		}
		else
		{
			if (!IsPlayerInRangeOfPoint(playerid, 5.0, 2262.4937, 2083.2742, 100.4190))
				return SendClientMessageEx(playerid, COLOR_ERROR, "Vous n'êtes pas à la central.");
			
			DeletePVar(playerid, "CAMERA_ID");
			
			format(string, sizeof(string), "Zone\tLocalisation\tStatut\n");
			
			for(new i = 0; i < MAX_CAMERAS; i++) if(CameraData[i][cameraExists])
			{
			    if(CameraData[i][cameraStatus]) camstatus = "{33CC33}Allumée";
			    else camstatus = "{FF0000}Éteinte";
			    
			    format(string, sizeof(string), "%s%s\t%s\t%s\n", string, CameraData[i][cameraZone], CameraData[i][cameraLocalisation], camstatus);
			}
			Dialog_Show(playerid, ChooseCamera, DIALOG_STYLE_TABLIST_HEADERS, "Liste des caméras", string, "Accéder", "Retour");
		}
    }
    if (!strcmp(nom, "unit", true))
    {
        new string[32], vehicleid;
		vehicleid = GetPlayerVehicleID(playerid);
		if(!IsPlayerInAnyVehicle(playerid)) return SendClientMessageEx(playerid, COLOR_ERROR, "Vous devez être dans un véhicule.");
		if (!IsACruiser(GetPlayerVehicleID(playerid))) return SendClientMessageEx(playerid, COLOR_ERROR, "Vous devez être à l'intérieur d'une voiture de police.");

		if(vehiclecallsign[GetPlayerVehicleID(playerid)] == 1)
		{
			Delete3DTextLabel(vehicle3Dtext[vehicleid]);
			vehiclecallsign[vehicleid] = 0;
			SendClientMessage(playerid, COLOR_RED, "Unité retirée.");
			return 1;
		}

		if(sscanf(scmd, "s[32]",string)) return SendClientMessageEx(playerid, COLOR_ERROR, "/police unit <texte>");

		if(vehiclecallsign[GetPlayerVehicleID(playerid)] == 0)
		{
			vehicle3Dtext[vehicleid] = Create3DTextLabel(string, COLOR_WHITE, 0.0, 0.0, 0.0, 40.0, 0, 1);
			Attach3DTextLabelToVehicle(vehicle3Dtext[vehicleid], vehicleid, 0.0, -2.8, 0.0);
			vehiclecallsign[vehicleid] = 1;
		}
    }
    if (!strcmp(nom, "specialite", true))
    {
        static string[70];
		if(sscanf(scmd, "s[70]", string)) return SendClientMessageEx(playerid, COLOR_ERROR, "/p(olice) specialite <Texte>");

		format(PlayerData[playerid][pSpeciality], 70, "%s", string);
		SendClientMessageEx(playerid, COLOR_INFO, "Votre spécialité est désormais: %s", string);
    }
    else if (!strcmp(nom, "annonce", true))
    {
		new text[128];

		if (PlayerData[playerid][pFactionRank] < 5) return SendClientMessageEx(playerid, COLOR_ERROR, "Vous n'avez pas la permission d'utiliser cette commande, il faut être rang 5.");

		if(sscanf(scmd, "s[128]", text))
		{
			SendClientMessageEx(playerid, COLOR_USAGE, "/police annonce <texte>");
			return 1;
		}

		if (strlen(text) > 3)
		{
			SendClientMessageToAll(COLOR_WHITE, "|_________ Los Santos Police Department _________|");
			SendClientMessageToAllEx(COLOR_BLUE, "%s %s: %s", Faction_GetRank(playerid), ReturnName(playerid), text);
		}
    }
    else if (!strcmp(nom, "micro", true))
    {
		if (PlayerData[playerid][pFactionRank] < 2) return SendClientMessageEx(playerid, COLOR_ERROR, "Vous n'avez pas la permission d'utiliser cette commande, il faut être rang 2.");
		
    	new choose[24], string[128];
		if(sscanf(scmd, "s[24]S()[128]", choose, string))
		{
			SendClientMessageEx(playerid, COLOR_USAGE, "/p(olice) micro <options>");
			SendClientMessage(playerid, COLOR_USAGE, "OPTIONS: mettre, retirer");
			return 1;
		}

        if (!strcmp(choose, "mettre", true))
        {
            new
				target;

		    if(sscanf(string, "u", target))
				return SendClientMessageEx(playerid, COLOR_USAGE, "/p(olice) micro mettre <PlayerID/PlayerName>");

		    if(!IsPlayerNearPlayer(playerid, target, 6.0))
				return SendClientMessageEx(playerid, COLOR_ERROR, "Vous n'êtes pas à proximité de la cible.");

			if(espionInfo[target][Micro] == true)
				return SendClientMessageEx(playerid, COLOR_ERROR, "La cible est déjà équipée d'un micro.");

		    espionInfo[target][Micro] = true;
		    espionInfo[target][Supervisor] = playerid;
		    AlreadyWatching[playerid] = target;

		    SendClientMessageEx(playerid, COLOR_YELLOW, "Vous avez mit un micro sur %s", ReturnName(target));
		    SendClientMessageEx(target, COLOR_YELLOW, "Le policier %s vous a mit un micro.", ReturnName(playerid));
        }

        if (!strcmp(choose, "retirer", true))
        {
			new
				target;

		    if(sscanf(string, "u", target))
				return SendClientMessageEx(playerid, COLOR_USAGE, "/p(olice) micro retirer <PlayerID/PlayerName>");

		    if(!IsPlayerNearPlayer(playerid, target, 6.0))
				return SendClientMessageEx(playerid, COLOR_ERROR, "Vous n'êtes pas à proximité de la cible.");

			if(espionInfo[target][Micro] == false)
				return SendClientMessageEx(playerid, COLOR_ERROR, "La cible n'est pas équipée de micro.");

		    espionInfo[target][Micro] = false;
		    AlreadyWatching[ espionInfo[target][Supervisor] ] = -1;

		    SendClientMessageEx(playerid, COLOR_YELLOW, "Vous avez retiré le micro sur %s", ReturnName(target));
		    SendClientMessageEx(target, COLOR_YELLOW, "Le policier %s vous a retiré votre micro.", ReturnName(playerid));
        }
		
	}
    else if (!strcmp(nom, "sdc", true))
    {
		if (!IsPlayerInRangeOfPoint(playerid, 5.0, 2262.4937, 2083.2742, 100.4190)) return SendClientMessageEx(playerid, COLOR_ERROR, "Vous n'êtes pas à la central.");
		
		Dialog_Show(playerid, DIALOG_SDC, DIALOG_STYLE_LIST, "Zone de contrôle", "Recherche d'information sur une personne\nRetracer un numéro de téléphone", "Valider", "Annuler");
    }
    else if (!strcmp(nom, "dashcam", true))
    {
		if (PlayerData[playerid][pFactionRank] < 3) return SendClientMessageEx(playerid, COLOR_ERROR, "Vous n'avez pas la permission d'utiliser cette commande, il faut être rang 3.");

		if (PlayerData[playerid][pDashcam] != 0)
		{
	      	TogglePlayerSpectating(playerid, false);
			SendClientMessageEx(playerid, COLOR_INFO, "Vous avez quitté la vue de la dashcam.");
			return 1;
		}
		if (!IsPlayerInRangeOfPoint(playerid, 5.0, 2262.4937, 2083.2742, 100.4190)) return SendClientMessageEx(playerid, COLOR_ERROR, "Vous n'êtes pas à la central.");
		
    	new choose[24], string[128];
		if(sscanf(scmd, "s[24]S()[128]", choose, string))
		{
			SendClientMessageEx(playerid, COLOR_USAGE, "/police dashcam <options>");
			SendClientMessage(playerid, COLOR_USAGE, "OPTIONS: liste, voir");
			return 1;
		}

        if (!strcmp(choose, "liste", true))
        {
            new
                content[125*40],
				title[50],
				type[10],
				count = 0,
				Float:pos[3];
                
			format(content, sizeof(content), "N°\tSecteur\tType\tNombre de passagers\n");
            for(new i=0; i<MAX_DYNAMIC_CARS; i++) if(GetFactionType(playerid) == CarData[i][carFaction])
			{
			    count++;
			    
			    if(GetPassengersInCar(CarData[i][carVehicle]) == 1) format(type, sizeof(type), "Lincoln");
			    else if(GetPassengersInCar(CarData[i][carVehicle]) == 2) format(type, sizeof(type), "Adam");
			    else if(GetPassengersInCar(CarData[i][carVehicle]) >= 3) format(type, sizeof(type), "Xray");
			    else format(type, sizeof(type), "Inconnu");
			    
			    GetVehiclePos(CarData[i][carVehicle], pos[0], pos[1], pos[2]);
			    format(content, sizeof(content), "%s%d\t%s\t%s\t%d passagers\n", content, CarData[i][carVehicle], GetLocation(pos[0], pos[1], pos[2]), type, GetPassengersInCar(CarData[i][carVehicle]));
			}
			
			if(count == 0)
			    return SendClientMessage(playerid, COLOR_ERROR, "Aucun véhicule n'a été trouvé.");
			    
			format(title, sizeof(title), "Liste des %d véhicules de service", count);
			Dialog_Show(playerid, DIALOG_DASHCAM, DIALOG_STYLE_TABLIST_HEADERS, title, content, "Valider", "Annuler");
        }
        if (!strcmp(choose, "voir", true))
        {
            if(PlayerData[playerid][pDashcam] == 0)
            {
	           	new
				   	vehicle,
					Float:pos[4];
				if (sscanf(string, "d", vehicle))
				{
					SendClientMessageEx(playerid, COLOR_USAGE, "/police dashcam voir <VehicleID>");
					return 1;
				}
				if (!IsValidVehicle(vehicle) || Car_GetID(vehicle) == -1) return SendClientMessageEx(playerid, COLOR_ERROR, "Cette patrouille n'existe pas.");

				vehicle = Car_GetID(vehicle);
				if(CarData[vehicle][carFaction] != GetFactionType(playerid)) return SendClientMessageEx(playerid, COLOR_ERROR, "Cette patrouille n'existe pas.");

				GetPlayerPos(playerid, PlayerData[playerid][pDashcamPos][0], PlayerData[playerid][pDashcamPos][1], PlayerData[playerid][pDashcamPos][2]);
		        PlayerData[playerid][pDashcam_intVW][0] = GetPlayerInterior(playerid);
		        PlayerData[playerid][pDashcam_intVW][1] = GetPlayerVirtualWorld(playerid);
    
				GetVehiclePos(CarData[vehicle][carVehicle], pos[0], pos[1], pos[2]);
				GetVehicleZAngle(CarData[vehicle][carVehicle], pos[3]);
				
				weaponsSave(playerid);
				
				PlayerData[playerid][pDashcam] = 1;
				PlayerData[playerid][pDashcam_object] = CreateObject(19482, pos[0], pos[1], pos[2], pos[3], 0.0,0.0);
				PlayerData[playerid][pDashcam_veh] = CarData[vehicle][carVehicle];
				
				switch(GetVehicleModel(CarData[vehicle][carVehicle]))
				{
					case 596, 597, 598, 599:
					{
						AttachObjectToVehicle(PlayerData[playerid][pDashcam_object], CarData[vehicle][carVehicle], -0.000000, 1.755516, 0.466998, 0.000000, 0.000000, 0.000000);
						ShowPlayerDashCamTD(playerid, false, true);
					}
					case 523:
					{
						AttachObjectToVehicle(PlayerData[playerid][pDashcam_object], CarData[vehicle][carVehicle], 0.000000, 0.744999, 1.0, 0.000000, 0.000000, 0.000000);
						ShowPlayerDashCamTD(playerid, false, true);
			        }
					case 497:
					{
						AttachObjectToVehicle(PlayerData[playerid][pDashcam_object], CarData[vehicle][carVehicle], -0.000000, 1.877012, -0.701004, 0.000000, 0.000000, 0.000000);
						ShowPlayerDashCamTD(playerid, true, false);
					}
				 	default:
			 		{
					 	AttachObjectToVehicle(PlayerData[playerid][pDashcam_object], CarData[vehicle][carVehicle], -0.000000, 1.755516, 0.466998, 0.000000, 0.000000, 0.000000);
						ShowPlayerDashCamTD(playerid, false, true);
					}
				}
				
				TogglePlayerSpectating(playerid, true);
				
				AttachCameraToObject(playerid, PlayerData[playerid][pDashcam_object]);
				
				SetPlayerCameraPos(playerid, pos[0], pos[1], pos[2]);
				SetPlayerFacingAngle(playerid, pos[3]);
				
				SetPlayerVirtualWorld(playerid, GetVehicleVirtualWorld(CarData[vehicle][carVehicle]));
				SetPlayerInterior(playerid, 0);
				
				SendClientMessageEx(playerid, COLOR_INFO, "Utilisez \"/police dashcam voir\" pour revenir au poste de police.");
			}
        }

    }
    else if (!strcmp(nom, "bracelet", true))
    {
		if (PlayerData[playerid][pFactionRank] < 3) return SendClientMessageEx(playerid, COLOR_ERROR, "Vous n'avez pas la permission d'utiliser cette commande, il faut être rang 3.");

    	new choose[24], string[128];
		if(sscanf(scmd, "s[24]S()[128]", choose, string))
		{
			SendClientMessageEx(playerid, COLOR_USAGE, "/police bracelet <options>");
			SendClientMessage(playerid, COLOR_USAGE, "OPTIONS: mettre, retirer, liste");
			return 1;
		}

        if (!strcmp(choose, "mettre", true))
        {
           	static userid;
			if (sscanf(string, "u", userid))
			{
				SendClientMessageEx(playerid, COLOR_USAGE, "/police bracelet mettre <PlayerID/PlayerName>");
				return 1;
			}

			if (userid == INVALID_PLAYER_ID || !IsPlayerNearPlayer(playerid, userid, 5.0))
				return SendClientMessageEx(playerid, COLOR_ERROR, "Ce joueur n'est pas connecté ou il n'est pas près de vous.");

			if(PlayerData[userid][pBracelet] != 0)
			    return SendClientMessage(playerid, COLOR_ERROR, "Ce joueur a déjà un bracelet sur lui.");

			PlayerData[userid][pBracelet] = 1;
			
			SendClientMessageEx(playerid, COLOR_INFO, "Vous avez mit un bracelet éléctronique à %s (ID:%d)", ReturnName(userid), userid);
			SendClientMessageEx(userid, COLOR_INFO, "%s (ID: %d) vous a placé un bracelet éléctronique.", ReturnName(playerid), playerid);
        }
        if (!strcmp(choose, "retirer", true))
        {
           	static userid;
			if (sscanf(string, "u", userid))
			{
				SendClientMessageEx(playerid, COLOR_USAGE, "/police bracelet retirer <PlayerID/PlayerName>");
				return 1;
			}

			if (userid == INVALID_PLAYER_ID || !IsPlayerNearPlayer(playerid, userid, 5.0))
				return SendClientMessageEx(playerid, COLOR_ERROR, "Ce joueur n'est pas connecté ou il n'est pas près de vous.");

			if(PlayerData[userid][pBracelet] != 1)
			    return SendClientMessage(playerid, COLOR_ERROR, "Ce joueur n'a aucun bracelet éléctronique sur lui.");

			PlayerData[userid][pBracelet] = 0;

			SendClientMessageEx(playerid, COLOR_INFO, "Vous avez retirer le bracelet éléctronique de %s (ID:%d)", ReturnName(userid), userid);
			SendClientMessageEx(userid, COLOR_INFO, "%s (ID: %d) vous a retiré votre bracelet éléctronique.", ReturnName(playerid), playerid);
        }
        if (!strcmp(choose, "liste", true))
        {
            new
				content[125*30],
				title[50],
				count = 0;
				
			format(content, sizeof(content), "Prénom Nom\tLocalisation\n");
			
			foreach(new i:Player) if(PlayerData[i][pBracelet] != 0)
			{
				count++;
				
			    // ID / NOM D'UTILISATEUR / LOCALISATION
			    format(content, sizeof(content), "%s%s (ID: %d)\t%s", content, ReturnName(i), i, GetPlayerLocation(i));
			}
			
			if(count == 0)
			    return SendClientMessage(playerid, COLOR_ERROR, "Aucun bracelet éléctronique n'a été trouvé.");

			format(title, sizeof(title), "Liste des %d bracelet(s) éléctronique", count);
            Dialog_Show(playerid, DIALOG_BRACELETS_LISTE, DIALOG_STYLE_TABLIST_HEADERS, title, content, "Valider", "Annuler");
        }
    }
    else if (!strcmp(nom, "civil", true))
    {
        new skin;
		if (sscanf(scmd, "i", skin))
		{
			SendClientMessageEx(playerid, COLOR_USAGE, "/police civil <SkinID>");
			return 1;
		}
		if(PoliceCivil[playerid])
		{
		    PoliceCivil[playerid] = 1;
			SetPlayerSkin(playerid, skin);
			SetPlayerColor(playerid, COLOR_WHITE);
			SendNearbyMessage(playerid, 15.0, COLOR_PURPLE, "%s enfile son équipement civil.", ReturnName(playerid));
		}
		else
		{
		    PoliceCivil[playerid] = 0;
			SetPlayerSkin(playerid, skin);
			SetFactionColor(playerid);
			SendNearbyMessage(playerid, 15.0, COLOR_PURPLE, "%s retire son équipement civil.", ReturnName(playerid));
		}

    }
    else if (!strcmp(nom, "prime", true))
    {
		static userid, amount;

		if (PlayerData[playerid][pFactionRank] < 7) return SendClientMessageEx(playerid, COLOR_ERROR, "Vous n'avez pas la permission d'utiliser cette commande, il faut être le rang 7.");
		if (sscanf(scmd, "ud", userid, amount))
		{
			SendClientMessageEx(playerid, COLOR_USAGE, "/police prime <PlayerID/PlayerName> <entre 1$ à 300$>");
			return 1;
		}
		if (userid == INVALID_PLAYER_ID) return SendClientMessageEx(playerid, COLOR_ERROR, "Ce joueur n'est pas valide.");
		if (amount < 1 || amount > 300) return SendClientMessageEx(playerid, COLOR_ERROR, "Pas en dessous de $1 ou plus de $300.");
		if (PlayerData[playerid][pPrime] > 0) return SendClientMessageEx(playerid, COLOR_ERROR, "Vous devez attendre 1 heures avant d'offrir une prime.");

		PlayerData[playerid][pPrime] = 3600;
		GiveMoney(userid, amount);
		SendClientMessageEx(playerid, COLOR_INFO, "Vous avez donné à %s une prime de %d.", ReturnName(userid, 0), amount);
		SendClientMessageEx(userid, COLOR_INFO, "Le leader %s vous a offert une prime de %d.", ReturnName(playerid), amount);
    }
    else if (!strcmp(nom, "sabot", true))
    {
		if (PlayerData[playerid][pFactionRank] < 2) return SendClientMessageEx(playerid, COLOR_ERROR, "Vous n'avez pas la permission d'utiliser cette commande, il faut être rang 2.");

    	new choose[24], stringcmd[128];
		if(sscanf(scmd, "s[24]S()[128]", choose, stringcmd))
		{
			SendClientMessageEx(playerid, COLOR_USAGE, "/police sabot <options>");
			SendClientMessage(playerid, COLOR_USAGE, "OPTIONS: mettre, retirer");
			return 1;
		}
        if (!strcmp(choose, "mettre", true))
		{
			new id = -1;
			new priceSabot;

			if ((id = Car_Nearest(playerid)) != -1)
			{
				if (sscanf(stringcmd, "d", priceSabot))
	 			{
				 	SendClientMessageEx(playerid, COLOR_USAGE, "/police sabot mettre <Prix ($1 à $1000)>");
				 	return 1;
			    }
			    
				if (CarData[id][carOwner] == 0) return SendClientMessageEx(playerid, COLOR_ERROR, "Vous ne pouvez pas mettre de sabot sur ce véhicule.");
				if (CarData[id][carSabot] != 0) return SendClientMessageEx(playerid, COLOR_ERROR, "Ce véhicule a déjà un sabot.");
				if (priceSabot < 1 || priceSabot > 1000) return SendClientMessageEx(playerid, COLOR_ERROR, "Pas en dessous de $1 ou plus de $1,000.");

				CarData[id][carSabot] = 1;
				CarData[id][carSabPri] = priceSabot;
				Car_Save(id);
				
				SendFactionMessageEx(FACTION_POLICE, COLOR_RADIO, "%s a placé un sabot sur le véhicule ID: %d.",ReturnName(playerid), CarData[id][carVehicle]);
				SendNearbyMessage(playerid, 15.0, COLOR_PURPLE, "%s place un sabot sur le véhicule.", ReturnName(playerid));
			}
			else SendClientMessageEx(playerid, COLOR_ERROR, "Vous n'êtes pas près d'un véhicule.");
		}
		if (!strcmp(choose, "retirer", true))
		{
			new id = -1;
			if ((id = Car_Nearest(playerid)) != -1)
			{
				if (CarData[id][carSabot] == 0) return SendClientMessageEx(playerid, COLOR_ERROR, "Ce véhicule ne possède pas de sabot");

				CarData[id][carSabot] = 0;
				CarData[id][carSabPri] = 0;
				Car_Save(id);
				SendFactionMessageEx(FACTION_POLICE, COLOR_RADIO, "%s a retiré un sabot sur le véhicule ID: %d.",ReturnName(playerid), CarData[id][carVehicle]);
			}
			else SendClientMessageEx(playerid, COLOR_ERROR, "Vous n'êtes pas près d'un véhicule.");
		}
    }
    else if (!strcmp(nom, "tazer", true) || !strcmp(nom, "taser", true))
    {
		if (GetPlayerState(playerid) != PLAYER_STATE_ONFOOT || !IsPlayerSpawned(playerid)) return SendClientMessageEx(playerid, COLOR_ERROR, "Vous ne pouvez pas utiliser cette commande pour le moment");
		if (!PlayerData[playerid][pTazer])
		{
			PlayerData[playerid][pTazer] = 1;
			GetPlayerWeaponData(playerid, 2, PlayerData[playerid][pArmeTF][0], PlayerData[playerid][pAmmoTF][0]);

			GivePlayerWeapon(playerid, 23, 20);
			PlayerData[playerid][pAmmo][2] = 20;
			
			SendNearbyMessage(playerid, 15.0, COLOR_PURPLE, "%s prend son tazer situé au niveau de sa ceinture.", ReturnName(playerid));
		}
		else
		{
			PlayerData[playerid][pTazer] = 0;

			PlayerData[playerid][pAmmo][2] = PlayerData[playerid][pAmmoTF][0];
			SetPlayerAmmo(playerid, 23, 0);
			
			GiveWeaponToPlayer(playerid, PlayerData[playerid][pArmeTF][0], PlayerData[playerid][pAmmoTF][0]);
			
			SendNearbyMessage(playerid, 15.0, COLOR_PURPLE, "%s range son tazer au niveau de sa ceinture.", ReturnName(playerid));
		}
    }
    else if (!strcmp(nom, "flashball", true))
    {
		if (GetPlayerState(playerid) != PLAYER_STATE_ONFOOT || !IsPlayerSpawned(playerid)) return SendClientMessageEx(playerid, COLOR_ERROR, "Vous ne pouvez pas utiliser cette commande pour le moment.");

		if (!PlayerData[playerid][pBeanBag])
		{
			PlayerData[playerid][pBeanBag] = 1;
			GetPlayerWeaponData(playerid, 3, PlayerData[playerid][pArmeTF][1], PlayerData[playerid][pAmmoTF][1]);

			GivePlayerWeapon(playerid, 25, 10);
			PlayerData[playerid][pAmmo][3] = 10;
			SendNearbyMessage(playerid, 15.0, COLOR_PURPLE, "%s récupère son flashball qu'il tenait en bandoulière.", ReturnName(playerid));
		}
		else
		{
			PlayerData[playerid][pBeanBag] = 0;
			//SetWeapons(playerid);

			PlayerData[playerid][pAmmo][3] = PlayerData[playerid][pAmmoTF][1];
			SetPlayerAmmo(playerid, 25, 0);
			
			GiveWeaponToPlayer(playerid, PlayerData[playerid][pArmeTF][0], PlayerData[playerid][pAmmoTF][0]);
			
			SendNearbyMessage(playerid, 15.0, COLOR_PURPLE, "%s replace son flashball en bandoulière.", ReturnName(playerid));
		}
    }
    else if (!strcmp(nom, "menotter", true))
    {
		new userid;

		if (sscanf(scmd, "u", userid)) return SendClientMessageEx(playerid, COLOR_USAGE, "/police menotter <PlayerID/PlayerName>");
		if (userid == INVALID_PLAYER_ID) return SendClientMessageEx(playerid, COLOR_ERROR, "Ce joueur n'est pas connecté.");
		if (userid == playerid) return SendClientMessageEx(playerid, COLOR_ERROR, "Vous ne pouvez pas vous menotter vous-même.");
		if (!IsPlayerNearPlayer(playerid, userid, 5.0)) return SendClientMessageEx(playerid, COLOR_ERROR, "Vous devez être près de ce joueur.");
		if (PlayerData[userid][pStunned] < 0 && GetPlayerSpecialAction(userid) != SPECIAL_ACTION_HANDSUP && !IsPlayerIdle(userid)) return SendClientMessageEx(playerid, COLOR_ERROR, "Le joueur doit être inactif ou tazer.");
		if (GetPlayerState(userid) != PLAYER_STATE_ONFOOT) return SendClientMessageEx(playerid, COLOR_ERROR, "Le joueur doit être sur pied avant de pouvoir le menotter.");
		if (PlayerData[userid][pCuffed]) return SendClientMessageEx(playerid, COLOR_ERROR, "Le joueur est déjà menotté.");

		if (PlayerData[userid][pDrinking])
		{
			SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);

			DestroyProgressBar(PlayerData[userid][pDrinkBar]);
			PlayerData[userid][pDrinking] = 0;
		}
		PlayerData[userid][pCuffed] = 1;
		SetPlayerSpecialAction(userid, SPECIAL_ACTION_CUFFED);
	    SetPlayerAttachedObject(userid, 9, 19418, 5, 0.002000,0.037999,-0.004000,-12.600098,126.699996,-119.800048,1.000000,1.000000,1.000000);

		SendNearbyMessage(playerid, 15.0, COLOR_PURPLE, "%s récupère une paire de menotte puis menotte %s.", ReturnName(playerid), ReturnName(userid, 0));
    }
    else if (!strcmp(nom, "demenotter", true))
    {
		new userid;
		if (sscanf(scmd, "u", userid)) return SendClientMessageEx(playerid, COLOR_USAGE, "/demenotter <PlayerID/PlayerName>");
		if (userid == INVALID_PLAYER_ID) return SendClientMessageEx(playerid, COLOR_ERROR, "Ce joueur n'est pas connecté.");
		if (userid == playerid) return SendClientMessageEx(playerid, COLOR_ERROR, "Vous ne pouvez pas vous demenotter vous-même.");
		if (!IsPlayerNearPlayer(playerid, userid, 5.0)) return SendClientMessageEx(playerid, COLOR_ERROR, "Vous devez être près du joueur.");
		if (!PlayerData[userid][pCuffed]) return SendClientMessageEx(playerid, COLOR_ERROR, "Ce joueur n'est pas menotté.");

		PlayerData[userid][pCuffed] = 0;
		
		SetPlayerSpecialAction(userid, SPECIAL_ACTION_NONE);
		RemovePlayerAttachedObject(userid, 9);
		
		SendNearbyMessage(playerid, 15.0, COLOR_PURPLE, "%s retire la paire de menotte à %s", ReturnName(playerid), ReturnName(userid, 0));
    }
    else if (!strcmp(nom, "detenir", true))
    {
		new userid, vehicleid = GetNearestVehicle(playerid);
		if (sscanf(scmd, "u", userid)) return SendClientMessageEx(playerid, COLOR_USAGE, "/police detenir <PlayerID/PlayerName>");
		if (userid == INVALID_PLAYER_ID) return SendClientMessageEx(playerid, COLOR_ERROR, "Ce joueur n'est pas connecté.");
		if (userid == playerid) return SendClientMessageEx(playerid, COLOR_ERROR, "Vous ne pouvez pas vous detenir vous même.");
		if (!IsPlayerNearPlayer(playerid, userid, 5.0)) return SendClientMessageEx(playerid, COLOR_ERROR, "Vous devez être près de ce joueur.");
		if (!PlayerData[userid][pCuffed]) return SendClientMessageEx(playerid, COLOR_ERROR, "Ce joueur n'est pas menotté.");
		if (vehicleid == INVALID_VEHICLE_ID) return SendClientMessageEx(playerid, COLOR_ERROR, "Vous n'êtes pas à proximité d'un véhicule.");
		if (GetVehicleMaxSeats(vehicleid) < 2) return SendClientMessageEx(playerid, COLOR_ERROR, "Vous ne pouvez pas embarquer ce joueur dans ce véhicule.");
		if (IsPlayerInVehicle(userid, vehicleid))
		{
			TogglePlayerControllable(userid, 1);
			RemoveFromVehicle(userid);
			SendNearbyMessage(playerid, 15.0, COLOR_PURPLE, "%s ouvre la porte et tire %s dans le véhicule.", ReturnName(playerid), ReturnName(userid, 0));
		}
		else
		{
			new seatid = GetAvailableSeat(vehicleid, 2);
			if (seatid == -1)
			return SendClientMessageEx(playerid, COLOR_ERROR, "Il n'y a plus de sièges restants.");

			new string[64];
			format(string, sizeof(string), "Vous avez été ~r~embarqué~w~ par %s.", ReturnName(playerid));
			//TogglePlayerControllable(userid, 0);

			StopDragging(userid);
			PutPlayerInVehicle(userid, vehicleid, seatid);

			SendNearbyMessage(playerid, 15.0, COLOR_PURPLE, "%s ouvre la porte et place %s dans le véhicule.", ReturnName(playerid), ReturnName(userid, 0));
			ShowPlayerFooter(userid, string);
		}
    }
    else if (!strcmp(nom, "mdc", true))
    {
		if (!IsACruiser(GetPlayerVehicleID(playerid))) return SendClientMessageEx(playerid, COLOR_ERROR, "Vous devez être à l'intérieur d'une voiture de police.");
		Dialog_Show(playerid, MainMDC, DIALOG_STYLE_LIST, "Ordinateur", "Avis de recherche actif\nPlacer un avis de recherche\nVoir les avis de recherche\nRecherche", "Ok", "X");
    }
    else if (!strcmp(nom, "balise", true))
    {
		new factionid = PlayerData[playerid][pFaction];
		new Float:x, Float:y, Float:z;
		GetPlayerPos(playerid,x,y,z);

		SetFactionMarker(playerid, FACTION_POLICE, 0x00D700FF);
		SendFactionMessage(factionid, COLOR_WHITE,"{BABABA}%s demande du renfort. (Localisation: {FFFFFF}%s{BABABA})", ReturnName(playerid), GetLocation(x, y, z));
    }
    else if (!strcmp(nom, "bouclier", true))
    {
		if(!IsPlayerAttachedObjectSlotUsed(playerid,6))
		{
			SetPlayerAttachedObject(playerid, 6 , 18637, 4, 0.3, 0, 0, 0, 170, 270, 1, 1, 1);
			EditAttachedObject(playerid, 6);
		}
		else RemovePlayerAttachedObject(playerid,6);
    }
    else if (!strcmp(nom, "arreter", true))
    {
		static userid, time, price;
		new factionid = PlayerData[playerid][pFaction];
		if (sscanf(scmd, "udd", userid, time,price)) return SendClientMessageEx(playerid, COLOR_USAGE, "/police arreter <PlayerID/PlayerName> <minutes> <prix>");
		if (userid == INVALID_PLAYER_ID || !IsPlayerNearPlayer(playerid, userid, 5.0)) return SendClientMessageEx(playerid, COLOR_ERROR, "Ce joueur n'est pas connecté, ou il n'est pas près de vous.");
		if (time < 1 || time > 120) return SendClientMessageEx(playerid, COLOR_ERROR, "Pas en dessous de 1 ou plus de 120 minutes.");
		if (!PlayerData[userid][pCuffed]) return SendClientMessageEx(playerid, COLOR_ERROR, "Le joueur doit être menotté.");
		if (!IsPlayerNearArrest(playerid)) return SendClientMessageEx(playerid, COLOR_ERROR, "Vous n'êtes pas sur le checkpoint pour arreter le joueur.");
		if (price < 0 || price > 25000) return SendClientMessageEx(playerid, COLOR_ERROR, "Pas en dessous de $0 ou plus de $25,000.");

		PlayerData[userid][pPrisoned] = 1;
		PlayerData[userid][pJailTime] = time * 60;

		StopDragging(userid);
		SetPlayerInPrison(userid);

		ResetWeapons(userid);
		ResetPlayer(userid);

		PlayerData[userid][pWarrants] = 0;
		PlayerData[userid][pCuffed] = 0;

		PlayerTextDrawShow(userid, PlayerData[userid][pTextdraws][70]);
		SetPlayerSpecialAction(userid, SPECIAL_ACTION_NONE);

		SendClientMessageEx(playerid, COLOR_INFO, "Vous avez mis une amende à %s pour la somme de %s", ReturnName(userid, 0), FormatNumber(price));
		SendClientMessageEx(userid, COLOR_INFO, "%s vous a mis une amende pour la somme de %s", ReturnName(playerid), FormatNumber(price));

		FactionData[factionid][factionArge] += price;
		GiveMoney(userid, -price);

	    SendClientMessageEx(userid, COLOR_WHITE, "Vous avez été emprisonné pendant %d minutes, amende: %d$.", time, price);
		SendClientMessageToAllEx(COLOR_LIGHTRED, "INFO-NEWS: %s a été emprisonné pendant %d minutes à la Prison Fédéral de Los Santos.", ReturnName(userid, 0), time);
		RemovePlayerAttachedObject(userid, 9);
    }
    else if (!strcmp(nom, "recolter", true))
    {
		static plantid;
		if ((plantid = Plant_Nearest(playerid)) == -1) return SendClientMessageEx(playerid, COLOR_ERROR, "Vous n'êtes pas près d'une plantation.");
		SendNearbyMessage(playerid, 15.0, COLOR_PURPLE, "%s a détruit la plantation de %s qui contenait %d grammes.", ReturnName(playerid), Plant_GetType(PlantData[plantid][plantType]), PlantData[plantid][plantDrugs]);
		Plant_Delete(plantid);
    }
    else if (!strcmp(nom, "amende", true))
    {
		new
			userid,
			price,
			reason[64];
			
		if (sscanf(scmd, "uds[64]", userid, price, reason))
		{
			SendClientMessageEx(playerid, COLOR_USAGE, "/police amende <PlayerID/PlayerName> <prix> <raison>");
			return 1;
		}
		
		if (!IsPlayerConnected(userid))
			return SendClientMessageEx(playerid, COLOR_ERROR, "Ce joueur n'est pas connecté.");
			
		if (!IsPlayerNearPlayer(playerid, userid, 5.0))
			return SendClientMessageEx(playerid, COLOR_ERROR, "Ce joueur n'est pas près de vous.");
			
		if (userid == playerid)
			return SendClientMessageEx(playerid, COLOR_ERROR, "Vous ne pouvez pas vous mettre une amende à vous même.");
			
		if (price < 1 || price > 5000)
			return SendClientMessageEx(playerid, COLOR_ERROR, "Le montant doit être comprit entre 1$ et 5000$");

		amendeInfo[userid][0] = playerid;
		amendeInfo[userid][1] = price;
		format(amendeReason[userid], 64, reason);

		SendClientMessageEx(userid, COLOR_INFO, "%s vous a donné une amende de %d$ (utilisez \"/accepter amende\" pour accepter).", ReturnName(playerid), price);
		SendClientMessageEx(playerid, COLOR_INFO, "Vous avez donné une amende à %s de %d$.", ReturnName(userid, 0), price);
    }
    else if (!strcmp(nom, "herse", true))
    {
		if (PlayerData[playerid][pFactionRank] < 2) return SendClientMessageEx(playerid, COLOR_ERROR, "Vous n'avez pas la permission d'utiliser cette commande, il faut être rang 2.");
		new hersetype[24];
        if (sscanf(scmd, "s[24]", hersetype))
        {
            SendClientMessageEx(playerid, COLOR_USAGE, "/police herse <options>");
			SendClientMessage(playerid, COLOR_USAGE, "OPTIONS: poser, retirer, retirertous");
            return 1;
        }
		static Float:fX, Float:fY, Float:fZ, Float:fA;
		GetPlayerPos(playerid, fX, fY, fZ);
		GetPlayerFacingAngle(playerid, fA);

		if(strcmp(hersetype, "poser", true) == 0)
		{
			if (IsPlayerInAnyVehicle(playerid)) return SendClientMessageEx(playerid, COLOR_ERROR, "Vous devez quitter votre véhicule.");

			for (new i = 0; i != MAX_BARRICADES; i ++) if (!BarricadeData[i][cadeExists])
			{
				BarricadeData[i][cadeExists] = true;
				BarricadeData[i][cadeType] = 1;

				BarricadeData[i][cadePos][0] = fX;
				BarricadeData[i][cadePos][1] = fY;
				BarricadeData[i][cadePos][2] = fZ;

				BarricadeData[i][cadeObject] = CreateDynamicObject(2899, fX, fY, fZ - 0.8, 0.0, 0.0, fA + 90.0);

				SendNearbyMessage(playerid, 15.0, COLOR_PURPLE, "%s pose une herse au sol.", ReturnName(playerid, 1));
				SendFactionMessage(PlayerData[playerid][pFaction], COLOR_RADIO, "RADIO: %s pose une herse à %s.", ReturnName(playerid), GetLocation(fX, fY, fZ));

				return 1;
			}
			SendClientMessageEx(playerid, COLOR_ERROR, "Il y a trop de herses posées au sol. (/police herse retirerall)");
		}
	    if(strcmp(hersetype, "retirer", true) == 0)
		{
			for (new i = 0; i != MAX_BARRICADES; i ++) if (BarricadeData[i][cadeExists] && BarricadeData[i][cadeType] == 1 && IsPlayerInRangeOfPoint(playerid, 3.0, BarricadeData[i][cadePos][0], BarricadeData[i][cadePos][1], BarricadeData[i][cadePos][2]))
			{
				BarricadeData[i][cadeExists] = 0;
				BarricadeData[i][cadeType] = 0;

				DestroyDynamicObject(BarricadeData[i][cadeObject]);

				SendNearbyMessage(playerid, 15.0, COLOR_PURPLE, "%s retire une herse au sol.", ReturnName(playerid, 1));
				SendFactionMessage(PlayerData[playerid][pFaction], COLOR_RADIO, "RADIO: %s retire une herse à %s.", ReturnName(playerid), GetLocation(fX, fY, fZ));
				return 1;
			}
			SendClientMessageEx(playerid, COLOR_ERROR, "Vous n'êtes pas près d'une herse.");
		}
		if(strcmp(hersetype, "retirertous", true) == 0)
		{
			for (new i = 0; i != MAX_BARRICADES; i ++) if (BarricadeData[i][cadeExists] && BarricadeData[i][cadeType] == 1)
			{
				BarricadeData[i][cadeExists] = 0;
				BarricadeData[i][cadeType] = 0;

				DestroyDynamicObject(BarricadeData[i][cadeObject]);
			}
			SendFactionMessage(PlayerData[playerid][pFaction], COLOR_RADIO, "RADIO: %s retire toutes les herses.", ReturnName(playerid));
		}
    }
    else if (!strcmp(nom, "barrage", true))
    {
		if (PlayerData[playerid][pFactionRank] < 3) return SendClientMessageEx(playerid, COLOR_ERROR, "Vous n'avez pas la permission d'utiliser cette commande, il faut être rang 3.");
		if (IsPlayerInAnyVehicle(playerid)) return SendClientMessageEx(playerid, COLOR_ERROR, "Vous devez être à pied.");

		new barragetype[24];
        if (sscanf(scmd, "s[24]", barragetype))
        {
            SendClientMessageEx(playerid, COLOR_USAGE, "/police barrage <options>");
			SendClientMessage(playerid, COLOR_USAGE, "OPTIONS: grand, gcone, pcone, retirer, retirertous");
            return 1;
        }

		static Float:fX, Float:fY, Float:fZ, Float:fA;
		GetPlayerPos(playerid, fX, fY, fZ);
		GetPlayerFacingAngle(playerid, fA);

        if(strcmp(barragetype, "grand", true) == 0)
		{
			for (new i = 0; i != MAX_BARRICADES; i ++) if (!BarricadeData[i][cadeExists])
			{
				BarricadeData[i][cadeExists] = true;
				BarricadeData[i][cadeType] = 2;

				BarricadeData[i][cadePos][0] = fX;
				BarricadeData[i][cadePos][1] = fY;
				BarricadeData[i][cadePos][2] = fZ;

				BarricadeData[i][cadeObject] = CreateDynamicObject(981, fX, fY, fZ, 0.0, 0.0, fA);
				SetPlayerPos(playerid, fX + 2, fY + 2, fZ + 2);

				SendNearbyMessage(playerid, 15.0, COLOR_PURPLE, "%s pose un barrage.", ReturnName(playerid, 1));
				SendFactionMessage(PlayerData[playerid][pFaction], COLOR_RADIO, "RADIO: %s pose un barrage routier à %s.", ReturnName(playerid), GetLocation(fX, fY, fZ));
				return 1;
			}
			SendClientMessageEx(playerid, COLOR_ERROR, "Il y a trop de barrages posés au sol, veuillez-en retirer.");
		}
		if(strcmp(barragetype, "gcone", true) == 0)
		{
			for (new i = 0; i != MAX_BARRICADES; i ++) if (!BarricadeData[i][cadeExists])
			{
				BarricadeData[i][cadeExists] = true;
				BarricadeData[i][cadeType] = 2;

				BarricadeData[i][cadePos][0] = fX;
				BarricadeData[i][cadePos][1] = fY;
				BarricadeData[i][cadePos][2] = fZ;

				BarricadeData[i][cadeObject] = CreateDynamicObject(1237, fX, fY, fZ-1, 0.0, 0.0, fA);
				SetPlayerPos(playerid, fX + 2, fY + 2, fZ + 2);

				SendNearbyMessage(playerid, 15.0, COLOR_PURPLE, "%s pose un grand cone.", ReturnName(playerid, 1));
				SendFactionMessage(PlayerData[playerid][pFaction], COLOR_RADIO, "RADIO: %s pose un  grand cone à %s.", ReturnName(playerid), GetLocation(fX, fY, fZ));
				return 1;
			}
			SendClientMessageEx(playerid, COLOR_ERROR, "Il y a trop de barrages posés au sol, veuillez-en retirer.");
		}
		if(strcmp(barragetype, "pcone", true) == 0)
		{
			for (new i = 0; i != MAX_BARRICADES; i ++) if (!BarricadeData[i][cadeExists])
			{
				BarricadeData[i][cadeExists] = true;
				BarricadeData[i][cadeType] = 2;

				BarricadeData[i][cadePos][0] = fX;
				BarricadeData[i][cadePos][1] = fY;
				BarricadeData[i][cadePos][2] = fZ;

				BarricadeData[i][cadeObject] = CreateDynamicObject(1238, fX, fY, fZ-1, 0.0, 0.0, fA);
				SetPlayerPos(playerid, fX + 2, fY + 2, fZ + 3);

				SendNearbyMessage(playerid, 15.0, COLOR_PURPLE, "%s pose un grand cone.", ReturnName(playerid, 1));
				SendFactionMessage(PlayerData[playerid][pFaction], COLOR_RADIO, "RADIO: %s pose un  grand cone à %s.", ReturnName(playerid), GetLocation(fX, fY, fZ));
				return 1;
			}
			SendClientMessageEx(playerid, COLOR_ERROR, "Il y a trop de barrages posés au sol, veuillez-en retirer.");
		}
		if(strcmp(barragetype, "retirer", true) == 0)
		{
			for (new i = 0; i != MAX_BARRICADES; i ++) if (BarricadeData[i][cadeExists] && BarricadeData[i][cadeType] == 2 && IsPlayerInRangeOfPoint(playerid, 5.0, BarricadeData[i][cadePos][0], BarricadeData[i][cadePos][1], BarricadeData[i][cadePos][2]))
			{
				BarricadeData[i][cadeExists] = 0;
				BarricadeData[i][cadeType] = 0;

				DestroyDynamicObject(BarricadeData[i][cadeObject]);

				SendNearbyMessage(playerid, 15.0, COLOR_PURPLE, "%s retire le barrage.", ReturnName(playerid, 1));
				SendFactionMessage(PlayerData[playerid][pFaction], COLOR_RADIO, "RADIO: %s retire le barrage à %s.", ReturnName(playerid), GetLocation(fX, fY, fZ));
				return 1;
			}
			SendClientMessageEx(playerid, COLOR_ERROR, "Vous n'êtes pas près d'un barrage.");
		}
		if(strcmp(barragetype, "retirertous", true) == 0)
		{
			for (new i = 0; i != MAX_BARRICADES; i ++) if (BarricadeData[i][cadeExists] && BarricadeData[i][cadeType] == 2)
			{
				BarricadeData[i][cadeExists] = 0;
				BarricadeData[i][cadeType] = 0;

				DestroyDynamicObject(BarricadeData[i][cadeObject]);
			}
			SendFactionMessage(PlayerData[playerid][pFaction], COLOR_RADIO, "RADIO: %s a retiré tout les barrages.", ReturnName(playerid));
		}
    }
    else if (!strcmp(nom, "empreinte", true))
    {
		if (PlayerData[playerid][pFingerTime] > 0) return SendClientMessageEx(playerid, COLOR_ERROR, "Vous utilisez déjà le scanner d'empreintes digitales.");

		new id = Item_Nearest(playerid);
		if (id != 1)
		{
			SendNearbyMessage(playerid, 15.0, COLOR_PURPLE, "%s programme le scanner d'empreintes digitales sur l'élément.", ReturnName(playerid, 1));
			PlayerData[playerid][pFingerTime] = 3;
			PlayerData[playerid][pFingerItem] = id;
		}
		else SendClientMessageEx(playerid, COLOR_ERROR, "Tu n'es pas à genoux ou il n'y a rien à examiner.");
    }
    else if (!strcmp(nom, "fourriere", true))
    {
		new
			price,
			id = -1,
			vehicleid = GetPlayerVehicleID(playerid);
		if (sscanf(scmd, "d", price))
		{
			SendClientMessageEx(playerid, COLOR_USAGE, "/police fourriere <Prix>");
			return 1;
		}
		
		if (price < 1 || price > 1000) return SendClientMessageEx(playerid, COLOR_ERROR, "L'amende doit être comprise entre 1$ et 1000$.");
		if (GetVehicleModel(vehicleid) != 525) return SendClientMessageEx(playerid, COLOR_ERROR, "Vous devez être dans un tow.");
		if ((id = Impound_Nearest(playerid)) == -1) return SendClientMessageEx(playerid, COLOR_ERROR, "Vous n'êtes pas à la fourrière.");
		if (!GetVehicleTrailer(vehicleid)) return SendClientMessageEx(playerid, COLOR_ERROR, "Il n'y a pas de véhicule accroché à votre tow.");

		vehicleid = Car_GetID(GetVehicleTrailer(vehicleid));
		if (vehicleid == -1) return SendClientMessageEx(playerid, COLOR_ERROR, "Vous ne pouvez pas remorquer ce véhicule.");
		if (CarData[vehicleid][carImpounded] != -1) return SendClientMessageEx(playerid, COLOR_ERROR, "Ce véhicule est déjà mis en fourrière.");

		CarData[vehicleid][carImpounded] = ImpoundData[id][impoundID];
		CarData[vehicleid][carImpoundPrice] = price;

		Tax_AddMoney(price);

		GetVehiclePos(CarData[vehicleid][carVehicle], CarData[vehicleid][carPos][0], CarData[vehicleid][carPos][1], CarData[vehicleid][carPos][2]);
		Car_Save(vehicleid);

		SendFactionMessage(PlayerData[playerid][pFaction], COLOR_RADIO, "RADIO: %s a mis en fourrière un(e) %s pour %s.", ReturnName(playerid), ReturnVehicleModelName(CarData[vehicleid][carModel]), FormatNumber(price));
		DetachTrailerFromVehicle(GetPlayerVehicleID(playerid));

    }
    else if (!strcmp(nom, "prendre", true))
    {
		new userid, string[128];
		if (sscanf(scmd, "u", userid)) return SendClientMessageEx(playerid, COLOR_USAGE, "/police prendre <PlayerID/PlayerName>");
		if (userid == INVALID_PLAYER_ID || !IsPlayerNearPlayer(playerid, userid, 5.0)) return SendClientMessageEx(playerid, COLOR_ERROR, "Ce joueur n'est pas près de vous.");

		if (GetWeaponCount(userid) > 0)
		strcat(string, "Prendre les armes\n");

		if (Inventory_HasItem(userid, "Graines de Marijuana") || Inventory_HasItem(userid, "Coca") || Inventory_HasItem(userid, "Opium"))
		strcat(string, "Prendre les graines\n");

		if (Inventory_HasItem(userid, "Marijuana") || Inventory_HasItem(userid, "Cocaine") || Inventory_HasItem(userid, "Heroine") || Inventory_HasItem(userid, "Steroides"))
		strcat(string, "Prendre les drogues\n");

		if (Inventory_HasItem(userid, "Radio"))
		strcat(string, "Prendre la radio\n");

		if (Inventory_HasItem(userid, "Sac a dos") && GetPlayerBackpack(userid) != -1)
		strcat(string, "Prendre le sac\n");

		if (Inventory_HasItem(userid, "Permis d'arme"))
		strcat(string, "Prendre le permis d'arme\n");

		if (Inventory_HasItem(userid, "Permis de conduire"))
		strcat(string, "Prendre le permis de conduire\n");

		if (!strlen(string))
		return SendClientMessageEx(playerid, COLOR_ERROR, "Ce joueur n'a rien d'illégal.");

		PlayerData[playerid][pTakeItems] = userid;
		Dialog_Show(playerid, TakeItems, DIALOG_STYLE_LIST, "Confisquation", string, "Prendre", "X");
    }
    else if (!strcmp(nom, "defoncer", true))
    {
		static id = -1;
		if (PlayerData[playerid][pFactionRank] < 3) return SendClientMessageEx(playerid, COLOR_ERROR, "Vous n'avez pas la permission d'utiliser cette commande (R3).");
		if(PlayerData[playerid][pKickDoor]) return SendClientMessageEx(playerid, COLOR_ERROR, "Vous êtes déjà entrain de défoncer une porte.");
		
		if ((id = House_Nearest(playerid)) != -1)
		{
			if (!HouseData[id][houseLocked])
			return SendClientMessageEx(playerid, COLOR_ERROR, "Cette maison est déjà dévérouillée");

			ShowPlayerFooter(playerid, "Tentative ~r~en cours..~w~");
			ApplyAnimation(playerid, "POLICE", "Door_Kick", 4.0, 0, 0, 0, 0, 0);
			
			PlayerData[playerid][pKickDoor] = true;

			SendNearbyMessage(playerid, 15.0, COLOR_PURPLE, "%s donne plusieurs coups dans la porte, afin de l'ouvrir.", ReturnName(playerid, 1));
			SetTimerEx("KickHouse", 3500, false, "dd", playerid, id);
		}
		else if ((id = Business_Nearest(playerid)) != -1)
		{
			if (!BusinessData[id][bizLocked])
			return SendClientMessageEx(playerid, COLOR_ERROR, "Ce business est déjà déverouillé.");

			ShowPlayerFooter(playerid, "Tentative ~r~en cours..");
			ApplyAnimation(playerid, "POLICE", "Door_Kick", 4.0, 0, 0, 0, 0, 0);

			PlayerData[playerid][pKickDoor] = true;

			SendNearbyMessage(playerid, 15.0, COLOR_PURPLE, "%s donne plusieurs coups dans la porte, afin de l'ouvrir.", ReturnName(playerid, 1));
			SetTimerEx("KickBusiness", 3500, false, "dd", playerid, id);
		}
		else SendClientMessageEx(playerid, COLOR_ERROR, "Vous n'êtes pas près d'une porte.");
    }
    else if (!strcmp(nom, "sirene", true))
    {
		new vehicleid = GetPlayerVehicleID(playerid);
		if (!IsPlayerInAnyVehicle(playerid)) return SendClientMessageEx(playerid, COLOR_ERROR, "Vous n'êtes pas à l'intérieur d'un véhicule.");
		switch (CoreVehicles[vehicleid][vehSirenOn])
		{
			case 0:
			{
				static Float:fSize[3], Float:fSeat[3];

				GetVehicleModelInfo(GetVehicleModel(vehicleid), VEHICLE_MODEL_INFO_SIZE, fSize[0], fSize[1], fSize[2]); // need height (z)
				GetVehicleModelInfo(GetVehicleModel(vehicleid), VEHICLE_MODEL_INFO_FRONTSEAT, fSeat[0], fSeat[1], fSeat[2]); // need pos (x, y)

				CoreVehicles[vehicleid][vehSirenOn] = 1;
				CoreVehicles[vehicleid][vehSirenObject] = CreateDynamicObject(18646, 0.0, 0.0, 1000.0, 0.0, 0.0, 0.0);

				AttachDynamicObjectToVehicle(CoreVehicles[vehicleid][vehSirenObject], vehicleid, -fSeat[0], fSeat[1], fSize[2] / 2.0, 0.0, 0.0, 0.0);
				SendNearbyMessage(playerid, 15.0, COLOR_PURPLE, "%s fixe une sirène sur le véhicule.", ReturnName(playerid, 1));
			}
			case 1:
			{
				CoreVehicles[vehicleid][vehSirenOn] = 0;

				DestroyDynamicObject(CoreVehicles[vehicleid][vehSirenObject]);
				SendNearbyMessage(playerid, 15.0, COLOR_PURPLE, "%s détache la sirène du véhicule.", ReturnName(playerid, 1));
			}
		}
    }
    return 1;
}

CMD:b(playerid, params[])
{
	if (isnull(params))
		return SendClientMessageEx(playerid, COLOR_USAGE, "/b <LocalOOC>");
		
	SendNearbyMessage(playerid, 20.0, COLOR_WHITE, "(( %s (%d): %.74s ))", ReturnName(playerid, 1), playerid, params);
	return 1;
}

CMD:l(playerid, params[])
{
	if (isnull(params))
	return SendClientMessageEx(playerid, COLOR_USAGE, "/l <local IG>");

	SendNearbyMessage(playerid, 20.0, COLOR_WHITE, "%s dit: %s ", ReturnName(playerid, 1), params);
	return 1;
}

CMD:me(playerid, params[])
{

	if (isnull(params))
	return SendClientMessageEx(playerid, COLOR_USAGE, "/me <action>");


	SendNearbyMessage(playerid, 15.0, COLOR_PURPLE, "%s %s", ReturnName(playerid, 1), params);
	return 1;
}

CMD:do(playerid, params[])
{
	if (isnull(params))
	return SendClientMessageEx(playerid, COLOR_USAGE, "/do <description>");

	if (strlen(params) > 90) {
		SendNearbyMessage(playerid, 15.0, COLOR_PURPLE, "%.90s (( %s ))", params, ReturnName(playerid, 1));
	}
	else {
		SendNearbyMessage(playerid, 15.0, COLOR_PURPLE, "%s (( %s ))", params, ReturnName(playerid, 1));
 }
	return 1;
}

CMD:clear(playerid, params[])
{
	for(new i=0; i<20; i++) SendClientMessage(playerid, -1, " ");
	SendClientMessage(playerid, COLOR_INFO, "Nettoyage du chatlog effectué.");
	return 1;
}

CMD:tme(playerid, params[])
{
	static
	string[128];

	if (isnull(params))
	return SendClientMessageEx(playerid, COLOR_USAGE, "/tme <action>");

	format(string, sizeof(string), "%s", params);
	SetPlayerChatBubble(playerid, string, COLOR_PURPLE, 30.0, 1000000);

	SendClientMessageEx(playerid, COLOR_PURPLE, "Message visible au dessus de votre tête »{FFFFFF} %s.", params);
	return 1;
}

CMD:tmeoff(playerid, params[])
{
	static
	string[128];

	format(string, sizeof(string), "%s", params);
	SetPlayerChatBubble(playerid, string, COLOR_PURPLE, 30.0, 100);

	SendClientMessageEx(playerid, COLOR_PURPLE, "Vous avez retiré le message qui s'affichait au dessus de votre personnage.");
	return 1;
}

CMD:ame(playerid, params[])
{
	static
	string[128];

	if (isnull(params))
	return SendClientMessageEx(playerid, COLOR_USAGE, "/ame <action>");

	format(string, sizeof(string), "%s %s", ReturnName(playerid, 1), params);
	SetPlayerChatBubble(playerid, string, COLOR_PURPLE, 30.0, 10000);

	SendClientMessageEx(playerid, COLOR_PURPLE, "%s %s", ReturnName(playerid, 1), params);
	return 1;
}

CMD:ado(playerid, params[])
{
	static
	string[128];

	if (isnull(params))
	return SendClientMessageEx(playerid, COLOR_USAGE, "/ado <description>");

	format(string, sizeof(string), "%s (( %s ))", params, ReturnName(playerid, 1));
	SetPlayerChatBubble(playerid, string, COLOR_PURPLE, 30.0, 10000);

	SendClientMessageEx(playerid, COLOR_PURPLE, "%s (( %s ))", params, ReturnName(playerid, 1));
	return 1;
}

CMD:sme(playerid, params[])
{
    if(HaveSME[playerid] == 1) return SendClientMessageEx(playerid, COLOR_ERROR, "Vous avez déjà posé un sme, supprimez-le pour en poser un autre (/supsme).");

    new time, message[31], Float:Pos[3];
    if(sscanf(params, "ds[31]", time, message))
        return SendClientMessageEx(playerid, COLOR_USAGE, "/sme <Temps (1-15 minutes)> <Message>");

	if(time < 1 || time > 15) return SendClientMessageEx(playerid, COLOR_ERROR, "Vous devez entrer une valeur entre 1 et 15 minutes.");
	if(strlen(message) > 30) return SendClientMessageEx(playerid, COLOR_ERROR, "Le message ne doit pas dépasser 30 caractères.");

    GetPlayerPos(playerid, Pos[0], Pos[1], Pos[2]);

    format(message, sizeof(message), "%s (( %s ))", message, ReturnName(playerid));
    SME[playerid] = Create3DTextLabel(message, COLOR_PURPLE, Pos[0], Pos[1], Pos[2], 40.0, 0, 0);
    TimerSME[playerid] = SetTimerEx("DestroySME", time*60000, false, "i", playerid);
    HaveSME[playerid] = 1;
    SendClientMessageEx(playerid, COLOR_WHITE, "Vous avez posé un sme au sol, il disparaîtra automatiquement dans %d minutes.", time);
    return 1;
}

CMD:supsme(playerid, params[])
{
    if(HaveSME[playerid] == 0) return SendClientMessageEx(playerid, COLOR_ERROR, "Vous n'avez posé aucun sme.");
    HaveSME[playerid] = 0;
    SendClientMessage(playerid, COLOR_WHITE, "Votre sme a bien été supprimé.");
    DestroySME(playerid);
    return 1;
}

forward DestroySME(playerid);
public DestroySME(playerid)
{
	Delete3DTextLabel(SME[playerid]);
	if(IsPlayerConnected(playerid)) KillTimer(TimerSME[playerid]);
    return 1;
}

CMD:vme(playerid, params[])
{
    if(HaveVME[playerid] == 1) return SendClientMessageEx(playerid, COLOR_ERROR, "Vous avez déjà posé un vme, supprimez-le pour en poser un autre (/supvme).");

	new vehicleid = GetNearestVehicle(playerid);
	if(vehicleid == INVALID_VEHICLE_ID) return SendClientMessageEx(playerid, COLOR_ERROR, "Il n'y a aucun véhicule à proximité de vous.");

    new time, message[31], Float:Pos[3];
    if(sscanf(params, "ds[31]", time, message))
        return SendClientMessageEx(playerid, COLOR_USAGE, "/vme <Temps (1-15 minutes)> <Message>");

    if(time < 1 || time > 15) return SendClientMessageEx(playerid, COLOR_ERROR, "Vous devez choisir entre 1 et 15 minutes.");
	if(strlen(message) > 30) return SendClientMessageEx(playerid, COLOR_ERROR, "Le message ne doit pas dépasser 30 caractères.");

    format(message, sizeof(message), "%s (( %s ))", message, ReturnName(playerid));
    VME[playerid] = Create3DTextLabel(message, COLOR_PURPLE, Pos[0], Pos[1], Pos[2], 40.0, 0, 0);
    Attach3DTextLabelToVehicle(VME[playerid], vehicleid, 0.0, 0.0, 1.0);

    TimerVME[playerid] = SetTimerEx("DestroyVME", time*60000, false, "i", playerid);
    HaveVME[playerid] = 1;
    SendClientMessageEx(playerid, COLOR_WHITE, "Vous avez posé un vme sur le véhicule, il disparaîtra automatiquement dans %d minutes.", time);
    return 1;
}

CMD:supvme(playerid, params[])
{
    if(HaveVME[playerid] == 0) return SendClientMessageEx(playerid, COLOR_ERROR, "Vous n'avez posé aucun vme.");
    HaveVME[playerid] = 0;
    SendClientMessage(playerid, COLOR_WHITE, "Votre vme a bien été supprimé.");
    DestroyVME(playerid);
    return 1;
}

forward DestroyVME(playerid);
public DestroyVME(playerid)
{
    Delete3DTextLabel(VME[playerid]);
    if(IsPlayerConnected(playerid)) KillTimer(TimerVME[playerid]);
    return 1;
}



CMD:maisoncrier(playerid, params[])
return cmd_mc(playerid, params);
CMD:mc(playerid, params[])
{

	if (isnull(params))
	return SendClientMessageEx(playerid, COLOR_USAGE, "/(m)aison(c)crier <Texte>");

	new id = -1;
    if ((id = House_Nearest(playerid)) != -1)
	{
	    foreach(new i:Player)
		{
			/* PlayerData[playerid][pHouse] = HouseData[id][houseID];*/
			if(PlayerData[i][pHouse] == HouseData[id][houseID])
			{
			    SendClientMessageEx(playerid, -1, "%s crie de l'extérieur: %s", ReturnName(playerid, 1), params);
			}
		}
	}
	else SendClientMessage(playerid, COLOR_ERROR, "Vous n'êtes pas à proximité d'une porte de maison.");
	return 1;
}

CMD:s(playerid, params[])
{

	if (isnull(params))
	return SendClientMessageEx(playerid, COLOR_USAGE, "/(s)crier <texte>");

	if (strlen(params) > 62) {
		SendNearbyMessage(playerid, 30.0, COLOR_WHITE, "%s crie: %.62s!!", ReturnName(playerid, 1), params);
	}
	else {
		SendNearbyMessage(playerid, 30.0, COLOR_WHITE, "%s crie: %s!!", ReturnName(playerid, 1), params);
	}
	return 1;
}

CMD:vbasse(playerid, params[])
return cmd_bas(playerid, params);
CMD:vb(playerid, params[])
return cmd_bas(playerid, params);
CMD:bas(playerid, params[])
{


	if (isnull(params))
	return SendClientMessageEx(playerid, COLOR_USAGE, "/bas <texte>");

	SendNearbyMessage(playerid, 5.0, COLOR_GREY, "%s dit à voix basse: %s", ReturnName(playerid, 1), params);

	//format(string, sizeof(string), "[low] dit: %s", params);
	//SetPlayerChatBubble(playerid, string, COLOR_WHITE, 5.0, 6000);
	return 1;
}

CMD:o(playerid, params[])
{
	if (g_StatusOOC == 0 && PlayerData[playerid][pAdmin] < 1)
	return SendClientMessageEx(playerid, COLOR_ERROR, "Un administrateur a désactivé le tchat OOC.");

	if (isnull(params))
	return SendClientMessageEx(playerid, COLOR_USAGE, "/o <texte>");

	if (PlayerData[playerid][pDisableOOC])
	return SendClientMessageEx(playerid, COLOR_ERROR, "Le tchat OOC est désactivé.");


	foreach (new i : Player) if (!PlayerData[i][pDisableOOC] && PlayerData[i][pCreated]) {
		SendClientMessageEx(i, 0xAAC4E5FF, "(( [OOC] %s: %s ))", ReturnName(playerid), params);
	}
	return 1;
}

CMD:radio(playerid, params[])
return cmd_r(playerid, params);

CMD:ooc(playerid, params[])
return cmd_o(playerid, params);

CMD:shout(playerid, params[])
return cmd_s(playerid, params);

CMD:crier(playerid, params[])
return cmd_s(playerid, params);

CMD:c(playerid, params[])
return cmd_s(playerid, params);

CMD:low(playerid, params[])
return cmd_bas(playerid, params);

CMD:admin(playerid, params[])
return cmd_a(playerid, params);

CMD:aide(playerid, params[])
{
    SendClientMessageEx(playerid, 0x7EA0DAFF, "Liste des commandes du serveur:");
	SendClientMessage(playerid, 0x7EA0DAFF, "¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯");
	SendClientMessage(playerid, COLOR_CLIENT, "GÉNÉRAL:{FFFFFF} /stats | /report | /voirpermis | /acc(essoires) | /me | /do | /(s)hout | /(o)oc | /inventaire");
	SendClientMessage(playerid, COLOR_CLIENT, "GÉNÉRAL:{FFFFFF} /accepter | /boire | /cchat | /gilet | /recharger | /tme | /tmeoff | /sme | /supsme | /vme | /supvme");
	SendClientMessage(playerid, COLOR_CLIENT, "GÉNÉRAL:{FFFFFF} /gsms | /id | /appeler | /raccrocher | /sms | /poser | /fliste | /caisse | /jerrican");
	SendClientMessage(playerid, COLOR_CLIENT, "GÉNÉRAL:{FFFFFF} /payer | /gps | /animcmds | /sac | /boombox | /freq | /checkpoint | /drogue | /open");
	SendClientMessage(playerid, COLOR_CLIENT, "GÉNÉRAL:{FFFFFF} /salutation | /(m)ontrer(p)ermis | /fouiller | /carte | /donnergun | /animparler");
	SendClientMessage(playerid, COLOR_CLIENT, "GÉNÉRAL:{FFFFFF} /trafiquerfils | /injecter | /cadavre | /j(ob) | /annuaire | /listerouge");
	SendClientMessage(playerid, COLOR_CLIENT, "PROPRIÉTÉ:{FFFFFF} /acheter | /vendre | /lock | /tow | /vehicule | /maison | /propriete");

	if (PlayerData[playerid][pFaction] != -1)
	{
		if (GetFactionType(playerid) == FACTION_POLICE) {
			SendClientMessage(playerid, COLOR_CLIENT, "FACTION:{FFFFFF} /police <options>, /membres");
		}
		else if (GetFactionType(playerid) == FACTION_NEWS) {
			SendClientMessage(playerid, COLOR_CLIENT, "FACTION:{FFFFFF} /sannews <options>, /membres");
		}
		else if (GetFactionType(playerid) == FACTION_GOV) {
			SendClientMessage(playerid, COLOR_CLIENT, "FACTION:{FFFFFF} /gouv <options>, /membres");
		}
		else if (GetFactionType(playerid) == FACTION_GANG) {
			SendClientMessage(playerid, COLOR_CLIENT, "FACTION:{FFFFFF} /gang <options>, /fspray, /membres");
		}
		else if (GetFactionType(playerid) == FACTION_MAFIA) {
			SendClientMessage(playerid, COLOR_CLIENT, "FACTION:{FFFFFF} /mafia, /membres");
		}
		if(FactionData[PlayerData[playerid][pFaction]][factionRanks]-1 == PlayerData[playerid][pFactionRank])
		{
		    SendClientMessage(playerid, COLOR_CLIENT, "FACTION:{FFFFFF} /leader <options>");
		}
	}
	return 1;
}

CMD:aidebraquage(playerid, params[])
{
    SendClientMessage(playerid, 0x7EA0DAFF, "Aides relatives au braquage de banque");
    SendClientMessage(playerid, 0x7EA0DAFF, "¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯");
	SendClientMessage(playerid, COLOR_WHITE, "Voici, ci-dessous, des aides qui vous permettront d'en apprendre plus sur le {FF0000}braquage de banque{FFFFFF}.");
    SendClientMessage(playerid, COLOR_WHITE, "Allez à Blueberry, vous y trouverez une usine, où l'achat d'une bombe est possible {FF0000}(/acheterbombe){FFFFFF}");
	SendClientMessage(playerid, COLOR_WHITE, "Une fois équipé de votre bombe, vous devrez vous procurer un {FF0000}pied de biche{FFFFFF} afin de commencer le braquage.");
    SendClientMessage(playerid, COLOR_WHITE, "Rendez-vous à la banque, devant la première porte blindée afin de taper {FF0000}/forcerporte{FFFFFF}.");
    SendClientMessage(playerid, COLOR_WHITE, "Une fois la porte enfoncée, rendez-vous à la salle des coffres, afin d'y {FF0000}/poserbombe{FFFFFF}.");
    SendClientMessage(playerid, COLOR_WHITE, "La salle sera ensuite ouverte, laissant apparaître trois casiers que vous devrez forcer. {FF0000}(/ccasier){FFFFFF}");
    SendClientMessage(playerid, COLOR_WHITE, "Les casiers forcés, vous n'aurez plus qu'à {FF0000}/remplirsac{FFFFFF} afin de commencer la procédure de remplissage.");
	SendClientMessage(playerid, COLOR_WHITE, "Rendez-vous à Dillimore, afin de blanchir vos sacs d'argents via la commande {FF0000}/blanchir{FFFFFF}.");
	return 1;
}

CMD:trafiquerfils(playerid, params[])
{
    new vehicleid = GetPlayerVehicleID(playerid);
    new id = Car_GetID(vehicleid);

	if (!IsEngineVehicle(vehicleid))
		return SendClientMessageEx(playerid, COLOR_ERROR, "Vous devez être dans un véhicule.");

	if (GetPlayerState(playerid) != PLAYER_STATE_DRIVER)
		return SendClientMessageEx(playerid, COLOR_ERROR, "Vous devez être conducteur pour utiliser cette commande.");

	if (Car_IsOwner(playerid, id) || CarData[id][carDouble] == PlayerData[playerid][pID])
		return SendClientMessageEx(playerid, COLOR_ERROR, "Vous ne pouvez pas trafiquer un véhicule qui vous appartient/preté.");

	if (CarData[id][carSabot] != 0 && GetEngineStatus(vehicleid) == 0)
		return SendClientMessageEx(playerid, COLOR_ERROR, "Ce véhicule a un sabot, veuillez utiliser /payersabot afin de le retirer ($%d)",CarData[id][carSabPri]);

	if(CarData[id][carLoca] == 1)
		return SendClientMessageEx(playerid, COLOR_ERROR, "Vous ne pouvez pas trafiquer un véhicule de location.");

    if (CoreVehicles[vehicleid][vehFuel] < 1)
		return SendClientMessageEx(playerid, COLOR_ERROR, "Le réservoir est vide.");

	if (ReturnVehicleHealth(vehicleid) <= 300)
	{
        ShowPlayerFooter(playerid, "Le véhicule ~r~est hors-service~w~.");
        return 1;
 	}

 	if(TrafiqueFilsTimer[playerid] != 0)
 	    return SendClientMessageEx(playerid, COLOR_ERROR, "Vous êtes déjà en train de trafiquer les fils.");

    switch (GetEngineStatus(vehicleid))
	{
		case false:
		{
			SendNearbyMessage(playerid, 15.0, COLOR_PURPLE, "* %s déchire les fils, puis tente de faire démarrer le véhicule..", ReturnName(playerid, 1));
     		TrafiqueFilsTimer[playerid] = 60;
			TrafiqueFilsKillTimer[playerid] = SetTimerEx("TrafiqueFils", 1000, false, "i", playerid);
			GameTextForPlayer(playerid, "~r~60 ~w~secondes ...", 2000, 5);
		}
		case true:
		{
		    SendClientMessageEx(playerid, COLOR_ERROR, "Le véhicule est déjà démarré.");
		}
	}
	return 1;
}

forward TrafiqueFils(playerid);
public TrafiqueFils(playerid)
{
	if(TrafiqueFilsTimer[playerid] > 1)
	{
	    KillTimer(TrafiqueFilsKillTimer[playerid]);
	    new string[60];
	    TrafiqueFilsTimer[playerid] --;
	    format(string, sizeof(string), "~r~%d ~w~secondes ...", TrafiqueFilsTimer[playerid]);
	    GameTextForPlayer(playerid, string, 2000, 5);
	    TrafiqueFilsKillTimer[playerid] = SetTimerEx("TrafiqueFils", 1000, false, "i", playerid);
	}
	else if(TrafiqueFilsTimer[playerid] <= 1)
	{
	    KillTimer(TrafiqueFilsKillTimer[playerid]);
	    new vehicleid = GetPlayerVehicleID(playerid);
	    SetEngineStatus(vehicleid, true);
	    SendNearbyMessage(playerid, 15.0, COLOR_PURPLE, "* %s a réussi à trafiquer les fils.", ReturnName(playerid, 1));
   		TrafiqueFilsTimer[playerid] = 0;
	}
}

forward C4Poser(playerid);
public C4Poser(playerid)
{
	// Récupère la position du joueur
	new Float:x, Float:y, Float:z;
	GetDynamicObjectPos(C4sol, x, y, z);
	if(C4Timer[playerid] > 1)
	{
	    KillTimer(C4KillTimer[playerid]);
	    new str[80];
	    C4Timer[playerid] --;
	    format(str, sizeof(str), "~w~EXPLOSION DE LA BOMBE DANS~n~~r~%d ~w~secondes",C4Timer[playerid]);
	    GameTextForPlayer(playerid, str, 2000, 5);
		C4KillTimer[playerid] = SetTimerEx("C4Poser", 1000, false, "i", playerid);
	}
	else if(C4Timer[playerid] <= 1)
	{
	    KillTimer(C4KillTimer[playerid]);
		C4Timer[playerid] = 0;
		CoffreExplos = 1;
	    //Message
	    SendClientMessageEx(playerid, COLOR_INFO, "La porte blindée est désormais détruite, vous pouvez désormais ouvrir les casiers avec votre pied de biche ! (/ccasier)");
		//LSPD
		SendFactionMessageEx(FACTION_POLICE, 0x8080FF96, "CENTRAL: (radio): Le coffre de la banque a explosé !");

		// Explosion
		CreateExplosion(x, y, z, 12, 0);
		DestroyDynamicObject(coffreba);
		DestroyDynamicObject(C4sol);
		coffreba = CreateDynamicObject(2634,1436.1375, -979.2184, 984.2189,10.0000, 0.0000, 113.1112,-1,-1,-1,300.000,300.000);
		SetTimer("CoffreRes", 7200000, false);
	}
}
forward RemplirSac(playerid);
public RemplirSac(playerid)
{
	// Récupère la position du joueur
	SacSome[playerid] = randomEx(20000, 50000);
	new Float:x, Float:y, Float:z;
	GetDynamicObjectPos(C4sol, x, y, z);
	if(SacTem[playerid] > 1)
	{
	    new str[80];
	    SacTem[playerid] --;
	    format(str, sizeof(str), "~w~Remplissage en cours~n~~r~%d ~w~secondes ...",SacTem[playerid]);
	    GameTextForPlayer(playerid, str, 2000, 5);
	}
	else if(SacTem[playerid] <= 1)
	{
	    KillTimer(SacKillTimer[playerid]);
		SacTem[playerid] = 0;
		ASac[playerid] = 1;
		aBraquerBanque[playerid] = 1;
		SacBanque--;
	    //Message
	    SendClientMessageEx(playerid, COLOR_INFO, "Vous avez rempli un sac contenant {FF0000}%d$,{33CCFF}, blanchissez-le à Dillimore !",SacSome[playerid]);
	    SetPlayerAttachedObject(playerid, 3, 1550, 1, 0.1, -0.3, 0, 0, 40, 0, 1, 1, 1);
		SetTimer("CasierRes", 5000, false);
	}
}

forward CoffreRes(playerid);
public CoffreRes(playerid)
{
	//if(SacBanque != 3)
	//{
	DestroyDynamicObject(coffreba);
	DestroyDynamicObject(coffreba2);
	coffreba = CreateDynamicObject(2634, 1435.35193, -980.29688, 984.21887,   0.00000, 0.00000, 179.04001);
	coffreba2 = CreateDynamicObject(1495, 1438.0971, -1002.6653, 995.0795,   0.00000, 0.00000, 0.00000);

	if (CasierCas != 0)
	{
		DestroyDynamicObject(Bcasier1);
		DestroyDynamicObject(Bcasier2);
		DestroyDynamicObject(Bcasier3);
		Bcasier1 = 	CreateDynamicObject(2332, 1736.06824, -1120.09314, 28.13890,   0.00000, 0.00000, 0.00000);
		Bcasier2 =  CreateDynamicObject(2332, 1733.69287, -1120.15747, 28.13890,   0.00000, 0.00000, 0.00000);
		Bcasier3 =	CreateDynamicObject(2332, 1730.94202, -1120.14868, 28.13890,   0.00000, 0.00000, 0.00000);
		CasierCas = 0;
		SacBanque = 3;
		Casier = 3;
		CoffreExplos = 0;
		CasierCas = 0;
	}
	//}
}


forward Braquage(playerid);
public Braquage(playerid)
{
	if(BraquageTimer[playerid] > 1)
	{
	    KillTimer(BraquageKillTimer[playerid]);
	    new str[80];
	    BraquageTimer[playerid] --;
	    format(str, sizeof(str), "~w~Braquage en cours~n~~r~%d ~w~secondes ...", BraquageTimer[playerid]);
	    GameTextForPlayer(playerid, str, 2000, 5);
	    BraquageKillTimer[playerid] = SetTimerEx("Braquage", 1000, false, "i", playerid);
	}
	else if(BraquageTimer[playerid] <= 1)
	{
	    KillTimer(BraquageKillTimer[playerid]);
		BraquageTimer[playerid] = 0;
		aBraquer{playerid} = true;
		ASac[playerid] = 1;
	    //Message
	    SendClientMessageEx(playerid, COLOR_INFO, "Vous avez volé $7,000, veuillez aller blanchir l'argent à Dillimore (marqué sur votre radar).");
	    //Sac
	    SetPlayerAttachedObject(playerid, 3, 1550, 1, 0.1, -0.3, 0, 0, 40, 0, 1, 1, 1);
	    //Checpoint
	    SetPlayerCheckpoint(playerid, 2355.9412, -648.1865, 128.0547, 3.0);
	}
}

CMD:mettreadmin(playerid, params[])
{
	static
	userid,
	level;

	if (PlayerData[playerid][pAdmin] < 5)
	return SendClientMessageEx(playerid, COLOR_ERROR, "Vous n'avez pas la permission d'utiliser cette commande.");

	if (sscanf(params, "ud", userid, level))
	return SendClientMessageEx(playerid, COLOR_USAGE, "/mettreadmin <PlayerID/PlayerName> <Level>");

	if (userid == INVALID_PLAYER_ID)
	return SendClientMessageEx(playerid, COLOR_ERROR, "Ce joueur n'est pas valide.");

	if (level < 0 || level > 6)
	return SendClientMessageEx(playerid, COLOR_ERROR, "Seulement entre 1 & 6.");

	if (PlayerData[playerid][pAdmin] < level)
	return SendClientMessageEx(playerid, COLOR_ERROR, "Vous ne pouvez pas mettre une personne à un niveau supérieur au votre.");
	
	if (level > PlayerData[userid][pAdmin])
	{
		SendClientMessageEx(playerid, COLOR_ADMIN, "Vous avez promu %s administrateur level %d.", ReturnName(userid, 0), level);
		SendClientMessageEx(userid, COLOR_ADMIN, "%s vous a promu administrateur level %d.", ReturnName(playerid), level);
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_ADMIN, "Vous avez rétrogradé %s admin level %d.", ReturnName(userid, 0), level);
		SendClientMessageEx(userid, COLOR_ADMIN, "%s vous a rétrogradé admin level %d.", ReturnName(playerid), level);
	}
	PlayerData[userid][pAdmin] = level;
	Log_Write("logs/admin_log.txt", "[%s] %s has set %s's admin level to %d.", ReturnDate(), ReturnName(playerid), ReturnName(userid, 0), level);

	return 1;
}

CMD:helpeur(playerid, params[])
{
    if (PlayerData[playerid][pAdmin] < 5) return SendClientMessageEx(playerid, COLOR_ERROR, "Vous n'avez pas la permission d'utiliser cette commande.");

	static userid, nom[24], scmd[128];
	if (sscanf(params, "us[24]S()[128]", userid, nom, scmd))
	{
	    SendClientMessageEx(playerid, COLOR_USAGE, "/helpeur <PlayerID/PlayerName> <options>");
	    SendClientMessage(playerid, COLOR_USAGE, "OPTIONS: mettre, retirer");
	    return 1;
	}
	if (!strcmp(nom, "mettre", true))
	{
		if(PlayerData[userid][pHelper])
		    return SendClientMessage(playerid, COLOR_ERROR, "Ce joueur est déjà helpeur.");
		    
		PlayerData[userid][pHelper] = true;

		SendClientMessageEx(playerid, COLOR_ADMIN, "Vous avez mit %s(%d) helpeur.", ReturnName(userid, 0), userid);
		SendClientMessageEx(userid, COLOR_ADMIN, "%s(%d) vous a mit helpeur.", ReturnName(playerid), playerid);
	}
	if (!strcmp(nom, "retirer", true))
	{
		if(PlayerData[userid][pAdmin] > 0)
		    return SendClientMessage(playerid, COLOR_ERROR, "Ce joueur est déjà administrateur.");

		if(!PlayerData[userid][pHelper])
		    return SendClientMessage(playerid, COLOR_ERROR, "Ce joueur n'est pas helpeur.");
		    
		PlayerData[userid][pHelper] = false;

		SendClientMessageEx(playerid, COLOR_ADMIN, "Vous avez retiré %s(%d) helpeur.", ReturnName(userid, 0), userid);
		SendClientMessageEx(userid, COLOR_ADMIN, "%s(%d) vous a retiré helpeur.", ReturnName(playerid), playerid);
	}
	return 1;
}

CMD:a(playerid, params[])
{
	if (!PlayerData[playerid][pAdmin])
		return SendClientMessageEx(playerid, COLOR_ERROR, "Vous n'avez pas la permission d'utiliser cette commande.");

	if (isnull(params))
		return SendClientMessageEx(playerid, COLOR_USAGE, "/a <AdminTchat>");

	SendAdminAlert(COLOR_HOSPITAL, "ADMIN: %s[%d] %s: %s", GetAdminRank(playerid), PlayerData[playerid][pAdmin], ReturnName(playerid), params);

	return 1;
}

CMD:he(playerid, params[])
{
	if (!PlayerData[playerid][pAdmin] && !PlayerData[playerid][pHelper])
		return SendClientMessageEx(playerid, COLOR_ERROR, "Vous n'avez pas la permission d'utiliser cette commande.");

	if (isnull(params))
		return SendClientMessageEx(playerid, COLOR_USAGE, "/he <HelperTchat>");

	SendAdminAlert(0xB5E655FF, "HELPEUR: %s[%d] %s: %s", GetAdminRank(playerid), PlayerData[playerid][pAdmin], ReturnName(playerid), params);
	SendHelperAlert(0xB5E655FF, "HELPEUR: %s[%d] %s: %s", GetAdminRank(playerid), PlayerData[playerid][pAdmin], ReturnName(playerid), params);

	return 1;
}

CMD:aduty(playerid, params[])
{
	if (PlayerData[playerid][pAdmin] < 1)
	return SendClientMessageEx(playerid, COLOR_ERROR, "Vous n'avez pas la permission d'utiliser cette commande.");

	if (!PlayerData[playerid][pAdminDuty])
	{
		SetPlayerColor(playerid, 0xB3050500);

		PlayerData[playerid][pAdminDuty] = 1;
		SendAdminAlert(COLOR_ADMINGROUP, "L'administrateur %s est désormais en service.", ReturnName(playerid));
	}
	else
	{
		SetPlayerColor(playerid, COLOR_WHITE);

		PlayerData[playerid][pAdminDuty] = 0;
		SendAdminAlert(COLOR_ADMINGROUP, "L'administrateur %s n'est plus en service.", ReturnName(playerid));
	}
	return 1;
}

CMD:aaide(playerid, params[])
{
	if (!PlayerData[playerid][pAdmin] && !PlayerData[playerid][pHelper])
	return SendClientMessageEx(playerid, COLOR_ERROR, "Vous n'avez pas la permission d'utiliser cette commande.");


	if (PlayerData[playerid][pHelper]) {
	    SendClientMessage(playerid, COLOR_YELLOW, "HELPEUR:{FFFFFF} /he, /dliste, /goto, /gethere");
	}
	if (PlayerData[playerid][pAdmin] >= 1) {
		SendClientMessage(playerid, COLOR_YELLOW, "LEVEL 1:{FFFFFF} /a, /he, /jailacc, /ao, /spec, /jail, /unjail, /kick, /mute, /unmute, /freeze, /unfreeze");
		SendClientMessage(playerid, COLOR_YELLOW, "LEVEL 1:{FFFFFF} /areanimer, /entercar, /togooc, /aduty, /goto, /respawn, /setint, /setvw, /proxi, /afkliste");
	}
	if (PlayerData[playerid][pAdmin] >= 2) {
		SendClientMessage(playerid, COLOR_YELLOW, "LEVEL 2:{FFFFFF} /warn, /shooter, /goto, /ban, /tban, /baninfo, /sethp, /setarmor");
		SendClientMessage(playerid, COLOR_YELLOW, "LEVEL 2:{FFFFFF} /masked, /voirarmes, /respawncar, /getcar, /sendto, /slap");
	}
	if (PlayerData[playerid][pAdmin] >= 3) {
		SendClientMessage(playerid, COLOR_YELLOW, "LEVEL 3:{FFFFFF} /ip, /desarmer, /listwarns, /flipcar, /near");
		SendClientMessage(playerid, COLOR_YELLOW, "LEVEL 3:{FFFFFF} /apaintjob, /respawncar, /checkstats, /localiser, /destroytag");
	}
	if (PlayerData[playerid][pAdmin] >= 4) {
		SendClientMessage(playerid, COLOR_YELLOW, "LEVEL 4:{FFFFFF} /jetpack, /meteo, /healall, /setleader, /setstat");
		SendClientMessage(playerid, COLOR_YELLOW, "LEVEL 4:{FFFFFF} /destroyitem, /spawnitem, /setquantity, /itemlist, /destroysac,");
	}
	if (PlayerData[playerid][pAdmin] >= 5) {
		SendClientMessage(playerid, COLOR_YELLOW, "LEVEL 5:{FFFFFF} /donnerarme, /hideadmin, /clearinventory, /clearwarns, /saveall, /restart, /pump, /v(ehicule), /biz, /entrance");
		SendClientMessage(playerid, COLOR_YELLOW, "LEVEL 5:{FFFFFF} /faction, /maison, /gate, /speed, /rack, /detecteur, /poubelle, /distributeur, /destroyplant, /mettreadmin");
	}
	if (PlayerData[playerid][pAdmin] >= 6) {
		SendClientMessage(playerid, COLOR_YELLOW, "LEVEL 6:{FFFFFF} /donnerargent, /panel");
	}
	return 1;
}

CMD:togirc(playerid, params[])
{
	if (PlayerData[playerid][pAdmin] < 1)
	return SendClientMessageEx(playerid, COLOR_ERROR, "Vous n'avez pas la permission d'utiliser cette commande.");

	if (!g_StatusIRC)
	{
		SendClientMessageToAllEx(COLOR_LIGHTRED, "%s a désactivé le canal IRC.", ReturnName(playerid));
		g_StatusIRC = true;
	}
	else
	{
		SendClientMessageToAllEx(COLOR_LIGHTRED, "%s a activé le canal IRC.", ReturnName(playerid));
		g_StatusIRC = false;
	}
	return 1;
}

CMD:i(playerid, params[])
return cmd_irc(playerid, params);

CMD:irc(playerid, params[])
{
	new
	    text[128];
	    
	if (g_StatusIRC && PlayerData[playerid][pAdmin] < 1)
	return SendClientMessageEx(playerid, COLOR_ERROR, "Le canal IRC a été désactivé par un administrateur.");
	
	if (PlayerData[playerid][pReportTime] >= gettime())
	return SendClientMessageEx(playerid, COLOR_ERROR, "Vous devez attendre %d secondes avant de pouvoir /irc à nouveau.", PlayerData[playerid][pReportTime] - gettime());

    if(sscanf(params, "s[128]", text))
	{
		SendClientMessage(playerid, COLOR_USAGE, "/irc <Question>");
		return 1;
	}

  	SendAdminAlert(0xB9121BFF, "IRC de %s(ID:%d):{FFFFFF} %s", ReturnName(playerid), playerid, text);
  	SendHelperAlert(0xB9121BFF, "IRC de %s(ID:%d):{FFFFFF} %s", ReturnName(playerid), playerid, text);
  	
	SendClientMessageEx(playerid, COLOR_GREY, "IRC envoyé:{FFFFFF} %s", text);

	PlayerData[playerid][pReportTime] = gettime() + 120;
	Report_Add(INVALID_PLAYER_ID, playerid, 2, text);
	return 1;
}

CMD:report(playerid, params[])
{
	new
		text[128],
		targetid;
		
	if(sscanf(params, "us[128]", targetid, text)) SendClientMessage(playerid, COLOR_USAGE, "/report <PlayerID/PlayerName> <Raison>");
	else
	{
	   /* if (playerid == targetid)
			return SendClientMessage(playerid, COLOR_ERROR, "Impossible de vous report vous-même.");*/
			
	    if (!IsPlayerConnected(targetid))
			return SendClientMessage(playerid, COLOR_ERROR, "Ce joueur n'est pas connecté.");
	    
		if (PlayerData[playerid][pReportTime] >= gettime())
			return SendClientMessageEx(playerid, COLOR_ERROR, "Vous devez attendre %d secondes avant de /report à nouveau.", PlayerData[playerid][pReportTime] - gettime());

      	SendAdminAlert(0xB9121BFF, "REPORT: %s(ID:%d) a signalé %s(ID:%d):{FFFFFF} %s", ReturnName(playerid), playerid, ReturnName(targetid), targetid, text);
		SendClientMessageEx(playerid, COLOR_GREY, "RAPPORT:{FFFFFF} %s(%d) - %s", ReturnName(targetid), targetid, text);
		
		Report_Add(targetid, playerid, 1, text);
		PlayerData[playerid][pReportTime] = gettime() + 15;
	}
	return 1;
}

CMD:dliste(playerid, params[])
{

	if (PlayerData[playerid][pAdmin] < 1 && !PlayerData[playerid][pHelper])
		return SendClientMessageEx(playerid, COLOR_ERROR, "Vous n'avez pas la permission d'utiliser cette commande.");
	
	new
	    start[200],
	    string[150*MAX_REPORTS],
	    final[150*MAX_REPORTS+200],
		count = 0,
		type_report[10];

	format(start, sizeof(start), "Type\tAuteur\tReporté\tRaison\n");
	for(new i=0; i<MAX_REPORTS; i++) if(ReportData[i][rExists])
	{
	
	    count ++;
	    if(ReportData[i][rType] == 1)
	    {
	        if(PlayerData[playerid][pAdmin] > 0)
	        {
		        format(type_report, sizeof(type_report), "Report");
		    	if(strlen(ReportData[i][rText]) > 20) format(string, sizeof(string), "%s%d | %s à %s\t%s(ID:%d)\t%s(ID:%d)\t%.20s[...]\n", string, i, type_report, ReportData[i][rDate], ReportData[i][rPlayerReport_name], ReportData[i][rPlayerReport], ReportData[i][rPlayerReported_name], ReportData[i][rPlayerReported], ReportData[i][rText]);
		    	else format(string, sizeof(string), "%s%d | %s à %s\t%s(ID:%d)\t%s(ID:%d)\t%s\n", string, i, type_report, ReportData[i][rDate], ReportData[i][rPlayerReport_name], ReportData[i][rPlayerReport], ReportData[i][rPlayerReported_name], ReportData[i][rPlayerReported], ReportData[i][rText]);
			}
		}
		else
		{
		    format(type_report, sizeof(type_report), "IRC");
	    	if(strlen(ReportData[i][rText]) > 20) format(string, sizeof(string), "%s%d | %s à %s\t%s(ID:%d)\tN/A\t%.20s[...]\n", string, i, type_report, ReportData[i][rDate], ReportData[i][rPlayerReport_name], ReportData[i][rPlayerReport], ReportData[i][rText]);
	    	else format(string, sizeof(string), "%s%d | %s à %s\t%s(ID:%d)\tN/A\t%s\n", string, i, type_report, ReportData[i][rDate], ReportData[i][rPlayerReport_name], ReportData[i][rPlayerReport], ReportData[i][rText]);
		}
	}
	if(count <= 0) return SendClientMessage(playerid, COLOR_ADMIN, "Il n'y a aucun report ou IRC.");
	
	format(final, sizeof(final), "%s%s", start, string);
	Dialog_Show(playerid, Reports, DIALOG_STYLE_TABLIST_HEADERS, "Liste des rapports et IRC", final, "Fermer", "");
	return 1;
}

Dialog:Reports(playerid, response, listitem, inputtext[])
{
	new reportid;
	if(response)
	{
 		sscanf(inputtext, "d", reportid);
		if(!ReportData[reportid][rExists]) return 1;
 		
 		if(ReportData[reportid][rType] == 1)
 		{
 		    SendAdminAlert(COLOR_ADMINGROUP, "REPORT: %s prend en charge le report contre %s(%d): %s", ReturnName(playerid), ReportData[reportid][rPlayerReported_name], ReportData[reportid][rPlayerReported], ReportData[reportid][rText]);
 		    SendClientMessageEx(playerid, -1, "%s(%d) contre %s(%d): %s", ReportData[reportid][rPlayerReport_name], ReportData[reportid][rPlayerReport], ReportData[reportid][rPlayerReported_name], ReportData[reportid][rPlayerReported], ReportData[reportid][rText]);
 			Report_Remove(reportid);
		}
		else if(ReportData[reportid][rType] == 2)
		{
 		    SendAdminAlert(COLOR_ADMINGROUP, "IRC: %s prend en charge l'IRC de %s(%d): %s", ReturnName(playerid), ReportData[reportid][rPlayerReport_name], ReportData[reportid][rPlayerReport], ReportData[reportid][rText]);
 		    SendHelperAlert(COLOR_ADMINGROUP, "IRC: %s prend en charge l'IRC de %s(%d): %s", ReturnName(playerid), ReportData[reportid][rPlayerReport_name], ReportData[reportid][rPlayerReport], ReportData[reportid][rText]);
 		    SendClientMessageEx(playerid, -1, "IRC %s(%d): %s", ReportData[reportid][rPlayerReport_name], ReportData[reportid][rPlayerReport], ReportData[reportid][rText]);
 			Report_Remove(reportid);
		}
	}
	return 1;
}

forward ShowSpecTextdraw(playerid, playerspec);
public ShowSpecTextdraw(playerid, playerspec)
{
    HideSpecTextdraw(playerid);

	for(new i=0; i<15; i++)
	    PlayerTextDrawShow(playerid, TD_SPEC_PLAYER[playerid][i]);

	new
	    string[50],
		Float:health,
		Float:armour;

	format(string, sizeof(string), "%s", ReturnName(playerspec));
	PlayerTextDrawSetString(playerid, TD_SPEC_PLAYER[playerid][2], string);

	format(string, sizeof(string), "%d", playerspec);
	PlayerTextDrawSetString(playerid, TD_SPEC_PLAYER[playerid][9], string);

	format(string, sizeof(string), "%d", PlayerData[playerspec][pLevel]);
	PlayerTextDrawSetString(playerid, TD_SPEC_PLAYER[playerid][8], string);

	GetPlayerHealth(playerspec, health);
	GetPlayerArmour(playerspec, armour);
	format(string, sizeof(string), "%0.0fHP / %0.0fARM", health, armour);
	PlayerTextDrawSetString(playerid, TD_SPEC_PLAYER[playerid][10], string);

	format(string, sizeof(string), "%s (%d mun)", ReturnWeaponName(GetPlayerWeapon(playerspec)), GetPlayerAmmo(playerspec));
	PlayerTextDrawSetString(playerid, TD_SPEC_PLAYER[playerid][11], string);

	format(string, sizeof(string), "%0.2f", NetStats_PacketLossPercent(playerspec));
	PlayerTextDrawSetString(playerid, TD_SPEC_PLAYER[playerid][12], string);

	format(string, sizeof(string), "%d", GetPlayerPing(playerspec));
	PlayerTextDrawSetString(playerid, TD_SPEC_PLAYER[playerid][13], string);
	return 1;
}

forward HideSpecTextdraw(playerid);
public HideSpecTextdraw(playerid)
{
	for(new i=0; i<15; i++)
	    PlayerTextDrawHide(playerid, TD_SPEC_PLAYER[playerid][i]);

	KillTimer(timer_Spec[playerid]);
	return 1;
}

CMD:spec(playerid, params[])
{
	new userid;

	if (PlayerData[playerid][pAdmin] < 1)
	return SendClientMessageEx(playerid, COLOR_ERROR, "Vous n'avez pas la permission d'utiliser cette commande.");

	if (!isnull(params) && !strcmp(params, "off", true))
	{
		if (GetPlayerState(playerid) != PLAYER_STATE_SPECTATING)
		return SendClientMessageEx(playerid, COLOR_ERROR, "Vous n'êtes pas en train de spec un joueur.");

		PlayerSpectatePlayer(playerid, INVALID_PLAYER_ID);
		PlayerSpectateVehicle(playerid, INVALID_VEHICLE_ID);

		HideSpecTextdraw(playerid);

		PlayerSpec[playerid] = INVALID_PLAYER_ID;

		SetSpawnInfo(playerid, 0, PlayerData[playerid][pSkin], PlayerData[playerid][pPos][0], PlayerData[playerid][pPos][1], PlayerData[playerid][pPos][2], PlayerData[playerid][pPos][3], 0, 0, 0, 0, 0, 0);
		TogglePlayerSpectating(playerid, false);

    	weaponsRestore(playerid);
		return SendClientMessageEx(playerid, COLOR_INFO, "Vous n'êtes plus en spec.");
	}
	if (sscanf(params, "u", userid))
	return SendClientMessageEx(playerid, COLOR_USAGE, "/spec <PlayerID/PlayerName> - Utilisez \"/spec off\" pour arrêter de spec.");

	if (userid == INVALID_PLAYER_ID)
	return SendClientMessageEx(playerid, COLOR_ERROR, "Ce joueur n'est pas valide.");

	if (GetPlayerState(playerid) != PLAYER_STATE_SPECTATING)
	{
		GetPlayerPos(playerid, PlayerData[playerid][pPos][0], PlayerData[playerid][pPos][1], PlayerData[playerid][pPos][2]);
		GetPlayerFacingAngle(playerid, PlayerData[playerid][pPos][3]);

		PlayerData[playerid][pInterior] = GetPlayerInterior(playerid);
		PlayerData[playerid][pWorld] = GetPlayerVirtualWorld(playerid);
	}
	SetPlayerInterior(playerid, GetPlayerInterior(userid));
	SetPlayerVirtualWorld(playerid, GetPlayerVirtualWorld(userid));

	TogglePlayerSpectating(playerid, 1);

	if (IsPlayerInAnyVehicle(userid))
		PlayerSpectateVehicle(playerid, GetPlayerVehicleID(userid));

	else
		PlayerSpectatePlayer(playerid, userid);

	SendClientMessageEx(playerid, COLOR_INFO, "Vous êtes actuellement en spec sur %s (%d)", ReturnName(userid, 0), userid);
	PlayerData[playerid][pSpectator] = userid;
	PlayerSpec[playerid] = userid;

    weaponsSave(playerid);
	return 1;
}

CMD:jail(playerid, params[])
{
	static
	userid,
	minutes,
	reason[128];

	if (PlayerData[playerid][pAdmin] < 1)
	return SendClientMessageEx(playerid, COLOR_ERROR, "Vous n'avez pas la permission d'utiliser cette commande.");

	if (sscanf(params, "uds[128]", userid, minutes, reason))
	return SendClientMessageEx(playerid, COLOR_USAGE, "/jail <PlayerID/PlayerName> <Minutes> <Raison>");

	if (userid == INVALID_PLAYER_ID)
	return SendClientMessageEx(playerid, COLOR_ERROR, "Ce joueur n'est pas valide.");

	if (minutes < 1)
	return SendClientMessageEx(playerid, COLOR_ERROR, "Vous ne pouvez pas jail un joueur moins de 0 minutes.");

	TogglePlayerControllable(userid, 0);
	ClearAnimations(userid);
	PlayerTextDrawShow(userid, PlayerData[userid][pTextdraws][70]);

	SetPlayerPos(userid, 197.6346, 175.3765, 1003.0234);
	SetPlayerInterior(userid, 3);

	SetPlayerVirtualWorld(userid, (playerid + 100));
	SetPlayerFacingAngle(userid, 0.0);

	SetCameraBehindPlayer(userid);
	ResetWeapons(userid);

	ResetPlayer(userid);

	PlayerData[userid][pJailTime] = minutes * 60;
	PlayerData[userid][pPrisoned] = 0;

	SendClientMessageEx(playerid, COLOR_ADMIN, "Vous avez jail %s pour %d minutes (%s).", ReturnName(userid, 0), minutes, reason);

	SendAdminAlert(COLOR_INFO, "%s emprisonne %s pendant %d minutes, raison: %s", ReturnName(playerid), ReturnName(userid, 0), minutes, reason);
	//SendClientMessageToAllEx(COLOR_INFO, "%s emprisonne %s pendant %d minutes, raison: %s", ReturnName(playerid), ReturnName(userid, 0), minutes, reason);
	Log_Write("logs/jail_log.txt", "[%s] %s has jailed %s for %d minutes, reason: %s.", ReturnDate(), ReturnName(playerid), ReturnName(userid, 0), minutes, reason);
	return 1;
}

CMD:unjail(playerid, params[])
{
	static
	userid;

	if (PlayerData[playerid][pAdmin] < 1)
	return SendClientMessageEx(playerid, COLOR_ERROR, "Vous n'avez pas la permission d'utiliser cette commande.");

	if (sscanf(params, "u", userid))
	return SendClientMessageEx(playerid, COLOR_USAGE, "/unjail <PlayerID/PlayerName>");

	if (userid == INVALID_PLAYER_ID)
	return SendClientMessageEx(playerid, COLOR_ERROR, "Ce joueur n'est pas valide.");

	if (!PlayerData[userid][pJailTime])
	return SendClientMessageEx(playerid, COLOR_ERROR, "Vous ne pouvez pas unjail un joueur qui n'est pas jail.");

	PlayerData[userid][pJailTime] = 0;
    PlayerData[userid][pMuted] = 0;
    
    RespawnPlayer(userid);

	SetPlayerPos(userid, 283.5930, 1413.3511, 10.4078);
	SetPlayerFacingAngle(userid, 180.0000);

	SendClientMessageEx(playerid, COLOR_ADMIN, "Vous avez sorti %s de la prison.", ReturnName(userid, 0));
	SendClientMessageEx(userid, COLOR_ADMIN, "%s vous a libéré de prison.", ReturnName(playerid));

	Log_Write("logs/jail_log.txt", "[%s] %s has released %s from jail.", ReturnDate(), ReturnName(playerid), ReturnName(userid, 0));
	return 1;
}

CMD:slap(playerid, params[])
{
	static
	userid;

	if (PlayerData[playerid][pAdmin] < 1) return SendClientMessageEx(playerid, COLOR_ERROR, "Vous n'avez pas la permission d'utiliser cette commande.");
	if (sscanf(params, "u", userid))
	{
		SendClientMessageEx(playerid, COLOR_USAGE, "/slap <PlayerID/PlayerName>");
		return 1;
	}
	if (userid == INVALID_PLAYER_ID) return SendClientMessageEx(playerid, COLOR_ERROR, "Ce joueur n'est pas valide.");

	static Float:x, Float:y, Float:z;

	GetPlayerPos(userid, x, y, z);
	SetPlayerPos(userid, x, y, z + 4);

	PlayerPlaySound(userid, 1130, 0.0, 0.0, 0.0);
	SendAdminAlert(COLOR_ADMINGROUP, "%s a slap %s.", ReturnName(playerid, 1), ReturnName(userid, 1));
	return 1;
}

CMD:proxi(playerid, params[])
{
	static
		Float:range;

	if (PlayerData[playerid][pAdmin] < 1)
	return SendClientMessageEx(playerid, COLOR_ERROR, "Vous n'avez pas la permission d'utiliser cette commande.");

	if (sscanf(params, "f", range))
	return SendClientMessageEx(playerid, COLOR_USAGE, "/proxi <Range (défaut: 50)>");

	new
	    string[150*MAX_PLAYERS],
	    title[150],
		vehString[10],
		weapString[30],
		countPlayers = 0;
	    
	format(string, sizeof(string), "PlayerName/PlayerID\tPlayerInfo\tPlayerWeapon\n");
	foreach(new i:Player) if(IsPlayerNearPlayer(playerid, i, range))
	{
	    countPlayers++;
		if(IsPlayerInAnyVehicle(i)) format(vehString, sizeof(vehString), "| Veh %d", GetPlayerVehicleID(i));
		
		if(GetPlayerWeapon(i) != 0) format(weapString, sizeof(weapString), "%s (%d munitions)", ReturnWeaponName(GetPlayerWeapon(i)), GetPlayerAmmo(i));
		else format(weapString, sizeof(weapString), "Non armé");
		
	    format(string, sizeof(string), "%s%s (%d)\tLevel %d | Skin %d %s\t%s\n", string, ReturnName(i), i, PlayerData[i][pLevel], GetPlayerSkin(i), vehString, weapString);
	}
	format(title, sizeof(title), "Proxi: %d personnes dans un rayon de %0.0f mètres", countPlayers, range);
	
	Dialog_Show(playerid, DIALOG_PROXY, DIALOG_STYLE_TABLIST_HEADERS, title, string, "Ok", "X");
	return 1;
}

CMD:kick(playerid, params[])
{
	static
	userid,
	reason[128];

	if (PlayerData[playerid][pAdmin] < 1)
	return SendClientMessageEx(playerid, COLOR_ERROR, "Vous n'avez pas la permission d'utiliser cette commande.");

	if (sscanf(params, "us[128]", userid, reason))
	return SendClientMessageEx(playerid, COLOR_USAGE, "/kick <PlayerID/PlayerName> <Raison>");

	if (userid == INVALID_PLAYER_ID || (IsPlayerConnected(userid) && PlayerData[userid][pKicked]))
	return SendClientMessageEx(playerid, COLOR_ERROR, "Ce joueur n'est pas valide.");

	if (PlayerData[userid][pAdmin] > PlayerData[playerid][pAdmin])
	return SendClientMessageEx(playerid, COLOR_ERROR, "Ce joueur est plus haut rank que vous, vous ne pouvez pas le kick.");

	SendClientMessageEx(playerid, COLOR_ADMIN, "Vous avez kick %s pour %s.", ReturnName(userid, 0), reason);

	SendAdminAlert(COLOR_INFO, "L'administrateur %s vient de kick %s, raison: %s", ReturnName(playerid, 1), ReturnName(userid, 1), reason);
	//SendClientMessageToAllEx(COLOR_INFO, "L'administrateur %s vient de kick %s, raison: %s", ReturnName(playerid, 1), ReturnName(userid, 1), reason);
	Log_Write("logs/kick_log.txt", "[%s] %s has kicked %s for: %s.", ReturnDate(), ReturnName(playerid, 1), ReturnName(userid, 1), reason);

	KickEx(userid);
	return 1;
}

CMD:developpement(playerid, params[])
{
	if (PlayerData[playerid][pAdmin] < 6)
	return SendClientMessageEx(playerid, COLOR_ERROR, "Vous n'avez pas la permission d'utiliser cette commande.");

	if(developpementEnabled == true)
	{
		SendClientMessageEx(playerid, COLOR_ADMIN, "Vous avez désactivé le mode développement, les inscriptions sont ouvertes.");
		developpementEnabled = false;
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_ADMIN, "Vous avez activé le mode développement, les inscriptions sont fermés.");
		developpementEnabled = true;
	}
	return 1;
}

CMD:mute(playerid, params[])
{
	static
	userid;

	if (PlayerData[playerid][pAdmin] < 1)
	return SendClientMessageEx(playerid, COLOR_ERROR, "Vous n'avez pas la permission d'utiliser cette commande.");

	if (sscanf(params, "u", userid))
	return SendClientMessageEx(playerid, COLOR_USAGE, "/mute <PlayerID/PlayerName>");

	if (userid == INVALID_PLAYER_ID)
	return SendClientMessageEx(playerid, COLOR_ERROR, "Ce joueur n'est pas valide.");

	if (userid == playerid)
	return SendClientMessageEx(playerid, COLOR_ERROR, "Vous ne pouvez pas vous mute vous-même.");

	if (PlayerData[userid][pMuted])
	return SendClientMessageEx(playerid, COLOR_ERROR, "Ce joueur est déjà mute.");

	if (PlayerData[userid][pAdmin] > PlayerData[playerid][pAdmin])
	return SendClientMessageEx(playerid, COLOR_ERROR, "Impossible de mute ce joueur.");

	PlayerData[userid][pMuted] = 1;

	SendClientMessageEx(playerid, COLOR_ADMIN, "Vous avez mute %s.", ReturnName(userid, 0));
	SendClientMessageEx(userid, COLOR_ADMIN, "L'administrateur %s vous a mute.", ReturnName(playerid));

	return 1;
}

CMD:unmute(playerid, params[])
{
	static
	userid;

	if (PlayerData[playerid][pAdmin] < 1)
	return SendClientMessageEx(playerid, COLOR_ERROR, "Vous n'avez pas la permission d'utiliser cette commande.");

	if (sscanf(params, "u", userid))
	return SendClientMessageEx(playerid, COLOR_USAGE, "/unmute <PlayerID/PlayerName>");

	if (userid == INVALID_PLAYER_ID)
	return SendClientMessageEx(playerid, COLOR_ERROR, "Ce joueur n'est pas valide.");

	if (!PlayerData[userid][pMuted])
	return SendClientMessageEx(playerid, COLOR_ERROR, "Ce joueur n'est pas mute.");

	PlayerData[userid][pMuted] = 0;

	SendClientMessageEx(playerid, COLOR_ADMIN, "Vous avez unmute %s.", ReturnName(userid, 0));
	SendClientMessageEx(userid, COLOR_ADMIN, "L'administrateur %s vous a unmute.", ReturnName(playerid));

	return 1;
}

CMD:freeze(playerid, params[])
{
	static
	userid;

	if (PlayerData[playerid][pAdmin] < 1)
	return SendClientMessageEx(playerid, COLOR_ERROR, "Vous n'avez pas la permission d'utiliser cette commande.");

	if (sscanf(params, "u", userid))
	return SendClientMessageEx(playerid, COLOR_USAGE, "/freeze <PlayerID/PlayerName>");

	if (userid == INVALID_PLAYER_ID)
	return SendClientMessageEx(playerid, COLOR_ERROR, "Ce joueur n'est pas valide.");

	TogglePlayerControllable(userid, 0);
	SendClientMessageEx(playerid, COLOR_ADMIN, "Vous avez freeze %s.", ReturnName(userid, 0));
	return 1;
}

CMD:unfreeze(playerid, params[])
{
	static
	userid;

	if (PlayerData[playerid][pAdmin] < 1)
	return SendClientMessageEx(playerid, COLOR_ERROR, "Vous n'avez pas la permission d'utiliser cette commande.");

	if (sscanf(params, "u", userid))
	return SendClientMessageEx(playerid, COLOR_USAGE, "/unfreeze <PlayerID/PlayerName>");

	if (userid == INVALID_PLAYER_ID)
	return SendClientMessageEx(playerid, COLOR_ERROR, "Ce joueur n'est pas valide.");

	PlayerData[playerid][pFreeze] = 0;

	TogglePlayerControllable(userid, 1);
	SendClientMessageEx(playerid, COLOR_ADMIN, "Vous avez unfreeze %s.", ReturnName(userid, 0));
	return 1;
}

CMD:areanimer(playerid, params[])
{
	static
	userid;

	if (PlayerData[playerid][pAdmin] < 1)
		return SendClientMessageEx(playerid, COLOR_ERROR, "Vous n'avez pas la permission d'utiliser cette commande.");

	if (sscanf(params, "u", userid))
		return SendClientMessageEx(playerid, COLOR_USAGE, "/reanimer <PlayerID/PlayerName>");

	if (userid == INVALID_PLAYER_ID)
		return SendClientMessageEx(playerid, COLOR_ERROR, "Ce joueur n'est pas valide.");

	if (!PlayerData[userid][pInjured])
		return SendClientMessageEx(playerid, COLOR_ERROR, "Ce joueur n'est pas blessé.");

	PlayerData[userid][pInjured] = 0;
	PlayerData[userid][pMortAcheve] = 0;
	PlayerData[userid][pMortWeapon] = 0;

	SetPlayerHealth(userid, 99.0);

	ClearAnimations(userid);
	TextDrawHideForPlayer(userid, gServerTextdraws[2]);
	TogglePlayerControllable(userid,1);
	
	SendClientMessageEx(playerid, COLOR_ADMIN, "Vous avez réanimé %s.", ReturnName(userid, 0));
	SendClientMessageEx(userid, COLOR_ADMIN, "%s vous a soigné.", ReturnName(playerid));
	return 1;
}

CMD:injecter(playerid, params[])
{
	static
	userid;

	if (sscanf(params, "u", userid))
		return SendClientMessageEx(playerid, COLOR_USAGE, "/injecter <PlayerID/PlayerName>");

	if (playerid == userid)
		return SendClientMessageEx(playerid, COLOR_ERROR, "Vous ne pouvez pas vous injecter vous même.");

	if (!IsPlayerNearPlayer(playerid, userid, 6.0))
		return SendClientMessageEx(playerid, COLOR_ERROR, "Ce joueur n'est pas près de vous.");

	if (userid == INVALID_PLAYER_ID)
		return SendClientMessageEx(playerid, COLOR_ERROR, "Ce joueur n'est pas valide.");

    if (Inventory_Count(playerid, "Heroine") < 2)
		return SendClientMessageEx(playerid, COLOR_ERROR, "Vous devez avoir deux grammes d'heroîne sur vous.");

	if (!PlayerData[userid][pInjured])
		return SendClientMessageEx(playerid, COLOR_ERROR, "Ce joueur n'est pas blessé.");

	PlayerData[userid][pInjured] = 0;
	PlayerData[userid][pMortAcheve] = 0;
	PlayerData[userid][pMortWeapon] = 0;

	ClearAnimations(userid);
	TextDrawHideForPlayer(userid, gServerTextdraws[2]);
	TogglePlayerControllable(playerid,1);
	SendClientMessageEx(playerid, COLOR_INFO, "Vous avez injecté une dose d'heroîne à %s.", ReturnName(userid, 0));
	SendClientMessageEx(userid, COLOR_INFO, "%s vous a injecté une dose d'heroîne.", ReturnName(playerid));
	return 1;
}


CMD:respawn(playerid, params[])
{
	static
	userid;

	if (PlayerData[playerid][pAdmin] < 1)
	return SendClientMessageEx(playerid, COLOR_ERROR, "Vous n'avez pas la permission d'utiliser cette commande.");

	if (sscanf(params, "u", userid))
	return SendClientMessageEx(playerid, COLOR_USAGE, "/respawn <PlayerID/PlayerName>");

	if (userid == INVALID_PLAYER_ID)
	return SendClientMessageEx(playerid, COLOR_ERROR, "Ce joueur n'est pas valide.");

	if (!IsPlayerSpawned(userid))
	return SendClientMessageEx(playerid, COLOR_ERROR, "Ce joueur n'est pas spawn.");

	RespawnPlayer(userid);
	SetPlayerPos(userid, 283.5930, 1413.3511, 10.4078);
	SetPlayerFacingAngle(userid, 180.0000);

	SendClientMessageEx(playerid, COLOR_ADMIN, "Vous avez respawn %s.", ReturnName(userid, 0));
	SendClientMessageEx(userid, COLOR_ADMIN, "Vous avez été respawn par %s.", ReturnName(playerid));

	return 1;
}

CMD:ban(playerid, params[])
{
	static
	userid,
	reason[128];

	if (PlayerData[playerid][pAdmin] < 2)
	return SendClientMessageEx(playerid, COLOR_ERROR, "Vous n'avez pas la permission d'utiliser cette commande.");

	if (sscanf(params, "us[128]", userid, reason))
	return SendClientMessageEx(playerid, COLOR_USAGE, "/ban <PlayerID/PlayerName> <Raison>");

	if (userid == INVALID_PLAYER_ID || (IsPlayerConnected(userid) && PlayerData[userid][pKicked]))
	return SendClientMessageEx(playerid, COLOR_ERROR, "Ce joueur n'est pas valide.");

	if (userid == playerid)
	return SendClientMessageEx(playerid, COLOR_ERROR, "Vous ne pouvez pas vous bannir vous même.");

	if (PlayerData[userid][pAdmin] > PlayerData[playerid][pAdmin])
	return SendClientMessageEx(playerid, COLOR_ERROR, "Ce joueur a un rank supérieur à vous, vous ne pouvez pas le bannir.");

	foreach (new i : Player) {
		if (!strcmp(PlayerData[i][pIP], PlayerData[userid][pIP]) && i != userid) {
			KickEx(i);
		}
	}
	Dialog_Show(userid, ShowOnly, DIALOG_STYLE_MSGBOX, "Bannissement", "Votre compte a été banni du serveur.\n\nNom d'utilisateur: %s\nRaison: %s\nAdmin qui vous a banni: %s\n\nAppuyez sur F8 pour prendre un screenshot et poster sur le forum pour des explications.", "X", "", PlayerData[userid][pUsername], reason, ReturnName(playerid));

	SendClientMessageEx(playerid, COLOR_ADMIN, "Vous avez ban %s pour %s.", ReturnName(userid, 1), reason);


	SendAdminAlert(COLOR_INFO, "%s a été banni définitivement par %s, raison: %s", ReturnName(userid, 1), ReturnName(playerid, 1), reason);
	//SendClientMessageToAllEx(COLOR_INFO, "%s a été banni définitivement par %s, raison: %s", ReturnName(userid, 1), ReturnName(playerid, 1), reason);
	Log_Write("logs/ban_log.txt", "[%s] %s was banned by %s for: %s.", ReturnDate(), ReturnName(userid, 1), ReturnName(playerid, 1), reason);

	Blacklist_Add(PlayerData[userid][pIP], PlayerData[userid][pUsername], PlayerData[playerid][pUsername], reason);
	KickEx(userid);

	return 1;
}

CMD:tban(playerid, params[])
{
	static
	userid,
	hours,
	reason[128];

	if (PlayerData[playerid][pAdmin] < 2)
	return SendClientMessageEx(playerid, COLOR_ERROR, "Vous n'avez pas la permission d'utiliser cette commande.");

	if (sscanf(params, "uds[128]", userid, hours, reason))
	return SendClientMessageEx(playerid, COLOR_USAGE, "/tban <PlayerID/PlayerName> <Heures> <Raison>");

	if (userid == INVALID_PLAYER_ID || (IsPlayerConnected(userid) && PlayerData[userid][pKicked]))
	return SendClientMessageEx(playerid, COLOR_ERROR, "Ce joueur n'est pas valide.");

	if (userid == playerid)
	return SendClientMessageEx(playerid, COLOR_ERROR, "Vous ne pouvez pas vous bannir vous même.");

	if (PlayerData[userid][pAdmin] > PlayerData[playerid][pAdmin])
	return SendClientMessageEx(playerid, COLOR_ERROR, "Ce joueur a un rank supérieur à vous, vous ne pouvez pas le bannir.");

	if(hours < 1 || hours > 360)
	return SendClientMessageEx(playerid, COLOR_ERROR, "Le temps de bannissement doit être entre 24 et 360 heures (15j).");
	
	foreach (new i : Player) {
		if (!strcmp(PlayerData[i][pIP], PlayerData[userid][pIP]) && i != userid) {
			KickEx(i);
		}
	}
	Dialog_Show(userid, ShowOnly, DIALOG_STYLE_MSGBOX, "Bannissement", "Votre compte a été banni du serveur.\n\nNom d'utilisateur: %s\nRaison: %s\nAdmin qui vous a banni: %s\nExpire dans %d heures\n\nAppuyez sur F8 pour prendre un screenshot et poster sur le forum pour des explications.", "X", "", PlayerData[userid][pUsername], reason, ReturnName(playerid), hours);

	SendClientMessageEx(playerid, COLOR_ADMIN, "Vous avez ban %s pour %s pendant %d heures.", ReturnName(userid, 1), reason, hours);

	SendAdminAlert(COLOR_INFO, "%s a été banni temporairement (%dh) par %s, raison: %s", ReturnName(userid, 1), hours, ReturnName(playerid, 1), reason);
	//SendClientMessageToAllEx(COLOR_INFO, "%s a été banni temporairement (%dh) par %s, raison: %s", ReturnName(userid, 1), hours, ReturnName(playerid, 1), reason);
	Log_Write("logs/ban_log.txt", "[%s] %s was banned by %s (%dh) for: %s.", ReturnDate(), ReturnName(userid, 1), ReturnName(playerid, 1), hours, reason);

	Blacklist_Add(PlayerData[userid][pIP], PlayerData[userid][pUsername], PlayerData[playerid][pUsername], reason, (60 * 60 * hours));
	KickEx(userid);
	return 1;
}

CMD:stats(playerid, params[])
{
	ShowStatsForPlayer(playerid, playerid);
	return 1;
}

CMD:checkstats(playerid, params[])
{
	static userid;

	if (PlayerData[playerid][pAdmin] < 3) return SendClientMessageEx(playerid, COLOR_ERROR, "Vous n'avez pas la permission d'utiliser cette commande.");

	if (sscanf(params, "u", userid))
	{
		SendClientMessageEx(playerid, COLOR_USAGE, "/checkstats <PlayerID/PlayerName>");
		return 1;
	}

	if (userid == INVALID_PLAYER_ID) return SendClientMessageEx(playerid, COLOR_ERROR, "Ce joueur n'est pas valide.");
	if (!PlayerData[userid][pLogged]) return SendClientMessageEx(playerid, COLOR_ERROR, "Ce joueur n'est pas connecté.");

	ShowStatsForPlayer(playerid, userid);
	SendClientMessageEx(playerid, COLOR_ADMIN, "Vous regardez les statistiques de %s.", ReturnName(userid, 0));
	return 1;
}

CMD:checkinv(playerid, params[])
{
	static userid;

	if (PlayerData[playerid][pAdmin] < 3) return SendClientMessageEx(playerid, COLOR_ERROR, "Vous n'avez pas la permission d'utiliser cette commande.");

	if (sscanf(params, "u", userid))
	{
		SendClientMessageEx(playerid, COLOR_USAGE, "/checkinv <PlayerID/PlayerName>");
		return 1;
	}

	if (userid == INVALID_PLAYER_ID) return SendClientMessageEx(playerid, COLOR_ERROR, "Ce joueur n'est pas valide.");
	if (!PlayerData[userid][pLogged]) 	return SendClientMessageEx(playerid, COLOR_ERROR, "Ce joueur n'est pas connecté.");

	OpenAdminInventory(userid, playerid);
	SendClientMessageEx(playerid, COLOR_ADMIN, "Vous regardez l'inventaire de %s.", ReturnName(userid, 0));
	return 1;
}


CMD:accessoires(playerid, params[])
return cmd_acc(playerid, params);

CMD:accessoire(playerid, params[])
return cmd_acc(playerid, params);

CMD:acc(playerid, params[])
{
	new
	string[128];

	format(string, sizeof(string), "Lunettes: %s\nChapeaux: %s\nBandana: %s\nSac a dos: %s", (PlayerData[playerid][pGlasses]) ? ("Oui") : ("Non"), (PlayerData[playerid][pHat]) ? ("Oui") : ("Non"), (PlayerData[playerid][pBandana]) ? ("Oui") : ("Non"), (PlayerData[playerid][pSac]) ? ("Oui") : ("Non"));
	Dialog_Show(playerid, Accessory, DIALOG_STYLE_LIST, "Accessoires", string, "Ok", "X");

	return 1;
}

CMD:shooter(playerid, params[])
{
	static
	userid;

	if (PlayerData[playerid][pAdmin] < 2)
	return SendClientMessageEx(playerid, COLOR_ERROR, "Vous n'avez pas la permission d'utiliser cette commande.");

	if (sscanf(params, "u", userid))
	return SendClientMessageEx(playerid, COLOR_USAGE, "/shooter <PlayerID/PlayerName>");

	if (userid == INVALID_PLAYER_ID)
	return SendClientMessageEx(playerid, COLOR_ERROR, "Ce joueur n'est pas valide.");

	if (PlayerData[userid][pLastShot] == INVALID_PLAYER_ID)
	return SendClientMessageEx(playerid, COLOR_ERROR, "Ce joueur n'a pas été abattu.");

	SendClientMessageEx(playerid, COLOR_INFO, "%s a été touché pour la dernière fois par %s (%s).", ReturnName(userid, 0), ReturnName(PlayerData[userid][pLastShot]), GetDuration(gettime() - PlayerData[userid][pShotTime]));
	return 1;
}

CMD:gotopos(playerid, params[])
{
	static Float:pos[3];

	if (PlayerData[playerid][pAdmin] < 1) return SendClientMessageEx(playerid, COLOR_ERROR, "Vous n'avez pas la permission d'utiliser cette commande.");

	if (sscanf(params, "fff", pos[0], pos[1], pos[2]))
	{
		SendClientMessageEx(playerid, COLOR_USAGE, "/gotopos <posX> <posY> <posZ>");
		return 1;
	}
	SetPlayerPos(playerid, pos[0], pos[1], pos[2]);
	return 1;
}

CMD:goto(playerid, params[])
{
    static
		id,
		string[64];

    if(PlayerData[playerid][pAdmin] < 1 && !PlayerData[playerid][pHelper])
		return SendClientMessageEx(playerid, COLOR_ERROR, "Vous n'avez pas la permission d'utiliser cette commande.");

	if(isnull(params))
    {
		SendClientMessageEx(playerid, COLOR_USAGE, "/goto <options>");
		SendClientMessage(playerid, COLOR_USAGE, "OPTIONS: <PlayerID/PlayerName>, house, business, entrance, job, gate, interior, LV, LS, SF, banque");
		SendClientMessage(playerid, COLOR_USAGE, "OPTIONS: spawn, mapcustom, car, actor");

		return true;
    }

	if(strcmp(params, "spawn", true, 5) == 0)
	{
		SetDefaultSpawn(playerid);

		return SendClientMessageEx(playerid, COLOR_INFO, "Vous avez été téléporté à votre spawn par défaut.");
	}

	else if(strcmp(params, "banque", true, 6) == 0)
	{
		SetPlayerPos(playerid, 1461.1255,-1024.7206,23.8281);
		SetPlayerFacingAngle(playerid, 0.0000);

		SetPlayerInterior(playerid, 0);
		SetPlayerVirtualWorld(playerid, 0);

		return SendClientMessageEx(playerid, COLOR_INFO, "Vous avez été téléporté à la banque.");
	}

	else if(strcmp(params, "lv", true, 2) == 0)
	{
		SetPlayerPos(playerid, 1694.8448, 1436.6215, 10.7631);
		SetPlayerFacingAngle(playerid, 180.0000);

		SetPlayerInterior(playerid, 0);
		SetPlayerVirtualWorld(playerid, 0);

		return SendClientMessageEx(playerid, COLOR_INFO, "Vous avez été téléporté à LV.");
	}

	else if(strcmp(params, "sf", true, 2) == 0)
	{
		SetPlayerPos(playerid, -1417.0,-295.8,14.1);
		SetPlayerFacingAngle(playerid, 180.0000);

		SetPlayerInterior(playerid, 0);
		SetPlayerVirtualWorld(playerid, 0);

		return SendClientMessageEx(playerid, COLOR_INFO, "Vous avez été téléporté à SF.");
	}

	else if(strcmp(params, "ls", true, 2) == 0)
	{
		SetPlayerPos(playerid, 1484.2241, -1677.7986, 14.0469);
		SetPlayerFacingAngle(playerid, 180.0000);

		SetPlayerInterior(playerid, 0);
		SetPlayerVirtualWorld(playerid, 0);

		return SendClientMessageEx(playerid, COLOR_INFO, "Vous avez été téléporté à LS.");
	}

	else if(strcmp(params, "billboard", true, 9) == 0)
	{
		if(sscanf(params[9], "d", id))
		return SendClientMessageEx(playerid, COLOR_USAGE, "/goto [billboard] [billboard ID]");

		if((id < 0 || id >= MAX_BILLBOARDS) || !BillBoardData[id][bbExists])
		return SendClientMessageEx(playerid, COLOR_ERROR, "Mauvais billboard ID.");

		SetPlayerPos(playerid, BillBoardData[id][bbPos][0], BillBoardData[id][bbPos][1], BillBoardData[id][bbPos][2]);
		SendClientMessageEx(playerid, COLOR_INFO, "Vous avez été téléporté au panneau ID: %d.", id);
		return true;
	}

	else if(strcmp(params, "house", true, 5) == 0)
	{
		if(sscanf(params[5], "d", id))
		return SendClientMessageEx(playerid, COLOR_USAGE, "/goto [house] [house ID]");

		if((id < 0 || id >= MAX_HOUSES) || !HouseData[id][houseExists])
		return SendClientMessageEx(playerid, COLOR_ERROR, "Mauvais house ID.");

		SetPlayerPos(playerid, HouseData[id][housePos][0], HouseData[id][housePos][1], HouseData[id][housePos][2]);
		SetPlayerInterior(playerid, HouseData[id][houseExterior]);

		SetPlayerVirtualWorld(playerid, HouseData[id][houseExteriorVW]);
		SendClientMessageEx(playerid, COLOR_INFO, "Vous avez été téléporté à la propriété ID: %d.", id);
		return true;
	}

	else if(strcmp(params, "car", true, 3) == 0)
	{
		new
			vehicleid;

		if(sscanf(params[3], "d", vehicleid))
			return SendClientMessageEx(playerid, COLOR_USAGE, "/goto car <VehicleID>");

		if(vehicleid < 1 || vehicleid > MAX_VEHICLES || !IsValidVehicle(vehicleid))
			return SendClientMessageEx(playerid, COLOR_ERROR, "Vous avez spécifié un ID véhicule invalide.");

		static
			Float:x,
			Float:y,
			Float:z,
			virtualW;

		GetVehiclePos(vehicleid, x, y, z);
		virtualW = GetVehicleVirtualWorld(vehicleid);

		SetPlayerVirtualWorld(playerid, virtualW);
		SetPlayerPos(playerid, x, y - 2, z + 2);
		return true;
	}

	else if(strcmp(params, "business", true, 8) == 0)
	{
		if(sscanf(params[8], "d", id))
		return SendClientMessageEx(playerid, COLOR_USAGE, "/goto [business] [business ID]");

		if((id < 0 || id >= MAX_BUSINESSES) || !BusinessData[id][bizExists])
		return SendClientMessageEx(playerid, COLOR_ERROR, "Mauvais business ID.");

		SetPlayerPos(playerid, BusinessData[id][bizPos][0], BusinessData[id][bizPos][1], BusinessData[id][bizPos][2]);
		SetPlayerInterior(playerid, BusinessData[id][bizExterior]);

		SetPlayerVirtualWorld(playerid, BusinessData[id][bizExteriorVW]);
		SendClientMessageEx(playerid, COLOR_INFO, "Vous avez été téléporté au business ID: %d.", id);
		return true;
	}

	else if(strcmp(params, "actor", true, 5) == 0)
	{
		if(sscanf(params[5], "d", id))
		return SendClientMessageEx(playerid, COLOR_USAGE, "/goto actor <ActorID>");

		if((id < 0 || id >= MAX_ACTORS) || !ActorData[id][actorExists])
		return SendClientMessageEx(playerid, COLOR_ERROR, "Mauvais actor ID.");

		SetPlayerPos(playerid, ActorData[id][actorPos][0], ActorData[id][actorPos][1], ActorData[id][actorPos][2]);
		SetPlayerVirtualWorld(playerid, ActorData[id][actorWorld]);

		SendClientMessageEx(playerid, COLOR_INFO, "Vous avez été téléporté à l'actor ID: %d.", id);
		return true;
	}

	else if(strcmp(params, "entrance", true, 8) == 0)
	{
		if(sscanf(params[8], "d", id))
		return SendClientMessageEx(playerid, COLOR_USAGE, "/goto [entrance] [entrance ID]");

		if((id < 0 || id >= MAX_ENTRANCES) || !EntranceData[id][entranceExists])
		return SendClientMessageEx(playerid, COLOR_ERROR, "Mauvais entrance ID.");

		SetPlayerPos(playerid, EntranceData[id][entrancePos][0], EntranceData[id][entrancePos][1], EntranceData[id][entrancePos][2]);
		SetPlayerInterior(playerid, EntranceData[id][entranceExterior]);

		SetPlayerVirtualWorld(playerid, EntranceData[id][entranceExteriorVW]);
		SendClientMessageEx(playerid, COLOR_INFO, "Vous avez été téléporté à l'intérieur ID: %d.", id);
		return true;
	}

	else if(strcmp(params, "job", true, 3) == 0)
	{
		if(sscanf(params[3], "d", id))
		return SendClientMessageEx(playerid, COLOR_USAGE, "/goto [job] [job ID]");

		if((id < 0 || id >= MAX_DYNAMIC_JOBS) || !JobData[id][jobExists])
		return SendClientMessageEx(playerid, COLOR_ERROR, "Mauvais job ID.");

		SetPlayerPos(playerid, JobData[id][jobPos][0], JobData[id][jobPos][1], JobData[id][jobPos][2]);
		SetPlayerInterior(playerid, JobData[id][jobInterior]);

		SetPlayerVirtualWorld(playerid, JobData[id][jobWorld]);
		SendClientMessageEx(playerid, COLOR_INFO, "Vous avez été téléporté au Job ID: %d.", id);
		return true;
	}

	else if(strcmp(params, "gate", true, 4) == 0)
	{
		if(sscanf(params[4], "d", id))
		return SendClientMessageEx(playerid, COLOR_USAGE, "/goto [gate] [gate ID]");

		if((id < 0 || id >= MAX_GATES) || !GateData[id][gateExists])
		return SendClientMessageEx(playerid, COLOR_ERROR, "Mauvais gate ID.");

		SetPlayerPos(playerid, GateData[id][gatePos][0] - (2.5 * floatsin(-GateData[id][gatePos][3], degrees)), GateData[id][gatePos][1] - (2.5 * floatcos(-GateData[id][gatePos][3], degrees)), GateData[id][gatePos][2]);
		SetPlayerInterior(playerid, GateData[id][gateInterior]);

		SetPlayerVirtualWorld(playerid, GateData[id][gateWorld]);
		SendClientMessageEx(playerid, COLOR_INFO, "Vous avez été téléporté à la grille ID: %d.", id);
		return true;
	}

	else if(strcmp(params, "interior", true, 8) == 0)
	{
		static
			str[1536];

		str[0] = '\0';

		for (new i = 0; i < sizeof(g_arrInteriorData); i ++) {
			strcat(str, g_arrInteriorData[i][e_InteriorName]);
			strcat(str, "\n");
		}
		Dialog_Show(playerid, TeleportInterior, DIALOG_STYLE_LIST, "Liste d'intérieur", str, "Ok", "X");
		return true;
	}

	else if(strcmp(params, "mapcustom", true, 9) == 0)
	{
		mysql_function_query(g_iHandle, "SELECT * FROM `teleportations`", true, "Teleportations_Load", "d", playerid);
		return true;
	}

    else if(sscanf(params, "u", id))
    {
		SendClientMessageEx(playerid, COLOR_USAGE, "/goto <options>");
		SendClientMessage(playerid, COLOR_USAGE, "OPTIONS: <PlayerID/PlayerName>, house, business, entrance, job, gate, interior, LV, LS, SF, banque");
		SendClientMessage(playerid, COLOR_USAGE, "OPTIONS: spawn, mapcustom, car, actor");

		return true;
    }

	if(id == INVALID_PLAYER_ID || id == playerid)
	{
		return SendClientMessageEx(playerid, COLOR_ERROR, "Ce joueur n'est pas valide.");
    }

	if(!IsPlayerSpawned(id))
		return SendClientMessageEx(playerid, COLOR_ERROR, "Ce joueur n'est pas spawn.");

    SendPlayerToPlayer(playerid, id);

    format(string, sizeof(string), "Vous vous êtes ~y~téléporté~w~ a %s.", ReturnName(id, 0));
    ShowPlayerFooter(playerid, string);

	return true;
}

CMD:goto2(playerid, params[])
{
	static
	id,
	type[24],
	string[64];

	if (PlayerData[playerid][pAdmin] < 1 && !PlayerData[playerid][pHelper])
	return SendClientMessageEx(playerid, COLOR_ERROR, "Vous n'avez pas la permission d'utiliser cette commande.");

	if (sscanf(params, "u", id))
	{
		SendClientMessageEx(playerid, COLOR_USAGE, "/goto <options>");
		SendClientMessage(playerid, COLOR_USAGE, "OPTIONS: <PlayerID/PlayerName>, house, business, entrance, job, gate, interior, LV, LS, SF, banque");
		SendClientMessage(playerid, COLOR_USAGE, "OPTIONS: spawn, mapcustom, car, actor");
		return 1;
	}
	if (id == INVALID_PLAYER_ID || id == playerid)
	{
		if (sscanf(params, "s[24]S()[64]", type, string))
		{
			SendClientMessageEx(playerid, COLOR_USAGE, "/goto <options>");
			SendClientMessage(playerid, COLOR_USAGE, "OPTIONS: <PlayerID/PlayerName>, house, business, entrance, job, gate, interior, LV, LS, SF, banque");
			SendClientMessage(playerid, COLOR_USAGE, "OPTIONS: spawn, mapcustom, car, actor");
			return 1;
		}
		if (!strcmp(type, "spawn", true)) {
			SetDefaultSpawn(playerid);

			return SendClientMessageEx(playerid, COLOR_INFO, "Vous avez été téléporté à votre spawn par défaut.");
		}
		else if (!strcmp(type, "ls", true))
		{
			SetPlayerPos(playerid, 1484.2241, -1677.7986, 14.0469);
			SetPlayerFacingAngle(playerid, 180.0000);

			SetPlayerInterior(playerid, 0);
			SetPlayerVirtualWorld(playerid, 0);

			return SendClientMessageEx(playerid, COLOR_INFO, "Vous avez été téléporté à LS.");
		}
		else if (!strcmp(type, "banque", true))
		{
			SetPlayerPos(playerid, 1461.1255,-1024.7206,23.8281);
			SetPlayerFacingAngle(playerid, 0.0000);

			SetPlayerInterior(playerid, 0);
			SetPlayerVirtualWorld(playerid, 0);

			return SendClientMessageEx(playerid, COLOR_INFO, "Vous avez été téléporté à la banque.");
		}

		else if (!strcmp(type, "lv", true))
		{
			SetPlayerPos(playerid, 1694.8448, 1436.6215, 10.7631);
			SetPlayerFacingAngle(playerid, 180.0000);

			SetPlayerInterior(playerid, 0);
			SetPlayerVirtualWorld(playerid, 0);

			return SendClientMessageEx(playerid, COLOR_INFO, "Vous avez été téléporté à LV.");
		}
		else if (!strcmp(type, "sf", true))
		{
			SetPlayerPos(playerid, -1417.0,-295.8,14.1);
			SetPlayerFacingAngle(playerid, 180.0000);

			SetPlayerInterior(playerid, 0);
			SetPlayerVirtualWorld(playerid, 0);

			return SendClientMessageEx(playerid, COLOR_INFO, "Vous avez été téléporté à SF.");
		}
		//
		else if (!strcmp(type, "billboard", true))
		{
			if (sscanf(string, "d", id))
			return SendClientMessageEx(playerid, COLOR_USAGE, "/goto [billboard] [billboard ID]");

			if ((id < 0 || id >= MAX_BILLBOARDS) || !BillBoardData[id][bbExists])
			return SendClientMessageEx(playerid, COLOR_ERROR, "Mauvais billboard ID.");

			SetPlayerPos(playerid, BillBoardData[id][bbPos][0], BillBoardData[id][bbPos][1], BillBoardData[id][bbPos][2]);
			SendClientMessageEx(playerid, COLOR_INFO, "Vous avez été téléporté au panneau ID: %d.", id);
			return 1;
		}
		//
		else if (!strcmp(type, "house", true))
		{
			if (sscanf(string, "d", id))
			return SendClientMessageEx(playerid, COLOR_USAGE, "/goto [house] [house ID]");

			if ((id < 0 || id >= MAX_HOUSES) || !HouseData[id][houseExists])
			return SendClientMessageEx(playerid, COLOR_ERROR, "Mauvais house ID.");

			SetPlayerPos(playerid, HouseData[id][housePos][0], HouseData[id][housePos][1], HouseData[id][housePos][2]);
			SetPlayerInterior(playerid, HouseData[id][houseExterior]);

			SetPlayerVirtualWorld(playerid, HouseData[id][houseExteriorVW]);
			SendClientMessageEx(playerid, COLOR_INFO, "Vous avez été téléporté à la propriété ID: %d.", id);
			return 1;
		}
		else if (!strcmp(type, "car", true))
		{
			new
				vehicleid;

			if (sscanf(string, "d", vehicleid))
				return SendClientMessageEx(playerid, COLOR_USAGE, "/goto car <VehicleID>");

			if (vehicleid < 1 || vehicleid > MAX_VEHICLES || !IsValidVehicle(vehicleid))
				return SendClientMessageEx(playerid, COLOR_ERROR, "Vous avez spécifié un ID véhicule invalide.");

			static
				Float:x,
				Float:y,
				Float:z,
				virtualW;

			GetVehiclePos(vehicleid, x, y, z);
			virtualW = GetVehicleVirtualWorld(vehicleid);
			
			SetPlayerVirtualWorld(playerid, virtualW);
			SetPlayerPos(playerid, x, y - 2, z + 2);
			return 1;
		}
		else if (!strcmp(type, "business", true))
		{
			if (sscanf(string, "d", id))
			return SendClientMessageEx(playerid, COLOR_USAGE, "/goto [business] [business ID]");

			if ((id < 0 || id >= MAX_BUSINESSES) || !BusinessData[id][bizExists])
			return SendClientMessageEx(playerid, COLOR_ERROR, "Mauvais business ID.");

			SetPlayerPos(playerid, BusinessData[id][bizPos][0], BusinessData[id][bizPos][1], BusinessData[id][bizPos][2]);
			SetPlayerInterior(playerid, BusinessData[id][bizExterior]);

			SetPlayerVirtualWorld(playerid, BusinessData[id][bizExteriorVW]);
			SendClientMessageEx(playerid, COLOR_INFO, "Vous avez été téléporté au business ID: %d.", id);
			return 1;
		}
		else if (!strcmp(type, "actor", true))
		{
			if (sscanf(string, "d", id))
			return SendClientMessageEx(playerid, COLOR_USAGE, "/goto actor <ActorID>");

			if ((id < 0 || id >= MAX_ACTORS) || !ActorData[id][actorExists])
			return SendClientMessageEx(playerid, COLOR_ERROR, "Mauvais actor ID.");

			SetPlayerPos(playerid, ActorData[id][actorPos][0], ActorData[id][actorPos][1], ActorData[id][actorPos][2]);
			SetPlayerVirtualWorld(playerid, ActorData[id][actorWorld]);

			SendClientMessageEx(playerid, COLOR_INFO, "Vous avez été téléporté à l'actor ID: %d.", id);
			return 1;
		}
		else if (!strcmp(type, "entrance", true))
		{
			if (sscanf(string, "d", id))
			return SendClientMessageEx(playerid, COLOR_USAGE, "/goto [entrance] [entrance ID]");

			if ((id < 0 || id >= MAX_ENTRANCES) || !EntranceData[id][entranceExists])
			return SendClientMessageEx(playerid, COLOR_ERROR, "Mauvais entrance ID.");

			SetPlayerPos(playerid, EntranceData[id][entrancePos][0], EntranceData[id][entrancePos][1], EntranceData[id][entrancePos][2]);
			SetPlayerInterior(playerid, EntranceData[id][entranceExterior]);

			SetPlayerVirtualWorld(playerid, EntranceData[id][entranceExteriorVW]);
			SendClientMessageEx(playerid, COLOR_INFO, "Vous avez été téléporté à l'intérieur ID: %d.", id);
			return 1;
		}
		else if (!strcmp(type, "job", true))
		{
			if (sscanf(string, "d", id))
			return SendClientMessageEx(playerid, COLOR_USAGE, "/goto [job] [job ID]");

			if ((id < 0 || id >= MAX_DYNAMIC_JOBS) || !JobData[id][jobExists])
			return SendClientMessageEx(playerid, COLOR_ERROR, "Mauvais job ID.");

			SetPlayerPos(playerid, JobData[id][jobPos][0], JobData[id][jobPos][1], JobData[id][jobPos][2]);
			SetPlayerInterior(playerid, JobData[id][jobInterior]);

			SetPlayerVirtualWorld(playerid, JobData[id][jobWorld]);
			SendClientMessageEx(playerid, COLOR_INFO, "Vous avez été téléporté au Job ID: %d.", id);
			return 1;
		}
		else if (!strcmp(type, "gate", true))
		{
			if (sscanf(string, "d", id))
			return SendClientMessageEx(playerid, COLOR_USAGE, "/goto [gate] [gate ID]");

			if ((id < 0 || id >= MAX_GATES) || !GateData[id][gateExists])
			return SendClientMessageEx(playerid, COLOR_ERROR, "Mauvais gate ID.");

			SetPlayerPos(playerid, GateData[id][gatePos][0] - (2.5 * floatsin(-GateData[id][gatePos][3], degrees)), GateData[id][gatePos][1] - (2.5 * floatcos(-GateData[id][gatePos][3], degrees)), GateData[id][gatePos][2]);
			SetPlayerInterior(playerid, GateData[id][gateInterior]);

			SetPlayerVirtualWorld(playerid, GateData[id][gateWorld]);
			SendClientMessageEx(playerid, COLOR_INFO, "Vous avez été téléporté à la grille ID: %d.", id);
			return 1;
		}
		else if (!strcmp(type, "interior", true))
		{
			static
			str[1536];

			str[0] = '\0';

			for (new i = 0; i < sizeof(g_arrInteriorData); i ++) {
				strcat(str, g_arrInteriorData[i][e_InteriorName]);
				strcat(str, "\n");
			}
			Dialog_Show(playerid, TeleportInterior, DIALOG_STYLE_LIST, "Liste d'intérieur", str, "Ok", "X");
			return 1;
		}
		else if (!strcmp(type, "mapcustom", true))
		{
			mysql_function_query(g_iHandle, "SELECT * FROM `teleportations`", true, "Teleportations_Load", "d", playerid);
			return 1;
		}


		else return SendClientMessageEx(playerid, COLOR_ERROR, "Ce joueur n'est pas valide.");
	}
	if (!IsPlayerSpawned(id))
	return SendClientMessageEx(playerid, COLOR_ERROR, "Ce joueur n'est pas spawn.");

	SendPlayerToPlayer(playerid, id);

	format(string, sizeof(string), "Vous vous êtes ~y~téléporté~w~ a %s.", ReturnName(id, 0));
	ShowPlayerFooter(playerid, string);
	return 1;
}

CMD:bring(playerid, params[])
return cmd_gethere(playerid, params);

CMD:gethere(playerid, params[])
{
	static
	userid;

	if (PlayerData[playerid][pAdmin] < 1 && !PlayerData[playerid][pHelper])
	return SendClientMessageEx(playerid, COLOR_ERROR, "Vous n'avez pas la permission d'utiliser cette commande.");

	if (sscanf(params, "u", userid))
	return SendClientMessageEx(playerid, COLOR_USAGE, "/gethere <PlayerID/PlayerName>");

	if (userid == INVALID_PLAYER_ID)
	return SendClientMessageEx(playerid, COLOR_ERROR, "Ce joueur n'est pas valide.");

	if (!IsPlayerSpawned(userid))
	return SendClientMessageEx(playerid, COLOR_ERROR, "Vous ne pouvez pas téléporter un joueur pas spawn.");

	SendPlayerToPlayer(userid, playerid);
	SendClientMessageEx(playerid, COLOR_INFO, "Vous avez teleporté %s à votre position.", ReturnName(userid, 0));
	return 1;
}

CMD:getcar(playerid, params[])
{
	new vehicleid;

	if (PlayerData[playerid][pAdmin] < 2)
	return SendClientMessageEx(playerid, COLOR_ERROR, "Vous n'avez pas la permission d'utiliser cette commande.");

	if (sscanf(params, "d", vehicleid))
	return SendClientMessageEx(playerid, COLOR_USAGE, "/getcar <VehicleID>");

	if (vehicleid < 1 || vehicleid > MAX_VEHICLES || !IsValidVehicle(vehicleid))
	return SendClientMessageEx(playerid, COLOR_ERROR, "Vous avez spécifié un ID véhicule invalide.");

	static
		Float:x,
		Float:y,
		Float:z;

	GetPlayerPos(playerid, x, y, z);
	SetVehiclePos(vehicleid, x, y - 2, z + 2);

	return 1;
}

CMD:inventaire(playerid, params[])
{
	if (PlayerData[playerid][pHospital] != -1 || PlayerData[playerid][pCuffed] || PlayerData[playerid][pInjured] || !IsPlayerSpawned(playerid))
	return SendClientMessageEx(playerid, COLOR_ERROR, "Vous ne pouvez pas ouvrir votre inventaire pour le moment.");

	if (PlayerData[playerid][pJailTime] > 0)
	return SendClientMessageEx(playerid, COLOR_ERROR, "Vous ne pouvez pas ouvrir votre inventaire en Jail.");

	OpenInventory(playerid);
	return 1;
}

CMD:setint(playerid, params[])
{
	static
	userid,
	interior;

	if (PlayerData[playerid][pAdmin] < 1)
	return SendClientMessageEx(playerid, COLOR_ERROR, "Vous n'avez pas la permission d'utiliser cette commande.");

	if (sscanf(params, "ud", userid, interior))
	return SendClientMessageEx(playerid, COLOR_USAGE, "/setinterior <PlayerID/PlayerName> <InteriorID>");

	if (userid == INVALID_PLAYER_ID)
	return SendClientMessageEx(playerid, COLOR_ERROR, "Ce joueur n'est pas valide.");

	SetPlayerInterior(userid, interior);
	PlayerData[userid][pInterior] = interior;

	SendClientMessageEx(playerid, COLOR_INFO, "Vous avez changé l'intérieur de %s à %d.", ReturnName(userid, 0), interior);
	return 1;
}

CMD:setvw(playerid, params[])
{
	static
	userid,
	world;

	if (PlayerData[playerid][pAdmin] < 1)
	return SendClientMessageEx(playerid, COLOR_ERROR, "Vous n'avez pas la permission d'utiliser cette commande.");

	if (sscanf(params, "ud", userid, world))
	return SendClientMessageEx(playerid, COLOR_USAGE, "/setvw <PlayerID/PlayerName> <WorldID>");

	if (userid == INVALID_PLAYER_ID)
	return SendClientMessageEx(playerid, COLOR_ERROR, "Ce joueur n'est pas valide.");

	SetPlayerVirtualWorld(userid, world);
	PlayerData[userid][pWorld] = world;

	SendClientMessageEx(playerid, COLOR_INFO, "Vous avez changé le world de %s à %d.", ReturnName(userid, 0), world);
	return 1;
}

CMD:sendto(playerid, params[])
{
	static
	userid,
	targetid;

	if (PlayerData[playerid][pAdmin] < 2)
	return SendClientMessageEx(playerid, COLOR_ERROR, "Vous n'avez pas la permission d'utiliser cette commande.");

	if (sscanf(params, "uu", userid, targetid))
	return SendClientMessageEx(playerid, COLOR_USAGE, "/sendto <PlayerID/PlayerName> (à) <PlayerID/PlayerName>");

	if (userid == INVALID_PLAYER_ID || targetid == INVALID_PLAYER_ID)
	return SendClientMessageEx(playerid, COLOR_ERROR, "Ce joueur n'est pas connecté.");

	SendPlayerToPlayer(userid, targetid);

	SendClientMessageEx(playerid, COLOR_INFO, "Vous avez téléporté le joueur %s au joueur %s.", ReturnName(userid, 0), ReturnName(targetid));
	SendClientMessageEx(userid, COLOR_INFO, "%s vous a téléporté au joueur %s.", ReturnName(playerid), ReturnName(targetid));
	return 1;
}

CMD:ip(playerid, params[])
{
	static
	userid;

	if (PlayerData[playerid][pAdmin] < 3)
	return SendClientMessageEx(playerid, COLOR_ERROR, "Vous n'avez pas la permission d'utiliser cette commande.");

	if (sscanf(params, "u", userid))
	return SendClientMessageEx(playerid, COLOR_USAGE, "/ip <PlayerID/PlayerName>");

	if (userid == INVALID_PLAYER_ID)
	return SendClientMessageEx(playerid, COLOR_ERROR, "Ce joueur n'est pas valide.");

	SendClientMessageEx(playerid, COLOR_INFO, "IP de: %s - %s.", ReturnName(userid, 0), PlayerData[userid][pIP]);
	return 1;
}

CMD:rmp(playerid, params[])
{
	static
	text[128];

	if (sscanf(params, "s[128]", text))
	return SendClientMessageEx(playerid, COLOR_USAGE, "/rmp <Message>");

	if (messagePrivate[playerid] < 0)
	return SendClientMessageEx(playerid, COLOR_ERROR, "Vous n'avez pas reçu de message.");

	if (!IsPlayerConnected(messagePrivate[playerid]))
	return SendClientMessageEx(playerid, COLOR_ERROR, "Ce joueur n'est pas connecté.");

	if (messagePrivate[playerid] == playerid)
	return SendClientMessageEx(playerid, COLOR_ERROR, "Vous ne pouvez pas vous PM vous même.");


	PlayerPlaySound(messagePrivate[playerid], 1085, 0.0, 0.0, 0.0);
	
	SendClientMessageEx(messagePrivate[playerid], COLOR_YELLOW, "(( Réponse de %s(%d): %s ))", ReturnName(playerid), playerid, text);
	SendClientMessageEx(playerid, COLOR_YELLOW, "(( Réponse à %s(%d): %s ))", ReturnName(messagePrivate[playerid]), messagePrivate[playerid], text);
	messagePrivate[playerid] = -1;
	return 1;
}

CMD:emp(playerid, params[])
{
	static
	userid,
	text[128];

	if (sscanf(params, "us[128]", userid, text))
	return SendClientMessageEx(playerid, COLOR_USAGE, "/emp <PlayerID/PlayerName> <Message>");

	if ((PlayerData[playerid][pAdmin] < 1) && (PlayerData[playerid][pDonator] == 0) && (!PlayerData[playerid][pHelper]))
	return SendClientMessageEx(playerid, COLOR_ERROR, "Vous n'avez pas la permission d'utiliser cette commande.");

	if (userid == INVALID_PLAYER_ID)
	return SendClientMessageEx(playerid, COLOR_ERROR, "Ce joueur n'est pas valide.");

	if (userid == playerid)
	return SendClientMessageEx(playerid, COLOR_ERROR, "Vous ne pouvez pas vous PM vous même.");

	PlayerPlaySound(userid, 1085, 0.0, 0.0, 0.0);

	messagePrivate[userid] = playerid;

	SendClientMessageEx(userid, COLOR_YELLOW, "(( Message de %s(%d): %s ))", ReturnName(playerid), playerid, text);
	SendClientMessage(userid, COLOR_WHITE, "Vous pouvez répondre au message une seule fois via la commande /rmp.");
	
	SendClientMessageEx(playerid, COLOR_YELLOW, "(( Message à %s(%d): %s ))", ReturnName(userid, 0), userid, text);
	return 1;
}

CMD:ao(playerid, params[])
{
	static
	string[256];

	if (PlayerData[playerid][pAdmin] < 1)
	return SendClientMessageEx(playerid, COLOR_ERROR, "Vous n'avez pas la permission d'utiliser cette commande.");

	if (sscanf(params, "s[256]", string))
	return SendClientMessageEx(playerid, COLOR_USAGE, "/ao <texte>");

	SendClientMessageToAllEx(COLOR_ERROR, "%s: %s", GetAdminRank(playerid), string);
	SendAdminAlert(COLOR_ADMINGROUP, "%s(%d) a envoyé une annonce globale.", ReturnName(playerid), playerid, string);
	return 1;
}

CMD:togooc(playerid, params[])
{
	if (PlayerData[playerid][pAdmin] < 1)
	return SendClientMessageEx(playerid, COLOR_ERROR, "Vous n'avez pas la permission d'utiliser cette commande.");

	if (g_StatusOOC == 1)
	{
		SendClientMessageToAllEx(COLOR_INFO, "%s a désactivé le tchat OOC.", ReturnName(playerid));
		g_StatusOOC = 0;
	}
	else
	{
		SendClientMessageToAllEx(COLOR_INFO, "%s a activé le tchat OOC.", ReturnName(playerid));
		g_StatusOOC = 1;
	}
	return 1;
}

CMD:payersabot(playerid, params[])
{
	new
	id = -1;

	if ((id = Car_Nearest(playerid)) != -1)
	{

		if (GetMoney(playerid) < CarData[id][carSabPri])
		return SendClientMessageEx(playerid, COLOR_ERROR, "Action impossible, vous n'avez pas l'argent nécessaire");

		if (CarData[id][carSabot] == 0)
		return SendClientMessageEx(playerid, COLOR_ERROR, "Ce véhicule ne contient pas de sabot");

		for (new i = 0; i != MAX_FACTIONS; i ++) if (FactionData[i][factionType] == FACTION_POLICE) FactionData[i][factionArge] += CarData[id][carSabPri];


	    GiveMoney(playerid,-CarData[id][carSabPri]);
		SendClientMessageEx(playerid, COLOR_INFO, "Vous avez payé le sabot pour %d$",CarData[id][carSabPri]);

		CarData[id][carSabot] = 0;
		CarData[id][carSabPri] = 0;
		Car_Save(id);

	}
	else SendClientMessageEx(playerid, COLOR_ERROR, "Vous n'êtes pas près d'un véhicule.");
	return 1;
}

CMD:sethp(playerid, params[])
{
	static
	userid,
	Float:amount;

	if (PlayerData[playerid][pAdmin] < 2)
	return SendClientMessageEx(playerid, COLOR_ERROR, "Vous n'avez pas la permission d'utiliser cette commande.");

	if (sscanf(params, "uf", userid, amount))
	return SendClientMessageEx(playerid, COLOR_USAGE, "/sethp <PlayerID/PlayerName> <Montant>");

	if (userid == INVALID_PLAYER_ID)
	return SendClientMessageEx(playerid, COLOR_ERROR, "Ce joueur n'est pas valide.");

	SetPlayerHealth(userid, amount);
	SendClientMessageEx(playerid, COLOR_INFO, "Vous avez fixé la vie de %s à %.2f.", ReturnName(userid, 0), amount);
	SendClientMessageEx(userid, COLOR_INFO, "%s a fixé votre vie à %.2f.", ReturnName(playerid), amount);
	return 1;
}

CMD:setarmor(playerid, params[])
{
	static
	userid,
	Float:amount;

	if (PlayerData[playerid][pAdmin] < 2)
	return SendClientMessageEx(playerid, COLOR_ERROR, "Vous n'avez pas la permission d'utiliser cette commande.");

	if (sscanf(params, "uf", userid, amount))
	return SendClientMessageEx(playerid, COLOR_USAGE, "/setarmor <PlayerID/PlayerName> <Montant>");

	if (userid == INVALID_PLAYER_ID)
	return SendClientMessageEx(playerid, COLOR_ERROR, "Ce joueur n'est pas valide.");

	SetPlayerArmour(userid, amount);
	if(amount > 0.0)
	{
	    Inventory_Add(playerid, "Gilet pare balle", 19142);
		if(!IsPlayerAttachedObjectSlotUsed(userid, 7)) SetPlayerAttachedObject(userid, 7, 19142,  1, 0.1,  0.05, 0.0,  0.0,   0.0,   0.0);
	}
	SendClientMessageEx(playerid, COLOR_INFO, "Vous avez fixé l'armure de %s à %.2f.", ReturnName(userid, 0), amount);
	SendClientMessageEx(userid, COLOR_INFO, "%s a fixé votre armure à %.2f.", ReturnName(playerid), amount);
	return 1;
}

CMD:desarmer(playerid, params[])
{
	static
	userid;

	if (PlayerData[playerid][pAdmin] < 3)
	return SendClientMessageEx(playerid, COLOR_ERROR, "Vous n'avez pas la permission d'utiliser cette commande.");

	if (sscanf(params, "u", userid))
	return SendClientMessageEx(playerid, COLOR_USAGE, "/desarmer <PlayerID/PlayerName>");

	if (userid == INVALID_PLAYER_ID)
	return SendClientMessageEx(playerid, COLOR_ERROR, "Ce joueur n'est pas valide.");

	ResetWeapons(userid);
	SendClientMessageEx(playerid, COLOR_ADMIN, "Vous avez désarmé %s.", ReturnName(userid, 0));
	SendClientMessageEx(userid, COLOR_ADMIN, "Vous avez été désarmé par %s.", ReturnName(playerid));

	return 1;
}

CMD:bringcar(playerid, params[])
{
	new vehicleid;

	if (PlayerData[playerid][pAdmin] < 2)
	return SendClientMessageEx(playerid, COLOR_ERROR, "Vous n'avez pas la permission d'utiliser cette commande.");

	if (sscanf(params, "d", vehicleid))
	return SendClientMessageEx(playerid, COLOR_USAGE, "/bringcar <VehicleID>");

	if (vehicleid < 1 || vehicleid > MAX_VEHICLES || !IsValidVehicle(vehicleid))
	return SendClientMessageEx(playerid, COLOR_ERROR, "Mauvais véhicule ID.");

	static
	Float:x,
	Float:y,
	Float:z;

	GetPlayerPos(playerid, x, y, z);
	SetVehiclePos(vehicleid, x + 2, y - 2, z);

	SetVehicleVirtualWorld(vehicleid, GetPlayerVirtualWorld(playerid));
	LinkVehicleToInterior(vehicleid, GetPlayerInterior(playerid));

	return 1;
}

CMD:entercar(playerid, params[])
{
	new vehicleid, seatid;

	if (PlayerData[playerid][pAdmin] < 1)
	return SendClientMessageEx(playerid, COLOR_ERROR, "Vous n'avez pas la permission d'utiliser cette commande.");

	if (sscanf(params, "d", vehicleid))
	return SendClientMessageEx(playerid, COLOR_USAGE, "/entercar <VehicleID>");

	if (vehicleid < 1 || vehicleid > MAX_VEHICLES || !IsValidVehicle(vehicleid))
	return SendClientMessageEx(playerid, COLOR_ERROR, "Mauvais véhicule ID.");

	seatid = GetAvailableSeat(vehicleid, 0);

	if (seatid == -1)
	return SendClientMessageEx(playerid, COLOR_ERROR, "Il n'y a pas de siège sur ce véhicule.");

	PutPlayerInVehicle(playerid, vehicleid, seatid);
	return 1;
}

CMD:respawncar(playerid, params[])
{
    if (PlayerData[playerid][pAdmin] < 3) return SendClientMessageEx(playerid, COLOR_ERROR, "Vous n'avez pas la permission d'utiliser cette commande.");

	static nom[24], scmd[128];
	if (sscanf(params, "s[24]S()[128]", nom, scmd))
	{
	    SendClientMessageEx(playerid, COLOR_USAGE, "/respawncar <options>");
	    SendClientMessage(playerid, COLOR_USAGE, "OPTIONS: inut(ilisés), id, proche, faction");
	    return 1;
	}
	if (!strcmp(nom, "inut", true))
	{
		new count;
		for(new i = 1, j = GetVehiclePoolSize(); i <= j; i++)
		{
			if (IsValidVehicle(i) && GetVehicleDriver(i) == INVALID_PLAYER_ID)
			{
				RespawnVehicle(i);
				count++;
			}
		}
		if (!count) return SendClientMessageEx(playerid, COLOR_ERROR, "Il n'y a aucun véhicule a respawn.");

		SendClientMessageEx(playerid, COLOR_INFO, "Vous avez respawn %d véhicules innocupés.", count);
	}
	if (!strcmp(nom, "id", true))
	{
		new vehicleid;
		if (sscanf(scmd, "d", vehicleid))
		{
			SendClientMessageEx(playerid, COLOR_USAGE, "/respawncar id <VehicleID (/dl)>");
			return 1;
		}

  		if (vehicleid < 1 || vehicleid > MAX_VEHICLES || !IsValidVehicle(vehicleid)) return SendClientMessageEx(playerid, COLOR_ERROR, "Mauvais véhicule ID.");

		RespawnVehicle(vehicleid);
		SendClientMessageEx(playerid, COLOR_INFO, "Vous avez respawn le véhicule ID: %d.", vehicleid);
	}
	if (!strcmp(nom, "faction", true))
	{
		new
			factionid,
			count = 0;
			
		if (sscanf(scmd, "d", factionid))
		{
			SendClientMessageEx(playerid, COLOR_USAGE, "/respawncar faction <FactionID (/fliste)>");
			return 1;
		}

		if ((factionid < 0 || factionid >= MAX_FACTIONS) || !FactionData[factionid][factionExists])
		return SendClientMessageEx(playerid, COLOR_ERROR, "Vous avez specifié un ID faction invalide.");

		for(new i=0; i<MAX_DYNAMIC_CARS; i++) if(CarData[i][carExists] && CarData[i][carFaction] == FactionData[factionid][factionType])
		{
		    count++;
		    RespawnVehicle(CarData[i][carVehicle]);
		}
		if(count <= 0) return SendClientMessage(playerid, COLOR_ERROR, "Il n'y a aucun véhicule dans cette faction.");
		SendClientMessageEx(playerid, COLOR_INFO, "Vous avez respawn %d véhicule de la faction \"%s\".", count, FactionData[factionid][factionName]);
	}
	if (!strcmp(nom, "proche", true))
	{
		new count;
		for(new i = 1, j = GetVehiclePoolSize(); i <= j; i++)
		{
			static
			Float:fX,
			Float:fY,
			Float:fZ;

			if (IsValidVehicle(i) && GetVehicleDriver(i) == INVALID_PLAYER_ID)
			{
				GetVehiclePos(i, fX, fY, fZ);

				if (IsPlayerInRangeOfPoint(playerid, 50.0, fX, fY, fZ))
				{
					RespawnVehicle(i);
					count++;
				}
			}
		}
		if (!count)
		return SendClientMessageEx(playerid, COLOR_ERROR, "Il n'y a respawn autour de vous.");

		SendClientMessageEx(playerid, COLOR_INFO, "Vous avez respawn %d véhicules autour de vous.", count);
	}
	return 1;
}

CMD:donnerarme(playerid, params[])
{
	static
	userid,
	weaponid,
	ammo;

	if (PlayerData[playerid][pAdmin] < 5)
	return SendClientMessageEx(playerid, COLOR_ERROR, "Vous n'avez pas la permission d'utiliser cette commande.");

	if (sscanf(params, "uk<weapon>I(500)", userid, weaponid, ammo))
	return SendClientMessageEx(playerid, COLOR_USAGE, "/donnerarme <PlayerID/PlayerName> <ID arme> <Munitions>");

	if (userid == INVALID_PLAYER_ID)
	return SendClientMessageEx(playerid, COLOR_ERROR, "Vous ne pouvez pas donner une arme aux joueurs déconnectés.");

	if (!IsPlayerSpawned(userid))
	return SendClientMessageEx(playerid, COLOR_ERROR, "Vous ne pouvez pas donner des armes aux joueurs qui ne sont pas spawn.");

	if (weaponid <= 0 || weaponid > 46 || (weaponid >= 19 && weaponid <= 21))
	return SendClientMessageEx(playerid, COLOR_ERROR, "Vous aves specifié un ID d'arme invalide.");

	GiveWeaponToPlayer(userid, weaponid, ammo);
	SendClientMessageEx(playerid, COLOR_INFO, "Vous avez donné à %s un(e) %s avec %d munitions.", ReturnName(userid, 0), ReturnWeaponName(weaponid), ammo);
	return 1;
}

CMD:setstat(playerid, params[])
{
	if (PlayerData[playerid][pAdmin] < 4)
	return SendClientMessageEx(playerid, COLOR_ERROR, "Vous n'avez pas la permission d'utiliser cette commande.");

	static
	userid,
	type[16],
	amount[32];

	if (sscanf(params, "us[16]S()[32]", userid, type, amount))
	{
		SendClientMessageEx(playerid, COLOR_USAGE, "/setstat <PlayerID/PlayerName> <options>");
		SendClientMessage(playerid, COLOR_USAGE, "OPTIONS: sexe, naissance, origine, bank, savings, level");
		SendClientMessage(playerid, COLOR_USAGE, "OPTIONS: heure, job, warrants, channel, rank, faction, skin");
		return 1;
	}
	if (userid == INVALID_PLAYER_ID)
	return SendClientMessageEx(playerid, COLOR_ERROR, "Ce joueur n'est pas valide.");

	if (!strcmp(type, "sexe", true))
	{
		if (isnull(amount) || strval(amount) < 1 || strval(amount) > 2)
		return SendClientMessageEx(playerid, COLOR_USAGE, "/setstat <PlayerID/PlayerName> age <(1: masculin - 2: feminin)>");

		PlayerData[userid][pGender] = strval(amount);

		if (PlayerData[userid][pGender] == 1)
		SendClientMessageEx(playerid, COLOR_INFO, "Vous avez changé le sexe de %s en homme.", ReturnName(userid, 0));

		else if (PlayerData[userid][pGender] == 2)
		SendClientMessageEx(playerid, COLOR_INFO, "Vous avez changé le sexe de %s en femme.", ReturnName(userid, 0));
	}
	else if (!strcmp(type, "skin", true))
	{
		if (isnull(amount))
		return SendClientMessageEx(playerid, COLOR_USAGE, "/setstat <PlayerID/PlayerName> skin <valeur>");

		if (strval(amount) < 0 || strval(amount) > 299)
		return SendClientMessageEx(playerid, COLOR_ERROR, "Skin invalide.");

		SetPlayerSkin(userid, strval(amount));
		PlayerData[userid][pSkin] = strval(amount);

		SendClientMessageEx(playerid, COLOR_ADMIN, "Vous avez mis le skin du joueur %s au skin %d.", ReturnName(userid, 0), strval(amount));
		SendClientMessageEx(userid, COLOR_ADMIN, "%s a changé votre skin. (ID: %d)", ReturnName(playerid), strval(amount));
	}
	else if (!strcmp(type, "naissance", true))
	{
		if (isnull(amount) || strlen(amount) > 24)
		return SendClientMessageEx(playerid, COLOR_USAGE, "/setstat <PlayerID/PlayerName> naissance <valeur>");

		format(PlayerData[userid][pBirthdate], 24, amount);
		SendClientMessageEx(playerid, COLOR_INFO, "Vous avez changé la date de naissance de %s en: \"%s\".", ReturnName(userid, 0), amount);
	}
	else if (!strcmp(type, "origine", true))
	{
		if (isnull(amount) || strlen(amount) > 32)
		return SendClientMessageEx(playerid, COLOR_USAGE, "/setstat <PlayerID/PlayerName> origine <valeur>");

		format(PlayerData[userid][pOrigin], 32, amount);
		SendClientMessageEx(playerid, COLOR_INFO, "Vous avez changé l'origine de %s en: \"%s\".", ReturnName(userid, 0), amount);
	}
	else if (!strcmp(type, "bank", true))
	{
		if (isnull(amount))
		return SendClientMessageEx(playerid, COLOR_USAGE, "/setstat <PlayerID/PlayerName> bank <Montant>");

		PlayerData[userid][pBankMoney] = strval(amount);
		SendClientMessageEx(playerid, COLOR_INFO, "Vous avez changé le compte en banque de %s en %s.", ReturnName(userid, 0), FormatNumber(strval(amount)));
	}
	else if (!strcmp(type, "savings", true))
	{
		if (isnull(amount))
		return SendClientMessageEx(playerid, COLOR_USAGE, "/setstat <PlayerID/PlayerName> savings <Montant>");

		PlayerData[userid][pSavings] = strval(amount);
		SendClientMessageEx(playerid, COLOR_INFO, "Vous avez changé le compte d'économie de %s en %s.", ReturnName(userid, 0), FormatNumber(strval(amount)));
	}
	else if (!strcmp(type, "level", true))
	{
		if (isnull(amount))
		return SendClientMessageEx(playerid, COLOR_USAGE, "/setstat <PlayerID/PlayerName> level <Montant>");
		if (strval(amount) <= 0)
		return SendClientMessageEx(playerid, COLOR_USAGE, "Veuillez entrer un level égal ou supérieur à 1.");

		PlayerData[userid][pLevel] = strval(amount);
		if(strval(amount) == 1) PlayerData[userid][pPlayingHoursMax] = 4;
		else PlayerData[userid][pPlayingHoursMax] = PlayerData[userid][pLevel]*2;
		SendClientMessageEx(playerid, COLOR_INFO, "Vous avez mis le niveau de %s à %s.", ReturnName(userid, 0), FormatNumber(strval(amount), ""));
	}
	else if (!strcmp(type, "heure", true))
	{
		if (isnull(amount))
		return SendClientMessageEx(playerid, COLOR_USAGE, "/setstat <PlayerID/PlayerName> heure <Montant>");

		PlayerData[userid][pHours] = strval(amount);
		SendClientMessageEx(playerid, COLOR_INFO, "Vous avez mis les heures de jeux de %s à %s.", ReturnName(userid, 0), FormatNumber(strval(amount), ""));
	}
	else if (!strcmp(type, "job", true))
	{
		if (isnull(amount))
		return SendClientMessageEx(playerid, COLOR_USAGE, "/setstat <PlayerID/PlayerName> job <valeur>");

		if (strval(amount) < 0 || strval(amount) > 8)
		return SendClientMessageEx(playerid, COLOR_ERROR, "Mauvais job ID.");

		PlayerData[userid][pJob] = strval(amount);
		SendClientMessageEx(playerid, COLOR_INFO, "Vous avez mis le job de %s à %s.", ReturnName(userid, 0), Job_GetName(PlayerData[userid][pJob]));
	}
	else if (!strcmp(type, "warrants", true))
	{
		if (isnull(amount))
		return SendClientMessageEx(playerid, COLOR_USAGE, "/setstat <PlayerID/PlayerName> warrants <valeur>");

		PlayerData[userid][pWarrants] = strval(amount);
		SendClientMessageEx(playerid, COLOR_INFO, "Vous avez mis les mandats de %s à %s.", ReturnName(userid, 0), FormatNumber(strval(amount), ""));
	}
	else if (!strcmp(type, "channel", true))
	{
		if (isnull(amount))
		return SendClientMessageEx(playerid, COLOR_USAGE, "/setstat <PlayerID/PlayerName> channel <valeur>");

		PlayerData[userid][pChannel] = strval(amount);
		SendClientMessageEx(playerid, COLOR_INFO, "Vous avez mis le channel de la radio de %s à %s.", ReturnName(userid, 0), FormatNumber(strval(amount), ""));
	}
	else if (!strcmp(type, "rank", true))
	{
	    new
	        factionid;

		if (isnull(amount))
			return SendClientMessageEx(playerid, COLOR_USAGE, "/setstat <PlayerID/PlayerName> rank <valeur>");

		if ((factionid = PlayerData[userid][pFaction]) == -1)
			return SendClientMessageEx(playerid, COLOR_ERROR, "Ce joueur n'a pas de faction.");

		if (strval(amount) < 1 || strval(amount) > FactionData[factionid][factionRanks])
			return SendClientMessageEx(playerid, COLOR_ERROR, "Le rank est invalide. Il doit être entre 1 et %d.", FactionData[factionid][factionRanks]);

		PlayerData[userid][pFactionRank] = strval(amount);

		SendClientMessageEx(playerid, COLOR_INFO, "Vous avez modifier le rank de %s à %s.", ReturnName(userid, 0), FormatNumber(strval(amount)));
		SendClientMessageEx(userid, COLOR_INFO, "%s a modifié votre rank à %s.", ReturnName(playerid), FormatNumber(strval(amount)));
	}
	else if (!strcmp(type, "faction", true))
	{
		if (isnull(amount))
			return SendClientMessageEx(playerid, COLOR_USAGE, "/setstat <PlayerID/PlayerName> faction <valeur>");

		if ((strval(amount) < -1 || strval(amount) >= MAX_FACTIONS) || (strval(amount) != -1 && !FactionData[strval(amount)][factionExists]))
			return SendClientMessageEx(playerid, COLOR_ERROR, "Vous avez specifié un ID faction invalide.");

		if (strval(amount) == -1)
		{
			ResetFaction(userid);

			SendClientMessageEx(playerid, COLOR_INFO, "Vous avez retiré %s de sa faction.", ReturnName(userid, 0));
			SendClientMessageEx(userid, COLOR_INFO, "%s vous a retiré de votre faction.", ReturnName(playerid));
		}
		else
		{
			SetFaction(userid, strval(amount));

			if (!PlayerData[userid][pFactionRank])
			PlayerData[userid][pFactionRank] = 1;

			SendClientMessageEx(playerid, COLOR_INFO, "Vous avez assigné à %s le leading de la faction \"%s\".", ReturnName(userid, 0), FactionData[strval(amount)][factionName]);
			SendClientMessageEx(userid, COLOR_INFO, "L'administrateur %s vous a assigné le leading de la faction \"%s\".", ReturnName(playerid), FactionData[strval(amount)][factionName]);
		}
	}
	return 1;
}

CMD:baninfo(playerid, params[])
{
	static
	string[128];

	if (PlayerData[playerid][pAdmin] < 2)
	return SendClientMessageEx(playerid, COLOR_ERROR, "Vous n'avez pas la permission d'utiliser cette commande.");

	if (isnull(params) || strlen(params) > 24)
	{
		SendClientMessageEx(playerid, COLOR_USAGE, "/baninfo <PlayerName>");
	}
	else
	{
		format(string, sizeof(string), "SELECT * FROM `blacklist` WHERE `Username` = '%s'", SQL_ReturnEscaped(params));
		mysql_function_query(g_iHandle, string, true, "OnBanLookup²", "ds", playerid, params);
	}
	return 1;
}

/*CMD:setname(playerid, params[])
{
	static
	userid,
	newname[24],
	query[128];

	if (PlayerData[playerid][pAdmin] < 6)
		return SendClientMessageEx(playerid, COLOR_ERROR, "Vous n'avez pas la permission d'utiliser cette commande.");

	if (sscanf(params, "us[24]", userid, newname))
		return SendClientMessageEx(playerid, COLOR_USAGE, "/setname <PlayerID/PlayerName> <NewPlayerName>");

	if (userid == INVALID_PLAYER_ID)
		return SendClientMessageEx(playerid, COLOR_ERROR, "Ce joueur n'est pas valide.");

	if (!PlayerData[userid][pLogged])
		return SendClientMessageEx(playerid, COLOR_ERROR, "Ce joueur n'est pas connecté.");

	if (!IsValidPlayerName(newname))
		return SendClientMessageEx(playerid, COLOR_ERROR, "Nom au format invalide.");

	foreach (new i : Player) if (!strcmp(ReturnName(i), newname))
	{
		return SendClientMessageEx(playerid, COLOR_ERROR, "Ce nom est déjà existant.");
	}

	format(query, sizeof(query), "SELECT `ID` FROM `characters` WHERE `Username` = '%s'", SQL_ReturnEscaped(newname));
	mysql_function_query(g_iHandle, query, true, "OnNameChange", "dds", playerid, userid, newname);

	return 1;
}
*/
CMD:aclearchat(playerid, params[])
{
	if (PlayerData[playerid][pAdmin] < 2)
	return SendClientMessageEx(playerid, COLOR_ERROR, "Vous n'avez pas la permission d'utiliser cette commande.");

	for (new i = 0; i < 100; i ++) {
		SendClientMessageToAll(-1, "");
	}
	return 1;
}

stock BusinessCanSell(bizid)
{
	if(Actor_CountBiz(bizid) > 0)
		return 1;

	foreach(new i : Player)
	{
	    if(PlayerData[i][pID] == BusinessData[bizid][bizOwner])
	    {
	        if(Business_InsideByID(i, bizid))
			return 1;
	    }
	}
	return 0;
}



Business_InsideByID(playerid, bizid)
{
	if (PlayerData[playerid][pBusiness] != -1)
	{
		if (BusinessData[bizid][bizExists] && BusinessData[bizid][bizID] == PlayerData[playerid][pBusiness] && GetPlayerInterior(playerid) == BusinessData[bizid][bizInterior] && GetPlayerVirtualWorld(playerid) > 0) {
			return 1;
		}
	}
	return 0;
}

CMD:acheter(playerid, params[])
{
	static
	id = -1;
	if ((id = Business_Inside(playerid)) != -1)
	{
		if (BusinessData[id][bizLocked] != 0 || !BusinessData[id][bizOwner]) return SendClientMessageEx(playerid, COLOR_ERROR, "Le business est fermé.");

		if(BusinessCanSell(id))
		{
			if (BusinessData[id][bizType] == 5)
			{
				Business_CarMenu(playerid, id);
			}
			else
			{
				Business_PurchaseMenu(playerid, id);
			}
		}
		else SendClientMessage(playerid, COLOR_ERROR, "Il n'y a aucun employé dans ce magasin, vous ne pouvez rien acheter.");
	}
	return 1;
}
	
CMD:accepter(playerid, params[])
{
	if (isnull(params))
	{
		SendClientMessageEx(playerid, COLOR_USAGE, "/accepter <options>");
		SendClientMessage(playerid, COLOR_USAGE, "OPTIONS: plein, reparation, permis, maison, business, vehicule");
		SendClientMessage(playerid, COLOR_USAGE, "OPTIONS: faction, mort, amende");
		return 1;
	}
	if (!strcmp(params, "amende", true))
	{
		new
		copsid = amendeInfo[playerid][0],
		price = amendeInfo[playerid][1];

		if (!IsPlayerNearPlayer(playerid, copsid, 5.0))
		return SendClientMessageEx(playerid, COLOR_ERROR, "Vous n'êtes pas à proximité du policier.");

		if (price == 0)
		return SendClientMessageEx(playerid, COLOR_ERROR, "Vous n'avez aucune amende.");

		if (Ticket_Add(playerid, price, amendeReason[playerid]) != -1)
		{
			SendClientMessageEx(copsid, COLOR_INFO, "Vous avez mis une amende à %s pour la somme de %s, raison: %s", ReturnName(playerid, 0), FormatNumber(price), amendeReason[playerid]);
			SendClientMessageEx(playerid, COLOR_INFO, "%s vous a mis une amende pour la somme de %s, raison: %s", ReturnName(copsid), FormatNumber(price), amendeReason[playerid]);

			SendNearbyMessage(copsid, 15.0, COLOR_PURPLE, "%s met une amende à %s.", ReturnName(copsid), ReturnName(playerid, 0));
			Log_Write("logs/ticket_log.txt", "[%s] %s a mit une amende a %s au prix de %s, raison: %s", ReturnDate(), ReturnName(copsid), FormatNumber(price), ReturnName(playerid, 0), amendeReason[playerid]);
		}
		else SendClientMessage(copsid, COLOR_ERROR, "Ce joueur a trop d'amende impayée, vous ne pouvez pas en rajouter.");

		amendeInfo[playerid][0] = 0;
		amendeInfo[playerid][1] = 0;
		amendeReason[playerid][0] = 0;
		
	}
	if (!strcmp(params, "plein", true))
	{
		new
		sellerid = PleinID[playerid],
		price = PleinPri[playerid];

		new car = GetPlayerVehicleID(playerid);

		if (GetMoney(playerid) < price)
		return SendClientMessageEx(playerid, COLOR_ERROR, "Vous n'avez pas assez d'argent pour cette réparation.");

		if (!IsPlayerInAnyVehicle(playerid))
		return SendClientMessageEx(playerid, COLOR_ERROR, "Vous n'êtes pas dans un véhicule.");

		if (price == 0)
		return SendClientMessageEx(playerid, COLOR_ERROR, "Vous n'avez aucune offre");

		SendClientMessageEx(playerid, COLOR_INFO, "Vous avez fait le plein de votre véhicule pour %s.", FormatNumber(price));
		SendClientMessageEx(sellerid, COLOR_INFO, "%s a accepté le plein pour la somme de %s.", ReturnName(playerid), FormatNumber(price));

		CoreVehicles[car][vehFuel] = 100;

		GiveMoney(playerid, -price);
		GiveMoney(sellerid, price);

		PleinID[playerid] = -1;
		PleinPri[playerid] = 0;
	}
	if (!strcmp(params, "reparation", true))
	{
		new
		sellerid = RepaID[playerid],
		price = ReparPri[playerid];

		if (price == 0)
		return SendClientMessageEx(playerid, COLOR_ERROR, "Vous n'avez aucune offre en cours.");

		if (GetMoney(playerid) < price)
		return SendClientMessageEx(playerid, COLOR_ERROR, "Vous n'avez pas assez d'argent pour cette réparation.");

		if (!IsPlayerInAnyVehicle(playerid))
		return SendClientMessageEx(playerid, COLOR_ERROR, "Vous n'êtes pas dans un véhicule.");

        if (GetPlayerDistanceFromPlayer(playerid, sellerid) > 15.0)
		return SendClientMessageEx(playerid, COLOR_ERROR, "Vous devez être à proximité du mécanicien.");

		SendClientMessageEx(playerid, COLOR_INFO, "Vous avez réparé votre véhicule pour %s.", FormatNumber(price));
		SendClientMessageEx(sellerid, COLOR_INFO, "%s a accepté la réparation pour la somme de %s.", ReturnName(playerid), FormatNumber(price));

        RepairVehicle(GetPlayerVehicleID(playerid));

		GiveMoney(playerid, -price);
		GiveMoney(sellerid, price);

		RepaID[playerid] = -1;
		ReparPri[playerid] = 0;
	}
	if (!strcmp(params, "peinture", true))
	{
		new
			sellerid = PeintureID[playerid],
			price = PeinturePri[playerid],
			color1 = PeintureColor1[playerid],
			color2 = PeintureColor2[playerid];

		if (GetMoney(playerid) < price)
		return SendClientMessageEx(playerid, COLOR_ERROR, "Vous n'avez pas assez d'argent pour cette peinture.");

		if (!IsPlayerInAnyVehicle(playerid))
		return SendClientMessageEx(playerid, COLOR_ERROR, "Vous n'êtes pas dans un véhicule.");

		if (price == 0)
		return SendClientMessageEx(playerid, COLOR_ERROR, "Vous n'avez aucune offre en cours.");

		SendClientMessageEx(playerid, COLOR_INFO, "Vous avez peint votre véhicule pour %s.", FormatNumber(price));
		SendClientMessageEx(sellerid, COLOR_INFO, "%s a accepté la peinture pour la somme de %s.", ReturnName(playerid), FormatNumber(price));

		new
		    id = Car_GetID(GetPlayerVehicleID(playerid));

		CarData[id][carColor1] = color1;
		CarData[id][carColor2] = color2;
		
   		ChangeVehicleColor(GetPlayerVehicleID(playerid), color1, color2);

		GiveMoney(playerid, -price);
		GiveMoney(sellerid, price);

		PeintureID[playerid] = -1;
		PeinturePri[playerid] = 0;
		PeintureColor1[playerid] = 0;
		PeintureColor2[playerid] = 0;
	}
	if (!strcmp(params, "permis", true))
	{
		new
		userid = PaID[playerid],
		price = PaPri[playerid];
		new factionid = PlayerData[userid][pFaction];

		if (!IsPlayerNearPlayer(playerid, userid, 6.0))
		return SendClientMessageEx(playerid, COLOR_ERROR, "Vous n'êtes pas près du joueur.");

		if (GetMoney(playerid) < price)
		return SendClientMessageEx(playerid, COLOR_ERROR, "Vous n'avez pas assez d'argent pour ce permis.");

		if (price == 0)
		return SendClientMessageEx(playerid, COLOR_ERROR, "Vous n'avez aucune offre de permis");

		Inventory_Add(playerid, "Permis d'arme", 1581);

		SendClientMessageEx(userid, COLOR_INFO, "Vous avez donné le permis port d'arme à %s.", ReturnName(playerid));
		SendClientMessageEx(playerid, COLOR_INFO, "Vous avez reçu le permis port d'arme de la part de %s.", ReturnName(userid, 0));

		SendNearbyMessage(playerid, 15.0, COLOR_PURPLE, "%s donne le permis port d'armes à %s", ReturnName(userid, 0), ReturnName(playerid));

		FactionData[factionid][factionArge] += price;

		GiveMoney(playerid, -price);

		PaID[playerid] = -1;
		PaPri[playerid] = 0;
	}
	if (!strcmp(params, "maison", true) && PlayerData[playerid][pHouseSeller] != INVALID_PLAYER_ID)
	{
		new
		sellerid = PlayerData[playerid][pHouseSeller],
		houseid = PlayerData[playerid][pHouseOffered],
		price = PlayerData[playerid][pHouseValue];

		if (!IsPlayerNearPlayer(playerid, sellerid, 6.0))
		return SendClientMessageEx(playerid, COLOR_ERROR, "Vous n'êtes pas près du joueur.");

		if (GetMoney(playerid) < price)
		return SendClientMessageEx(playerid, COLOR_ERROR, "Vous n'avez pas assez d'argent pour acheter cette maison.");

		if (House_Nearest(playerid) != houseid)
		return SendClientMessageEx(playerid, COLOR_ERROR, "Vous devez être près de la maison pour l'acheter.");

		if (!House_IsOwner(sellerid, houseid))
		return SendClientMessageEx(playerid, COLOR_ERROR, "La proposition n'est plus valide.");

		SendClientMessageEx(playerid, COLOR_INFO, "Vous avez acheté la maison '%s' pour la somme de %s.", ReturnName(sellerid, 0), FormatNumber(price));
		SendClientMessageEx(sellerid, COLOR_INFO, "%s a acheté votre maison pour la somme de %s.", ReturnName(playerid), FormatNumber(price));

		HouseData[houseid][houseOwner] = GetPlayerSQLID(playerid);
		House_Save(houseid);

		GiveMoney(playerid, -price);
		GiveMoney(sellerid, price);

		Log_Write("logs/offer_log.txt", "[%s] %s (%s) has sold a house to %s (%s) for %s.", ReturnDate(), ReturnName(playerid), PlayerData[playerid][pIP], ReturnName(sellerid, 0), PlayerData[sellerid][pIP], FormatNumber(price));

		PlayerData[playerid][pHouseSeller] = INVALID_PLAYER_ID;
		PlayerData[playerid][pHouseOffered] = -1;
		PlayerData[playerid][pHouseValue] = 0;
	}
	if (!strcmp(params, "business", true) && PlayerData[playerid][pBusinessSeller] != INVALID_PLAYER_ID)
	{
		new
		sellerid = PlayerData[playerid][pBusinessSeller],
		bizid = PlayerData[playerid][pBusinessOffered],
		price = PlayerData[playerid][pBusinessValue];

		if (!IsPlayerNearPlayer(playerid, sellerid, 6.0))
		return SendClientMessageEx(playerid, COLOR_ERROR, "Vous n'êtes pas près du joueur.");

		if (GetMoney(playerid) < price)
		return SendClientMessageEx(playerid, COLOR_ERROR, "Vous n'avez pas assez d'argent pour acheter ce business.");

		if (Business_Nearest(playerid) != bizid)
		return SendClientMessageEx(playerid, COLOR_ERROR, "Vous devez être à côté du business pour l'acheter.");

		if (!Business_IsOwner(sellerid, bizid))
		return SendClientMessageEx(playerid, COLOR_ERROR, "La proposition n'est plus valide.");

		SendClientMessageEx(playerid, COLOR_INFO, "Vous avez acheté le business %s pour la somme de %s.", ReturnName(sellerid, 0), FormatNumber(price));
		SendClientMessageEx(sellerid, COLOR_INFO, "%s a acheté votre business pour la somme de %s.", ReturnName(playerid), FormatNumber(price));

		BusinessData[bizid][bizOwner] = GetPlayerSQLID(playerid);
		Business_Save(bizid);

		GiveMoney(playerid, -price);
		GiveMoney(sellerid, price);

		Log_Write("logs/offer_log.txt", "[%s] %s (%s) has sold a business to %s (%s) for %s.", ReturnDate(), ReturnName(playerid), PlayerData[playerid][pIP], ReturnName(sellerid, 0), PlayerData[sellerid][pIP], FormatNumber(price));

		PlayerData[playerid][pBusinessSeller] = INVALID_PLAYER_ID;
		PlayerData[playerid][pBusinessOffered] = -1;
		PlayerData[playerid][pBusinessValue] = 0;
	}
	if (!strcmp(params, "vehicule", true) && PlayerData[playerid][pCarSeller] != INVALID_PLAYER_ID)
	{
		new
		sellerid = PlayerData[playerid][pCarSeller],
		carid = PlayerData[playerid][pCarOffered],
		price = PlayerData[playerid][pCarValue];

		if (!IsPlayerNearPlayer(playerid, sellerid, 6.0))
		return SendClientMessageEx(playerid, COLOR_ERROR, "Ce joueur n'est pas près de vous.");

		if (GetMoney(playerid) < price)
		return SendClientMessageEx(playerid, COLOR_ERROR, "Vous n'avez pas assez d'argent pour acheter ce véhicule.");

		if (Car_Nearest(playerid) != carid)
		return SendClientMessageEx(playerid, COLOR_ERROR, "Vous devez être près du véhicule pour l'acheter.");

		if (!Car_IsOwner(sellerid, carid))
		return SendClientMessageEx(playerid, COLOR_ERROR, "Cette proposition n'est plus valide.");

		SendClientMessageEx(playerid, COLOR_INFO, "Vous avez acheté avec succès la %s à %s pour la somme de %s.", ReturnVehicleModelName(CarData[carid][carModel]), ReturnName(sellerid, 0), FormatNumber(price));
		SendClientMessageEx(sellerid, COLOR_INFO, "%s acheté votre %s pour la somme de %s.", ReturnName(playerid), ReturnVehicleModelName(CarData[carid][carModel]), FormatNumber(price));

		CarData[carid][carOwner] = GetPlayerSQLID(playerid);
		Car_Save(carid);

		GiveMoney(playerid, -price);
		GiveMoney(sellerid, price);

		Log_Write("logs/offer_log.txt", "[%s] %s (%s) has sold a %s to %s (%s) for %s.", ReturnDate(), ReturnName(playerid), PlayerData[playerid][pIP], ReturnVehicleModelName(CarData[carid][carModel]), ReturnName(sellerid, 0), PlayerData[sellerid][pIP], FormatNumber(price));

		PlayerData[playerid][pCarSeller] = INVALID_PLAYER_ID;
		PlayerData[playerid][pCarOffered] = -1;
		PlayerData[playerid][pCarValue] = 0;
	}
	if (!strcmp(params, "achat", true) && PlayerData[playerid][pFoodSeller] != INVALID_PLAYER_ID)
	{
		new
		sellerid = PlayerData[playerid][pFoodSeller],
		type = PlayerData[playerid][pFoodType],
		price = PlayerData[playerid][pFoodPrice];

		if (!IsPlayerNearPlayer(playerid, sellerid, 6.0))
		return SendClientMessageEx(playerid, COLOR_ERROR, "Vous n'êtes pas près du joueur.");

		if (GetMoney(playerid) < price)
		return SendClientMessageEx(playerid, COLOR_ERROR, "Vous n'avez pas assez d'argent.");

		switch (type)
		{
			case 1:
			{
				//new id = Inventory_Add(playerid, "Bouteille d'eau", 2958);

				//if (id == -1)
				//return SendClientMessageEx(playerid, COLOR_ERROR, "Vous n'avez plus assez de place dans votre inventaire.");
				new Float:health;
				GetPlayerHealth(playerid, health);
				SetPlayerHealth(playerid, health+10);
				SendClientMessageEx(playerid, COLOR_INFO, "Vous avez acheté une bouteille d'eau à %s pour la somme $%d.", ReturnName(sellerid, 0), price);
				SendClientMessageEx(sellerid, COLOR_INFO, "%s a accepté votre proposition pour la somme de $%d.", ReturnName(playerid), price);
			}
			case 2:
			{
				//new id = Inventory_Add(playerid, "Soda", 1543);

				//if (id == -1)
				//return SendClientMessageEx(playerid, COLOR_ERROR, "Vous n'avez pas assez de place dans votre inventaire.");
				new Float:health;
				GetPlayerHealth(playerid, health);
				SetPlayerHealth(playerid, health+10);
				SendClientMessageEx(playerid, COLOR_INFO, "Vous avez acheté un soda à %s pour la somme de $%d.", ReturnName(sellerid, 0), price);
				SendClientMessageEx(sellerid, COLOR_INFO, "%s a accepté votre proposition pour la somme de $%d.", ReturnName(playerid), price);
			}
			case 3:
			{
				//new id = Inventory_Add(playerid, "Cooked Burger", 2703);

				//if (id == -1)
				//return SendClientMessageEx(playerid, COLOR_ERROR, "Vous n'avez pas assez de place dans votre inventaire.");
				new Float:health;
				GetPlayerHealth(playerid, health);
				SetPlayerHealth(playerid, health+50);
				SendClientMessageEx(playerid, COLOR_INFO, "Vous avez acheté un Burger à %s pour la somme de $%d.", ReturnName(sellerid, 0), price);
				SendClientMessageEx(sellerid, COLOR_INFO, "%s a accepté votre burger pour la somme de $%d.", ReturnName(playerid), price);
			}
			case 4:
			{
				//new id = Inventory_Add(playerid, "Cooked Pizza", 2702);

				//if (id == -1)
				//return SendClientMessageEx(playerid, COLOR_ERROR, "Vous n'avez pas assez de place dans votre inventaire.");
				new Float:health;
				GetPlayerHealth(playerid, health);
				SetPlayerHealth(playerid, health+50);
				SendClientMessageEx(playerid, COLOR_INFO, "Vous avez acheté une Pizza à %s pour la somme de $%d.", ReturnName(sellerid, 0), price);
				SendClientMessageEx(sellerid, COLOR_INFO, "%s a accepté votre burger pour la somme de $%d.", ReturnName(playerid), price);
			}
			case 5:
			{
				//new id = Inventory_Add(playerid, "Viande", 2663);

				//if (id == -1)
				//return SendClientMessageEx(playerid, COLOR_ERROR, "Vous n'avez pas assez de place dans votre inventaire.");
				new Float:health;
				GetPlayerHealth(playerid, health);
				SetPlayerHealth(playerid, health+50);
				SendClientMessageEx(playerid, COLOR_INFO, "Vous avez acheté de la viande à %s pour la somme de $%d.", ReturnName(sellerid, 0), price);
				SendClientMessageEx(sellerid, COLOR_INFO, "%s a accepté votre viande pour la somme de $%d.", ReturnName(playerid), price);
			}
		}
		PlayerData[playerid][pFoodSeller] = INVALID_PLAYER_ID;
		PlayerData[playerid][pFoodType] = 0;
		PlayerData[playerid][pFoodPrice] = 0;
	}
	if (!strcmp(params, "faction", true) && PlayerData[playerid][pFactionOffer] != INVALID_PLAYER_ID)
	{
		if (PlayerData[playerid][pLevel] < 2)
		return SendClientMessageEx(playerid, COLOR_ERROR, "Vous devez être level 2.");

		new
		targetid = PlayerData[playerid][pFactionOffer],
		factionid = PlayerData[playerid][pFactionOffered];

		if (!FactionData[factionid][factionExists] || PlayerData[targetid][pFactionRank] < FactionData[PlayerData[targetid][pFaction]][factionRanks] - 1)
		return SendClientMessageEx(playerid, COLOR_ERROR, "La proposition pour la faction n'est plus valable.");

		SetFaction(playerid, factionid);
		PlayerData[playerid][pFactionRank] = 1;

		SendClientMessageEx(playerid, COLOR_INFO, "%s vous a invité dans la faction \"%s\".", ReturnName(targetid, 0), Faction_GetName(targetid));

		SendClientMessageEx(targetid, COLOR_INFO, "%s a accepté de rejoindre la faction \"%s\".", ReturnName(playerid), Faction_GetName(targetid));

		PlayerData[playerid][pFactionOffer] = INVALID_PLAYER_ID;
		PlayerData[playerid][pFactionOffered] = -1;
	}
	if (!strcmp(params, "saluer", true) && PlayerData[playerid][pShakeOffer] != INVALID_PLAYER_ID)
	{
		new
		targetid = PlayerData[playerid][pShakeOffer],
		type = PlayerData[playerid][pShakeType];

		if (!IsPlayerNearPlayer(playerid, targetid, 6.0))
		return SendClientMessageEx(playerid, COLOR_ERROR, "Vous n'êtes pas près du joueur.");

		SetPlayerToFacePlayer(playerid, targetid);
		SetPlayerToFacePlayer(targetid, playerid);

		PlayerData[playerid][pShakeOffer] = INVALID_PLAYER_ID;
		PlayerData[playerid][pShakeType] = 0;

		switch (type)
		{
			case 1:
			{
				ApplyAnimation(playerid, "GANGS", "hndshkaa", 4.0, 0, 0, 0, 0, 0, 1);
				ApplyAnimation(targetid, "GANGS", "hndshkaa", 4.0, 0, 0, 0, 0, 0, 1);
			}
			case 2:
			{
				ApplyAnimation(playerid, "GANGS", "hndshkba", 4.0, 0, 0, 0, 0, 0, 1);
				ApplyAnimation(targetid, "GANGS", "hndshkba", 4.0, 0, 0, 0, 0, 0, 1);
			}
			case 3:
			{
				ApplyAnimation(playerid, "GANGS", "hndshkda", 4.0, 0, 0, 0, 0, 0, 1);
				ApplyAnimation(targetid, "GANGS", "hndshkda", 4.0, 0, 0, 0, 0, 0, 1);
			}
			case 4:
			{
				ApplyAnimation(playerid, "GANGS", "hndshkea", 4.0, 0, 0, 0, 0, 0, 1);
				ApplyAnimation(targetid, "GANGS", "hndshkea", 4.0, 0, 0, 0, 0, 0, 1);
			}
			case 5:
			{
				ApplyAnimation(playerid, "GANGS", "hndshkfa", 4.0, 0, 0, 0, 0, 0, 1);
				ApplyAnimation(targetid, "GANGS", "hndshkfa", 4.0, 0, 0, 0, 0, 0, 1);
			}
			case 6:
			{
				ApplyAnimation(playerid, "GANGS", "prtial_hndshk_biz_01", 4.0, 0, 0, 0, 0, 0, 1);
				ApplyAnimation(targetid, "GANGS", "prtial_hndshk_biz_01", 4.0, 0, 0, 0, 0, 0, 1);
			}
		}
		SendClientMessageEx(playerid, COLOR_INFO, "Vous avez accepté de saluer %s.", ReturnName(targetid, 0));
		SendClientMessageEx(targetid, COLOR_INFO, "%s a accepté votre salutation.", ReturnName(playerid));
	}
	if (!strcmp(params, "fouiller", true) && PlayerData[playerid][pFriskOffer] != INVALID_PLAYER_ID)
	{
		if (PlayerData[playerid][pFriskOffer] == -1)
		return SendClientMessageEx(playerid, COLOR_ERROR, "Personne n'a demandé à vous fouiller..");

		new
		targetid = PlayerData[playerid][pFriskOffer];

		if (!IsPlayerNearPlayer(playerid, targetid, 6.0))
		return SendClientMessageEx(playerid, COLOR_ERROR, "Ce joueur n'est pas près de vous.");

	  	if (Inventory_HasItem(playerid, "Téléphone"))SendClientMessageEx(targetid, COLOR_WHITE, "{FFFFFF}Telephone: {C4E5FF}Oui {FFFFFF}");
	  	else SendClientMessageEx(targetid, COLOR_WHITE, "{FFFFFF}Telephone: {C4E5FF}Aucun {FFFFFF}");

	  	if (IsPlayerArmed(playerid)) SendClientMessageEx(targetid, COLOR_WHITE, "{FFFFFF}Armé: {C4E5FF}Oui {FFFFFF}");
	  	else SendClientMessageEx(targetid, COLOR_WHITE, "{FFFFFF}Armé: {C4E5FF}Non {FFFFFF}");

		if (Inventory_HasItem(playerid, "GPS")) SendClientMessageEx(targetid, COLOR_WHITE, "{FFFFFF}GPS: {C4E5FF}Oui {FFFFFF}");
	  	else SendClientMessageEx(targetid, COLOR_WHITE, "{FFFFFF}GPS: {C4E5FF}Aucun {FFFFFF}");

		SendClientMessageEx(targetid, COLOR_WHITE, "{FFFFFF}Argent: {C4E5FF}%s {FFFFFF}", FormatNumber(PlayerData[playerid][pMoney]));

		PlayerData[playerid][pFriskOffer] = -1;

		SendNearbyMessage(playerid, 15.0, COLOR_PURPLE, "%s fouille %s.", ReturnName(targetid, 1), ReturnName(playerid, 1));

	}
	if (!strcmp(params, "mort", true))
	{
		if (!PlayerData[playerid][pInjured]) return SendClientMessageEx(playerid, COLOR_ERROR, "Vous n'êtes pas blessé.");
		if (PlayerData[playerid][pMortAcheve] != 2) return SendClientMessageEx(playerid, COLOR_ERROR, "Vous ne pouvez pas accepter mort pour l'instant");

	    SetPlayerHealth(playerid, 0.0);
	}
	return 1;
}

CMD:near(playerid, params[])
{
	static
	id = -1;

	if (PlayerData[playerid][pAdmin] < 3)
	return SendClientMessageEx(playerid, COLOR_ERROR, "Vous n'avez pas la permission d'utiliser cette commande.");

	if ((id = House_Nearest(playerid)) != -1)
	SendClientMessageEx(playerid, COLOR_INFO, "Vous êtes près d'une maison (/maison) ID: %d.", id);

	if ((id = Business_Nearest(playerid)) != -1)
	SendClientMessageEx(playerid, COLOR_INFO, "Vous êtes près d'un business (/biz) ID: %d.", id);

	if ((id = Entrance_Nearest(playerid)) != -1)
	SendClientMessageEx(playerid, COLOR_INFO, "Vous êtes près d'une entrée (/entrance) ID: %d.", id);

	if ((id = Job_Nearest(playerid)) != -1)
	SendClientMessageEx(playerid, COLOR_INFO, "Vous êtes près d'un job (/job) ID: %d.", id);

	if ((id = Arrest_Nearest(playerid)) != -1)
	SendClientMessageEx(playerid, COLOR_INFO, "Vous êtes près d'un point d'arrestation (/arrest) ID: %d.", id);

	if ((id = Pump_Nearest(playerid)) != -1)
	SendClientMessageEx(playerid, COLOR_INFO, "Vous êtes près d'une station essence (/pump) ID: %d.", id);

	if ((id = Crate_Nearest(playerid)) != -1)
	SendClientMessageEx(playerid, COLOR_INFO, "Vous êtes près d'une caisse (/crate) ID: %d.", id);

	if ((id = Gate_Nearest(playerid)) != -1)
	SendClientMessageEx(playerid, COLOR_INFO, "Vous êtes près d'une porte/grille (/gate) ID: %d.", id);

	if ((id = ATM_Nearest(playerid)) != -1)
	SendClientMessageEx(playerid, COLOR_INFO, "Vous êtes près d'un ATM (/atm) ID: %d.", id);

	if ((id = Garbage_Nearest(playerid)) != -1)
	SendClientMessageEx(playerid, COLOR_INFO, "Vous êtes près d'une poubelle (/poubelle) ID: %d.", id);

	if ((id = Vendor_Nearest(playerid)) != -1)
	SendClientMessageEx(playerid, COLOR_INFO, "Vous êtes près d'un distributeur (/distributeur) ID: %d.", id);

	if ((id = Rack_Nearest(playerid)) != -1)
	SendClientMessageEx(playerid, COLOR_INFO, "Vous êtes près d'une armoire d'arme (/rack) ID: %d.", id);

	if ((id = Speed_Nearest(playerid)) != -1)
	SendClientMessageEx(playerid, COLOR_INFO, "Vous êtes près d'un radar (/speed) ID: %d.", id);

	if ((id = Graffiti_Nearest(playerid)) != -1)
	SendClientMessageEx(playerid, COLOR_INFO, "Vous êtes près d'un graffiti ID: %d.", id);

	if ((id = Detector_Nearest(playerid)) != -1)
	SendClientMessageEx(playerid, COLOR_INFO, "Vous êtes près d'un détecteur de métaux (/detecteur) ID: %d.", id);

	if ((id = Actor_Nearest(playerid)) != -1)
	SendClientMessageEx(playerid, COLOR_INFO, "Vous êtes près d'un actor (/actor) ID: %d.", id);

	if ((id = Corpse_Nearest(playerid)) != -1)
	SendClientMessageEx(playerid, COLOR_INFO, "Vous êtes près d'un cadavre ID: %d.", id);

	if ((id = Car_Nearest(playerid)) != -1)
	SendClientMessageEx(playerid, COLOR_INFO, "Vous êtes près du véhicule (/vehicule) ID: %d.", CarData[id][carVehicle]);

	if ((id = Sign_Nearest(playerid)) != -1)
	SendClientMessageEx(playerid, COLOR_INFO, "Vous êtes près d'un panneau (/panneau) ID: %d.", id);

	if ((id = Cabine_Nearest(playerid)) != -1)
	SendClientMessageEx(playerid, COLOR_INFO, "Vous êtes près d'une cabine (/cabine) ID: %d.", id);

	if ((id = Pickup_Nearest(playerid)) != -1)
	SendClientMessageEx(playerid, COLOR_INFO, "Vous êtes près d'un pickup (/pickup) ID: %d.", id);

	if ((id = Gym_Nearest(playerid)) != -1)
	SendClientMessageEx(playerid, COLOR_INFO, "Vous êtes près d'une machine de musculation (/gym) ID: %d.", id);

	if ((id = Camera_Nearest(playerid)) != -1)
	SendClientMessageEx(playerid, COLOR_INFO, "Vous êtes près d'une caméra (/camera) ID: %d.", id);

	return 1;
}

CMD:boire(playerid, params[])
{
	if (PlayerData[playerid][pHospital] != -1 || PlayerData[playerid][pCuffed] || PlayerData[playerid][pInjured] || !IsPlayerSpawned(playerid))
	return SendClientMessageEx(playerid, COLOR_ERROR, "Vous ne pouvez pas utiliser cette commande maintenant.");

	if (isnull(params))
	return SendClientMessageEx(playerid, COLOR_USAGE, "/boire <eau/soda>");

	if (PlayerData[playerid][pDrinking])
	return SendClientMessageEx(playerid, COLOR_ERROR, "Vous avez déjà bu.");

	if (!strcmp(params, "soda", true))
	{
		if (!Inventory_HasItem(playerid, "Soda"))
		return SendClientMessageEx(playerid, COLOR_ERROR, "Vous n'avez pas de soda sur vous.");




		PlayerData[playerid][pDrinking] = 1;
		PlayerData[playerid][pDrinkBar] = CreateProgressBar(572.00, 440.00, 56.50, 3.20, -1429936641, 100.0);

		ShowProgressBarForPlayer(playerid, PlayerData[playerid][pDrinkBar]);
		SetProgressBarValue(PlayerData[playerid][pDrinkBar], 100.0);

		Inventory_Add(playerid, "Bouteille vide", 1484);
		Inventory_Remove(playerid, "Soda");

		SetPlayerSpecialAction(playerid, SPECIAL_ACTION_DRINK_SPRUNK);
		UpdateProgressBar(PlayerData[playerid][pDrinkBar], playerid);

		SendNearbyMessage(playerid, 15.0, COLOR_PURPLE, "%s prend une canette de soda qu'il ouvre ensuite", ReturnName(playerid, 1));
		ShowPlayerFooter(playerid, "Veuillez appuyer sur ~y~clique gauche~w~ pour boire!");
	}
	else if (!strcmp(params, "eau", true))
	{
		if (!Inventory_HasItem(playerid, "Bouteille d'eau"))
		return SendClientMessageEx(playerid, COLOR_ERROR, "Vous n'avez pas de bouteille d'eau sur vous.");




		PlayerData[playerid][pDrinking] = 2;
		PlayerData[playerid][pDrinkBar] = CreateProgressBar(572.00, 440.00, 56.50, 3.20, -1429936641, 100.0);

		ShowProgressBarForPlayer(playerid, PlayerData[playerid][pDrinkBar]);
		SetProgressBarValue(PlayerData[playerid][pDrinkBar], 100.0);

		Inventory_Add(playerid, "Bouteille vide", 1484);
		Inventory_Remove(playerid, "Bouteille d'eau");

		SetPlayerSpecialAction(playerid, SPECIAL_ACTION_DRINK_SPRUNK);
		UpdateProgressBar(PlayerData[playerid][pDrinkBar], playerid);

		SendNearbyMessage(playerid, 15.0, COLOR_PURPLE, "%s prend une bouteille d'eau puis l'ouvre.", ReturnName(playerid, 1));
		ShowPlayerFooter(playerid, "Veuillez appuyer sur ~y~clique gauche~w~ pour boire!");
	}
	return 1;
}

CMD:gilet(playerid, params[])
{
	if (PlayerData[playerid][pHospital] != -1 || PlayerData[playerid][pCuffed] || PlayerData[playerid][pInjured] || !IsPlayerSpawned(playerid))
	return SendClientMessageEx(playerid, COLOR_ERROR, "Vous ne pouvez pas utiliser cette commande maintenant.");

	if (!Inventory_HasItem(playerid, "Gilet pare balle"))
	return SendClientMessageEx(playerid, COLOR_ERROR, "Vous n'avez pas de gilet pare-balles.");

	if (ReturnArmour(playerid) > 49)
	return SendClientMessageEx(playerid, COLOR_ERROR, "Vous avez déjà un gilet sur vous.");

	SetPlayerArmour(playerid, 50.0);
	if(!IsPlayerAttachedObjectSlotUsed(playerid, 7)) SetPlayerAttachedObject(playerid, 7, 1242,  1, 0.1,  0.05, 0.0,  0.0,   0.0,   0.0);

	Inventory_Remove(playerid, "Gilet pare balle");
	SendNearbyMessage(playerid, 15.0, COLOR_PURPLE, "%s récupère un gilet pare-balle qu'il enfile autour de lui.", ReturnName(playerid, 1));
	return 1;
}

stock Taxi_HasLicense(playerid)
{
	if (Inventory_HasItem(playerid, "License de taxi (1)")) return true;
	if (Inventory_HasItem(playerid, "License de taxi (2)")) return true;
	if (Inventory_HasItem(playerid, "License de taxi (3)")) return true;
	if (Inventory_HasItem(playerid, "License de taxi (4)")) return true;
	return false;
}

stock Taxi_GetLicense(playerid)
{
	if (Inventory_HasItem(playerid, "License de taxi (1)")) return 19308;
	if (Inventory_HasItem(playerid, "License de taxi (2)")) return 19309;
	if (Inventory_HasItem(playerid, "License de taxi (3)")) return 19310;
	if (Inventory_HasItem(playerid, "License de taxi (4)")) return 19311;
	return -1;
}
	
CMD:licensetaxi(playerid, params[])
{
	if (PlayerData[playerid][pTaxiTest] || PlayerData[playerid][pDrivingTest])
	return SendClientMessageEx(playerid, COLOR_ERROR, "Vous avez déjà commencé l'examen de taxi!");

	if (!IsPlayerInRangeOfPoint(playerid, 3.0, -2033.0439, -117.4885, 1035.1719))
	return SendClientMessageEx(playerid, COLOR_ERROR, "Vous n'êtes au bon endroit.");

	if (Taxi_HasLicense(playerid))
	return SendClientMessageEx(playerid, COLOR_ERROR, "Vous avez déjà votre license de taxi.");
	
	if(!Inventory_HasItem(playerid, "Permis de conduire"))
	return SendClientMessageEx(playerid, COLOR_ERROR, "Vous devez avoir votre permis de conduire.");

	if (GetMoney(playerid) < PRICE_LICENSE_TAXI)
	return SendClientMessageEx(playerid, COLOR_ERROR, "Vous devez avoir $%d pour passer le permis de conduire.", PRICE_LICENSE_TAXI);

	PlayerData[playerid][pInterior] = GetPlayerInterior(playerid);
	PlayerData[playerid][pWorld] = GetPlayerVirtualWorld(playerid);

	GetPlayerHealth(playerid, PlayerData[playerid][pHealth]);
	GetPlayerPos(playerid, examPos[playerid][0], examPos[playerid][1], examPos[playerid][2]);
	GetPlayerFacingAngle(playerid, examPos[playerid][3]);

	new arrNumber = random(MAX_POSITION_TAXI);

	PlayerData[playerid][pTestCar] = CreateVehicle(438, arrPositionSpawnTaxi[arrNumber][0], arrPositionSpawnTaxi[arrNumber][1], arrPositionSpawnTaxi[arrNumber][2], arrPositionSpawnTaxi[arrNumber][3], 6, 6, -1);
	PlayerData[playerid][pTestWarns] = 0;

	new
		lights,
		alarm,
		doors,
		bonnet,
		boot,
		objective;

	SetVehicleParamsEx(PlayerData[playerid][pTestCar], 1, lights, alarm, doors, bonnet, boot, objective);


	if (PlayerData[playerid][pTestCar] != INVALID_VEHICLE_ID)
	{
		PlayerData[playerid][pTaxiTest] = true;
		PlayerData[playerid][pTestStage] = 0;
		
		SetPlayerVirtualWorld(playerid, 0);
		SetPlayerInterior(playerid, 0);
		
		CoreVehicles[ PlayerData[playerid][pTestCar] ][vehFuel] = 100;

		ResetVehicle(PlayerData[playerid][pTestCar]);
		PutPlayerInVehicle(playerid, PlayerData[playerid][pTestCar], 0);
		
		TogglePlayerControllable(playerid, false);
		time_StartLicenseTaxi[playerid] = 3;
		
		SetPlayerCheckpoint(playerid, g_arrLicenseTaxiCheckpoints[0][0], g_arrLicenseTaxiCheckpoints[0][1], g_arrLicenseTaxiCheckpoints[0][2], 3.0);
		SendClientMessageEx(playerid, COLOR_INFO, "Vous avez commencé le test pour votre license de taxi.");
	}
	return 1;
}



CMD:permisconduire(playerid, params[])
{
	if (PlayerData[playerid][pTaxiTest] || PlayerData[playerid][pDrivingTest])
	return SendClientMessageEx(playerid, COLOR_ERROR, "Vous avez déjà commencé l'examen de conduite!");

	if (!IsPlayerInRangeOfPoint(playerid, 3.0, -2033.0439, -117.4885, 1035.1719))
	return SendClientMessageEx(playerid, COLOR_ERROR, "Vous n'êtes pas près du pickup.");

	if (Inventory_HasItem(playerid, "Permis de conduire"))
	return SendClientMessageEx(playerid, COLOR_ERROR, "Vous avez déjà votre permis de conduire.");

	if (GetMoney(playerid) < PRICE_PERMIS_CONDUIRE)
	return SendClientMessageEx(playerid, COLOR_ERROR, "Vous devez avoir $%d pour passer votre permis de conduire.", PRICE_PERMIS_CONDUIRE);

	PlayerData[playerid][pInterior] = GetPlayerInterior(playerid);
	PlayerData[playerid][pWorld] = GetPlayerVirtualWorld(playerid);

	GetPlayerHealth(playerid, PlayerData[playerid][pHealth]);
	GetPlayerPos(playerid, examPos[playerid][0], examPos[playerid][1], examPos[playerid][2]);
	GetPlayerFacingAngle(playerid, examPos[playerid][3]);

	PlayerData[playerid][pTestCar] = CreateVehicle(410, -2047.1056, -87.7183, 34.8219, 0.1447, 1, 1, -1);
	PlayerData[playerid][pTestWarns] = 0;

	new
		lights,
		alarm,
		doors,
		bonnet,
		boot,
		objective;

	SetVehicleParamsEx(PlayerData[playerid][pTestCar], 1, lights, alarm, doors, bonnet, boot, objective);


	if (PlayerData[playerid][pTestCar] != INVALID_VEHICLE_ID)
	{
		PlayerData[playerid][pDrivingTest] = true;
		PlayerData[playerid][pTestStage] = 0;

		ResetVehicle(PlayerData[playerid][pTestCar]);
		SetPlayerVirtualWorld(playerid, (2000 + playerid));

        CoreVehicles[ PlayerData[playerid][pTestCar] ][vehFuel] = 100;
        
		SetVehicleVirtualWorld(PlayerData[playerid][pTestCar], (2000 + playerid));
		PutPlayerInVehicle(playerid, PlayerData[playerid][pTestCar], 0);

		SetPlayerCheckpoint(playerid, g_arrDrivingCheckpoints[0][0], g_arrDrivingCheckpoints[0][1], g_arrDrivingCheckpoints[0][2], 3.0);
		SendClientMessageEx(playerid, COLOR_INFO, "Vous avez commencé l'examen de conduite.");

		SetPlayerInterior(playerid, 0);
	}
	return 1;
}

CMD:recharger(playerid, params[])
{
	if (PlayerData[playerid][pHospital] != -1 || PlayerData[playerid][pCuffed] || PlayerData[playerid][pInjured] || !IsPlayerSpawned(playerid))
	return SendClientMessageEx(playerid, COLOR_ERROR, "Vous ne pouvez pas utiliser cette commande maintenant.");

	if (!Inventory_HasItem(playerid, "Munitions"))
	return SendClientMessageEx(playerid, COLOR_ERROR, "Vous n'avez pas de munitions.");

	new weaponid = 0;

	switch ((weaponid = GetWeapon(playerid)))
	{
		case 22, 23: GiveWeaponToPlayer(playerid, weaponid, 30);
		case 24, 27: GiveWeaponToPlayer(playerid, weaponid, 30);
		case 25, 26: GiveWeaponToPlayer(playerid, weaponid, 20);
		case 28, 31, 32: GiveWeaponToPlayer(playerid, weaponid, 50);
		case 29, 30: GiveWeaponToPlayer(playerid, weaponid, 100);
		case 33, 34: GiveWeaponToPlayer(playerid, weaponid, 20);
		case 35..37: GiveWeaponToPlayer(playerid, weaponid, 4);
		case 38: GiveWeaponToPlayer(playerid, weaponid, 500);
		default: return SendClientMessageEx(playerid, COLOR_ERROR, "Vous ne pouvez pas utiliser de chargeur sur cette arme.");
	}
	PlayReloadAnimation(playerid, weaponid);
	Inventory_Remove(playerid, "Munitions");
	SendNearbyMessage(playerid, 15.0, COLOR_PURPLE, "%s recharge son %s.", ReturnName(playerid, 1), ReturnWeaponName(weaponid));
	return 1;
}

CMD:retirer(playerid, params[])
{
	static
	argent;
	new id = ATM_Nearest(playerid);


	if (ATM_Nearest(playerid) == -1)
	return SendClientMessageEx(playerid, COLOR_ERROR, "Vous n'etes pas à coté d'un ATM");

	if (sscanf(params, "d", argent))
	return SendClientMessageEx(playerid, COLOR_USAGE, "/retirer <Montant (1 à 5000$)>");

	if (argent < 1 || argent > 5000)
	return SendClientMessageEx(playerid, COLOR_ERROR, "Pas en dessous de $1 ou plus de $5000.");

	/*if (ATMData[id][atmArgen] < argent)
	return SendClientMessageEx(playerid, COLOR_ERROR, "Cette ATM n'a pas assez");*/

	if (PlayerData[playerid][pBankMoney] < argent)
	return SendClientMessageEx(playerid, COLOR_ERROR, "Vous n'avez pas assez d'argent.");

	GiveMoney(playerid, argent);
	PlayerData[playerid][pBankMoney] -= argent;
	//ATMData[id][atmArgen] = argent;
	ATM_Save(id);
	SendClientMessageEx(playerid, COLOR_INFO, "Vous avez retiré {FF0000}%d$", argent);

	if(!AstucesChallenges[playerid][3] && PlayerData[playerid][pAstuces])
	{
	    ValidChallenges(playerid, 3);
	    SendClientMessage(playerid, COLOR_GREEN, "Vous avez débloqué le challenge \"{33CC33}Allez retirer de l'argent à la banque ou à un ATM{FFFFFF}\". +1 point respect (/challenges)");
	}
	
	return 1;
}

CMD:banque(playerid, params[])
{
	if (!IsPlayerInBank(playerid))
	return SendClientMessageEx(playerid, COLOR_ERROR, "Vous devez être à la banque.");

	Dialog_Show(playerid, Bank, DIALOG_STYLE_LIST, "Compte en banque", "Accéder à mon compte {9CE59C}(%s)", "Ok", "X", FormatNumber(PlayerData[playerid][pBankMoney]), FormatNumber(PlayerData[playerid][pSavings]));
	return 1;
}

CMD:jailacc(playerid, params[])
{
	if(PlayerData[playerid][pAdmin] >= 1)
	{
		new string[128], name[MAX_PLAYER_NAME], minutes;
		if(sscanf(params, "s[24]ds[64]", name, minutes)) return SendClientMessageEx(playerid, COLOR_USAGE, "/jailacc <PlayerID/PlayerName> <Time (minutes)>");

		new tmpName[24], query[512];
		mysql_real_escape_string(name, tmpName);

		SetPVarString(playerid, "OnJailAccount", tmpName);

		format(string, sizeof(string), "Vous avez placé en jail le compte %s pour %d minutes.", tmpName, minutes);
		SendClientMessageEx(playerid, COLOR_LIGHTYELLOW, string);

		format(query,sizeof(query),"UPDATE `characters` SET `JailTime` = %d WHERE `Admin` < %d AND `Username` = '%s'", minutes*60, PlayerData[playerid][pAdmin], tmpName);
		mysql_function_query(g_iHandle, query, false, "OnJailAccount", "i", playerid);
	}
	return 1;
}

CMD:reparer(playerid, params[])
{

	if (IsPlayerInAnyVehicle(playerid))
	return SendClientMessageEx(playerid, COLOR_ERROR, "Vous devez quitter le véhicule.");

	if (!Inventory_HasItem(playerid, "Caisse à outils"))
	return SendClientMessageEx(playerid, COLOR_ERROR, "Vous n'avez pas de kit de réparation sur vous.");

	if (PlayerData[playerid][pRepairTime] > gettime())
	return SendClientMessageEx(playerid, COLOR_ERROR, "Vous devez attendre %d secondes pour refaire cette commande.", PlayerData[playerid][pRepairTime] - gettime());

	for(new i = 1, j = GetVehiclePoolSize(); i <= j; i++) if (IsValidVehicle(i) && IsPlayerNearHood(playerid, i))
	{
		//if (!IsEngineVehicle(i))
		//return SendClientMessageEx(playerid, COLOR_ERROR, "Ce véhicule ne peut pas être réparer.");

		if (!GetHoodStatus(i))
		return SendClientMessageEx(playerid, COLOR_ERROR, "Vous devez ouvrir le capot du véhicule pour réparer.");

		//if (CoreVehicles[i][vehRepairing])
		//return SendClientMessageEx(playerid, COLOR_ERROR, "Ce véhicule est déjà en cours de réparation.");

		Inventory_Remove(playerid, "Caisse à outils");
		ApplyAnimation(playerid, "BD_FIRE", "wash_up", 4.1, 0, 0, 0, 0, 0, 1);

		CoreVehicles[i][vehRepairing] = true;
		SetTimerEx("RepairCar", 5000, false, "dd", playerid, i);

		SendNearbyMessage(playerid, 15.0, COLOR_PURPLE, "%s récupère sa caisse à outils puis répare le véhicule.", ReturnName(playerid, 1));
		GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~g~Reparation..~w~ Patienter..", 8000, 3);
		return 1;
	}
	SendClientMessageEx(playerid, COLOR_ERROR, "Vous n'êtes pas près d'un véhicule à réparer.");
	return 1;
}

CMD:listerouge(playerid, params[])
{
	if (PlayerData[playerid][pRedList])
	{
		PlayerData[playerid][pRedList] = false;
		SendClientMessage(playerid, COLOR_INFO, "Vous n'êtes plus sur liste rouge.");
	}
	else
	{
		PlayerData[playerid][pRedList] = true;
		SendClientMessage(playerid, COLOR_INFO, "Vous êtes sur liste rouge.");
	}
	return 1;
}

CMD:annuaire(playerid, params[])
{
	static
		userid;

	if (!PlayerData[playerid][pAnnuary])
	return SendClientMessageEx(playerid, COLOR_ERROR, "Vous n'avez pas d'annuaire.");

	if (sscanf(params, "u", userid))
	return SendClientMessageEx(playerid, COLOR_USAGE, "/annuaire <PlayerID/PlayerName>");

	if (userid == INVALID_PLAYER_ID || (IsPlayerConnected(userid) && PlayerData[userid][pKicked]))
	return SendClientMessageEx(playerid, COLOR_ERROR, "Ce joueur n'est pas valide.");

	if (PlayerData[userid][pPhone] == 0)
	return SendClientMessageEx(playerid, COLOR_ERROR, "Ce joueur n'a pas de téléphone.");
	
	if (PlayerData[userid][pRedList])
	return SendClientMessageEx(playerid, COLOR_ERROR, "Ce joueur est sur liste rouge.");

	SendClientMessageEx(playerid, COLOR_CLIENT, "Le numéro %d appartient à %s", PlayerData[userid][pPhone], ReturnName(userid));
	return 1;
}

CMD:tel(playerid, params[])
return cmd_telephone(playerid, params);

CMD:telephone(playerid, params[])
{
	if (!Inventory_HasItem(playerid, "Téléphone"))
	return SendClientMessageEx(playerid, COLOR_ERROR, "Vous n'avez pas un téléphone sur vous.");

	if (PlayerData[playerid][pHospital] != -1 || PlayerData[playerid][pCuffed] || PlayerData[playerid][pInjured] || !IsPlayerSpawned(playerid))
	return SendClientMessageEx(playerid, COLOR_ERROR, "Vous ne pouvez pas utiliser cette commande maintenant.");

	static
		str[90];

	format(str, sizeof(str), "Téléphone portable - Numéro: %d", PlayerData[playerid][pPhone]);

	if (PlayerData[playerid][pPhoneOff]) {
		Dialog_Show(playerid, MyPhone, DIALOG_STYLE_LIST, str, "Composer un numéro\nMes contacts\nEnvoyer un message\nAllumer / Éteindre le téléphone", "Ok", "X");
	}
	else {
		Dialog_Show(playerid, MyPhone, DIALOG_STYLE_LIST, str, "Composer un numéro\nMes contacts\nEnvoyer un message\nAllumer / Éteindre le téléphone", "Ok", "X");
	}
	return 1;
}

CMD:sms(playerid, params[])
return cmd_text(playerid, params);

CMD:text(playerid, params[])
{
	if (!Inventory_HasItem(playerid, "Téléphone"))
	return SendClientMessageEx(playerid, COLOR_ERROR, "Vous n'avez pas de téléphone sur vous.");

	if (PlayerData[playerid][pPhoneOff])
	return SendClientMessageEx(playerid, COLOR_ERROR, "Votre téléphone doit être allumé.");

	static
	targetid,
	number,
	text[128];

	if (sscanf(params, "ds[128]", number, text))
	return SendClientMessageEx(playerid, COLOR_USAGE, "/text <Numéro> <Message>");

	if (!number)
	return SendClientMessageEx(playerid, COLOR_ERROR, "Le numéro de téléphone indiqué ne fonctionne pas.");

	if ((targetid = GetNumberOwner(number)) != INVALID_PLAYER_ID)
	{
		if (targetid == playerid)
		return SendClientMessageEx(playerid, COLOR_ERROR, "Vous ne pouvez pas vous SMS vous-même.");

		if (PlayerData[targetid][pPhoneOff])
		return SendClientMessageEx(playerid, COLOR_ERROR, "Le téléphone portable du destinataire est éteint.");

		GiveMoney(playerid, -1);
		ShowPlayerFooter(playerid, "Vous payez ~r~$1~w~");

		SendClientMessageEx(targetid, COLOR_YELLOW, "SMS: %s | Expéditeur: %s (%d)", text, ReturnName(playerid), PlayerData[playerid][pPhone]);
		SendClientMessageEx(playerid, COLOR_YELLOW, "SMS: %s | Expéditeur: %s (%d)", text, ReturnName(playerid), PlayerData[playerid][pPhone]);

		PlayerPlaySoundEx(targetid, 21001);
		SendNearbyMessage(playerid, 15.0, COLOR_PURPLE, "%s récupère son téléphone portable afin d'envoyer un message.", ReturnName(playerid));
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_ERROR, "Le numéro de téléphone indiqué ne fonctionne pas.");
	}
	return 1;
}

CMD:decrocher(playerid, params[])
{
	if (!PlayerData[playerid][pIncomingCall])
	return SendClientMessageEx(playerid, COLOR_ERROR, "Vous n'avez reçu aucun appel.");

	if (PlayerData[playerid][pCuffed])
	return SendClientMessageEx(playerid, COLOR_ERROR, "Vous ne pouvez pas utiliser cette commande pour le moment.");

	if (PlayerData[playerid][pPhoneOff])
	return SendClientMessageEx(playerid, COLOR_ERROR, "Votre téléphone doit être allumé.");

	new targetid = PlayerData[playerid][pCallLine];

	PlayerData[playerid][pIncomingCall] = 0;
	PlayerData[targetid][pIncomingCall] = 0;

	SendClientMessage(playerid, COLOR_INFO, "Vous avez répondu à l'appel.");
	SendClientMessage(targetid, COLOR_INFO, "Votre correspondant a décroché.");

	SendNearbyMessage(playerid, 15.0, COLOR_PURPLE, "%s a accepté l'appel entrant.", ReturnName(playerid));

	ApplyAnimation(playerid, "PED", "null", 4.0, 0, 1, 1, 0, 0, 1);
	ApplyAnimation(playerid, "PED", "phone_in", 4.0, 0, 1, 1, 0, 0, 1);
	SetPlayerAttachedObject(playerid, 8, 330, 6, 0.014000, -0.007999, 0.000000);
	return 1;
}


CMD:rac(playerid, params[])
return cmd_raccrocher(playerid, params);

CMD:h(playerid, params[])
return cmd_raccrocher(playerid, params);

CMD:raccrocher(playerid, params[])
{
	new targetid = PlayerData[playerid][pCallLine];

	if (PlayerData[playerid][pEmergency] || PlayerData[playerid][pPlaceAd])
	{
		PlayerData[playerid][pEmergency] = 0;
		PlayerData[playerid][pPlaceAd] = 0;

		SendNearbyMessage(playerid, 15.0, COLOR_PURPLE, "%s a raccroché son téléphone portable.", ReturnName(playerid));
		return 1;
	}
	
	if (targetid == INVALID_PLAYER_ID)
		return SendClientMessageEx(playerid, COLOR_ERROR, "Vous n'avez pas reçu d'appel.");

	if (PlayerData[playerid][pIncomingCall])
	{
		SendClientMessage(playerid, COLOR_YELLOW, "TÉLÉPHONE:{FFFFFF} Vous avez refusé l'appel entrant.");
		SendClientMessage(targetid, COLOR_YELLOW, "TÉLÉPHONE:{FFFFFF} Votre correspondant a raccroché.");
	}
	else
	{
		SendClientMessage(playerid, COLOR_YELLOW, "TÉLÉPHONE:{FFFFFF} Vous avez raccroché.");
		SendClientMessage(targetid, COLOR_YELLOW, "TÉLÉPHONE:{FFFFFF} Votre correspondant a raccroché.");

	}
	PlayerData[playerid][pIncomingCall] = 0;
	PlayerData[targetid][pIncomingCall] = 0;

	PlayerData[playerid][pCallLine] = INVALID_PLAYER_ID;
	PlayerData[targetid][pCallLine] = INVALID_PLAYER_ID;

	if(PlayerData[playerid][pCallLineCabine] != INVALID_PLAYER_ID)
	{
	    CabineData[ PlayerData[playerid][pCallLineCabine] ][cabineCallID] = INVALID_PLAYER_ID;
	    PlayerData[playerid][pCallLineCabine] = INVALID_PLAYER_ID;
	}
	if(PlayerData[targetid][pCallLineCabine] != INVALID_PLAYER_ID)
	{
	    CabineData[ PlayerData[targetid][pCallLineCabine] ][cabineCallID] = INVALID_PLAYER_ID;
	    PlayerData[targetid][pCallLineCabine] = INVALID_PLAYER_ID;
	}

	ApplyAnimation(playerid, "PED", "null", 4.0, 0, 1, 1, 0, 0, 1);
	ApplyAnimation(playerid, "PED", "phone_out", 4.0, 0, 1, 1, 0, 0, 1);
	RemovePlayerAttachedObject(playerid, 8);
	return 1;
}

CMD:paint(playerid, params[])
{
	if (PlayerData[playerid][pCuffed])
	return SendClientMessageEx(playerid, COLOR_ERROR, "Vous ne pouvez pas utiliser cette commande pour le moment.");
	new vehicleid = GetNearestVehicle(playerid);

	if (vehicleid == INVALID_VEHICLE_ID)
	return SendClientMessageEx(playerid, COLOR_ERROR, "Vous n'êtes pas près d'un véhicule.");

	if (GetPlayerWeapon(playerid) != 41)
	return SendClientMessageEx(playerid, COLOR_ERROR, "Vous devez avoir un spray can.");

	if (IsPlayerInAnyVehicle(playerid))
	return SendClientMessageEx(playerid, COLOR_ERROR, "Vous devez sortir du véhicule.");

	static
	colors[256];

	for (new i = 0; i < sizeof(colors); i ++) {
		colors[i] = i;
	}
	ShowColorSelectionMenu(playerid, MODEL_SELECTION_COLOR, colors);
	return 1;
}

CMD:id(playerid, params[])
{
	if (isnull(params))
	return SendClientMessageEx(playerid, COLOR_USAGE, "/id <PlayerName>");

	if (strlen(params) < 3)
	return SendClientMessageEx(playerid, COLOR_ERROR, "Vous devez mettre minimum 3 caractères.");

	new count;

	foreach (new i : Player)
	{
		if (strfind(ReturnName(i), params, true) != -1)
		{
			SendClientMessageEx(playerid, COLOR_WHITE, "* %s - ID: %d", ReturnName(i), i);
			count++;
		}
	}
	if (!count)
	return SendClientMessageEx(playerid, COLOR_ERROR, "Aucun utilisateur ne correspond aux critères de recherche: \"%s\".", params);

	return 1;
}

CMD:planter(playerid, params[])
{
	if (isnull(params))
	{
		SendClientMessageEx(playerid, COLOR_USAGE, "/planter <Options>");
		SendClientMessageEx(playerid, COLOR_USAGE, "OPTIONS: weed, coca, opium");
		return 1;
	}
	
	if (Plant_Nearest(playerid) != -1)
	return SendClientMessageEx(playerid, COLOR_ERROR, "Vous êtes près d'une plantation, éloignez-vous.");

	if (!strcmp(params, "weed", true))
	{
		if (Inventory_Count(playerid, "Graines de Marijuana") < 1)
		return SendClientMessageEx(playerid, COLOR_ERROR, "Vous devez avoir 1 graines de marijuana pour planter.");

		Inventory_Remove(playerid, "Graines de Marijuana", 1);
		ApplyAnimation(playerid, "BOMBER", "BOM_Plant", 4.1, 0, 0, 0, 0, 0, 1);

		Plant_Create(playerid, 1);
		SendNearbyMessage(playerid, 15.0, COLOR_PURPLE, "* %s plante des graines de marijuana.", ReturnName(playerid, 1));
	}
	else if (!strcmp(params, "coca", true))
	{
		if (Inventory_Count(playerid, "Coca") < 1)
		return SendClientMessageEx(playerid, COLOR_ERROR, "Vous devez avoir 1 coca pour planter.");

		Inventory_Remove(playerid, "Coca", 1);
		ApplyAnimation(playerid, "BOMBER", "BOM_Plant", 4.1, 0, 0, 0, 0, 0, 1);

		Plant_Create(playerid, 2);
		SendNearbyMessage(playerid, 15.0, COLOR_PURPLE, "* %s plante des graines de cocaîne.", ReturnName(playerid, 1));
	}
	else if (!strcmp(params, "opium", true))
	{
		if (Inventory_Count(playerid, "Opium") < 1)
		return SendClientMessageEx(playerid, COLOR_ERROR, "Vous devez avoir 1 Graine d'Heroines pour planter.");

		Inventory_Remove(playerid, "Opium", 1);
		ApplyAnimation(playerid, "BOMBER", "BOM_Plant", 4.1, 0, 0, 0, 0, 0, 1);

		Plant_Create(playerid, 3);
		SendNearbyMessage(playerid, 15.0, COLOR_PURPLE, "* %s plante des graines d'héroines.", ReturnName(playerid, 1));
	}
	else {
		SendClientMessageEx(playerid, COLOR_USAGE, "/planter <Options>");
		SendClientMessageEx(playerid, COLOR_USAGE, "OPTIONS: weed, coca, opium");
	}
	return 1;
}

CMD:recolter(playerid, params[])
{
	new id = Plant_Nearest(playerid);

	if (id == -1)
	return SendClientMessageEx(playerid, COLOR_ERROR, "Vous devez être près d'une plantation.");

	if (PlantData[id][plantDrugs] < Plant_MaxGrams(PlantData[id][plantType]))
	return SendClientMessageEx(playerid, COLOR_ERROR, "Cette plante n'est pas entièrement cultivée.");

	if (GetPlayerSpecialAction(playerid) != SPECIAL_ACTION_DUCK)
	return SendClientMessageEx(playerid, COLOR_ERROR, "Vous devez être accroupi pour recolter la plantation.");

	if (PlayerData[playerid][pHarvesting])
	return SendClientMessageEx(playerid, COLOR_ERROR, "Vous êtes déjà en train de recolter..");

	GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~r~Recolte en cours...", 3100, 3);
	ApplyAnimation(playerid, "BOMBER", "BOM_Plant", 4.1, 0, 0, 0, 0, 0, 1);

	PlayerData[playerid][pHarvesting] = 1;
	SetTimerEx("HarvestPlant", 3000, false, "dd", playerid, id);
	return 1;
}

CMD:open(playerid, params[])
{
	new id = Gate_Nearest(playerid);
	if (id != -1)
	{
		if (strlen(GateData[id][gatePass]))
		{
		    Dialog_Show(playerid, GatePass, DIALOG_STYLE_INPUT, "Entrez le mot de passe", "Entrez le mot de passe pour utiliser cette grille", "Valider", "Annuler");
		}
		else
		{
			if (
					(GateData[id][gateFaction] != -1 && PlayerData[playerid][pFaction] != GetFactionByID(GateData[id][gateFaction]))
				||
					(GateData[id][gateJob] != -1 && PlayerData[playerid][pJob] != GetFactionByID(GateData[id][gateJob]))
				||
					(GateData[id][gateHouseID] != -1 && (PlayerData[playerid][pLocat] != GateData[id][gateHouseID] && !House_IsOwner(playerid, GateData[id][gateHouseID])))
				)
			return SendClientMessageEx(playerid, COLOR_ERROR, "Vous ne pouvez pas ouvrir cette porte.");

			Gate_Operate(id);
/*
			switch (GateData[id][gateOpened])
			{
				case 0:
					ShowPlayerFooter(playerid, "Vous avez ~r~fermé~w~ la grille");

				case 1:
					ShowPlayerFooter(playerid, "Vous avez ~g~ouvert~w~ la grille");
			}*/
		}
	}
	return 1;
}

CMD:rangerarme(playerid, params[])
{
	new weaponid = 0;

	if (!Inventory_HasItem(playerid, "Sac a dos"))
	return SendClientMessageEx(playerid, COLOR_ERROR, "Vous n'avez pas de sac sur vous.");

	if (IsPlayerInAnyVehicle(playerid) || !IsPlayerSpawned(playerid))
	return SendClientMessageEx(playerid, COLOR_ERROR, "Vous ne pouvez pas ranger d'armes en ce moment.");

	if ((weaponid = GetWeapon(playerid)) == 0)
	return SendClientMessageEx(playerid, COLOR_ERROR, "Vous ne pouvez pas ranger l'arme, sauf si vous êtes le propriétaire.");

	if (weaponid == 23 && PlayerData[playerid][pTazer])
	return SendClientMessageEx(playerid, COLOR_ERROR, "Vous ne pouvez pas ranger un tazer.");

	if (weaponid == 25 && PlayerData[playerid][pBeanBag])
	return SendClientMessageEx(playerid, COLOR_ERROR, "Vous ne pouvez pas ranger un flash-ball.");

	if (GetFactionType(playerid) == FACTION_POLICE)
	return SendClientMessageEx(playerid, COLOR_ERROR, "Vous ne pouvez pas ranger en étant en LSPD.");

	ResetWeapon(playerid, weaponid);

	Backpack_Add(GetPlayerBackpack(playerid),  ReturnWeaponName(weaponid), weaponid, GetPlayerAmmo(playerid));

	SendNearbyMessage(playerid, 15.0, COLOR_PURPLE, "%s dépose un(e) \"%s\" dans son sac à dos.", ReturnName(playerid), ReturnWeaponName(weaponid));
	Backpack_Open(playerid);
	return 1;
}

CMD:poser(playerid, params[])
{
	new weaponid = 0;

	if (IsPlayerInAnyVehicle(playerid) || !IsPlayerSpawned(playerid))
	return SendClientMessageEx(playerid, COLOR_ERROR, "Vous ne pouvez pas poser d'armes en ce moment.");

	if ((weaponid = GetWeapon(playerid)) == 0)
	return SendClientMessageEx(playerid, COLOR_ERROR, "Vous devez avoir une arme en mains pour la poser.");

	if (weaponid == 23 && PlayerData[playerid][pTazer])
	return SendClientMessageEx(playerid, COLOR_ERROR, "Vous ne pouvez pas poser un tazer.");

	if (weaponid == 25 && PlayerData[playerid][pBeanBag])
	return SendClientMessageEx(playerid, COLOR_ERROR, "Vous ne pouvez pas poser un flash-ball.");

	if (GetFactionType(playerid) == FACTION_POLICE)
	return SendClientMessageEx(playerid, COLOR_ERROR, "Vous ne pouvez pas poser en étant en LSPD.");

	static
	Float:x,
	Float:y,
	Float:z,
	Float:angle;

	GetPlayerPos(playerid, x, y, z);
	GetPlayerFacingAngle(playerid, angle);

	x += 1.5 * floatsin(-angle, degrees);
	y += 1.5 * floatcos(-angle, degrees);

	DropItem(ReturnWeaponName(weaponid), ReturnName(playerid), GetWeaponModel(weaponid), 1, x, y, z - 1, GetPlayerInterior(playerid), GetPlayerVirtualWorld(playerid), weaponid, GetPlayerAmmo(playerid));
	ResetWeapon(playerid, weaponid);

	ApplyAnimation(playerid, "GRENADE", "WEAPON_throwu", 4.1, 0, 0, 0, 0, 0, 1);
	SendNearbyMessage(playerid, 15.0, COLOR_PURPLE, "%s pose un(e) %s au sol.", ReturnName(playerid, 1), ReturnWeaponName(weaponid));
	Log_Write("logs/droppick.txt", "[%s] %s has dropped a %s.", ReturnDate(), ReturnName(playerid), ReturnWeaponName(weaponid));
	return 1;
}

CMD:fliste(playerid, params[])
{
	if (PlayerData[playerid][pAdmin] < 1)
	    return SendClientMessage(playerid, COLOR_ERROR, "Vous n'avez pas accès à cette commande.");

	SendClientMessage(playerid, COLOR_SERVER, "Factions actives:");
	SendClientMessage(playerid, COLOR_SERVER, "¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯");
	for (new i = 0; i != MAX_FACTIONS; i ++) if (FactionData[i][factionExists]) {
		SendClientMessageEx(playerid, COLOR_WHITE, "{CCCCCC}[ID: %d] {%06x}%s", i, FactionData[i][factionColor] >>> 8, FactionData[i][factionName]);
	}
	return 1;
}

CMD:afkliste(playerid, params[])
{
	if (PlayerData[playerid][pAdmin] < 1)
	    return SendClientMessage(playerid, COLOR_ERROR, "Vous n'avez pas accès à cette commande.");

	SendClientMessage(playerid, COLOR_SERVER, "Liste des joueurs absents:");
	SendClientMessage(playerid, COLOR_SERVER, "¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯");
	foreach(new i:Player) if(PlayerData[playerid][pAFK])
	{
	    SendClientMessageEx(playerid, COLOR_WHITE, "%s (%d)", ReturnName(i), i);
	}
	return 1;
}

stock getLSPDservice()
{
	new count = 0;
    foreach (new i : Player)
	{
		if (GetFactionType(i) == FACTION_POLICE)
		    count ++;
	}
	return count;
}
stock getMecaservice()
{
	new count = 0;
    foreach (new i : Player)
	{
		if (PlayerData[i][pJobDuty] == JOB_MECHANIC)
		    count ++;
	}
	return count;
}

CMD:blanchir(playerid, params[])
{
	if(ASac[playerid] == 0)
		return SendClientMessageEx(playerid, COLOR_ERROR, "Vous n'avez pas de sac d'argent sur vous.");

	if (GetFactionType(playerid) != FACTION_GANG && GetFactionType(playerid) != FACTION_MAFIA)
		return SendClientMessageEx(playerid, COLOR_ERROR, "Vous devez être dans une faction illégale.");

	if(!IsPlayerInRangeOfPoint(playerid, 2.0, 2355.9412, -648.1865, 128.0547))
		return SendClientMessageEx(playerid, COLOR_ERROR, "Vous n'êtes pas au bon endroit. (Dillimore)");

	if(IsPlayerAttachedObjectSlotUsed(playerid, 3))
		RemovePlayerAttachedObject(playerid, 3);

	if (ASac[playerid] == 1 && aBraquerBanque[playerid] == 1)
	{
		SendClientMessageEx(playerid, COLOR_INFO, "Vous avez réussi à blanchir un total de $%d.",SacSome[playerid]);
		GiveMoney(playerid, SacSome[playerid]);
		aBraquerBanque[playerid] = 0;
		SacBanque ++;
		SendAdminAlert(COLOR_ADMINGROUP, "%s a blanchi l'argent de son braquage de banque (%d$).", ReturnName(playerid),SacSome[playerid]);
		ASac[playerid] = 0;
		Casier = 3;
		CoffreExplos = 0;
		CasierCas = 0;
		SacSome[playerid] = -1;
	}
	else if (ASac[playerid] == 1 && aBraquer{playerid} == true)
	{
		SendClientMessageEx(playerid, COLOR_INFO, "Vous avez blanchi $7,000.");
		GiveMoney(playerid, 7000);
		aBraquer{playerid} = false;
		ASac[playerid] = 0;
		SendAdminAlert(COLOR_ADMINGROUP, "%s a blanchi l'argent de son braquage de business ($7,000).", ReturnName(playerid));
	}
	return 1;
}

CMD:acheterbombe(playerid, params[])
{

	static
	id = -1;

	if (PlayerData[playerid][pLevel] < 5)
	return SendClientMessageEx(playerid, COLOR_ERROR, "Vous devez être level 5 pour utiliser cette commande.");

	if (GetFactionType(playerid) != FACTION_GANG && GetFactionType(playerid) != FACTION_MAFIA)
		return SendClientMessageEx(playerid, COLOR_ERROR, "Vous devez être dans une faction illégale.");

	if(!IsPlayerInRangeOfPoint(playerid, 1.5, 1566.3444, 23.3079, 24.1641))
	return SendClientMessageEx(playerid, COLOR_ERROR, "Vous n'êtes pas au bon endroit (point rouge minimap)."), SetPlayerCheckpoint(playerid, 1566.3444, 23.3079, 24.1641, 3.0);

	if (isnull(params) || (!isnull(params) && strcmp(params, "confirmer", true) != 0))
	{
		SendClientMessageEx(playerid, COLOR_USAGE, "/acheterbombe \"confirmer\"");
		SendClientMessage(playerid, COLOR_INFO, "Vous êtes sur le point d'acheter une bombe au prix de 25'000$, confirmez cette action.");
	}
	else if (!strcmp(params, "confirmer", true))
	{
		if(GetMoney(playerid) < 24999)
			return SendClientMessageEx(playerid, COLOR_ERROR, "Vous devez avoir $25,000.");

		if (Inventory_HasItem(playerid, "Bombe"))
		return SendClientMessageEx(playerid, COLOR_ERROR, "Vous avez déjà une bombe.");


		id =  Inventory_Add(playerid, "Bombe", 1654,1);

		if (id != -1)
		{


			GiveMoney(playerid, -25000);
			ApplyAnimation(playerid, "DEALER", "shop_pay", 4.0, 0, 0, 0, 0, 0);

			SendNearbyMessage(playerid, 15.0, COLOR_PURPLE, "%s procède à l'achat d'une bombe pré-fabriquée.", ReturnName(playerid));
		}
	}
	return 1;
}

CMD:ccasier(playerid, params[])
{
	if (PlayerData[playerid][pLevel] < 5)
	return SendClientMessageEx(playerid, COLOR_ERROR, "Vous devez être level 5 pour utiliser cette commande.");

	if (GetFactionType(playerid) != FACTION_GANG && GetFactionType(playerid) != FACTION_MAFIA)
		return SendClientMessageEx(playerid, COLOR_ERROR, "Vous devez être dans une faction illégale.");

	if(!Casier_NearestPoint(playerid))
		return SendClientMessageEx(playerid, COLOR_ERROR, "Vous n'êtes pas au bon endroit (coffre de la banque).");

	if(Ccasier[playerid] > 0)
		return SendClientMessageEx(playerid, COLOR_ERROR, "Vous avez déjà commencé à casser un casier.");

	if(Casier == 0)
		return SendClientMessageEx(playerid, COLOR_ERROR, "Il n'y a plus de casier");

	if(CoffreExplos == 0)
		return SendClientMessageEx(playerid, COLOR_ERROR, "Le coffre n'a pas été explosé");

	if(CasierCas == 3)
		return SendClientMessageEx(playerid, COLOR_ERROR, "Il n'y a plus de casier (3)");

	if (!Inventory_HasItem(playerid, "Pied de biche"))
	return SendClientMessageEx(playerid, COLOR_ERROR, "Vous n'avez pas de pied de biche.");

	Inventory_Remove(playerid, "Pied de biche", 1);

	if(IsPlayerInRangeOfPoint(playerid, 2.0, 1435.49451, -965.26141, 984.18042)) {CasierN[playerid] = Bcasier1;}
	else if(IsPlayerInRangeOfPoint(playerid, 2.0, 1437.60864, -965.27802, 984.18042)) {CasierN[playerid] = Bcasier2;}
	else {CasierN[playerid] = Bcasier3;}

	//outils
	Ccasier[playerid] = 1;

	SendClientMessageEx(playerid, COLOR_INFO, "Afin de commencer à casser le casier, appuyez sur votre {FF0000}touche de tir.");
	SetPlayerAttachedObject(playerid, 4, 18634, 6, 0.156547, 0.039423, 0.026570, 198.109115, 6.364907, 262.997558, 1.000000, 1.000000, 1.000000);

	//Casier
	Casier --;
	return 1;
}

CMD:forcerporte(playerid, params[])
{
	if (getLSPDservice() < 5)
			return SendClientMessageEx(playerid, COLOR_ERROR, "Il doit y avoir minimum 5 LSPD en service.");

	if (PlayerData[playerid][pLevel] < 5)
		return SendClientMessageEx(playerid, COLOR_ERROR, "Vous devez être level 5 pour utiliser cette commande.");

	if (GetFactionType(playerid) != FACTION_GANG && GetFactionType(playerid) != FACTION_MAFIA)
		return SendClientMessageEx(playerid, COLOR_ERROR, "Vous devez être dans une faction illégale.");

	if(!IsPlayerInRangeOfPoint(playerid, 1.5, 1438.8292,-1001.6400,996.1090))
		return SendClientMessageEx(playerid, COLOR_ERROR, "Vous n'êtes pas devant la porte de la banque.");

	if (!Inventory_HasItem(playerid, "Pied de biche"))
		return SendClientMessageEx(playerid, COLOR_ERROR, "Vous n'avez pas de pied de biche.");

	if(Cforcerporte[playerid])
		return SendClientMessageEx(playerid, COLOR_ERROR, "Vous avez déjà commencé à enfoncer la porte.");

	SendFactionMessageEx(FACTION_POLICE, COLOR_RED, "CENTRAL: (radio): Braquage de la banque en cours ! Je répète Braquage de la banque !");
	SendNearbyMessage(playerid, 5.0, COLOR_PURPLE, "%s attrape son pied de biche avant d'enfoncer la porte d'un geste brusque.",ReturnName(playerid));

	//outils
	Cforcerporte[playerid] = true;

	SendClientMessageEx(playerid, COLOR_INFO, "Afin de commencer à casser le casier, appuyez sur votre {FF0000}touche de tir.");
	SetPlayerAttachedObject(playerid, 4, 18634, 6, 0.156547, 0.039423, 0.026570, 198.109115, 6.364907, 262.997558, 1.000000, 1.000000, 1.000000);

	//Porte
	Forcerporte[playerid] --;
	return 1;
}
CMD:remplirsac(playerid, params[])
{
	static
	Float:X,
	Float:Y,
	Float:Z;

	GetDynamicObjectPos(CasierN[playerid], X, Y, Z);

	/*if (getLSPDservice() < 6)
	return SendClientMessageEx(playerid, COLOR_ERROR, "Il doit y avoir minimum 6 LSPD en service.");*/

	if (PlayerData[playerid][pLevel] < 5)
	return SendClientMessageEx(playerid, COLOR_ERROR, "Vous devez être level 5 pour utiliser cette commande.");

	if (GetFactionType(playerid) != FACTION_GANG && GetFactionType(playerid) != FACTION_MAFIA)
		return SendClientMessageEx(playerid, COLOR_ERROR, "Vous devez être dans une faction illégale.");

	if(SacTem[playerid] != 0)
		return SendClientMessageEx(playerid, COLOR_ERROR, "Tu as déjà commencé à remplir.");

	if(ASac[playerid] > 0)
	return SendClientMessageEx(playerid, COLOR_ERROR, "Vous avez déjà pris un sac.");

	if(!IsPlayerInRangeOfPoint(playerid, 2.0, X, Y, Z))
		return SendClientMessageEx(playerid, COLOR_ERROR, "Il faut que tu sois à coté d'un casier.");

	//message
	SendFactionMessageEx(FACTION_POLICE, COLOR_RED, "CENTRAL: (radio): Braquage de la banque en cours ! Je répète braquage de la banque");
	SendNearbyMessage(playerid, 5.0, COLOR_PURPLE, "%s attrape son sac, le remplissant de liasses.", ReturnName(playerid));
	SacTem[playerid] = 40;
	SacKillTimer[playerid] = SetTimerEx("RemplirSac", 1000, true, "i", playerid); //45000
	GameTextForPlayer(playerid, "~w~Remplissage en cours~n~~r~40 ~w~secondes ...", 2000, 5);
	return 1;
}

CMD:poserbombe(playerid, params[])
{

	static
	Float:x,
	Float:y,
	Float:z;

	GetPlayerPos(playerid, x, y, z);

	/*if (getLSPDservice() < 6)
	return SendClientMessageEx(playerid, COLOR_ERROR, "Il doit y avoir minimum 6 LSPD en service.");*/

	if (PlayerData[playerid][pLevel] < 5)
	return SendClientMessageEx(playerid, COLOR_ERROR, "Vous devez être level 5 pour utiliser cette commande.");

	if (GetFactionType(playerid) != FACTION_GANG && GetFactionType(playerid) != FACTION_MAFIA)
		return SendClientMessageEx(playerid, COLOR_ERROR, "Vous devez être dans une faction illégale.");

	if(!IsPlayerInRangeOfPoint(playerid, 2.0, 1435.3368,-981.4681,983.6462))
	return SendClientMessageEx(playerid, COLOR_ERROR, "Vous n'êtes pas au bon endroit (coffre de la banque).");

	if (!Inventory_HasItem(playerid, "Bombe"))
	return SendClientMessageEx(playerid, COLOR_ERROR, "Vous n'avez pas de bombe.");


	if(BraquageBanque > 0)
		return SendClientMessageEx(playerid, COLOR_ERROR, "Vous devez attendre 24 heures pour braquer à nouveau.");

	if(C4Timer[playerid] != 0)
		return SendClientMessageEx(playerid, COLOR_ERROR, "La bombe a déjà été posée.");

	if(aBraquerBanque[playerid] == 1)
		return SendClientMessageEx(playerid, COLOR_ERROR, "Vous ne pouvez pas braquer pour l'instant.");

	//Admin alert
	SendAdminAlert(COLOR_ADMINGROUP, "Le joueur %s a posé une bombe à la banque, braquage probablement en cours.", ReturnName(playerid));
	SendFactionMessageEx(FACTION_POLICE, COLOR_RED, "CENTRAL: (radio): Braquage de la banque en cours ! Je répète Braquage de la banque !");

	///inventaire
	Inventory_Remove(playerid, "Bombe", 1);

	//Compteur
	SendNearbyMessage(playerid, 5.0, COLOR_RED, "%s a posé une bombe sur le coffre de la banque, éloignez-vous lors de l'explosion !", ReturnName(playerid));
	C4Timer[playerid] = 180;
	C4KillTimer[playerid] = SetTimerEx("C4Poser", 1000, false, "i", playerid);
	GameTextForPlayer(playerid, "~w~EXPLOSION DE LA BOMBE DANS~n~~r~3 ~w~minutes ...", 2000, 5);
	BraquageBanque = 3600*24; //24 heures

	//anim
	ApplyAnimation(playerid, "PED", "null", 4.0, 0, 1, 1, 0, 0, 1);
	ApplyAnimation(playerid, "Bomber", "BOM_Plant", 4.0, 0, 1, 1, 0, 0, 1);

	//C4
	C4sol = CreateDynamicObject(1654,x,y,z+0.5,0.000,0.000,180.000,-1,-1,-1,0,0.000);

	return 1;
}

CMD:braquer(playerid, params[])
{
	if (getLSPDservice() < 3)
		return SendClientMessageEx(playerid, COLOR_ERROR, "Un minimum de 3 LSPD est nécessaire pour effectuer un braquage.");

	if (PlayerData[playerid][pLevel] < 3)
	return SendClientMessageEx(playerid, COLOR_ERROR, "Vous devez être level 3 pour utiliser cette commande.");

	if (GetFactionType(playerid) != FACTION_GANG && GetFactionType(playerid) != FACTION_MAFIA)
		return SendClientMessageEx(playerid, COLOR_ERROR, "Vous devez être dans une faction illégale.");

	if(BraquageBiz > 0)
	    return SendClientMessageEx(playerid, COLOR_ERROR, "Vous devez attendre 3 heures pour braquer à nouveau.");

	if(BraquageTimer[playerid] != 0)
 		return SendClientMessageEx(playerid, COLOR_ERROR, "Vous êtes déjà en train de braquer.");

	if(aBraquer{playerid} == true)
	    return SendClientMessageEx(playerid, COLOR_ERROR, "Vous ne pouvez pas braquer pour l'instant.");

    new id = -1;
    if ((id = Business_Inside(playerid)) != -1 && IsPlayerInRangeOfPoint(playerid, 4.0, BusinessData[id][bizInt][0], BusinessData[id][bizInt][1], BusinessData[id][bizInt][2]))
	{
		new type[24];
	    switch (BusinessData[id][bizType]) {
			case 1: type = "24/7";
			case 2: type = "Ammunation";
			case 3: type = "Vetements";
			case 4: type = "Fast Food";
			case 6: type = "Station-Essence";
		}

		//LSPD
		new Float:x, Float:y, Float:z;
		GetPlayerPos(playerid,x,y,z);
		SetFactionMarkerBraquage(playerid, FACTION_POLICE, BusinessData[id][bizPos][0], BusinessData[id][bizPos][1], BusinessData[id][bizPos][2]);
		SendFactionMessageEx(FACTION_POLICE, 0x8080FF96, "CENTRAL: (radio): Braquage du business %s en cours.. Position: {FFFFFF}%s.", type, GetLocation(x, y, z));

		//Compteur
		SendNearbyMessage(playerid, 15.0, COLOR_PURPLE, "* Braquage en cours ..");
   		BraquageTimer[playerid] = 300;
		BraquageKillTimer[playerid] = SetTimerEx("Braquage", 1000, false, "i", playerid);
		GameTextForPlayer(playerid, "~w~Braquage en cours~n~~r~300 ~w~secondes ...", 2000, 5);
		BraquageBiz = 3600*3; //3 heures

		//Admin alert
		SendAdminAlert(COLOR_ADMINGROUP, "%s braque le business %s.", ReturnName(playerid), type);

	}
	else SendClientMessageEx(playerid, COLOR_ERROR, "Vous devez être dans un business.");
	return 1;
}

CMD:leader(playerid, params[])
{
    if (PlayerData[playerid][pFaction] == -1) return SendClientMessageEx(playerid, COLOR_ERROR, "Vous n'êtes pas membre d'une faction.");
    if (PlayerData[playerid][pFactionRank] < FactionData[PlayerData[playerid][pFaction]][factionRanks] - 1) return SendClientMessageEx(playerid, COLOR_ERROR, "Vous devez avoir le rank %d pour utiliser cette commande.", FactionData[PlayerData[playerid][pFaction]][factionRanks] - 1);

	static nom[24], scmd[128];
	if (sscanf(params, "s[24]S()[128]", nom, scmd))
	{
	    SendClientMessageEx(playerid, COLOR_USAGE, "/leader <options>");
	    SendClientMessageEx(playerid, COLOR_USAGE, "OPTIONS - RANG %d: inviter, virer, rang", FactionData[PlayerData[playerid][pFaction]][factionRanks] - 1);

	    if(FactionData[PlayerData[playerid][pFaction]][factionRanks] == PlayerData[playerid][pFactionRank])
	    {
	    	if(GetFactionType(playerid) == FACTION_GANG || GetFactionType(playerid) == FACTION_MAFIA) SendClientMessageEx(playerid, COLOR_USAGE, "OPTIONS - RANG %d: gestion, spawn, upgrade, planque", FactionData[PlayerData[playerid][pFaction]][factionRanks]);
	    	else SendClientMessageEx(playerid, COLOR_USAGE, "OPTIONS - RANG %d: gestion, spawn, garer", FactionData[PlayerData[playerid][pFaction]][factionRanks]);
	   	}
	    return 1;
	}
	if (!strcmp(nom, "inviter", true)) // Réserver au leader/sous-leader (Leader-1)
	{
		new userid;
		if (sscanf(scmd, "u", userid))
		{
			SendClientMessageEx(playerid, COLOR_USAGE, "/leader inviter <PlayerID/PlayerName>");
			return 1;
		}
		if (userid == INVALID_PLAYER_ID) return SendClientMessageEx(playerid, COLOR_ERROR, "Ce joueur n'est pas connecté.");
		if (PlayerData[userid][pFaction] == PlayerData[playerid][pFaction]) return SendClientMessageEx(playerid, COLOR_ERROR, "Ce joueur fait déjà partie de votre faction.");
		if (PlayerData[userid][pLevel] < 2) return SendClientMessageEx(playerid, COLOR_ERROR, "Ce joueur n'est pas level 2.");
		if (PlayerData[userid][pFaction] != -1) return SendClientMessageEx(playerid, COLOR_ERROR, "Ce joueur fait déjà partie d'une autre faction.");

		PlayerData[userid][pFactionOffer] = playerid;
		PlayerData[userid][pFactionOffered] = PlayerData[playerid][pFaction];
		SQL_SaveCharacter(userid);
		SendClientMessageEx(playerid, COLOR_INFO, "Vous avez proposé à %s de rejoindre la faction \"%s\".", ReturnName(userid, 0), Faction_GetName(playerid));
		SendClientMessageEx(userid, COLOR_INFO, "%s vous propose de rejoindre la faction \"%s\" (utilisez \"/accepter faction\").", ReturnName(playerid), Faction_GetName(playerid));
	}
	if (!strcmp(nom, "virer", true)) // Réserver au leader/sous-leader (Leader-1)
	{
		new userid;
		if (sscanf(scmd, "u", userid))
		{
			SendClientMessageEx(playerid, COLOR_USAGE, "/leader virer <PlayerID/PlayerName>");
			return 1;
		}
		if (userid == INVALID_PLAYER_ID) return SendClientMessageEx(playerid, COLOR_ERROR, "Ce joueur n'est pas connecté.");
		if (PlayerData[userid][pFaction] != PlayerData[playerid][pFaction]) return SendClientMessageEx(playerid, COLOR_ERROR, "Ce joueur ne fait pas partie de votre faction.");

		SendClientMessageEx(playerid, COLOR_INFO, "Vous avez viré %s de la faction \"%s\".", ReturnName(userid, 0), Faction_GetName(playerid));
		SendClientMessageEx(userid, COLOR_INFO, "%s vous a viré de la faction \"%s\".", ReturnName(playerid), Faction_GetName(playerid));

		ResetFaction(userid);
	}
	if (!strcmp(nom, "rang", true)) // Réserver au leader/sous-leader (Leader-1)
	{
		new userid, rankid;

		if (sscanf(scmd, "ud", userid, rankid))
		{
			SendClientMessageEx(playerid, COLOR_USAGE, "/leader rang <PlayerID/PlayerName> <rank (1-%d)>", FactionData[PlayerData[playerid][pFaction]][factionRanks]);
			return 1;
		}
		if (userid == INVALID_PLAYER_ID) return SendClientMessageEx(playerid, COLOR_ERROR, "Ce joueur n'est pas connecté.");
		if (userid == playerid) return SendClientMessageEx(playerid, COLOR_ERROR, "Vous ne pouvez pas régler son rank.");
		if (PlayerData[userid][pFaction] != PlayerData[playerid][pFaction]) return SendClientMessageEx(playerid, COLOR_ERROR, "Ce joueur ne fait pas partie de votre faction.");
		if (rankid < 0 || rankid > FactionData[PlayerData[playerid][pFaction]][factionRanks]) return SendClientMessageEx(playerid, COLOR_ERROR, "Rank invalide, seulement entre 1 et %d.", FactionData[PlayerData[playerid][pFaction]][factionRanks]);

		PlayerData[userid][pFactionRank] = rankid;

		SendClientMessageEx(playerid, COLOR_INFO, "Vous avez promu %s rank %s (%d).", ReturnName(userid, 0), Faction_GetRank(userid), rankid);
		SendClientMessageEx(userid, COLOR_INFO, "%s vous a promu rank %s (%d).", ReturnName(playerid), Faction_GetRank(userid), rankid);
	}
	if (!strcmp(nom, "gestion", true)) // Réserver au leader uniquement
	{
		new factionid = PlayerData[playerid][pFaction];
		if (PlayerData[playerid][pFactionRank] != FactionData[factionid][factionRanks]) return SendClientMessageEx(playerid, COLOR_ERROR, "Vous n'avez pas la permission d'utiliser cette commande leader seulement.");
		Faction_ShowRanks(playerid, factionid);
	}
	if (!strcmp(nom, "spawn", true)) // Réserver au leader uniquement
	{
		new faction = PlayerData[playerid][pFactionID];

		if (PlayerData[playerid][pFactionRank] < FactionData[PlayerData[playerid][pFaction]][factionRanks] - 1)
		return SendClientMessageEx(playerid, COLOR_ERROR, "Vous devez avoir le rank %d.", FactionData[PlayerData[playerid][pFaction]][factionRanks]);

		new Float:X, Float:Y, Float:Z;
		GetPlayerPos(playerid, X, Y, Z);
		FactionData[faction][SpawnX] = X;
		FactionData[faction][SpawnY] = Y;
		FactionData[faction][SpawnZ] = Z;
		FactionData[faction][SpawnInterior] = GetPlayerInterior(playerid);
		FactionData[faction][SpawnVW] = GetPlayerVirtualWorld(playerid);
		
		SendClientMessageEx(playerid, COLOR_INFO, "Votre spawn faction a bien été placé.");
		Faction_Save(faction);
	}
	if (!strcmp(nom, "garer", true))
	{
	    new id2 = GetPlayerVehicleID(playerid);
	    new id = Car_GetID(id2);
		GetPlayerPos(playerid, CarData[id][carPos][0], CarData[id][carPos][1], CarData[id][carPos][2]);
		GetPlayerFacingAngle(playerid, CarData[id][carPos][3]);
		
		Car_Save(id);
		Car_Spawn(id);

		SetPlayerPosEx(playerid, CarData[id][carPos][0], CarData[id][carPos][1], CarData[id][carPos][2] + 2.0, 1000);
		SendClientMessageEx(playerid, COLOR_INFO, "Vous avez modifié la position du véhicule ID: %d", CarData[id][carVehicle]);
	}
	if (!strcmp(nom, "planque", true))
	{
	    if (GetFactionType(playerid) != FACTION_GANG && GetFactionType(playerid) != FACTION_MAFIA)
	    	return SendClientMessage(playerid, COLOR_ERROR, "Vous devez être dans une faction illégale.");
	    	
		if (PlayerData[playerid][pFactionRank] < FactionData[PlayerData[playerid][pFaction]][factionRanks])
			return SendClientMessageEx(playerid, COLOR_ERROR, "Vous devez avoir le rank %d.", FactionData[PlayerData[playerid][pFaction]][factionRanks]);
		
	    if(GetHousePlanque(PlayerData[playerid][pFaction]) != -1)
	    {
	        Dialog_Show(playerid, DIALOG_PLANQUE_DELETE, DIALOG_STYLE_MSGBOX, "Supprimez votre planque?", "Etes-vous sûr de vouloir supprimer la planque actuelle ?\nLa suppression de la planque n'aura aucun impact sur la maison.", "Oui", "Non");
	    }
	    else
	    {
			new
				id = -1;

			if (!IsPlayerInAnyVehicle(playerid) && (id = House_Nearest(playerid)) != -1 && House_IsOwner(playerid, id))
			{
			    HouseData[id][houseFaction] = PlayerData[playerid][pFaction];
			    House_Save(id);

			    SendClientMessageEx(playerid, COLOR_INFO, "Cette maison est maintenant la planque de la faction \"%s\".", FactionData[ PlayerData[playerid][pFaction] ][factionName]);
			}
			else SendClientMessage(playerid, COLOR_ERROR, "Vous devez être à côté de votre maison.");
	    }
	}
	if (!strcmp(nom, "upgrade", true))
	{
	    if (GetFactionType(playerid) != FACTION_GANG && GetFactionType(playerid) != FACTION_MAFIA)
	    	return SendClientMessage(playerid, COLOR_ERROR, "Vous devez être dans une faction illégale.");
	    
		if (PlayerData[playerid][pFactionRank] < FactionData[PlayerData[playerid][pFaction]][factionRanks])
			return SendClientMessageEx(playerid, COLOR_ERROR, "Vous devez avoir le rank %d.", FactionData[PlayerData[playerid][pFaction]][factionRanks]);
		
		new
		    title[60];

		format(title, sizeof(title), "Upgrade faction (%d crédits)", FactionData[ PlayerData[playerid][pFaction] ][factionCredit]);

		if(GetFactionType(playerid) == FACTION_GANG)
			Dialog_Show(playerid, DIALOG_FACTION_UPGRADE, DIALOG_STYLE_LIST, title, "- Upgrade des drogues", "Valider", "Annuler");

		if(GetFactionType(playerid) == FACTION_MAFIA)
			Dialog_Show(playerid, DIALOG_FACTION_UPGRADE, DIALOG_STYLE_LIST, title, "- Upgrade des drogues\n- Upgrade des armes", "Valider", "Annuler");
	}
	return 1;
}

stock ShowDialogFactionUpgrade(playerid, type)
{
    new
        content[125*14],
        title[60],
		id = PlayerData[playerid][pFaction];

	format(content, sizeof(content), "#\tType\tPrix\tÉtat\n");
	
	if (type == 1)
	{ // ARMES
		format(content, sizeof(content), "%s\
			1.\tMunitions\t20 crédits\t%s\n\
			2.\tCocktail Molotov\t30 crédits\t%s\n\
			3.\tSilencieux\t70 crédits\t%s\n\
			4.\tColt 45\t100 crédits\t%s\n\
			5.\tDesert Eagle\t150 crédits\t%s\n\
			6.\tShotgun\t180 crédits\t%s\n\
			7.\tUZI\t90 crédits\t%s\n\
			8.\tTec-9\t90 crédits\t%s\n\
			9.\tMP5\t120 crédits\t%s\n\
			10.\tAK-47\t130 crédits\t%s\n\
			11.\tM4-A1\t180 crédits\t%s\n\
			12.\tRifle\t190 crédits\t%s\n\
			13.\tSniper Rifle\t200 crédits\t%s",

			content,
			(FactionData[id][factionUpgrade][UPGRADE_MUNITION] == 1) ? ("{33CC33}Débloqué") : ("{FF0000}Bloqué"),
			(FactionData[id][factionUpgrade][UPGRADE_COCKTAIL] == 1) ? ("{33CC33}Débloqué") : ("{FF0000}Bloqué"),
			(FactionData[id][factionUpgrade][UPGRADE_SILENCIEUX] == 1) ? ("{33CC33}Débloqué") : ("{FF0000}Bloqué"),
			(FactionData[id][factionUpgrade][UPGRADE_COLT] == 1) ? ("{33CC33}Débloqué") : ("{FF0000}Bloqué"),
			(FactionData[id][factionUpgrade][UPGRADE_EAGLE] == 1) ? ("{33CC33}Débloqué") : ("{FF0000}Bloqué"),
			(FactionData[id][factionUpgrade][UPGRADE_SHOTGUN] == 1) ? ("{33CC33}Débloqué") : ("{FF0000}Bloqué"),
			(FactionData[id][factionUpgrade][UPGRADE_UZI] == 1) ? ("{33CC33}Débloqué") : ("{FF0000}Bloqué"),
			(FactionData[id][factionUpgrade][UPGRADE_TEC9] == 1) ? ("{33CC33}Débloqué") : ("{FF0000}Bloqué"),
			(FactionData[id][factionUpgrade][UPGRADE_MP5] == 1) ? ("{33CC33}Débloqué") : ("{FF0000}Bloqué"),
			(FactionData[id][factionUpgrade][UPGRADE_AK47] == 1) ? ("{33CC33}Débloqué") : ("{FF0000}Bloqué"),
			(FactionData[id][factionUpgrade][UPGRADE_M4] == 1) ? ("{33CC33}Débloqué") : ("{FF0000}Bloqué"),
			(FactionData[id][factionUpgrade][UPGRADE_RIFLE] == 1) ? ("{33CC33}Débloqué") : ("{FF0000}Bloqué"),
			(FactionData[id][factionUpgrade][UPGRADE_SNIPER] == 1) ? ("{33CC33}Débloqué") : ("{FF0000}Bloqué")
		);

		format(title, sizeof(title), "Upgrade faction (%d crédits)", FactionData[ PlayerData[playerid][pFaction] ][factionCredit]);
		Dialog_Show(playerid, DIALOG_FACTION_UPGRADEW, DIALOG_STYLE_TABLIST_HEADERS, title, content, "Valider", "Annuler");
	}
	else if(type == 2)
	{ // DROGUES
		format(content, sizeof(content), "%s\
			1.\tGraines de Marijuana\t40 crédits\t%s\n\
			2.\tCoca\t110 crédits\t%s\n\
			3.\tHeroïne\t250 crédits\t%s\n\
			4.\tStéroïde\t70 crédits\t%s",

			content,
			(FactionData[id][factionUpgrade][UPGRADE_MARIJUANA] == 1) ? ("{33CC33}Débloqué") : ("{FF0000}Bloqué"),
			(FactionData[id][factionUpgrade][UPGRADE_COCA] == 1) ? ("{33CC33}Débloqué") : ("{FF0000}Bloqué"),
			(FactionData[id][factionUpgrade][UPGRADE_HEROINE] == 1) ? ("{33CC33}Débloqué") : ("{FF0000}Bloqué"),
			(FactionData[id][factionUpgrade][UPGRADE_STEROIDES] == 1) ? ("{33CC33}Débloqué") : ("{FF0000}Bloqué")
		);

		format(title, sizeof(title), "Upgrade faction (%d crédits)", FactionData[ PlayerData[playerid][pFaction] ][factionCredit]);
		Dialog_Show(playerid, DIALOG_FACTION_UPGRADED, DIALOG_STYLE_TABLIST_HEADERS, title, content, "Valider", "Annuler");
	}
	return 1;
}

Dialog:DIALOG_FACTION_UPGRADE(playerid, response, listitem, inputtext[])
{
	if(!response) return 1;

	switch(listitem)
	{
		case 0: ShowDialogFactionUpgrade(playerid, 2);
		case 1: ShowDialogFactionUpgrade(playerid, 1);
	}
	return 1;
}
Dialog:DIALOG_FACTION_UPGRADEW(playerid, response, listitem, inputtext[])
{
	if(!response) return cmd_leader(playerid, "upgrade");
	
	switch(listitem)
	{
	    case UPGRADE_MUNITION:
	    {
			if(FactionData[ PlayerData[playerid][pFaction] ][factionCredit] < 20)
			{
				SendClientMessage(playerid, COLOR_ERROR, "Vous devez avoir 20 crédits pour débloquer cet atout.");
				return ShowDialogFactionUpgrade(playerid, 1);
			}
			
			if(FactionData[ PlayerData[playerid][pFaction] ][factionUpgrade][UPGRADE_MUNITION] == 1)
			{
				SendClientMessage(playerid, COLOR_ERROR, "Vous avez déjà débloqué cet atout.");
				return ShowDialogFactionUpgrade(playerid, 1);
			}
			FactionData[ PlayerData[playerid][pFaction] ][factionUpgrade][UPGRADE_MUNITION] = 1;
			FactionData[ PlayerData[playerid][pFaction] ][factionCredit] -= 20;
			Faction_Save(PlayerData[playerid][pFaction]);

			SendClientMessage(playerid, COLOR_GREEN, "Vous avez débloqué l'atout \"Munition\" en l'échange de 20 crédits faction.");
			ShowDialogFactionUpgrade(playerid, 1);
		}
	    case UPGRADE_COCKTAIL:
	    {
			if(FactionData[ PlayerData[playerid][pFaction] ][factionCredit] < 30)
			{
				SendClientMessage(playerid, COLOR_ERROR, "Vous devez avoir 30 crédits pour débloquer cet atout.");
				return ShowDialogFactionUpgrade(playerid, 1);
			}

			if(FactionData[ PlayerData[playerid][pFaction] ][factionUpgrade][UPGRADE_COCKTAIL] == 1)
			{
				SendClientMessage(playerid, COLOR_ERROR, "Vous avez déjà débloqué cet atout.");
				return ShowDialogFactionUpgrade(playerid, 1);
			}
			FactionData[ PlayerData[playerid][pFaction] ][factionUpgrade][UPGRADE_COCKTAIL] = 1;
			FactionData[ PlayerData[playerid][pFaction] ][factionCredit] -= 30;
			Faction_Save(PlayerData[playerid][pFaction]);

			SendClientMessage(playerid, COLOR_GREEN, "Vous avez débloqué l'atout \"Cocktail Molotov\" en l'échange de 30 crédits faction.");
			ShowDialogFactionUpgrade(playerid, 1);
		}
	    case UPGRADE_SILENCIEUX:
	    {
			if(FactionData[ PlayerData[playerid][pFaction] ][factionCredit] < 70)
			{
				SendClientMessage(playerid, COLOR_ERROR, "Vous devez avoir 70 crédits pour débloquer cet atout.");
				return ShowDialogFactionUpgrade(playerid, 1);
			}

			if(FactionData[ PlayerData[playerid][pFaction] ][factionUpgrade][UPGRADE_SILENCIEUX] == 1)
			{
				SendClientMessage(playerid, COLOR_ERROR, "Vous avez déjà débloqué cet atout.");
				return ShowDialogFactionUpgrade(playerid, 1);
			}
			FactionData[ PlayerData[playerid][pFaction] ][factionUpgrade][UPGRADE_SILENCIEUX] = 1;
			FactionData[ PlayerData[playerid][pFaction] ][factionCredit] -= 70;
			Faction_Save(PlayerData[playerid][pFaction]);

			SendClientMessage(playerid, COLOR_GREEN, "Vous avez débloqué l'atout \"Silencieux\" en l'échange de 70 crédits faction.");
			ShowDialogFactionUpgrade(playerid, 1);
		}
	    case UPGRADE_COLT:
	    {
			if(FactionData[ PlayerData[playerid][pFaction] ][factionCredit] < 100)
			{
				SendClientMessage(playerid, COLOR_ERROR, "Vous devez avoir 100 crédits pour débloquer cet atout.");
				return ShowDialogFactionUpgrade(playerid, 1);
			}

			if(FactionData[ PlayerData[playerid][pFaction] ][factionUpgrade][UPGRADE_COLT] == 1)
			{
				SendClientMessage(playerid, COLOR_ERROR, "Vous avez déjà débloqué cet atout.");
				return ShowDialogFactionUpgrade(playerid, 1);
			}
			FactionData[ PlayerData[playerid][pFaction] ][factionUpgrade][UPGRADE_COLT] = 1;
			FactionData[ PlayerData[playerid][pFaction] ][factionCredit] -= 100;
			Faction_Save(PlayerData[playerid][pFaction]);

			SendClientMessage(playerid, COLOR_GREEN, "Vous avez débloqué l'atout \"Colt-45\" en l'échange de 100 crédits faction.");
			ShowDialogFactionUpgrade(playerid, 1);
		}
	    case UPGRADE_EAGLE:
	    {
			if(FactionData[ PlayerData[playerid][pFaction] ][factionCredit] < 150)
			{
				SendClientMessage(playerid, COLOR_ERROR, "Vous devez avoir 150 crédits pour débloquer cet atout.");
				return ShowDialogFactionUpgrade(playerid, 1);
			}

			if(FactionData[ PlayerData[playerid][pFaction] ][factionUpgrade][UPGRADE_EAGLE] == 1)
			{
				SendClientMessage(playerid, COLOR_ERROR, "Vous avez déjà débloqué cet atout.");
				return ShowDialogFactionUpgrade(playerid, 1);
			}
			FactionData[ PlayerData[playerid][pFaction] ][factionUpgrade][UPGRADE_EAGLE] = 1;
			FactionData[ PlayerData[playerid][pFaction] ][factionCredit] -= 150;
			Faction_Save(PlayerData[playerid][pFaction]);

			SendClientMessage(playerid, COLOR_GREEN, "Vous avez débloqué l'atout \"Desert Eagle\" en l'échange de 150 crédits faction.");
			ShowDialogFactionUpgrade(playerid, 1);
		}
	    case UPGRADE_SHOTGUN:
	    {
			if(FactionData[ PlayerData[playerid][pFaction] ][factionCredit] < 180)
			{
				SendClientMessage(playerid, COLOR_ERROR, "Vous devez avoir 180 crédits pour débloquer cet atout.");
				return ShowDialogFactionUpgrade(playerid, 1);
			}

			if(FactionData[ PlayerData[playerid][pFaction] ][factionUpgrade][UPGRADE_SHOTGUN] == 1)
			{
				SendClientMessage(playerid, COLOR_ERROR, "Vous avez déjà débloqué cet atout.");
				return ShowDialogFactionUpgrade(playerid, 1);
			}
			FactionData[ PlayerData[playerid][pFaction] ][factionUpgrade][UPGRADE_SHOTGUN] = 1;
			FactionData[ PlayerData[playerid][pFaction] ][factionCredit] -= 180;
			Faction_Save(PlayerData[playerid][pFaction]);

			SendClientMessage(playerid, COLOR_GREEN, "Vous avez débloqué l'atout \"Shotgun\" en l'échange de 180 crédits faction.");
			ShowDialogFactionUpgrade(playerid, 1);
		}
	    case UPGRADE_UZI:
	    {
			if(FactionData[ PlayerData[playerid][pFaction] ][factionCredit] < 90)
			{
				SendClientMessage(playerid, COLOR_ERROR, "Vous devez avoir 90 crédits pour débloquer cet atout.");
				return ShowDialogFactionUpgrade(playerid, 1);
			}

			if(FactionData[ PlayerData[playerid][pFaction] ][factionUpgrade][UPGRADE_UZI] == 1)
			{
				SendClientMessage(playerid, COLOR_ERROR, "Vous avez déjà débloqué cet atout.");
				return ShowDialogFactionUpgrade(playerid, 1);
			}
			FactionData[ PlayerData[playerid][pFaction] ][factionUpgrade][UPGRADE_UZI] = 1;
			FactionData[ PlayerData[playerid][pFaction] ][factionCredit] -= 90;
			Faction_Save(PlayerData[playerid][pFaction]);

			SendClientMessage(playerid, COLOR_GREEN, "Vous avez débloqué l'atout \"UZI\" en l'échange de 90 crédits faction.");
			ShowDialogFactionUpgrade(playerid, 1);
		}
	    case UPGRADE_TEC9:
	    {
			if(FactionData[ PlayerData[playerid][pFaction] ][factionCredit] < 90)
			{
				SendClientMessage(playerid, COLOR_ERROR, "Vous devez avoir 90 crédits pour débloquer cet atout.");
				return ShowDialogFactionUpgrade(playerid, 1);
			}

			if(FactionData[ PlayerData[playerid][pFaction] ][factionUpgrade][UPGRADE_TEC9] == 1)
			{
				SendClientMessage(playerid, COLOR_ERROR, "Vous avez déjà débloqué cet atout.");
				return ShowDialogFactionUpgrade(playerid, 1);
			}
			FactionData[ PlayerData[playerid][pFaction] ][factionUpgrade][UPGRADE_TEC9] = 1;
			FactionData[ PlayerData[playerid][pFaction] ][factionCredit] -= 90;
			Faction_Save(PlayerData[playerid][pFaction]);

			SendClientMessage(playerid, COLOR_GREEN, "Vous avez débloqué l'atout \"Tec-9\" en l'échange de 90 crédits faction.");
			ShowDialogFactionUpgrade(playerid, 1);
		}
	    case UPGRADE_MP5:
	    {
			if(FactionData[ PlayerData[playerid][pFaction] ][factionCredit] < 120)
			{
				SendClientMessage(playerid, COLOR_ERROR, "Vous devez avoir 120 crédits pour débloquer cet atout.");
				return ShowDialogFactionUpgrade(playerid, 1);
			}

			if(FactionData[ PlayerData[playerid][pFaction] ][factionUpgrade][UPGRADE_MP5] == 1)
			{
				SendClientMessage(playerid, COLOR_ERROR, "Vous avez déjà débloqué cet atout.");
				return ShowDialogFactionUpgrade(playerid, 1);
			}
			FactionData[ PlayerData[playerid][pFaction] ][factionUpgrade][UPGRADE_MP5] = 1;
			FactionData[ PlayerData[playerid][pFaction] ][factionCredit] -= 120;
			Faction_Save(PlayerData[playerid][pFaction]);

			SendClientMessage(playerid, COLOR_GREEN, "Vous avez débloqué l'atout \"MP5\" en l'échange de 120 crédits faction.");
			ShowDialogFactionUpgrade(playerid, 1);
		}
	    case UPGRADE_AK47:
	    {
			if(FactionData[ PlayerData[playerid][pFaction] ][factionCredit] < 130)
			{
				SendClientMessage(playerid, COLOR_ERROR, "Vous devez avoir 130 crédits pour débloquer cet atout.");
				return ShowDialogFactionUpgrade(playerid, 1);
			}

			if(FactionData[ PlayerData[playerid][pFaction] ][factionUpgrade][UPGRADE_AK47] == 1)
			{
				SendClientMessage(playerid, COLOR_ERROR, "Vous avez déjà débloqué cet atout.");
				return ShowDialogFactionUpgrade(playerid, 1);
			}
			FactionData[ PlayerData[playerid][pFaction] ][factionUpgrade][UPGRADE_AK47] = 1;
			FactionData[ PlayerData[playerid][pFaction] ][factionCredit] -= 130;
			Faction_Save(PlayerData[playerid][pFaction]);

			SendClientMessage(playerid, COLOR_GREEN, "Vous avez débloqué l'atout \"AK-47\" en l'échange de 130 crédits faction.");
			ShowDialogFactionUpgrade(playerid, 1);
		}
	    case UPGRADE_M4:
	    {
			if(FactionData[ PlayerData[playerid][pFaction] ][factionCredit] < 180)
			{
				SendClientMessage(playerid, COLOR_ERROR, "Vous devez avoir 180 crédits pour débloquer cet atout.");
				return ShowDialogFactionUpgrade(playerid, 1);
			}

			if(FactionData[ PlayerData[playerid][pFaction] ][factionUpgrade][UPGRADE_M4] == 1)
			{
				SendClientMessage(playerid, COLOR_ERROR, "Vous avez déjà débloqué cet atout.");
				return ShowDialogFactionUpgrade(playerid, 1);
			}
			FactionData[ PlayerData[playerid][pFaction] ][factionUpgrade][UPGRADE_M4] = 1;
			FactionData[ PlayerData[playerid][pFaction] ][factionCredit] -= 180;
			Faction_Save(PlayerData[playerid][pFaction]);

			SendClientMessage(playerid, COLOR_GREEN, "Vous avez débloqué l'atout \"M4A1\" en l'échange de 180 crédits faction.");
			ShowDialogFactionUpgrade(playerid, 1);
		}
	    case UPGRADE_RIFLE:
	    {
			if(FactionData[ PlayerData[playerid][pFaction] ][factionCredit] < 190)
			{
				SendClientMessage(playerid, COLOR_ERROR, "Vous devez avoir 190 crédits pour débloquer cet atout.");
				return ShowDialogFactionUpgrade(playerid, 1);
			}

			if(FactionData[ PlayerData[playerid][pFaction] ][factionUpgrade][UPGRADE_RIFLE] == 1)
			{
				SendClientMessage(playerid, COLOR_ERROR, "Vous avez déjà débloqué cet atout.");
				return ShowDialogFactionUpgrade(playerid, 1);
			}
			FactionData[ PlayerData[playerid][pFaction] ][factionUpgrade][UPGRADE_RIFLE] = 1;
			FactionData[ PlayerData[playerid][pFaction] ][factionCredit] -= 190;
			Faction_Save(PlayerData[playerid][pFaction]);

			SendClientMessage(playerid, COLOR_GREEN, "Vous avez débloqué l'atout \"Rifle\" en l'échange de 190 crédits faction.");
			ShowDialogFactionUpgrade(playerid, 1);
		}
	    case UPGRADE_SNIPER:
	    {
			if(FactionData[ PlayerData[playerid][pFaction] ][factionCredit] < 200)
			{
				SendClientMessage(playerid, COLOR_ERROR, "Vous devez avoir 200 crédits pour débloquer cet atout.");
				return ShowDialogFactionUpgrade(playerid, 1);
			}

			if(FactionData[ PlayerData[playerid][pFaction] ][factionUpgrade][UPGRADE_SNIPER] == 1)
			{
				SendClientMessage(playerid, COLOR_ERROR, "Vous avez déjà débloqué cet atout.");
				return ShowDialogFactionUpgrade(playerid, 1);
			}
			FactionData[ PlayerData[playerid][pFaction] ][factionUpgrade][UPGRADE_SNIPER] = 1;
			FactionData[ PlayerData[playerid][pFaction] ][factionCredit] -= 200;
			Faction_Save(PlayerData[playerid][pFaction]);

			SendClientMessage(playerid, COLOR_GREEN, "Vous avez débloqué l'atout \"Sniper Rifle\" en l'échange de 200 crédits faction.");
			ShowDialogFactionUpgrade(playerid, 1);
		}
	}
	return 1;
}
Dialog:DIALOG_FACTION_UPGRADED(playerid, response, listitem, inputtext[])
{
	if(!response) return cmd_leader(playerid, "upgrade");
	
	switch(listitem)
	{
	    case 0: // UPGRADE_MARIJUANA
	    {
			if(FactionData[ PlayerData[playerid][pFaction] ][factionCredit] < 40)
			{
				SendClientMessage(playerid, COLOR_ERROR, "Vous devez avoir 40 crédits pour débloquer cet atout.");
				return ShowDialogFactionUpgrade(playerid, 2);
			}

			if(FactionData[ PlayerData[playerid][pFaction] ][factionUpgrade][UPGRADE_MARIJUANA] == 1)
			{
				SendClientMessage(playerid, COLOR_ERROR, "Vous avez déjà débloqué cet atout.");
				return ShowDialogFactionUpgrade(playerid, 2);
			}
			FactionData[ PlayerData[playerid][pFaction] ][factionUpgrade][UPGRADE_MARIJUANA] = 1;
			FactionData[ PlayerData[playerid][pFaction] ][factionCredit] -= 40;
			Faction_Save(PlayerData[playerid][pFaction]);

			SendClientMessage(playerid, COLOR_GREEN, "Vous avez débloqué l'atout \"Graines de Marijuana\" en l'échange de 40 crédits faction.");
			ShowDialogFactionUpgrade(playerid, 2);
		}
	    case 1: // UPGRADE_COCA
	    {
			if(FactionData[ PlayerData[playerid][pFaction] ][factionCredit] < 110)
			{
				SendClientMessage(playerid, COLOR_ERROR, "Vous devez avoir 110 crédits pour débloquer cet atout.");
				return ShowDialogFactionUpgrade(playerid, 2);
			}

			if(FactionData[ PlayerData[playerid][pFaction] ][factionUpgrade][UPGRADE_COCA] == 1)
			{
				SendClientMessage(playerid, COLOR_ERROR, "Vous avez déjà débloqué cet atout.");
				return ShowDialogFactionUpgrade(playerid, 2);
			}
			FactionData[ PlayerData[playerid][pFaction] ][factionUpgrade][UPGRADE_COCA] = 1;
			FactionData[ PlayerData[playerid][pFaction] ][factionCredit] -= 110;
			Faction_Save(PlayerData[playerid][pFaction]);

			SendClientMessage(playerid, COLOR_GREEN, "Vous avez débloqué l'atout \"Coca\" en l'échange de 110 crédits faction.");
			ShowDialogFactionUpgrade(playerid, 2);
		}
	    case 2: // UPGRADE_HEROINE
	    {
			if(FactionData[ PlayerData[playerid][pFaction] ][factionCredit] < 250)
			{
				SendClientMessage(playerid, COLOR_ERROR, "Vous devez avoir 250 crédits pour débloquer cet atout.");
				return ShowDialogFactionUpgrade(playerid, 2);
			}

			if(FactionData[ PlayerData[playerid][pFaction] ][factionUpgrade][UPGRADE_HEROINE] == 1)
			{
				SendClientMessage(playerid, COLOR_ERROR, "Vous avez déjà débloqué cet atout.");
				return ShowDialogFactionUpgrade(playerid, 2);
			}
			FactionData[ PlayerData[playerid][pFaction] ][factionUpgrade][UPGRADE_HEROINE] = 1;
			FactionData[ PlayerData[playerid][pFaction] ][factionCredit] -= 250;
			Faction_Save(PlayerData[playerid][pFaction]);

			SendClientMessage(playerid, COLOR_GREEN, "Vous avez débloqué l'atout \"Heroïne\" en l'échange de 250 crédits faction.");
			ShowDialogFactionUpgrade(playerid, 2);
		}
	    case 3: // UPGRADE_STEROIDES
	    {
			if(FactionData[ PlayerData[playerid][pFaction] ][factionCredit] < 70)
			{
				SendClientMessage(playerid, COLOR_ERROR, "Vous devez avoir 70 crédits pour débloquer cet atout.");
				return ShowDialogFactionUpgrade(playerid, 2);
			}

			if(FactionData[ PlayerData[playerid][pFaction] ][factionUpgrade][UPGRADE_STEROIDES] == 1)
			{
				SendClientMessage(playerid, COLOR_ERROR, "Vous avez déjà débloqué cet atout.");
				return ShowDialogFactionUpgrade(playerid, 2);
			}
			FactionData[ PlayerData[playerid][pFaction] ][factionUpgrade][UPGRADE_STEROIDES] = 1;
			FactionData[ PlayerData[playerid][pFaction] ][factionCredit] -= 70;
			Faction_Save(PlayerData[playerid][pFaction]);

			SendClientMessage(playerid, COLOR_GREEN, "Vous avez débloqué l'atout \"Steroïde\" en l'échange de 70 crédits faction.");
			ShowDialogFactionUpgrade(playerid, 2);
		}
	}
	return 1;
}

Dialog:DIALOG_PLANQUE_DELETE(playerid, response, listitem, inputtext[])
{
	if(!response) return 1;
	if(response)
	{
		new
		    house_id = GetHousePlanque(PlayerData[playerid][pFaction]);

		HouseData[house_id][houseFaction] = -1;
		House_Save(house_id);
		
		SendClientMessageEx(playerid, COLOR_INFO, "Vous avez supprimer la planque de la faction \"%s\".", FactionData[ PlayerData[playerid][pFaction] ][factionName]);
	}
	return 1;
}

stock GetHousePlanque(factionid)
{
	for(new i=0; i<MAX_HOUSES; i++) if(HouseData[i][houseExists])
	{
		if(HouseData[i][houseFaction] == factionid) return i;
	}
	return -1;
}

CMD:gouv(playerid, params[])
{
	if (GetFactionType(playerid) != FACTION_GOV) return SendClientMessageEx(playerid, COLOR_ERROR, "Vous devez être un membre du gouvernement.");

	static nom[24], scmd[128];
	if (sscanf(params, "s[24]S()[128]", nom, scmd))
	{
	    SendClientMessageEx(playerid, COLOR_USAGE, "/gouv <options>");
	    SendClientMessage(playerid, COLOR_USAGE, "OPTIONS: retirer, deposer, permisarme, retirerpermis, annonce");
	    return 1;
	}
	if (!strcmp(nom, "permisarme", true))
	{
		new userid,prix;

		if (sscanf(scmd, "ud", userid,prix))
		{
			SendClientMessageEx(playerid, COLOR_USAGE, "/gouv permisarme <PlayerID/PlayerName> <Prix>");
			return 1;
		}
		if (userid == INVALID_PLAYER_ID || !IsPlayerNearPlayer(playerid, userid, 5.0)) return SendClientMessageEx(playerid, COLOR_ERROR, "Ce joueur n'est pas près de vous ou il n'est pas connecté.");
		if (Inventory_HasItem(userid, "Permis d'arme")) return SendClientMessageEx(playerid, COLOR_ERROR, "Ce joueur possède déjà le permis port d'armes");
		if (prix <= 0 || prix > 20000) return SendClientMessageEx(playerid, COLOR_ERROR, "Le prix de la licence du port d'arme ne peut excéder 20000$.");

		SendClientMessageEx(userid, COLOR_INFO, "Utilisez /accepter permis pour accepter le permis port d'arme, pour la somme de %d$.",prix);

		PaID[userid] = playerid;
		PaPri[userid] = prix;
	}
	if (!strcmp(nom, "retirerpermis", true))
	{
		new userid;
		if (sscanf(scmd, "u", userid))
		{
			SendClientMessageEx(playerid, COLOR_USAGE, "/gouv retirerpermis <PlayerID/PlayerName>");
			return 1;
		}
		if (userid == INVALID_PLAYER_ID || !IsPlayerNearPlayer(playerid, userid, 5.0)) return SendClientMessageEx(playerid, COLOR_ERROR, "Ce joueur n'est pas près de vous où pas connecter.");
		if (userid == playerid) return SendClientMessageEx(playerid, COLOR_ERROR, "Vous ne pouvez pas vous retirer votre propre permis.");
		if (!Inventory_HasItem(userid, "Permis d'arme")) return SendClientMessageEx(playerid, COLOR_ERROR, "Ce joueur n'a pas de permis port d'armes.");

		Inventory_Remove(userid, "Permis d'arme");

		SendClientMessageEx(playerid, COLOR_INFO, "Vous avez retiré le permis port d'armes à %s.", ReturnName(userid, 0));
		SendClientMessageEx(userid, COLOR_INFO, "Votre permis port d'armes a été retiré par %s.", ReturnName(playerid));

		SendNearbyMessage(playerid, 15.0, COLOR_PURPLE, "%s retire le permis port d'armes à %s.", ReturnName(playerid), ReturnName(userid, 0));
	}
	if (!strcmp(nom, "retirer", true))
	{
		static amount;

		if (sscanf(scmd, "d", amount))
		{
			SendClientMessageEx(playerid, COLOR_USAGE, "/gouv retirer <montant> (%s disponible)", FormatNumber(g_TaxVault));
			return 1;
		}

		if (!IsPlayerInCityHall(playerid)) return SendClientMessageEx(playerid, COLOR_ERROR, "Vous devez vous rendre à la mairie afin de pouvoir retirer de l'argent du coffre.");
		if (amount < 1 || amount > g_TaxVault) return SendClientMessageEx(playerid, COLOR_ERROR, "Montant invalide.");
		if (PlayerData[playerid][pFactionRank] < FactionData[PlayerData[playerid][pFaction]][factionRanks] - 1) return SendClientMessageEx(playerid, COLOR_ERROR, "Vous devez avoir le rank %d.", FactionData[PlayerData[playerid][pFaction]][factionRanks] - 1);

		Tax_AddMoney(-amount);

		GiveMoney(playerid, amount);
		SendClientMessageEx(playerid, COLOR_INFO, "Vous avez retiré %s du coffre du gouvernement. (%s disponible).", FormatNumber(amount), FormatNumber(g_TaxVault));

		SendAdminAlert(COLOR_LIGHTRED, "ADMIN: %s a retiré %s du coffre du gouvernement.", ReturnName(playerid), FormatNumber(amount));
		Log_Write("logs/tax_vault.txt", "[%s] %s has withdrawn %s from the treasury.", ReturnDate(), ReturnName(playerid), FormatNumber(amount));
	}
	if (!strcmp(nom, "deposer", true))
	{
		static amount;

		if (sscanf(scmd, "d", amount))
		{
			SendClientMessageEx(playerid, COLOR_USAGE, "/gouv deposer <montant> (%s disponible)", FormatNumber(g_TaxVault));
			return 1;
		}

		if (!IsPlayerInCityHall(playerid)) return SendClientMessageEx(playerid, COLOR_ERROR, "Vous devez vous rendre à la mairie afin de pouvoir retirer de l'argent du coffre.");
		if (amount < 1 || amount > GetMoney(playerid)) return SendClientMessageEx(playerid, COLOR_ERROR, "Montant invalide.");
		if (PlayerData[playerid][pFactionRank] < FactionData[PlayerData[playerid][pFaction]][factionRanks] - 1) return SendClientMessageEx(playerid, COLOR_ERROR, "Vous devez avoir le rank %d.", FactionData[PlayerData[playerid][pFaction]][factionRanks] - 1);

		Tax_AddMoney(amount);

		GiveMoney(playerid, -amount);
		SendClientMessageEx(playerid, COLOR_INFO, "Vous avez déposé %s dans le coffre du Gouvernement (%s disponible).", FormatNumber(amount), FormatNumber(g_TaxVault));

		SendAdminAlert(COLOR_LIGHTRED, "INFO ADMIN: %s a déposé %s dans le coffre du Gouvernement.", ReturnName(playerid), FormatNumber(amount));
		Log_Write("logs/tax_vault.txt", "[%s] %s has deposited %s into the treasury.", ReturnDate(), ReturnName(playerid), FormatNumber(amount));
	}
	if (!strcmp(nom, "annonce", true))
	{
		new text[128];
		if (PlayerData[playerid][pFactionRank] < 5) return SendClientMessageEx(playerid, COLOR_ERROR, "Vous n'avez pas la permission d'utiliser cette commande, il faut être rang 5.");
		if(sscanf(scmd, "s[128]", text))
		{
			SendClientMessageEx(playerid, COLOR_USAGE, "/gouv annonce [Message]");
			return 1;
		}

		if (strlen(text) > 3)
		{
			SendClientMessageToAll(COLOR_WHITE, "|_________ Municipalité de Los Santos _________|");
			SendClientMessageToAllEx(COLOR_BLUE, "%s %s: %s", Faction_GetRank(playerid), ReturnName(playerid), text);
		}
	}
	return 1;
}

Dialog:DIALOG_CADAVRE_INFOS(playerid, response, listitem, inputtext[])
{
	if(!response)
	    return 1;

	switch(listitem)
	{
		case 6:
		{ // VOIR L'INVENTAIRE DU JOUEUR
		
			new
				items[MAX_INVENTORY],
			    amounts[MAX_INVENTORY];

			new
				id = -1;
			
            if ((id = Corpse_Nearest(playerid, 1)) != -1)
            {
                SendClientMessage(playerid, COLOR_INFO, "Ce cadavre ainsi que certaines items de son inventaire ont été brulés.");
                for(new i=0; i<MAX_INVENTORY; i++)
				{
				    if(corpseData_inventory[id][i][invExists])
				    {
						items[i] = corpseData_inventory[id][i][invModel];
						amounts[i] = corpseData_inventory[id][i][invQuantity];
				    }
				    else
				    {
						items[i] = -1;
						amounts[i] = -1;
				    }
				}

				ShowModelSelectionMenu(playerid, "Inventaire du cadavre", MODEL_CADAVRE_INVENTORY, items, sizeof(items), 0.0, 0.0, 0.0, 1.0, -1, true, amounts);
            }
			else SendClientMessageEx(playerid, COLOR_ERROR, "Vous n'êtes pas à proximité d'un cadavre.");
		}
	}
	
	return 1;
}

CMD:cadavre(playerid, params[])
{
	static nom[24], scmd[128];
	if (sscanf(params, "s[24]S()[128]", nom, scmd))
	{
	    SendClientMessageEx(playerid, COLOR_USAGE, "/cadavre <options>");
	    SendClientMessage(playerid, COLOR_USAGE, "OPTIONS: infos, porter, poser, bruler, enterrer");

	    if(PlayerData[playerid][pAdmin] >= 3) SendClientMessage(playerid, COLOR_USAGE, "OPTIONS: deleteall, delete");
	    return 1;
	}
	if (!strcmp(nom, "infos", true))
	{
		static
			id = -1;

		if ((id = Corpse_Nearest(playerid, 1)) != -1)
		{
		    new
		        string[504],
				title[50];

            if(CorpseData[id][corpseFire])
            {
				format(string, sizeof(string), "\
				{7EA0DA}Nom{FFFFFF}\t%s\n\
				{7EA0DA}Date du meurtre{FFFFFF}\t%s\n\
				{7EA0DA}Origine du meurtre{FFFFFF}\t%s",

				CorpseData[id][corpsePlayer],
				CorpseData[id][corpseTimeDeath_format],
				ReturnWeaponName(CorpseData[id][corpseWeapon]));
            }
            else
            {
				format(string, sizeof(string), "\
				{7EA0DA}Nom{FFFFFF}\t%s\n\
				{7EA0DA}Date du meurtre{FFFFFF}\t%s\n\
				{7EA0DA}Origine du meurtre{FFFFFF}\t%s\n\
				{7EA0DA}Argent{FFFFFF}\t%d$\n\
				{7EA0DA}Téléphone{FFFFFF}\t%s\n\
				{7EA0DA}Radio{FFFFFF}\t%s\n\
				{FF0000}> Voir l'inventaire du joueur",

				CorpseData[id][corpsePlayer],
				CorpseData[id][corpseTimeDeath_format],
				ReturnWeaponName(CorpseData[id][corpseWeapon]),
				CorpseData[id][corpseMoney],
				CorpseData[id][corpsePhone],
				CorpseData[id][corpseRadio]);
            }
            


			format(title, sizeof(title), "Cadavre (n°%d)", id);
			Dialog_Show(playerid, DIALOG_CADAVRE_INFOS, DIALOG_STYLE_TABLIST, title, string, "Valider", "Annuler");
		}
		else SendClientMessageEx(playerid, COLOR_ERROR, "Vous n'êtes pas à proximité d'un cadavre.");
	}
	if (!strcmp(nom, "porter", true))
	{
	    if(PlayerData[playerid][pTakeCorpse] != -1) return SendClientMessage(playerid, COLOR_ERROR, "Vous portez déjà un cadavre.");
	    
		static
			id = -1;

		if ((id = Corpse_Nearest(playerid, 1)) != -1)
		{
		    if(CorpseData[id][corpseFire]) return SendClientMessage(playerid, COLOR_ERROR, "Vous ne pouvez pas porter un cadavre en feu, vous allez vous bruler!");
		    
		    PlayerData[playerid][pTakeCorpse] = id;
			SetPlayerAttachedObject(playerid, 9, 2907, 5, 0.1, 0.1, 0.2, 90.0, 0.0, 180.0);
			
			if (IsValidActor(CorpseData[id][corpseObject])) DestroyActor(CorpseData[id][corpseObject]);

			CorpseData[id][corpseUsed] = true;
			
			ApplyAnimation(playerid, "CARRY", "liftup", 4.1, 0, 0, 0, 0, 0, 1);
			SetPlayerSpecialAction(playerid, SPECIAL_ACTION_CARRY);
			
			SendClientMessage(playerid, COLOR_INFO, "Vous portez le cadavre dans vos mains.");

		}
		else SendClientMessageEx(playerid, COLOR_ERROR, "Vous n'êtes pas à proximité d'un cadavre.");
	}
	if (!strcmp(nom, "poser", true))
	{
		new
			id = PlayerData[playerid][pTakeCorpse];

		if (id != -1)
		{
		    if(CorpseData[id][corpseFire]) return SendClientMessage(playerid, COLOR_ERROR, "Vous ne pouvez pas poser un cadavre en feu.");
		    
		    if(IsPlayerAttachedObjectSlotUsed(playerid, 9)) RemovePlayerAttachedObject(playerid, 9);
            PlayerData[playerid][pTakeCorpse] = -1;

			GetPlayerPos(playerid, CorpseData[id][corpsePos][0], CorpseData[id][corpsePos][1], CorpseData[id][corpsePos][2]);
			GetPlayerFacingAngle(playerid, CorpseData[id][corpsePos][3]);
			
			SetPlayerPos(playerid, CorpseData[id][corpsePos][0], CorpseData[id][corpsePos][1]+0.5, CorpseData[id][corpsePos][2]);

			CorpseData[id][corpseUsed] = false;
			
			Corpse_Refresh(id);
			
			ApplyAnimation(playerid, "BOMBER", "BOM_Plant", 4.1, 0, 0, 0, 0, 0, 1);
			SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);

			SendClientMessage(playerid, COLOR_INFO, "Vous posez le cadavre au sol.");
		}
		else SendClientMessageEx(playerid, COLOR_ERROR, "Vous ne portez aucun cadavre.");
	}
	if (!strcmp(nom, "enterrer", true))
	{
		if (GetFactionType(playerid) != FACTION_POLICE) return SendClientMessageEx(playerid, COLOR_ERROR, "Vous devez être un agent du LSPD.");
        if (!IsPlayerInRangeOfPoint(playerid, 30.0, 895.9482, -1102.1849, 24.7103)) return SendClientMessageEx(playerid, COLOR_ERROR, "Vous n'êtes pas au cimetière.");
		if (PlayerData[playerid][pTakeCorpse] == -1) return SendClientMessageEx(playerid, COLOR_ERROR, "Vous n'avez aucun cadavre dans vos mains.");
		if(CorpseData[ PlayerData[playerid][pTakeCorpse] ][corpseFire]) return SendClientMessage(playerid, COLOR_ERROR, "Vous ne pouvez pas enterrer un cadavre en feu, vous allez vous bruler!");

		GiveMoney(playerid, 500);
		Corpse_Delete(PlayerData[playerid][pTakeCorpse]);
		
		if(IsPlayerAttachedObjectSlotUsed(playerid, 9)) RemovePlayerAttachedObject(playerid, 9);
		
		PlayerData[playerid][pTakeCorpse] = -1;

		ApplyAnimation(playerid, "BOMBER", "BOM_Plant", 4.1, 0, 0, 0, 0, 0, 1);
		SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);

		SendClientMessage(playerid, COLOR_INFO, "Vous avez enterrer le cadavre. {FFFFFF}(+500$)");
	}
	if (!strcmp(nom, "bruler", true))
	{
		if (!Inventory_HasItem(playerid, "Briquet")) return SendClientMessageEx(playerid, COLOR_ERROR, "Vous n'avez pas de briquet.");

		static
			id = -1;

		if ((id = Corpse_Nearest(playerid, 1)) != -1)
		{
			if(CorpseData[id][corpseFire]) return SendClientMessage(playerid, COLOR_ERROR, "Ce cadavre est déjà en feu.");

			CorpseData[id][corpseObject_secondary] = CreateObject(18689, CorpseData[id][corpsePos][0], CorpseData[id][corpsePos][1], CorpseData[id][corpsePos][2]-3, CorpseData[id][corpsePos][3], 0.0, 0.0);
			ApplyAnimation(playerid, "BOMBER", "BOM_Plant", 4.1, 0, 0, 0, 0, 0, 1);
			
			new
				random_time = random(20)+20;

			CorpseData[id][corpseFire] = true;
			SetTimerEx("Corpse_Delete", 60000*random_time, false, "i", id);
			
			SendClientMessage(playerid, COLOR_INFO, "Vous mettez en feu le cadavre, il se détruira dans environ 30 minutes.");
			
		}
		else SendClientMessageEx(playerid, COLOR_ERROR, "Vous n'êtes pas à proximité d'un cadavre.");

	}
	if (!strcmp(nom, "delete", true))
	{
		if (PlayerData[playerid][pAdmin] < 3) return SendClientMessageEx(playerid, COLOR_ERROR, "Vous n'avez pas la permission d'utiliser cette commande.");

		static
			id = -1;
			
		if ((id = Corpse_Nearest(playerid)) != -1)
		{
		    Corpse_Delete(id);
		    SendAdminAlert(COLOR_ADMINGROUP, "%s a supprimer le cadavre à proximité de lui (ID: %d).", ReturnName(playerid), id);
		}
		else SendClientMessageEx(playerid, COLOR_ERROR, "Vous n'êtes pas à proximité d'un cadavre.");
	}
	if (!strcmp(nom, "deleteall", true))
	{
		if (PlayerData[playerid][pAdmin] < 3) return SendClientMessageEx(playerid, COLOR_ERROR, "Vous n'avez pas la permission d'utiliser cette commande.");

		new
		    count = 0;
		
		for(new i=0; i<MAX_CORPSE; i++) if(CorpseData[i][corpseExists])
		{
		    count++;
			Corpse_Delete(i);
		}
		if(count == 0) SendClientMessage(playerid, COLOR_ERROR, "Il n'y a aucun cadavre.");
		else SendAdminAlert(COLOR_ADMINGROUP, "%s a supprimer %d cadavres.", ReturnName(playerid), count);
	}
	return 1;
}

CMD:debug_actor(playerid, params[])
{
	new id = -1;
	if ((id = Actor_Nearest(playerid)) != -1)
	{
	    SendClientMessageEx(playerid, -1, "id: %d | actorid: %d | actorBiz: %d", id, ActorData[id][actorID], ActorData[id][actorBiz]);
	}
	return 1;
}

CMD:actor(playerid, params[])
{
    if (PlayerData[playerid][pAdmin] < 5) return SendClientMessageEx(playerid, COLOR_ERROR, "Vous n'avez pas la permission d'utiliser cette commande.");

	static nom[24], scmd[128];
	if (sscanf(params, "s[24]S()[128]", nom, scmd))
	{
	    SendClientMessageEx(playerid, COLOR_USAGE, "/actor <options>");
	    SendClientMessage(playerid, COLOR_USAGE, "OPTIONS: creer, supprimer, edit");
	    return 1;
	}
	if (!strcmp(nom, "creer", true))
	{
		static id = -1;

		id = Actor_Create(playerid);
		if (id == -1) return SendClientMessageEx(playerid, COLOR_ERROR, "Le serveur a atteint sa limite d'actors.");

		new
		    Float:pos[4];

		GetPlayerPos(playerid, pos[0], pos[1], pos[2]);
		GetPlayerFacingAngle(playerid, pos[3]);
		
		pos[0] += 1.5 * floatsin(-pos[3], degrees);
		pos[1] += 1.5 * floatcos(-pos[3], degrees);
		
		SetPlayerPos(playerid, pos[0], pos[1], pos[2]);
		SendClientMessageEx(playerid, COLOR_INFO, "Vous avez créé l'actor ID %d.", id);
	}
	if (!strcmp(nom, "supprimer", true))
	{
		static id = 0;

		if (sscanf(scmd, "d", id))
		{
			SendClientMessageEx(playerid, COLOR_USAGE, "/actor supprimer <ActorID>");
			return 1;
		}

		if ((id < 0 || id >= MAX_ACTORS) || !ActorData[id][actorExists])
		return SendClientMessageEx(playerid, COLOR_ERROR, "L'ID de cet actor n'existe pas.");

		Actor_Delete(id);
		SendClientMessageEx(playerid, COLOR_INFO, "Vous avez supprimé l'actor ID: %d.", id);
	}
	if (!strcmp(nom, "pos", true))
	{
		new
			id = -1;

		if ((id = Actor_Nearest(playerid)) != -1)
		{
			ResetEditing(playerid);
			EditDynamicObject(playerid, ActorData[id][actorObject]);

			PlayerData[playerid][pEditActor] = id;

			SendClientMessageEx(playerid, COLOR_INFO, "Vous modifiez la position de l'actor ID: %d.", id);
		}
		else SendClientMessageEx(playerid, COLOR_ERROR, "Vous n'êtes pas à proximité d'un actor.");
	}
	if (!strcmp(nom, "edit", true))
	{
		static id, type[24], string[128];

		if (sscanf(scmd, "ds[24]S()[128]", id, type, string))
		{
			SendClientMessageEx(playerid, COLOR_USAGE, "/actor edit <ActorID> <options>");
			SendClientMessage(playerid, COLOR_USAGE, "OPTIONS: position, skin, world, description, animation");
			return 1;
		}
		if ((id < 0 || id >= MAX_ACTORS) || !ActorData[id][actorExists]) return SendClientMessageEx(playerid, COLOR_ERROR, "L'ID de cet actor n'existe pas.");

		if (!strcmp(type, "position", true))
		{
			GetPlayerPos(playerid, ActorData[id][actorPos][0], ActorData[id][actorPos][1], ActorData[id][actorPos][2]);
			GetPlayerFacingAngle(playerid, ActorData[id][actorPos][3]);

			ActorData[id][actorWorld] = GetPlayerVirtualWorld(playerid);

			Actor_Refresh(id);
			Actor_Save(id);

			SendAdminAlert(COLOR_ADMINGROUP, "%s a modifié la position de l'actor ID: %d.", ReturnName(playerid), id);
		}
		else if (!strcmp(type, "skin", true))
		{
			new skin;

			if (sscanf(string, "d", skin))
			return SendClientMessageEx(playerid, COLOR_USAGE, "/actor edit <ActorID> skin <SkinID>");

			if (skin < 0 || skin > 311)
			return SendClientMessageEx(playerid, COLOR_ERROR, "Le skin que vous avez entré est incorrect.");

			ActorData[id][actorSkin] = skin;

			Actor_Refresh(id);
			Actor_Save(id);

			SendAdminAlert(COLOR_ADMINGROUP, "%s a changé le skin de l'actor ID: %d à %d.", ReturnName(playerid), id, skin);
		}
		else if (!strcmp(type, "world", true))
		{
			new world;

			if (sscanf(string, "d", world))
			return SendClientMessageEx(playerid, COLOR_USAGE, "/actor edit <ActorID> world <WorldD>");

			if (world < 0)
			return SendClientMessageEx(playerid, COLOR_ERROR, "Le world doit être supérieur ou égal à 1.");

			ActorData[id][actorWorld] = world;

			Actor_Refresh(id);
			Actor_Save(id);

			SendAdminAlert(COLOR_ADMINGROUP, "%s a changé le VirtualWorld de l'actor ID: %d à %d.", ReturnName(playerid), id, world);
		}
		else if (!strcmp(type, "description", true))
		{
			new description[100];

			if (sscanf(string, "s[100]", description))
			{
				SendClientMessageEx(playerid, COLOR_USAGE, "/actor edit <ActorID> description <Text (\"none\" pour supprimer)>");
				SendClientMessageEx(playerid, COLOR_USAGE, "AIDE: Utilisez \"(n)\" pour un retour a la ligne et \"((FFFFFF))\" pour ajouter une couleur.");
				return 1;
			}

			if (!strcmp(description, "none", true)) ActorData[id][actorText][0] = 0;
			else
			{
				strreplace(description, "((", "{", false, 0, -1, 150);
				strreplace(description, "))", "}", false, 0, -1, 150);
				strreplace(description, "(n)", "\n", false, 0, -1, 150);
				format(ActorData[id][actorText], 100, description);
			}
			
			Actor_Refresh(id);
			Actor_Save(id);

			SendAdminAlert(COLOR_ADMINGROUP, "%s a changé la description de l'actor ID: %d à \"%s\".", ReturnName(playerid), id, description);
		}
		else if (!strcmp(type, "animation", true))
		{
		    if (PlayerData[playerid][pAdmin] < 6)
			return SendClientMessageEx(playerid, COLOR_ERROR, "Vous n'avez pas la permission d'utiliser cette commande.");
		    
			PlayerData[playerid][pEditActor] = id;
            Actor_EditAnimation(playerid);
		}
	}
	return 1;
}

stock Actor_EditAnimation(playerid)
{
	new
	    actorid = PlayerData[playerid][pEditActor],
	    title[120],
	    string[500];

	format(title, sizeof(title), "Actor %d - Éditer l'animation", actorid);
	format(string, sizeof(string), "\
	{7EA0DA}Librairie:{FFFFFF} %s\n\
	{7EA0DA}Animation:{FFFFFF} %s\n\
	{7EA0DA}Vitesse:{FFFFFF} %.1f\n\
	{7EA0DA}En boucle:{FFFFFF} %d\n\
	{7EA0DA}LockX:{FFFFFF} %d\n\
	{7EA0DA}LockY:{FFFFFF} %d\n\
	{7EA0DA}Freeze:{FFFFFF} %d\n\
	{7EA0DA}Temps (en ms.):{FFFFFF} %d\n\
	{FF0000}Réinitialiser les paramètres",

	ActorData[actorid][anim_Lib],
	ActorData[actorid][anim_Name],
	ActorData[actorid][anim_Speed],
	ActorData[actorid][anim_Loop],
	ActorData[actorid][anim_LockX],
	ActorData[actorid][anim_LockY],
	ActorData[actorid][anim_Freeze],
	ActorData[actorid][anim_Time]);

	Dialog_Show(playerid, DIALOG_EDITANIM, DIALOG_STYLE_LIST, title, string, "Valider", "Annuler");
	
	Actor_Refresh(actorid);
	Actor_Save(actorid);
	return 1;
}

Dialog:DIALOG_EDITANIM(playerid, response, listitem, inputtext[])
{
	if(!response)
	    return 1;

	new
	    actorid = PlayerData[playerid][pEditActor],
	    title[120];

	switch(listitem)
	{
		case 0:
		{
			format(title, sizeof(title), "Actor %d - Éditer l'animation", actorid);
		    Dialog_Show(playerid, DIALOG_EDITANIM_0, DIALOG_STYLE_INPUT, title, "Entrez le nom de la librairie correspondante à l'animation\nUtilisez \"none\" pour supprimer la librairie actuelle.\n{FC7777}ATTENTION: Un nom de librairie incorrect provoquera le crash de tout les joueurs à proximités de l'actor{FFFFFF}\n\nPlus d'infos: https://wiki.sa-mp.com/wiki/Animations", "Valider", "Annuler");
		}
		case 1:
		{
			format(title, sizeof(title), "Actor %d - Éditer l'animation", actorid);
		    Dialog_Show(playerid, DIALOG_EDITANIM_1, DIALOG_STYLE_INPUT, title, "Entrez le nom de l'animation\nUtilisez \"none\" pour supprimer la librairie actuelle.\n{FC7777}ATTENTION: Un nom d'animation incorrect provoquera le crash de tout les joueurs à proximités de l'actor{FFFFFF}\n\nPlus d'infos: https://wiki.sa-mp.com/wiki/Animations", "Valider", "Annuler");
		}
		case 2:
		{
			format(title, sizeof(title), "Actor %d - Éditer l'animation", actorid);
		    Dialog_Show(playerid, DIALOG_EDITANIM_2, DIALOG_STYLE_INPUT, title, "Entrez la vitesse de l'animation (4.1 par défaut)", "Valider", "Annuler");
		}
		case 3:
		{
			format(title, sizeof(title), "Actor %d - Éditer l'animation", actorid);
		    Dialog_Show(playerid, DIALOG_EDITANIM_3, DIALOG_STYLE_INPUT, title, "Indiquez si l'animation doit être éxécuté en boucle\n0: Non\n1: Oui", "Valider", "Annuler");
		}
		case 4:
		{
			format(title, sizeof(title), "Actor %d - Éditer l'animation", actorid);
		    Dialog_Show(playerid, DIALOG_EDITANIM_4, DIALOG_STYLE_INPUT, title, "Indiquez si l'actor doit revenir à son ancienne position X après l'animation\n0: Non\n1: Oui", "Valider", "Annuler");
		}
		case 5:
		{
			format(title, sizeof(title), "Actor %d - Éditer l'animation", actorid);
		    Dialog_Show(playerid, DIALOG_EDITANIM_5, DIALOG_STYLE_INPUT, title, "Indiquez si l'actor doit revenir à son ancienne position Y après l'animation\n0: Non\n1: Oui", "Valider", "Annuler");
		}
		case 6:
		{
			format(title, sizeof(title), "Actor %d - Éditer l'animation", actorid);
		    Dialog_Show(playerid, DIALOG_EDITANIM_6, DIALOG_STYLE_INPUT, title, "Indiquez si vous désirez freeze l'actor à la fin de l'animation\n0: Non\n1: Oui", "Valider", "Annuler");
		}
		case 7:
		{
			format(title, sizeof(title), "Actor %d - Éditer l'animation", actorid);
		    Dialog_Show(playerid, DIALOG_EDITANIM_7, DIALOG_STYLE_INPUT, title, "Indiquez le où l'animation sera exécuté. Indiquez \"0\" pour exécuté à l'infini.", "Valider", "Annuler");
		}
		case 8:
		{
		    ActorData[actorid][anim_Lib] = EOS;
		    ActorData[actorid][anim_Name] = EOS;
		   // strins(ActorData[actorid][anim_Lib], "", 0);
		   // strins(ActorData[actorid][anim_Name], "", 0);
			ActorData[actorid][anim_Speed] = 4.1;
			ActorData[actorid][anim_Loop] = 1;
			ActorData[actorid][anim_LockX] = 0;
			ActorData[actorid][anim_LockY] = 0;
			ActorData[actorid][anim_Freeze] = 1;
			ActorData[actorid][anim_Time] = 0;
			
			Actor_EditAnimation(playerid);
			
			SendClientMessageEx(playerid, COLOR_INFO, "Vous avez réinitialisé les paramètres d'animation de l'actor ID: %d.", actorid);
		}
	}
	return 1;
}

Dialog:DIALOG_EDITANIM_0(playerid, response, listitem, inputtext[])
{
	if(!response)
	    Actor_EditAnimation(playerid);

	new
	    value[90];

	if(!sscanf(inputtext, "s[90]", value))
	{
		new
	 		actorid = PlayerData[playerid][pEditActor];

		if (!strcmp(value, "none", true)) strins(ActorData[actorid][anim_Lib], "", 0);
		else format(ActorData[actorid][anim_Lib], 50, value);
	}
	return Actor_EditAnimation(playerid);
}

Dialog:DIALOG_EDITANIM_1(playerid, response, listitem, inputtext[])
{
	if(!response)
	    Actor_EditAnimation(playerid);
	    
	new
	    value[90];
	    
	if(!sscanf(inputtext, "s[90]", value))
	{
		new
		    actorid = PlayerData[playerid][pEditActor];

		if (!strcmp(value, "none", true)) strins(ActorData[actorid][anim_Name], "", 0);
		else format(ActorData[actorid][anim_Name], 50, value);
	}
	return Actor_EditAnimation(playerid);
}

Dialog:DIALOG_EDITANIM_2(playerid, response, listitem, inputtext[])
{
	if(!response)
	    Actor_EditAnimation(playerid);

	new
	    Float:value;

	if(!sscanf(inputtext, "f", value))
	{
		new
		    actorid = PlayerData[playerid][pEditActor];

		ActorData[actorid][anim_Speed] = value;
	}
	
	return Actor_EditAnimation(playerid);
}

Dialog:DIALOG_EDITANIM_3(playerid, response, listitem, inputtext[])
{
	if(!response)
	    Actor_EditAnimation(playerid);
	new
	    value;

	if(!sscanf(inputtext, "d", value))
	{
		new
		    actorid = PlayerData[playerid][pEditActor];

		ActorData[actorid][anim_Loop] = value;
	}
	return Actor_EditAnimation(playerid);
}

Dialog:DIALOG_EDITANIM_4(playerid, response, listitem, inputtext[])
{
	if(!response)
	    Actor_EditAnimation(playerid);
	new
	    value;

	if(!sscanf(inputtext, "d", value))
	{
		new
		    actorid = PlayerData[playerid][pEditActor];

		ActorData[actorid][anim_LockX] = value;
	}
	return Actor_EditAnimation(playerid);
}

Dialog:DIALOG_EDITANIM_5(playerid, response, listitem, inputtext[])
{
	if(!response)
	    Actor_EditAnimation(playerid);
	new
	    value;

	if(!sscanf(inputtext, "d", value))
	{
		new
		    actorid = PlayerData[playerid][pEditActor];

		ActorData[actorid][anim_LockY] = value;
	}
	return Actor_EditAnimation(playerid);
}

Dialog:DIALOG_EDITANIM_6(playerid, response, listitem, inputtext[])
{
	if(!response)
	    Actor_EditAnimation(playerid);
	new
	    value;

	if(!sscanf(inputtext, "d", value))
	{
		new
		    actorid = PlayerData[playerid][pEditActor];

		ActorData[actorid][anim_Freeze] = value;
	}
	return Actor_EditAnimation(playerid);
}

Dialog:DIALOG_EDITANIM_7(playerid, response, listitem, inputtext[])
{
	if(!response)
	    Actor_EditAnimation(playerid);
	new
	    value;

	if(!sscanf(inputtext, "d", value))
	{
		new
		    actorid = PlayerData[playerid][pEditActor];

		ActorData[actorid][anim_Time] = value;
	}
	return Actor_EditAnimation(playerid);
}

CMD:poubelle(playerid, params[])
{
    if (PlayerData[playerid][pAdmin] < 5) return SendClientMessageEx(playerid, COLOR_ERROR, "Vous n'avez pas la permission d'utiliser cette commande.");

	static nom[24], scmd[128];
	if (sscanf(params, "s[24]S()[128]", nom, scmd))
	{
	    SendClientMessageEx(playerid, COLOR_USAGE, "/poubelle <options>");
	    SendClientMessage(playerid, COLOR_USAGE, "OPTIONS: creer, supprimer, pos");
	    return 1;
	}
	if (!strcmp(nom, "creer", true))
	{
		static id = -1, type;

		if (sscanf(scmd, "d", type))
		{
			SendClientMessageEx(playerid, COLOR_USAGE, "/poubelle creer <Type>");
			SendClientMessage(playerid, COLOR_USAGE, "TYPE: 1: Dumpster | 2: Trash Can | 3: Petite Trash Can | 4: Trash Can grise");
			return 1;
		}
		if (type < 1 || type > 4) return SendClientMessageEx(playerid, COLOR_ERROR, "Le type doit être comprit entre 1 et 4.");

		id = Garbage_Create(playerid, type);
		if (id == -1) return SendClientMessageEx(playerid, COLOR_ERROR, "Le serveur a atteint sa limite de poubelle.");

		SendClientMessageEx(playerid, COLOR_INFO, "Vous avez créé la poubelle ID %d.", id);
	}
	if (!strcmp(nom, "supprimer", true))
	{
		static id = 0;

		if (sscanf(scmd, "d", id))
		{
			SendClientMessageEx(playerid, COLOR_USAGE, "/poubelle supprimer [garbage id]");
			return 1;
		}

		if ((id < 0 || id >= MAX_GARBAGE_BINS) || !GarbageData[id][garbageExists])
		return SendClientMessageEx(playerid, COLOR_ERROR, "ID Poubelle invalide.");

		Garbage_Delete(id);
		SendClientMessageEx(playerid, COLOR_INFO, "Vous avez supprimé la poubelle ID: %d.", id);
	}
	if (!strcmp(nom, "pos", true))
	{
		new
			id = -1;

		if ((id = Garbage_Nearest(playerid)) != -1)
		{
			ResetEditing(playerid);
			EditDynamicObject(playerid, GarbageData[id][garbageObject]);

			PlayerData[playerid][pEditGarbage] = id;

			SendClientMessageEx(playerid, COLOR_INFO, "Vous modifiez la position de la poubelle ID: %d.", id);
		}
		else SendClientMessageEx(playerid, COLOR_ERROR, "Vous n'êtes pas à proximité d'une poubelle.");
	}
	return 1;
}

CMD:camera(playerid, params[])
{
    if (PlayerData[playerid][pAdmin] < 5) return SendClientMessageEx(playerid, COLOR_ERROR, "Vous n'avez pas la permission d'utiliser cette commande.");

	static nom[24], scmd[128];
	if (sscanf(params, "s[24]S()[128]", nom, scmd))
	{
	    SendClientMessageEx(playerid, COLOR_USAGE, "/camera <options>");
	    SendClientMessage(playerid, COLOR_USAGE, "OPTIONS: creer, supprimer, pos");
	    return 1;
	}
	if (!strcmp(nom, "creer", true))
	{
		static id = -1, localisation[24];

		if (sscanf(scmd, "s[24]", localisation))
		{
			SendClientMessageEx(playerid, COLOR_USAGE, "/camera creer <Localisation>");
			return 1;
		}

		id = Camera_Create(playerid, localisation);
		if (id == -1) return SendClientMessageEx(playerid, COLOR_ERROR, "Le serveur a atteint sa limite de caméra.");

		SendClientMessageEx(playerid, COLOR_INFO, "Vous avez créé la caméra ID %d.", id);
	}
	if (!strcmp(nom, "supprimer", true))
	{
		static id = 0;

		if (sscanf(scmd, "d", id))
		{
			SendClientMessageEx(playerid, COLOR_USAGE, "/camera supprimer <CameraID>");
			return 1;
		}

		if ((id < 0 || id >= MAX_CAMERAS) || !CameraData[id][cameraExists])
		return SendClientMessageEx(playerid, COLOR_ERROR, "L'ID de la caméra est invalide.");

		Camera_Delete(id);
		SendClientMessageEx(playerid, COLOR_INFO, "Vous avez supprimé la caméra ID: %d.", id);
	}
	if (!strcmp(nom, "pos", true))
	{
		static id = 0;

		if (sscanf(scmd, "d", id))
		{
			SendClientMessageEx(playerid, COLOR_USAGE, "/camera pos <CameraID>");
			return 1;
		}

		if ((id < 0 || id >= MAX_CAMERAS) || !CameraData[id][cameraExists])
		return SendClientMessageEx(playerid, COLOR_ERROR, "L'ID de la caméra est invalide.");

		SetPVarInt(playerid, "CAMERA_EDIT_POS", id);

		new
			title[50];

		format(title, sizeof(title), "Position de la caméra (#%d)", id);
		Dialog_Show(playerid, CAMERA_EDIT_POS, DIALOG_STYLE_LIST, title, "- Modifier l'objet principale\n- Modifier l'angle de vue", "Valider", "Annuler");
	}
	return 1;
}

Dialog:CAMERA_EDIT_POS(playerid, response, listitem, inputtext[])
{
	if(!response)
	    return 1;

	new
	    cameraid = GetPVarInt(playerid, "CAMERA_EDIT_POS");
	    
	switch(listitem)
	{
		case 0:
		{
			ResetEditing(playerid);
			EditDynamicObject(playerid, CameraData[cameraid][cameraObject]);

			PlayerData[playerid][pEditCamera] = cameraid;

			SendClientMessageEx(playerid, COLOR_INFO, "Vous modifiez la position de la caméra ID: %d.", cameraid);
		}
		case 1:
		{
			GetPlayerPos(playerid, CameraData[cameraid][cameraPos][3], CameraData[cameraid][cameraPos][4], CameraData[cameraid][cameraPos][5]);
			SendClientMessageEx(playerid, COLOR_INFO, "Vous avez modifié l'angle de vision de la caméra ID: %d.", cameraid);
		}
	}
	
	return 1;
}

CMD:gym(playerid, params[])
{
    if (PlayerData[playerid][pAdmin] < 5) return SendClientMessageEx(playerid, COLOR_ERROR, "Vous n'avez pas la permission d'utiliser cette commande.");

	static nom[24], scmd[128];
	if (sscanf(params, "s[24]S()[128]", nom, scmd))
	{
	    SendClientMessageEx(playerid, COLOR_USAGE, "/gym <options>");
	    SendClientMessage(playerid, COLOR_USAGE, "OPTIONS: creer, supprimer, pos");
	    return 1;
	}
	if (!strcmp(nom, "creer", true))
	{
		static id = -1, type;

		if (sscanf(scmd, "d", type))
		{
			SendClientMessageEx(playerid, COLOR_USAGE, "/gym creer <Type>");
			SendClientMessage(playerid, COLOR_USAGE, "TYPE: 1: Vélo | 2: Banc | 3: Tapis de course | 4: Altères");
			return 1;
		}
		if (type < 1 || type > 4) return SendClientMessageEx(playerid, COLOR_ERROR, "Le type doit être comprit entre 1 et 4.");

		id = Gym_Create(playerid, type);
		if (id == -1) return SendClientMessageEx(playerid, COLOR_ERROR, "Le serveur a atteint sa limite de machine de musculation.");

		SendClientMessageEx(playerid, COLOR_INFO, "Vous avez créé la machine de musculation ID %d.", id);
	}
	if (!strcmp(nom, "supprimer", true))
	{
		static id = 0;

		if (sscanf(scmd, "d", id))
		{
			SendClientMessageEx(playerid, COLOR_USAGE, "/gym supprimer <GymID>");
			return 1;
		}

		if ((id < 0 || id >= MAX_GYM) || !GymData[id][gymExists])
		return SendClientMessageEx(playerid, COLOR_ERROR, "L'ID de la machine de musculation entré est incorrect.");

		Gym_Delete(id);
		SendClientMessageEx(playerid, COLOR_INFO, "Vous avez supprimé la machine de musculation ID: %d.", id);
	}
	if (!strcmp(nom, "pos", true))
	{
		static id = 0;

		if (sscanf(scmd, "d", id))
		{
			SendClientMessageEx(playerid, COLOR_USAGE, "/gym pos <GymID>");
			return 1;
		}

		if ((id < 0 || id >= MAX_GYM) || !GymData[id][gymExists])
		return SendClientMessageEx(playerid, COLOR_ERROR, "L'ID de la machine de musculation entré est incorrect.");

		SetPVarInt(playerid, "GYM_EDIT_POS", id);
		
		new
			title[50];
			
		format(title, sizeof(title), "Machine de musculation (#%d)", id);
		Dialog_Show(playerid, GYM_EDIT_POS, DIALOG_STYLE_LIST, title, "- Modifier l'objet principale\n- Modifier l'objet secondaire\n- Modifier la position pour l'utilisateur", "Valider", "Annuler");
	}
	return 1;
}

Dialog:GYM_EDIT_POS(playerid, response, listitem, inputtext[])
{
	if(!response) return 1;
	
	new
		id = GetPVarInt(playerid, "GYM_EDIT_POS");
		
	switch(listitem)
	{
		case 0:
		{
			ResetEditing(playerid);
			EditDynamicObject(playerid, GymData[id][gymObject_1]);

			PlayerData[playerid][pEditGym_1] = id;

			SendClientMessageEx(playerid, COLOR_INFO, "Vous modifiez la position de la machine de musculation ID: %d.", id);
		}
		case 1:
		{
		    if(GymData[id][gymType] != GYM_BENCH && GymData[id][gymType] != GYM_DUMB)
			{
				new
					title[50];

				format(title, sizeof(title), "Machine de musculation (#%d)", id);
				Dialog_Show(playerid, GYM_EDIT_POS, DIALOG_STYLE_LIST, title, "- Modifier l'objet principale\n- Modifier l'objet secondaire\n- Modifier la position pour l'utilisateur", "Valider", "Annuler");
				
				SendClientMessage(playerid, COLOR_ERROR, "L'objet secondaire est disponible sur les machines de type Banc(2) et Altères(4).");
				return 1;
			}
			
			ResetEditing(playerid);
			EditDynamicObject(playerid, GymData[id][gymObject_2]);

			PlayerData[playerid][pEditGym_2] = id;

			SendClientMessageEx(playerid, COLOR_INFO, "Vous modifiez la position de la machine de musculation (2) ID: %d.", id);
		}
		case 2:
		{
			GetPlayerPos(playerid, GymData[id][gymPlayerPos][0], GymData[id][gymPlayerPos][1], GymData[id][gymPlayerPos][2]);
			GetPlayerFacingAngle(playerid, GymData[id][gymPlayerPos][3]);

			Gym_Save(id);
			SendClientMessageEx(playerid, COLOR_INFO, "Vous modifiez la position du joueur sur la machine de musculation ID: %d.", id);
		}
	}
	
	DeletePVar(playerid, "GYM_EDIT_POS");
	return 1;
}

CMD:pickup(playerid, params[])
{
    if (PlayerData[playerid][pAdmin] < 5) return SendClientMessageEx(playerid, COLOR_ERROR, "Vous n'avez pas la permission d'utiliser cette commande.");

	static nom[24], scmd[128];
	if (sscanf(params, "s[24]S()[128]", nom, scmd))
	{
	    SendClientMessageEx(playerid, COLOR_USAGE, "/pickup <options>");
	    SendClientMessage(playerid, COLOR_USAGE, "OPTIONS: creer, supprimer, pos");
	    return 1;
	}
	if (!strcmp(nom, "creer", true))
	{
		static id = -1, pickupid, Float:range, text[150];

		if (sscanf(scmd, "dfs[150]", pickupid, range, text))
		{
			SendClientMessageEx(playerid, COLOR_USAGE, "/pickup creer <ModelPickupID> <Range (défaut: 15)> <Texte>");
			SendClientMessageEx(playerid, COLOR_USAGE, "Plus d'informations sur{FFFFFF} https://wiki.sa-mp.com/wiki/Pickup_IDs");
			return 1;
		}

		id = Pickup_Create(playerid, pickupid, range, text);
		if (id == -1) return SendClientMessageEx(playerid, COLOR_ERROR, "Le serveur a atteint sa limite de pickup.");

		SendClientMessageEx(playerid, COLOR_INFO, "Vous avez créé le pickup ID %d.", id);
	}
	if (!strcmp(nom, "supprimer", true))
	{
		static id = 0;

		if (sscanf(scmd, "d", id))
		{
			SendClientMessageEx(playerid, COLOR_USAGE, "/pickup supprimer <PickupID>");
			return 1;
		}

		if ((id < 0 || id >= MAX_DYNAMICS_PICKUPS) || !PickupData[id][pickupExists])
		return SendClientMessageEx(playerid, COLOR_ERROR, "L'ID du pickup est invalide.");

		Pickup_Delete(id);
		SendClientMessageEx(playerid, COLOR_INFO, "Vous avez supprimé le pickup ID: %d.", id);
	}
	if (!strcmp(nom, "pos", true))
	{
		new
			id = -1;

		if ((id = Pickup_Nearest(playerid)) != -1)
		{
			GetPlayerPos(playerid, PickupData[id][pickupPos][0], PickupData[id][pickupPos][1], PickupData[id][pickupPos][2]);
			PickupData[id][pickupInterior] = GetPlayerInterior(playerid);
			PickupData[id][pickupWorld] = GetPlayerVirtualWorld(playerid);
			
			Pickup_Refresh(id);
			SendClientMessageEx(playerid, COLOR_INFO, "Vous modifiez la position du pickup ID: %d.", id);
		}
		else SendClientMessageEx(playerid, COLOR_ERROR, "Vous n'êtes pas à proximité d'un pickup.");
	}
	return 1;
}


Dialog:DIALOG_CREATE_SIGN(playerid, response, listitem, inputtext[])
{
	if(!response) return 1;

	static
		modelid;


	sscanf(inputtext, "d", modelid);
	
	new
	    Float:pos[4],
		id = -1;

	GetPlayerPos(playerid, pos[0], pos[1], pos[2]);
	GetPlayerFacingAngle(playerid, pos[3]);

	id = Sign_Create(modelid, pos[0], pos[1], pos[2], pos[3]);
	if (id == -1) return SendClientMessageEx(playerid, COLOR_ERROR, "Le serveur a atteint sa limite de panneau.");

	//SetPlayerPos(playerid, pos[0], pos[1]+1, pos[2]);
	SendClientMessageEx(playerid, COLOR_INFO, "Vous avez créé le panneau ID %d (ModelID: %d).", id, modelid);
	return 1;
}
CMD:panneau(playerid, params[])
{
    if (PlayerData[playerid][pAdmin] < 5) return SendClientMessageEx(playerid, COLOR_ERROR, "Vous n'avez pas la permission d'utiliser cette commande.");

	static nom[24], scmd[128];
	if (sscanf(params, "s[24]S()[128]", nom, scmd))
	{
	    SendClientMessageEx(playerid, COLOR_USAGE, "/panneau <options>");
	    SendClientMessage(playerid, COLOR_USAGE, "OPTIONS: creer, supprimer, pos");
	    return 1;
	}
	if (!strcmp(nom, "creer", true))
	{
	    new
	        string[2500];
	        
		format(string, sizeof(string), "Model\tDescription\n\
		19955\tObligation de tourner à gauche\n\
		19957\tObligation de continuer tout droit\n\
		19967\tSens interdit; ne pas entrer\n\
		19982\tVitesse limité à 5\n\
		19983\tVitesse limité à 10\n\
		19984\tVitesse limité à 15\n\
		19985\tVitesse limité à 20\n\
		19986\tVitesse limité à 25\n\
		19987\tVitesse limité à 30\n");
		
		format(string, sizeof(string), "%s\
		19988\tVitesse limité à 35\n\
		19989\tVitesse limité à 40\n\
		19990\tVitesse limité à 45\n\
		19991\tVitesse limité à 50\n\
		19992\tVitesse limité à 55\n\
		19976\tCédez le passage\n", string);
		
		format(string, sizeof(string), "%s\
		19951\tVirage serré à gauche\n\
		19953\tVirage très serré à gauche\n\
		19952\tVirage serré à droite\n\
		19954\tVirage très serré à droite\n\
		19978\tInterdiction de stationnez, remorquage\n\
		19979\tRadar à proximité\n\
		19975\tZone de chantier\n", string);
		
		format(string, sizeof(string), "%s\
		19972\tRoute fermé\n\
		19966\tSTOP\n\
		11700\tZone dangereuse\n\
		19964\tApproche d'un feu tricolore\n\
		19963\tRue sans débouchée (cul-de-sac)\n\
		19948\tInterdiction de faire demi-tour", string);
		
	    Dialog_Show(playerid, DIALOG_CREATE_SIGN, DIALOG_STYLE_TABLIST_HEADERS, "Création d'un panneau", string, "Valider", "Annuler");

	
	}
	if (!strcmp(nom, "creer2", true))
	{
		static id = -1, model;

		if (sscanf(scmd, "d", model))
		{
			SendClientMessageEx(playerid, COLOR_USAGE, "/panneau creer2 <ModelID>");
			return 1;
		}
		if (model < 19940 || model > 20000) return SendClientMessageEx(playerid, COLOR_ERROR, "Cet objet n'est pas un panneau.");

		new
		    Float:pos[4];

		GetPlayerPos(playerid, pos[0], pos[1], pos[2]);
		GetPlayerFacingAngle(playerid, pos[3]);
		
		id = Sign_Create(model, pos[0], pos[1], pos[2], pos[3]);
		if (id == -1) return SendClientMessageEx(playerid, COLOR_ERROR, "Le serveur a atteint sa limite de panneau.");

		//SetPlayerPos(playerid, pos[0], pos[1]+1, pos[2]);
		SendClientMessageEx(playerid, COLOR_INFO, "Vous avez créé le panneau ID %d.", id);
	}
	if (!strcmp(nom, "supprimer", true))
	{
		static id = 0;

		if (sscanf(scmd, "d", id))
		{
			SendClientMessageEx(playerid, COLOR_USAGE, "/panneau supprimer [garbage id]");
			return 1;
		}

		if ((id < 0 || id >= MAX_SIGNS) || !SignData[id][signExists])
		return SendClientMessageEx(playerid, COLOR_ERROR, "L'ID du panneau est invalide.");

		Sign_Delete(id);
		SendClientMessageEx(playerid, COLOR_INFO, "Vous avez supprimé le panneau ID: %d.", id);
	}
	if (!strcmp(nom, "pos", true))
	{
		new
			id = -1;

		if ((id = Sign_Nearest(playerid)) != -1)
		{
			ResetEditing(playerid);
			EditDynamicObject(playerid, SignData[id][signObject]);

			PlayerData[playerid][pEditSign] = id;

			SendClientMessageEx(playerid, COLOR_INFO, "Vous modifiez la position du panneau ID: %d.", id);
		}
		else SendClientMessageEx(playerid, COLOR_ERROR, "Vous n'êtes pas à proximité d'un panneau.");
	}
	return 1;
}

CMD:sannews(playerid, params[])
{
    if (GetFactionType(playerid) != FACTION_NEWS)
		return SendClientMessageEx(playerid, COLOR_ERROR, "Vous ne faites pas partit du San News.");

	static
		nom[24],
		scmd[128];

	if (sscanf(params, "s[24]S()[128]", nom, scmd))
	{
	    SendClientMessageEx(playerid, COLOR_USAGE, "/sannews <options>");
	    SendClientMessage(playerid, COLOR_USAGE, "OPTIONS: emission, bc, badge, inviter, retirer");
	    return 1;
	}
	if (!strcmp(nom, "retirer", true))
	{
		static
		userid;

		if (sscanf(scmd, "u", userid))
		return SendClientMessageEx(playerid, COLOR_USAGE, "/sannews retirer <PlayerID/PlayerName>");

		if (!PlayerData[playerid][pBroadcast])
		return SendClientMessageEx(playerid, COLOR_ERROR, "Vous devez être en diffusion de ratio pour utiliser cette commande.");

		if (userid == INVALID_PLAYER_ID || !IsPlayerNearPlayer(playerid, userid, 5.0))
		return SendClientMessageEx(playerid, COLOR_ERROR, "Ce joueur n'est pas près de vous.");

		if (userid == playerid)
		return SendClientMessageEx(playerid, COLOR_ERROR, "Vous ne pouvez pas vous retirer en tant qu'invité.");

		if (PlayerData[userid][pNewsGuest] != playerid)
		return SendClientMessageEx(playerid, COLOR_ERROR, "Ce joueur n'est pas un invité dans votre émission.");

		PlayerData[userid][pNewsGuest] = INVALID_PLAYER_ID;

		SendClientMessageEx(playerid, COLOR_INFO, "Vous avez retiré %s de votre émission.", ReturnName(userid, 0));
		SendClientMessageEx(userid, COLOR_INFO, "%s vous a retiré de l'émission.", ReturnName(userid, 0));
	}
	if (!strcmp(nom, "inviter", true))
	{
		static
		userid;

		if (!IsNewsVehicle(GetPlayerVehicleID(playerid)))
		return SendClientMessageEx(playerid, COLOR_ERROR, "Vous devez être dans une des camionette du san news.");

		if (sscanf(scmd, "u", userid))
		return SendClientMessageEx(playerid, COLOR_USAGE, "/sannews inviter <PlayerID/PlayerName>");

		if (!PlayerData[playerid][pBroadcast])
		return SendClientMessageEx(playerid, COLOR_ERROR, "Vous devez crée une emission dabord.");

		if (userid == INVALID_PLAYER_ID || !IsPlayerNearPlayer(playerid, userid, 5.0))
		return SendClientMessageEx(playerid, COLOR_ERROR, "Ce joueur n'est pas près de vous.");

		if (userid == playerid)
		return SendClientMessageEx(playerid, COLOR_ERROR, "Vous ne pouvez pas vous invitez vous même.");

		if (PlayerData[userid][pNewsGuest] == playerid)
		return SendClientMessageEx(playerid, COLOR_ERROR, "Ce joueur est déjà invité dans l'émission.");

		if (PlayerData[userid][pNewsGuest] != INVALID_PLAYER_ID)
		return SendClientMessageEx(playerid, COLOR_ERROR, "Ce joueur est déjà invité dans une autre émission.");

		PlayerData[userid][pNewsGuest] = playerid;

		SendClientMessageEx(playerid, COLOR_INFO, "Vous avez ajouté %s comme un invité.", ReturnName(userid, 0));
		SendClientMessageEx(userid, COLOR_INFO, "%s a été ajouté en tant qu'invité.", ReturnName(userid, 0));
	}
	if (!strcmp(nom, "badge", true))
	{
		static
		userid;

		if (sscanf(scmd, "u", userid))
		return SendClientMessageEx(playerid, COLOR_USAGE, "/sannews badge <PlayerID/PlayerName>");

		if (userid == INVALID_PLAYER_ID || !IsPlayerNearPlayer(playerid, userid, 5.0))
		return SendClientMessageEx(playerid, COLOR_ERROR, "Ce joueur n'est pas près de vous.");

		SendClientMessageEx(playerid, COLOR_INFO, "Vous avez montrer votre badge à %s.", ReturnName(userid, 0));
		SendClientMessageEx(userid, COLOR_WHITE, "%s vous montre son badge.", ReturnName(playerid));
		SendClientMessageEx(userid, COLOR_WHITE, "Nom: {C4E5FF}%s", ReturnName(playerid));
		SendClientMessageEx(userid, COLOR_WHITE, "Journaliste: {C4E5FF}San News.", ReturnName(playerid));
	}
	if (!strcmp(nom, "bc", true))
	{
		if (isnull(params))
		return SendClientMessageEx(playerid, COLOR_USAGE, "/bc <texte>");

		if (!IsNewsVehicle(GetPlayerVehicleID(playerid)))
		return SendClientMessageEx(playerid, COLOR_ERROR, "Vous devez être dans une des camionette du san news.");

		if (!PlayerData[playerid][pBroadcast])
		return SendClientMessageEx(playerid, COLOR_ERROR, "Vous devez être diffusion de ratio pour d'utiliser cette commande.");

		if (strlen(params) > 64) {
			foreach (new i : Player) if (!PlayerData[i][pDisableBC]) {
				SendClientMessageEx(i, COLOR_LIGHTGREEN, "[NEWS] Journaliste %s: %.64s", ReturnName(playerid), params);
				SendClientMessageEx(i, COLOR_LIGHTGREEN, "...%s", params[64]);
			}
		}
		else {
			foreach (new i : Player) if (!PlayerData[i][pDisableBC]) {
				SendClientMessageEx(i, COLOR_LIGHTGREEN, "[NEWS] Journaliste %s: %s", ReturnName(playerid), params);
			}
		}
	}
	if (!strcmp(nom, "emission", true))
	{
		//if (!IsNewsVehicle(GetPlayerVehicleID(playerid)))
		//return SendClientMessageEx(playerid, COLOR_ERROR, "Vous devez être dans une des camionette du san news.");

		if (!PlayerData[playerid][pBroadcast])
		{
			PlayerData[playerid][pBroadcast] = true;

			SendNearbyMessage(playerid, 15.0, COLOR_PURPLE, "%s a lancé une émission.", ReturnName(playerid));
			SendClientMessageEx(playerid, COLOR_INFO, "Vous avez commencé une émission (utilisez \"/bc <texte>\" pour difuser l'émission.).");
		}
		else
		{
			PlayerData[playerid][pBroadcast] = false;

			foreach (new i : Player) if (PlayerData[i][pNewsGuest] == playerid) {
				PlayerData[i][pNewsGuest] = INVALID_PLAYER_ID;
			}
			SendNearbyMessage(playerid, 15.0, COLOR_PURPLE, "* %s a stoppé l'émission.", ReturnName(playerid));
			SendClientMessageEx(playerid, COLOR_INFO, "Vous avez arrêté l'émission.");
		}
	}
	return 1;
}

CMD:detecteur(playerid, params[])
{
    if (PlayerData[playerid][pAdmin] < 5) return SendClientMessageEx(playerid, COLOR_ERROR, "Vous n'avez pas la permission d'utiliser cette commande.");

	static nom[24], scmd[128];
	if (sscanf(params, "s[24]S()[128]", nom, scmd))
	{
	    SendClientMessageEx(playerid, COLOR_USAGE, "/detecteur <options>");
	    SendClientMessage(playerid, COLOR_USAGE, "OPTIONS: creer, supprimer, pos");
	    return 1;
	}
	if (!strcmp(nom, "creer", true))
	{
		static query[255];

		for (new i = 0; i < MAX_METAL_DETECTORS; i ++) if (!MetalDetectors[i][detectorExists])
		{
			MetalDetectors[i][detectorExists] = 1;
			MetalDetectors[i][detectorInterior] = GetPlayerInterior(playerid);
			MetalDetectors[i][detectorWorld] = GetPlayerVirtualWorld(playerid);

			GetPlayerPos(playerid, MetalDetectors[i][detectorPos][0], MetalDetectors[i][detectorPos][1], MetalDetectors[i][detectorPos][2]);
			GetPlayerFacingAngle(playerid, MetalDetectors[i][detectorPos][3]);

			format(query, sizeof(query), "INSERT INTO `detectors` (`detectorX`, `detectorY`, `detectorZ`, `detectorAngle`, `detectorInterior`, `detectorWorld`) VALUES('%.4f', '%.4f', '%.4f', '%.4f', '%d', '%d')", MetalDetectors[i][detectorPos][0], MetalDetectors[i][detectorPos][1], MetalDetectors[i][detectorPos][2], MetalDetectors[i][detectorPos][3], MetalDetectors[i][detectorInterior], MetalDetectors[i][detectorWorld]);
			mysql_function_query(g_iHandle, query, false, "OnDetectorCreated", "d", i);

			Detector_Refresh(i);
			SendClientMessageEx(playerid, COLOR_INFO, "Vous avez créé le détecteur de métaux ID %d.", i);
			return 1;
		}
		SendClientMessageEx(playerid, COLOR_ERROR, "Le serveur a atteint sa limite de détecteur.");
	}
	if (!strcmp(nom, "supprimer", true))
	{
		static id = 0;

		if (sscanf(scmd, "d", id))
		{
			SendClientMessageEx(playerid, COLOR_USAGE, "/detecteur supprimer <DetectorID>");
			return 1;
		}

		if ((id < 0 || id >= MAX_METAL_DETECTORS) || !MetalDetectors[id][detectorExists])
		return SendClientMessageEx(playerid, COLOR_ERROR, "Mauvais détecteur ID.");

		Detector_Delete(id);
		SendClientMessageEx(playerid, COLOR_INFO, "Vous avez supprimé le détecteur ID: %d.", id);
	}
	return 1;
}

CMD:speed(playerid, params[])
{
    if (PlayerData[playerid][pAdmin] < 5) return SendClientMessageEx(playerid, COLOR_ERROR, "Vous n'avez pas la permission d'utiliser cette commande.");

	static nom[24], scmd[128];
	if (sscanf(params, "s[24]S()[128]", nom, scmd))
	{
	    SendClientMessageEx(playerid, COLOR_USAGE, "/speed <options>");
	    SendClientMessage(playerid, COLOR_USAGE, "OPTIONS: creer, supprimer, pos");
	    return 1;
	}
	if (!strcmp(nom, "creer", true))
	{
		static Float:limit, Float:range;

		if (sscanf(scmd, "ff", limit, range))
		{
			SendClientMessageEx(playerid, COLOR_USAGE, "/speed creer <VitesseLimite> <Range> (défaut range: 30)");
			return 1;
		}

		if (limit < 5.0 || limit > 150.0) return SendClientMessageEx(playerid, COLOR_ERROR, "Vitesse: minimum: 5 | maximum: 150.");
		if (range < 5.0 || range > 50.0) return SendClientMessageEx(playerid, COLOR_ERROR, "Portée: minimum: 5 | maximum: 50.");
		if (Speed_Nearest(playerid) != -1) return SendClientMessageEx(playerid, COLOR_ERROR, "Un autre radar exerce son activité dans ce secteur.");

		new id = Speed_Create(playerid, limit, range);
		if (id == -1) return SendClientMessageEx(playerid, COLOR_ERROR, "Le serveur a atteint sa limite de radar.");

		SendClientMessageEx(playerid, COLOR_INFO, "Vous avez créé le radar %d.", id);
	}
	if (!strcmp(nom, "supprimer", true))
	{
		static
			id = 0;

		if (sscanf(scmd, "d", id))
		{
			SendClientMessageEx(playerid, COLOR_USAGE, "/speed supprimer <SpeedID>");
			return 1;
		}

		if ((id < 0 || id >= MAX_SPEED_CAMERAS) || !SpeedData[id][speedExists]) return SendClientMessageEx(playerid, COLOR_ERROR, "L'ID du radar est incorrecte.");

		Speed_Delete(id);
		SendClientMessageEx(playerid, COLOR_INFO, "Le radar ID %d a été détruit.", id);
	}
	if (!strcmp(nom, "pos", true))
	{
		new
			id = -1;

		if ((id = Speed_Nearest(playerid)) != -1)
		{
			ResetEditing(playerid);
			EditDynamicObject(playerid, SpeedData[id][speedObject]);

			PlayerData[playerid][pEditSpeed] = id;

			SendClientMessageEx(playerid, COLOR_INFO, "Vous modifiez la position du radar ID: %d.", id);
		}
		else SendClientMessageEx(playerid, COLOR_ERROR, "Vous n'êtes pas à proximité d'un radar.");
	}
	return 1;
}

CMD:etagere(playerid, params[])
{
	new id = Rack_Nearest(playerid);
	if (id == -1) return SendClientMessageEx(playerid, COLOR_ERROR, "Vous n'êtes pas à porter d'une étagère.");
	if (GetFactionType(playerid) == FACTION_POLICE) return SendClientMessageEx(playerid, COLOR_ERROR, "Vous ne pouvez pas poser en étant en LSPD.");

	Rack_ShowGuns(playerid, id);
	return 1;
}

CMD:rack(playerid, params[])
{
    if (PlayerData[playerid][pAdmin] < 5) return SendClientMessageEx(playerid, COLOR_ERROR, "Vous n'avez pas la permission d'utiliser cette commande.");

	static nom[24], scmd[128];
	if (sscanf(params, "s[24]S()[128]", nom, scmd))
	{
	    SendClientMessageEx(playerid, COLOR_USAGE, "/rack <options>");
	    SendClientMessage(playerid, COLOR_USAGE, "OPTIONS: creer, supprimer, edit");
	    return 1;
	}
	if (!strcmp(nom, "creer", true))
	{
		static id = -1;

		id = Rack_Create(playerid, -1);
		if (id == -1) return SendClientMessageEx(playerid, COLOR_ERROR, "Le serveur a atteint sa limite d'étagère d'arme.");

		ResetEditing(playerid);
		PlayerData[playerid][pEditRack] = id;

		EditDynamicObject(playerid, RackData[id][rackObjects][4]);
		SendClientMessageEx(playerid, COLOR_INFO, "Vous avez créé l'étagère ID %d.", id);
	}
	if (!strcmp(nom, "edit", true))
	{
		static id = 0;

		if (sscanf(scmd, "d", id))
		{
			SendClientMessageEx(playerid, COLOR_USAGE, "/rack edit [rack id]");
			return 1;
		}
		if ((id < 0 || id >= MAX_WEAPON_RACKS) || !RackData[id][rackExists]) return SendClientMessageEx(playerid, COLOR_ERROR, "Mauvais rack ID.");

		ResetEditing(playerid);
		PlayerData[playerid][pEditRack] = id;

		EditDynamicObject(playerid, RackData[id][rackObjects][4]);
		SendClientMessageEx(playerid, COLOR_INFO, "Vous modifiez l'arme de l'étagère ID: %d.", id);
	}
	if (!strcmp(nom, "supprimer", true))
	{
		static id = 0;

		if (sscanf(scmd, "d", id))
		{
			SendClientMessageEx(playerid, COLOR_USAGE, "/rack supprimer [rack id]");
			return 1;
		}
		if ((id < 0 || id >= MAX_WEAPON_RACKS) || !RackData[id][rackExists]) return SendClientMessageEx(playerid, COLOR_ERROR, "Mauvais rack ID.");

		Rack_Delete(id);
		SendClientMessageEx(playerid, COLOR_INFO, "Vous avez détruit l'étagère ID %d.", id);
	}
	return 1;
}

CMD:crate(playerid, params[])
{
    if (PlayerData[playerid][pAdmin] < 5) return SendClientMessageEx(playerid, COLOR_ERROR, "Vous n'avez pas la permission d'utiliser cette commande.");

	static nom[24], scmd[128];
	if (sscanf(params, "s[24]S()[128]", nom, scmd))
	{
	    SendClientMessageEx(playerid, COLOR_USAGE, "/crate <options>");
	    SendClientMessage(playerid, COLOR_USAGE, "OPTIONS: creer, supprimer");
	    return 1;
	}
	if (!strcmp(nom, "creer", true))
	{
		static id = -1, type;

		if (sscanf(scmd, "d", type))
		{
			SendClientMessageEx(playerid, COLOR_USAGE, "/crate creer [type]");
			SendClientMessage(playerid, COLOR_INFO, "1: Munitions | 2: Cocktail Molotov  | 3: Silencieux  | 4: Colt 45  | 5: Desert Eagle");
			SendClientMessage(playerid, COLOR_INFO, "6: Shotgun | 7: UZI | 8: TEC-9 | 9: MP5 | 10: AK-47 | 11: M4 | 12: Rifle | 13: Sniper Rifle");
			SendClientMessage(playerid, COLOR_INFO, "14 : drogues");
			return 1;
		}
		if (type < 1 || type > 14) return SendClientMessageEx(playerid, COLOR_ERROR, "Type: (1 à 14).");

		id = Crate_Create(playerid, type);
		if (id == -1) return SendClientMessageEx(playerid, COLOR_ERROR, "The server has reached the limit for crates.");

		SendClientMessageEx(playerid, COLOR_INFO, "Vous avez créé la caisse ID %d.", id);
	}
	if (!strcmp(nom, "supprimer", true))
	{
		static id = 0;

		if (sscanf(scmd, "d", id))
		{
			SendClientMessageEx(playerid, COLOR_USAGE, "/crate supprimer [CrateID]");
			return 1;
		}
		if ((id < 0 || id >= MAX_CRATES) || !CrateData[id][crateExists]) return SendClientMessageEx(playerid, COLOR_ERROR, "Mauvais crate ID.");

		Crate_Delete(id);
		SendClientMessageEx(playerid, COLOR_INFO, "Vous avez détruit la caisse ID %d.", id);
	}
	return 1;
}

CMD:atm(playerid, params[])
{
    if (PlayerData[playerid][pAdmin] < 5) return SendClientMessageEx(playerid, COLOR_ERROR, "Vous n'avez pas la permission d'utiliser cette commande.");

	static nom[24], scmd[128];
	if (sscanf(params, "s[24]S()[128]", nom, scmd))
	{
	    SendClientMessageEx(playerid, COLOR_USAGE, "/atm <options>");
	    SendClientMessage(playerid, COLOR_USAGE, "OPTIONS: creer, supprimer, pos");
	    return 1;
	}
	if (!strcmp(nom, "creer", true))
	{
		static argent, id;

		if (sscanf(scmd, "d", argent))
		{
			SendClientMessageEx(playerid, COLOR_USAGE, "/atm creer <argent>");
			return 1;
		}
		id = ATM_Create(playerid,argent);
		if (id == -1) return SendClientMessageEx(playerid, COLOR_ERROR, "Le serveur a atteint la limite des atm.");

		SendClientMessageEx(playerid, COLOR_INFO, "Vous avez créé l'ATM ID: %d avec %d$", id,argent);
	}
	if (!strcmp(nom, "supprimer", true))
	{
		static id = 0;

		if (sscanf(scmd, "d", id))
		{
			SendClientMessageEx(playerid, COLOR_USAGE, "/atm supprimer [atm id]");
			return 1;
		}
		if ((id < 0 || id >= MAX_ATM_MACHINES) || !ATMData[id][atmExists]) return SendClientMessageEx(playerid, COLOR_ERROR, "Mauvais ATM ID.");

		ATM_Delete(id);
		SendClientMessageEx(playerid, COLOR_INFO, "Vous avez supprimé l'ATM ID %d.", id);
	}
	if (!strcmp(nom, "pos", true))
	{
		new
			id = -1;

		if ((id = ATM_Nearest(playerid)) != -1)
		{
			ResetEditing(playerid);
			EditDynamicObject(playerid, ATMData[id][atmObject]);

			PlayerData[playerid][pEditATM] = id;

			SendClientMessageEx(playerid, COLOR_INFO, "Vous modifiez la position de l'ATM ID: %d.", id);
		}
		else SendClientMessageEx(playerid, COLOR_ERROR, "Vous n'êtes pas à proximité d'un ATM.");
	}
	return 1;
}

CMD:gate(playerid, params[])
{
    if (PlayerData[playerid][pAdmin] < 5) return SendClientMessageEx(playerid, COLOR_ERROR, "Vous n'avez pas la permission d'utiliser cette commande.");

	static nom[24], scmd[128];
	if (sscanf(params, "s[24]S()[128]", nom, scmd))
	{
	    SendClientMessageEx(playerid, COLOR_USAGE, "/gate <options>");
	    SendClientMessage(playerid, COLOR_USAGE, "OPTIONS: creer, supprimer, edit, infos");
	    return 1;
	}
	if (!strcmp(nom, "infos", true))
	{
		new id = -1, string[500];
		if ((id = Gate_Nearest(playerid)) != -1)
		{
			format(string, sizeof(string), "ID : %d | Open : %d | Model : %d | Vitesse :%f | Radius : %f | Timer : %d", id, GateData[id][gateOpened], GateData[id][gateModel], GateData[id][gateSpeed], GateData[id][gateRadius], GateData[id][gateTimer]);
			SendClientMessage(playerid, -1, string);

			format(string, sizeof(string), "Time : %d | Intérieur : %d | World : %d | Faction : %d | Job : %d | Password : %s", GateData[id][gateTime], GateData[id][gateInterior], GateData[id][gateWorld], GateData[id][gateFaction], GateData[id][gateJob], GateData[id][gatePass]);
			SendClientMessage(playerid, -1, string);
		}
		else SendClientMessageEx(playerid, COLOR_ERROR, "Vous n'êtes pas à proximité d'une gate.");
	}
	if (!strcmp(nom, "edit", true))
	{
		static id, type[24], string[128];

		if (sscanf(scmd, "ds[24]S()[128]", id, type, string))
		{
			SendClientMessageEx(playerid, COLOR_USAGE, "/gate edit <GateID> [name]");
			SendClientMessage(playerid, COLOR_USAGE, "OPTIONS: location, speed, radius, time, model, pos, move, pass");
			SendClientMessage(playerid, COLOR_USAGE, "OPTIONS: linkid, faction, interior, vw");
			return 1;
		}
		if ((id < 0 || id >= MAX_GATES) || !GateData[id][gateExists]) return SendClientMessageEx(playerid, COLOR_ERROR, "Mauvais gate ID.");

		if (!strcmp(type, "location", true))
		{
			static
			Float:x,
			Float:y,
			Float:z,
			Float:angle;

			GetPlayerPos(playerid, x, y, z);
			GetPlayerFacingAngle(playerid, angle);

			x += 3.0 * floatsin(-angle, degrees);
			y += 3.0 * floatcos(-angle, degrees);

			GateData[id][gatePos][0] = x;
			GateData[id][gatePos][1] = y;
			GateData[id][gatePos][2] = z;
			GateData[id][gatePos][3] = 0.0;
			GateData[id][gatePos][4] = 0.0;
			GateData[id][gatePos][5] = angle;

			SetDynamicObjectPos(GateData[id][gateObject], x, y, z);
			SetDynamicObjectRot(GateData[id][gateObject], 0.0, 0.0, angle);

			GateData[id][gateOpened] = false;

			Gate_Save(id);
			SendAdminAlert(COLOR_ADMINGROUP, "%s a modifié la position de la grille %d.", ReturnName(playerid), id);
			return 1;
		}
		else if (!strcmp(type, "speed", true))
		{
			static
			Float:speed;

			if (sscanf(string, "f", speed))
			return SendClientMessageEx(playerid, COLOR_USAGE, "/gate edit <GateID> [speed] [move speed]");

			if (speed < 0.0 || speed > 20.0)
			return SendClientMessageEx(playerid, COLOR_ERROR, "Vitesse minimum à 0 ou maximum à 20.");

			GateData[id][gateSpeed] = speed;

			Gate_Save(id);
			SendAdminAlert(COLOR_ADMINGROUP, "%s a modifié la vitesse de la grille %d à %.2f.", ReturnName(playerid), id, speed);
			return 1;
		}
		else if (!strcmp(type, "radius", true))
		{
			static
			Float:radius;

			if (sscanf(string, "f", radius))
			return SendClientMessageEx(playerid, COLOR_USAGE, "/gate edit <GateID> [radius] [open radius]");

			if (radius < 0.0 || radius > 20.0)
			return SendClientMessageEx(playerid, COLOR_ERROR, "L'angle de la porte doit être comprit entre 1 et 20.");

			GateData[id][gateRadius] = radius;

			Gate_Save(id);
			SendAdminAlert(COLOR_ADMINGROUP, "%s a modifié l'angle de la porte ID: %d à %.2f.", ReturnName(playerid), id, radius);
			return 1;
		}
		else if (!strcmp(type, "time", true))
		{
			static
			time;

			if (sscanf(string, "d", time))
			return SendClientMessageEx(playerid, COLOR_USAGE, "/gate edit <GateID> [time] [close time] (0 pour désactiver)");

			if (time < 0 || time > 60000)
			return SendClientMessageEx(playerid, COLOR_ERROR, "Le temps de fermeture doit être comprit entre 0 et 60000 ms.");

			GateData[id][gateTime] = time;

			Gate_Save(id);
			SendAdminAlert(COLOR_ADMINGROUP, "%s a modifié le temps avant la fermeture de la porte ID: %d à %d secondes.", ReturnName(playerid), id, time);
			return 1;
		}
		else if (!strcmp(type, "interior", true))
		{
			static
			interior;

			if (sscanf(string, "d", interior))
			return SendClientMessageEx(playerid, COLOR_USAGE, "/gate edit <GateID> interior <InteriorID>");

			if (interior < 0)
			return SendClientMessageEx(playerid, COLOR_ERROR, "L'intérieur doit être supérieur ou égal à 0.");

			GateData[id][gateInterior] = interior;

			DestroyDynamicObject(GateData[id][gateObject]);
			GateData[id][gateObject] = CreateDynamicObject(GateData[id][gateModel], GateData[id][gatePos][0], GateData[id][gatePos][1], GateData[id][gatePos][2], GateData[id][gatePos][3], GateData[id][gatePos][4], GateData[id][gatePos][5], GateData[id][gateWorld], GateData[id][gateInterior]);

			Gate_Save(id);
			SendAdminAlert(COLOR_ADMINGROUP, "%s a modifié l'intérieur de la porte ID: %d à %d.", ReturnName(playerid), id, interior);
			return 1;
		}
		else if (!strcmp(type, "vw", true))
		{
			static
			vw;

			if (sscanf(string, "d", vw))
			return SendClientMessageEx(playerid, COLOR_USAGE, "/gate edit <GateID> vw <VirtualWorld>");

			if (vw < 0)
			return SendClientMessageEx(playerid, COLOR_ERROR, "Le VirtualWorld doit être supérieur ou égal à 0.");

			GateData[id][gateWorld] = vw;

			DestroyDynamicObject(GateData[id][gateObject]);
			GateData[id][gateObject] = CreateDynamicObject(GateData[id][gateModel], GateData[id][gatePos][0], GateData[id][gatePos][1], GateData[id][gatePos][2], GateData[id][gatePos][3], GateData[id][gatePos][4], GateData[id][gatePos][5], GateData[id][gateWorld], GateData[id][gateInterior]);

			Gate_Save(id);
			SendAdminAlert(COLOR_ADMINGROUP, "%s a modifié le VirtualWorld de la porte ID: %d à %d.", ReturnName(playerid), id, vw);
			return 1;
		}
		else if (!strcmp(type, "model", true))
		{
			static
			model;

			if (sscanf(string, "d", model))
			return SendClientMessageEx(playerid, COLOR_USAGE, "/gate edit <GateID> model <ModelID>");

			if (PlayerData[playerid][pAdmin] < 5)
			{
				if (!IsValidObjectModel(model))
				return SendClientMessageEx(playerid, COLOR_ERROR, "Le model entré est incorrect.");
			}

			GateData[id][gateModel] = model;

			DestroyDynamicObject(GateData[id][gateObject]);
			GateData[id][gateObject] = CreateDynamicObject(GateData[id][gateModel], GateData[id][gatePos][0], GateData[id][gatePos][1], GateData[id][gatePos][2], GateData[id][gatePos][3], GateData[id][gatePos][4], GateData[id][gatePos][5], GateData[id][gateWorld], GateData[id][gateInterior]);

			Gate_Save(id);
			SendAdminAlert(COLOR_ADMINGROUP, "%s a modifié le modèle de la porte ID: %d à %d.", ReturnName(playerid), id, model);
			return 1;
		}
		else if (!strcmp(type, "model2", true))
		{
			PlayerData[playerid][pGateModify] = id;
			ShowModelSelectionMenu(playerid, "Choix de la gate", MODEL_SELECTION_GATE, Gate_Model_List, sizeof(Gate_Model_List), 0.0, 0.0, 90.0);
			return 1;
		}
		else if (!strcmp(type, "pos", true))
		{
			ResetEditing(playerid);
			EditDynamicObject(playerid, GateData[id][gateObject]);

			PlayerData[playerid][pEditGate] = id;
			PlayerData[playerid][pEditType] = 1;

			SendClientMessageEx(playerid, COLOR_INFO, "Vous modifiez la position de la porte ID: %d.", id);
			return 1;
		}
		else if (!strcmp(type, "move", true))
		{
			ResetEditing(playerid);
			EditDynamicObject(playerid, GateData[id][gateObject]);

			PlayerData[playerid][pEditGate] = id;
			PlayerData[playerid][pEditType] = 2;

			SendClientMessageEx(playerid, COLOR_INFO, "Vous modifiez la position de fermeture de la porte ID: %d.", id);
			return 1;
		}
		else if (!strcmp(type, "linkid", true))
		{
			static
			linkid = -1;

			if (sscanf(string, "d", linkid))
			return SendClientMessageEx(playerid, COLOR_USAGE, "/gate edit <GateID> [linkid] [gate link] (-1 for none)");

			if ((linkid < -1 || linkid >= MAX_GATES) || (linkid != -1 && !GateData[linkid][gateExists]))
			return SendClientMessageEx(playerid, COLOR_ERROR, "L'ID que vous avez entrer est incorrect.");

			GateData[id][gateLinkID] = (linkid == -1) ? (-1) : (GateData[linkid][gateID]);
			Gate_Save(id);

			if (id == -1)
				SendAdminAlert(COLOR_ADMINGROUP, "%s a supprimer la liaison de la porte ID: %d..", ReturnName(playerid), id);

			else
				SendAdminAlert(COLOR_ADMINGROUP, "%s a lier la porte ID: %d avec la porte ID: %d.", ReturnName(playerid), id, linkid);

			return 1;
		}
		else if (!strcmp(type, "faction", true))
		{
			static
			factionid = -1;

			if (sscanf(string, "d", factionid))
			return SendClientMessageEx(playerid, COLOR_USAGE, "/gate edit <GateID> faction <FactionID> (-1 pour retirer)");

			if ((factionid < -1 || factionid >= MAX_FACTIONS) || (factionid != -1 && !FactionData[factionid][factionExists]))
			return SendClientMessageEx(playerid, COLOR_ERROR, "Vous avez specifié un ID faction invalide.");

			GateData[id][gateFaction] = (factionid == -1) ? (-1) : (FactionData[factionid][factionID]);
			Gate_Save(id);

			if (factionid == -1)
			SendAdminAlert(COLOR_ADMINGROUP, "%s a modifié la faction de la porte ID: %d à aucune faction.", ReturnName(playerid), id);

			else
				SendAdminAlert(COLOR_ADMINGROUP, "%s a modifié la faction de la porte ID: %d à \"%s\".", ReturnName(playerid), id, FactionData[factionid][factionName]);

			return 1;
		}
		else if (!strcmp(type, "job", true))
		{
			static
			jobid = -1;

			if (sscanf(string, "d", jobid))
			return SendClientMessageEx(playerid, COLOR_USAGE, "/gate edit <GateID> job <JobID> (-1 pour retirer)");

            if ((jobid < -1 || jobid >= MAX_DYNAMIC_JOBS) || (jobid != -1 && !JobData[id][jobExists]))
			return SendClientMessageEx(playerid, COLOR_ERROR, "Vous avez specifié un ID de job invalide.");

			GateData[id][gateJob] = (jobid == -1) ? (-1) : (JobData[jobid][jobID]);
			Gate_Save(id);

			if (jobid == -1)
			SendAdminAlert(COLOR_ADMINGROUP, "%s a modifié le job de la porte ID: %d à aucun job.", ReturnName(playerid), id);

			else
				SendAdminAlert(COLOR_ADMINGROUP, "%s a modifié le job de la porte ID: %d à \"%s\".", ReturnName(playerid), id, Job_GetName(jobid));

			return 1;
		}
		else if (!strcmp(type, "pass", true))
		{
			static
				pass[32];

			if (sscanf(string, "s[32]", pass))
			return SendClientMessageEx(playerid, COLOR_USAGE, "/gate edit <GateID> pass <Password> {FFFFFF}(Utilisez 'none' pour désactiver le mot de passe)");

			if (!strcmp(pass, "none", true)) GateData[id][gatePass][0] = 0;
			else format(GateData[id][gatePass], 32, pass);

			Gate_Save(id);
			SendAdminAlert(COLOR_ADMINGROUP, "%s a modifié le mot de passe de la porte ID: %d à \"%s\".", ReturnName(playerid), id, pass);
			return 1;
		}
	}
	if (!strcmp(nom, "supprimer", true))
	{
		static id = 0;
		if (sscanf(scmd, "d", id))
		{
			SendClientMessageEx(playerid, COLOR_USAGE, "/gate supprimer <GateID>");
			return 1;
		}

		if ((id < 0 || id >= MAX_GATES) || !GateData[id][gateExists]) return SendClientMessageEx(playerid, COLOR_ERROR, "L'ID entrer est incorrect.");

		Gate_Delete(id);
		SendClientMessageEx(playerid, COLOR_INFO, "Vous avez supprimer la porte ID: %d.", id);
	}
	if (!strcmp(nom, "creer", true))
	{
		static id = -1;
		id = Gate_Create(playerid);

		if (id == -1) return SendClientMessageEx(playerid, COLOR_ERROR, "Le serveur a atteint sa limite de gate.");

		SendClientMessageEx(playerid, COLOR_INFO, "Vous avez créé la gate ID: %d.", id);
	}
	return 1;
}

CMD:distributeur(playerid, params[])
{
	if (PlayerData[playerid][pAdmin] < 5) return SendClientMessageEx(playerid, COLOR_ERROR, "Vous n'avez pas la permission d'utiliser cette commande.");

	static nom[24], scmd[128];
	if (sscanf(params, "s[24]S()[128]", nom, scmd))
	{
	    SendClientMessageEx(playerid, COLOR_USAGE, "/distributeur <options>");
	    SendClientMessage(playerid, COLOR_USAGE, "OPTIONS: creer, supprimer, infos, pos");
	    return 1;
	}
	if (!strcmp(nom, "creer", true))
	{
		static id = -1, type;

		if (sscanf(scmd, "d", type))
		{
			SendClientMessageEx(playerid, COLOR_USAGE, "/distributeur creer <Type>");
			SendClientMessage(playerid, COLOR_YELLOW, "[TYPES]:{FFFFFF} 1 à 2: Nourriture | 3: Soda | 4: Nourriture sans objet | 5: Soda sans objet");
			SendClientMessage(playerid, COLOR_YELLOW, "[TYPES]:{FFFFFF} 6: Glacier");
			return 1;
		}
		if (type < 1 || type > 6) return SendClientMessageEx(playerid, COLOR_ERROR, "Le type doit être comprit entre 1 et 6.");

		id = Vendor_Create(playerid, type);
		if (id == -1) return SendClientMessageEx(playerid, COLOR_ERROR, "Le serveur a atteint sa limite de distributeur..");

		SendClientMessageEx(playerid, COLOR_INFO, "Vous avez créé le distributeur ID: %d.", id);
	}
	if (!strcmp(nom, "supprimer", true))
	{
		static id = 0;
		if (sscanf(scmd, "d", id))
		{
			SendClientMessageEx(playerid, COLOR_USAGE, "/distributeur supprimer <VendorID>");
			return 1;
		}
		if ((id < 0 || id >= MAX_VENDORS) || !VendorData[id][vendorExists]) return SendClientMessageEx(playerid, COLOR_ERROR, "L'ID du distributeur est incorrect.");

		Vendor_Delete(id);
		SendClientMessageEx(playerid, COLOR_INFO, "Vosu avez supprimer le distributeur ID %d.", id);
	}
	if (!strcmp(nom, "infos", true))
	{
		new id = -1, string[500];
		if ((id = Vendor_Nearest(playerid)) != -1)
		{
			format(string, sizeof(string), "ID : %d | Type : %d | Intérieur : %d | World : %d", id, VendorData[id][vendorType], VendorData[id][vendorInterior], VendorData[id][vendorWorld]);
			SendClientMessage(playerid, -1, string);

		}
		else SendClientMessageEx(playerid, COLOR_ERROR, "Vous n'êtes pas à proximité d'un distributeur.");
	}
	if (!strcmp(nom, "pos", true))
	{
		new
			id = -1;

		if ((id = Vendor_Nearest(playerid)) != -1)
		{
		    if(!EditableDistributeur(VendorData[id][vendorType]))
		    	return SendClientMessageEx(playerid, COLOR_ERROR, "Vous ne pouvez pas éditer la position de ce distributeur.");
		    
			ResetEditing(playerid);
			EditDynamicObject(playerid, VendorData[id][vendorObject]);

			PlayerData[playerid][pEditVendor] = id;

			SendClientMessageEx(playerid, COLOR_INFO, "Vous modifiez la position du distributeur ID: %d.", id);
		}
		else SendClientMessageEx(playerid, COLOR_ERROR, "Vous n'êtes pas à proximité d'un distributeur.");
	}
	return 1;
}

stock EditableDistributeur(type)
{
	switch(type)
	{
	    case 1, 2, 3, 6: return true;
	    default: return false;
	}
	return false;
}
CMD:faction(playerid, params[])
{
	if (PlayerData[playerid][pAdmin] < 5) return SendClientMessageEx(playerid, COLOR_ERROR, "Vous n'avez pas la permission d'utiliser cette commande.");

	static nom[24], scmd[128];
	if (sscanf(params, "s[24]S()[128]", nom, scmd))
	{
	    SendClientMessageEx(playerid, COLOR_USAGE, "/faction <options>");
	    SendClientMessage(playerid, COLOR_USAGE, "OPTIONS: creer, edit, supprimer");
	    return 1;
	}

	if (!strcmp(nom, "creer", true))
	{
	 	static id = -1, type, name[32];

		if (sscanf(scmd, "ds[32]", type, name))
		{
			SendClientMessageEx(playerid, COLOR_USAGE, "/faction creer <type> <names>");
			SendClientMessage(playerid, COLOR_YELLOW, "[TYPES]:{FFFFFF} 1: Police | 2: Journaliste | 4: Gouvernement | 5: Gang | 6: Mafia" );
			return 1;
		}
		if (type < 1 || type > 7) return SendClientMessageEx(playerid, COLOR_ERROR, "Type spécifié non valide. Les types vont de 1 à 7.");

		id = Faction_Create(name, type);
		if (id == -1) return SendClientMessageEx(playerid, COLOR_ERROR, "Le serveur a atteint la limite de faction.");

		SendClientMessageEx(playerid, COLOR_INFO, "Vous avez créé avec la faction ID: %d.", id);
	}
	if (!strcmp(nom, "edit", true))
	{
		static id, type[24], string[128];

		if (sscanf(scmd, "ds[24]S()[128]", id, type, string))
		{
			SendClientMessageEx(playerid, COLOR_USAGE, "/faction edit <id> <options>");
			SendClientMessage(playerid, COLOR_USAGE, "OPTIONS: name, color, type, skins, locker, ranks, maxranks");
			SendClientMessage(playerid, COLOR_USAGE, "OPTIONS: credit");
			return 1;
		}
		if ((id < 0 || id >= MAX_FACTIONS) || !FactionData[id][factionExists])
		return SendClientMessageEx(playerid, COLOR_ERROR, "Vous avez specifié un ID faction invalide.");

		if (!strcmp(type, "name", true))
		{
			new name[32];

			if (sscanf(string, "s[32]", name))
			return SendClientMessageEx(playerid, COLOR_USAGE, "/faction edit <FactionID> name <NouveauNom>");

			format(FactionData[id][factionName], 32, name);

			Faction_Save(id);
			SendAdminAlert(COLOR_ADMINGROUP, "%s a ajusté le nom de faction ID: %d à \"%s\".", ReturnName(playerid), id, name);
		}
		else if (!strcmp(type, "maxranks", true))
		{
			new ranks;

			if (sscanf(string, "d", ranks))
			return SendClientMessageEx(playerid, COLOR_USAGE, "/faction edit <FactionID> maxranks <MaxRank>");

			if (ranks < 1 || ranks > 15)
			return SendClientMessageEx(playerid, COLOR_ERROR, "Le rank maximum doit être comprit entre 1 et 15.");

			FactionData[id][factionRanks] = ranks;

			Faction_Save(id);
			SendAdminAlert(COLOR_ADMINGROUP, "%s a ajusté les rangs maximales de faction ID: %d à %d.", ReturnName(playerid), id, ranks);
		}
		else if (!strcmp(type, "ranks", true))
		{
			Faction_ShowRanks(playerid, id);
		}
		else if (!strcmp(type, "color", true))
		{
			new color;

			if (sscanf(string, "h", color))
			return SendClientMessageEx(playerid, COLOR_USAGE, "/faction edit <FactionID> color <HexColor>");

			FactionData[id][factionColor] = color;
			Faction_Update(id);

			Faction_Save(id);
			SendAdminAlert(COLOR_ADMINGROUP, "L'administrateur %s a changé la{%06x}couleur{FF6347} d'une faction. (ID: %d)", ReturnName(playerid), color >>> 8, id);
		}
		else if (!strcmp(type, "type", true))
		{
			new typeint;

			if (sscanf(string, "d", typeint))
			{
				SendClientMessageEx(playerid, COLOR_USAGE, "/faction edit <FactionID> type <FactionType>");
				SendClientMessage(playerid, COLOR_YELLOW, "[TYPES]:{FFFFFF} 1: Police | 2: Journaliste | 3: Medical | 4: Gouvernement | 5: Gang | 6: Mafia");
				return 1;
			}
			if (typeint < 1 || typeint > 7)
			return SendClientMessageEx(playerid, COLOR_ERROR, "Type spécifié non valide. Les types vont de 1 à 6.");

			FactionData[id][factionType] = typeint;

			Faction_Save(id);
			SendAdminAlert(COLOR_ADMINGROUP, "%s a ajusté le type de la faction ID: %d à %d.", ReturnName(playerid), id, typeint);
		}
		else if (!strcmp(type, "credit", true))
		{
			new credit;

			if (sscanf(string, "d", credit))
			{
				SendClientMessageEx(playerid, COLOR_USAGE, "/faction edit <FactionID> credits <Credits>");
				return 1;
			}

			FactionData[id][factionCredit] = credit;

			Faction_Save(id);
			SendAdminAlert(COLOR_ADMINGROUP, "%s a ajusté les crédits de la faction ID: %d à %d.", ReturnName(playerid), id, credit);
		}
		else if (!strcmp(type, "skins", true))
		{
			static
			skins[8];

			for (new i = 0; i < sizeof(skins); i ++)
			skins[i] = (FactionData[id][factionSkins][i]) ? (FactionData[id][factionSkins][i]) : (19300);

			PlayerData[playerid][pFactionEdit] = id;
			ShowModelSelectionMenu(playerid, "Tenues", MODEL_SELECTION_SKINS, skins, sizeof(skins), -16.0, 0.0, -55.0);
		}
		else if (!strcmp(type, "locker", true))
		{
		    if(!FactionHasLocker(id))
			return SendClientMessageEx(playerid, COLOR_ERROR, "Cette faction ne peut pas avoir de casier.");
			
			PlayerData[playerid][pFactionEdit] = id;
			Dialog_Show(playerid, FactionLocker, DIALOG_STYLE_LIST, "Casier de la faction", "Changer la position du casier\nModifier les armes présentes", "Ok", "Retour");
		}
	}
	if (!strcmp(nom, "supprimer", true))
	{
		static id = 0;

		if (sscanf(scmd, "d", id))
		{
			SendClientMessageEx(playerid, COLOR_USAGE, "/faction supprimer <ID Faction>");
			return 1;
		}

		if ((id < 0 || id >= MAX_FACTIONS) || !FactionData[id][factionExists]) return SendClientMessageEx(playerid, COLOR_ERROR, "Vous avez specifié un ID faction invalide.");

		Faction_Delete(id);
		SendClientMessageEx(playerid, COLOR_INFO, "Vous avez supprimé avec succès la faction ID: %d.", id);
	}
	return 1;
}

CMD:pump(playerid, params[])
{
	if (PlayerData[playerid][pAdmin] < 5) return SendClientMessageEx(playerid, COLOR_ERROR, "Vous n'avez pas la permission d'utiliser cette commande.");

	static nom[24], scmd[128];
	if (sscanf(params, "s[24]S()[128]", nom, scmd))
	{
	    SendClientMessageEx(playerid, COLOR_USAGE, "/pump <options>");
	    SendClientMessage(playerid, COLOR_USAGE, "OPTIONS: creer, supprimer, edit, infos");
	    return 1;
	}
	if (!strcmp(nom, "creer", true))
	{
		new id, bizid = -1;
		if (sscanf(scmd, "d", bizid))
		{
			SendClientMessageEx(playerid, COLOR_USAGE, "/pump creer [business id]");
	    	SendClientMessage(playerid, COLOR_YELLOW, "Choisissez l'ID du bizness désiré afin de faire de ce dernier une station essence.");
			return 1;
		}

		if ((bizid < 0 || bizid >= MAX_BUSINESSES) || !BusinessData[bizid][bizExists]) return SendClientMessageEx(playerid, COLOR_ERROR, "Mauvais business ID.");
		if (BusinessData[bizid][bizType] != 6) return SendClientMessageEx(playerid, COLOR_ERROR, "Ce bizness n'est pas une station essence!");
		if (GetPlayerInterior(playerid) > 0 || GetPlayerVirtualWorld(playerid) > 0) return SendClientMessageEx(playerid, COLOR_ERROR, "Vous ne pouvez pas créer une station essence dans un intérieur.");

		id = Pump_Create(playerid, bizid);
		if (id == -1) return SendClientMessageEx(playerid, COLOR_ERROR, "The business has reached the limit for gas pumps.");

		SendClientMessageEx(playerid, COLOR_INFO, "Vous avez créé la station essence ID: %d.", id);
		ResetEditing(playerid);
		PlayerData[playerid][pEditPump] = id;
		EditDynamicObject(playerid, PumpData[id][pumpObject]);
	}
	if (!strcmp(nom, "supprimer", true))
	{
		static id = 0;
		if (sscanf(scmd, "d", id))
		{
			SendClientMessageEx(playerid, COLOR_USAGE, "/pump supprimer [pump id]");
			return 1;
		}
		if ((id < 0 || id >= MAX_GAS_PUMPS) || !PumpData[id][pumpExists]) return SendClientMessageEx(playerid, COLOR_ERROR, "L'ID de la station essence est incorrect.");

		Pump_Delete(id);
		SendClientMessageEx(playerid, COLOR_INFO, "Vous avez supprimé la station essence ID: %d.", id);
	}
	if (!strcmp(nom, "edit", true))
	{
		static id = 0, amount;

		if (sscanf(scmd, "dd", id, amount))
		{
			SendClientMessageEx(playerid, COLOR_USAGE, "/pump edit [pump id] [fuel amount]");
			return 1;
		}

		if ((id < 0 || id >= MAX_GAS_PUMPS) || !PumpData[id][pumpExists]) return SendClientMessageEx(playerid, COLOR_ERROR, "L'ID de la station essence est incorrect.");

		PumpData[id][pumpFuel] = amount;

		Pump_Refresh(id);
		Pump_Save(id);

		SendClientMessageEx(playerid, COLOR_INFO, "Vous avez modifier l'essence à %d de la station ID: %d.", amount, id);
	}
	if (!strcmp(nom, "infos", true))
	{
		new id = -1, string[500];
		if ((id = Pump_Nearest(playerid)) != -1)
		{
			format(string, sizeof(string), "ID : %d | Business : %d | Essence : %d | Objets : %d", id, PumpData[id][pumpBusiness], PumpData[id][pumpFuel], PumpData[id][pumpObject]);
			SendClientMessage(playerid, -1, string);

		}
		else SendClientMessageEx(playerid, COLOR_ERROR, "Vous n'êtes pas à proximité d'une station essence.");
	}
	if (!strcmp(nom, "ajuster", true))
	{
		if(!IsNumeric(scmd)) return SendClientMessageEx(playerid, COLOR_ERROR, "Mauvais ID.");

		PlayerData[playerid][pEditPump] = strval(params);
		EditDynamicObject(playerid, PumpData[strval(params)][pumpObject]);
	}
	return 1;
}

CMD:entrance(playerid, params[])
{
	// SSCANF = SCMD

	if (PlayerData[playerid][pAdmin] < 5) return SendClientMessageEx(playerid, COLOR_ERROR, "Vous n'avez pas la permission d'utiliser cette commande.");

	static nom[24], scmd[128];
	if (sscanf(params, "s[24]S()[128]", nom, scmd))
	{
	    SendClientMessageEx(playerid, COLOR_USAGE, "/entrance <options>");
	    SendClientMessage(playerid, COLOR_USAGE, "OPTIONS: creer, supprimer, edit, infos");
	    return 1;
	}
	if (!strcmp(nom, "creer", true))
	{
		if (isnull(scmd) || strlen(scmd) > 32) return SendClientMessageEx(playerid, COLOR_USAGE, "/entrance creer [name]");

		new id = Entrance_Create(playerid, scmd);
		if (id == -1) return SendClientMessageEx(playerid, COLOR_ERROR, "Le serveur a atteint la limite.");

		SendClientMessageEx(playerid, COLOR_INFO, "Vous avez crée l'entrée ID: %d.", id);
	}
	if (!strcmp(nom, "edit", true))
	{
		static id, type[24], string[128];

		if (sscanf(scmd, "ds[24]S()[128]", id, type, string))
		{
			SendClientMessageEx(playerid, COLOR_USAGE, "/entrance edit <id> <options>");
			SendClientMessage(playerid, COLOR_USAGE, "OPTIONS: location, interior, password, name, locked, mapicon");
			SendClientMessage(playerid, COLOR_USAGE, "OPTIONS: type, custom, virtual, icone");
			return 1;
		}
		if ((id < 0 || id >= MAX_ENTRANCES) || !EntranceData[id][entranceExists]) return SendClientMessageEx(playerid, COLOR_ERROR, "Mauvais entrance ID.");

		if (!strcmp(type, "location", true))
		{
			GetPlayerPos(playerid, EntranceData[id][entrancePos][0], EntranceData[id][entrancePos][1], EntranceData[id][entrancePos][2]);
			GetPlayerFacingAngle(playerid, EntranceData[id][entrancePos][3]);

			EntranceData[id][entranceExterior] = GetPlayerInterior(playerid);
			EntranceData[id][entranceExteriorVW] = GetPlayerVirtualWorld(playerid);

			Entrance_Refresh(id);
			Entrance_Save(id);

			SendAdminAlert(COLOR_ADMINGROUP, "%s a modifié la position de l'entrance ID: %d.", ReturnName(playerid), id);
		}
		else if (!strcmp(type, "icone", true))
		{
			new icone;

			if (sscanf(string, "d", icone))
			{
				SendClientMessageEx(playerid, COLOR_USAGE, "/entrance edit <EntranceID> icone <IconID>");
				SendClientMessageEx(playerid, COLOR_USAGE, "Retrouvez la liste des pickups sur:{FFFFFF} http://dev.prineside.com/en/gtasa_samp_model_id/category/pickups-and-icons/");
				return 1;
			}
			
			EntranceData[id][entranceIconType] = icone;

			Entrance_Refresh(id);
			Entrance_Save(id);
			
			SendAdminAlert(COLOR_ADMINGROUP, "%s a modifié l'icone de l'entrance ID: %d.", ReturnName(playerid), id);
		}
		else if (!strcmp(type, "interior", true))
		{
			GetPlayerPos(playerid, EntranceData[id][entranceInt][0], EntranceData[id][entranceInt][1], EntranceData[id][entranceInt][2]);
			GetPlayerFacingAngle(playerid, EntranceData[id][entranceInt][3]);

			EntranceData[id][entranceInterior] = GetPlayerInterior(playerid);

			foreach (new i : Player)
			{
				if (PlayerData[i][pEntrance] == EntranceData[id][entranceID])
				{
					SetPlayerPos(i, EntranceData[id][entranceInt][0], EntranceData[id][entranceInt][1], EntranceData[id][entranceInt][2]);
					SetPlayerFacingAngle(i, EntranceData[id][entranceInt][3]);

					SetPlayerInterior(i, EntranceData[id][entranceInterior]);
					SetCameraBehindPlayer(i);
				}
			}
			Entrance_Save(id);
			SendAdminAlert(COLOR_ADMINGROUP, "%s a modifié la position intérieur de l'entrance ID: %d.", ReturnName(playerid), id);
		}
		else if (!strcmp(type, "custom", true))
		{
			if (EntranceData[id][entranceCustom] == 1)
			{
				EntranceData[id][entranceCustom] = 0;
				SendAdminAlert(COLOR_ADMINGROUP, "%s a désactiver le mode custom pour l'entrance ID: %d.", ReturnName(playerid), id);
			}
			else
			{
				EntranceData[id][entranceCustom] = 1;
				SendAdminAlert(COLOR_ADMINGROUP, "%s a activer le mode custom pour l'entrance ID: %d.", ReturnName(playerid), id);
			}
			Entrance_Save(id);
		}
		else if (!strcmp(type, "virtual", true))
		{
			new worldid;

			if (sscanf(string, "d", worldid))
			return SendClientMessageEx(playerid, COLOR_USAGE, "/entrance edit <EntranceID> [virtual] [interior world]");

			EntranceData[id][entranceWorld] = worldid;

			foreach (new i : Player) if (Entrance_Inside(i) == id) {
				SetPlayerVirtualWorld(i, worldid);
			}
			Entrance_Save(id);
			SendAdminAlert(COLOR_ADMINGROUP, "%s a modifié le virtual world de l'entrance ID: %d à %d.", ReturnName(playerid), id, worldid);
		}
		else if (!strcmp(type, "mapicon", true))
		{
			new icon;

			if (sscanf(string, "d", icon))
			return SendClientMessageEx(playerid, COLOR_USAGE, "/entrance edit <EntranceID> mapicon [map icon]");

			if (icon < 0 || icon > 63)
			return SendClientMessageEx(playerid, COLOR_ERROR, "L'icone est invalide. Vérifiez avec la liste suivante: \"wiki.sa-mp.com/wiki/MapIcons\".");

			EntranceData[id][entranceIcon] = icon;

			Entrance_Refresh(id);
			Entrance_Save(id);

			SendAdminAlert(COLOR_ADMINGROUP, "%s a modifié l'icone sur la map de l'entrance ID: %d à %d.", ReturnName(playerid), id, icon);
		}
		else if (!strcmp(type, "password", true))
		{
			new password[32];

			if (sscanf(string, "s[32]", password))
			return SendClientMessageEx(playerid, COLOR_USAGE, "/entrance edit <EntranceID> password <Password> {FFFFFF}(Utilisez 'none' pour désactiver le mot de passe)");
			
			if (!strcmp(password, "none", true))
			{
				format(EntranceData[id][entrancePass], 32, "");
				SendAdminAlert(COLOR_ADMINGROUP, "%s a retiré le mot de passe de l'entrance ID: %d.", ReturnName(playerid), id);
			}
			else
			{
				format(EntranceData[id][entrancePass], 32, password);
				SendAdminAlert(COLOR_ADMINGROUP, "%s a modifié le mot de passe de l'entrance ID: %d à \"%s\".", ReturnName(playerid), id, password);
			}
			Entrance_Save(id);
		}
		else if (!strcmp(type, "locked", true))
		{
			new locked;

			if (sscanf(string, "d", locked))
			return SendClientMessageEx(playerid, COLOR_USAGE, "/entrance edit <EntranceID> [locked] [locked 0/1]");

			if (locked < 0 || locked > 1)
			return SendClientMessageEx(playerid, COLOR_ERROR, "La valeur est invalide. Utilisez '0' pour dévérouiller et '1' pour vérouiller.");

			EntranceData[id][entranceLocked] = locked;
			Entrance_Save(id);

			if (locked) {
				SendAdminAlert(COLOR_ADMINGROUP, "%s a vérouillé l'entrance ID: %d.", ReturnName(playerid), id);
				} else {
				SendAdminAlert(COLOR_ADMINGROUP, "%s a dévérouillé l'entrance ID: %d.", ReturnName(playerid), id);
			}
		}
		else if (!strcmp(type, "name", true))
		{
			new name[32];

			if (sscanf(string, "s[32]", name))
			return SendClientMessageEx(playerid, COLOR_USAGE, "/entrance edit <EntranceID> name <Name>");

			format(EntranceData[id][entranceName], 32, name);

			Entrance_Refresh(id);
			Entrance_Save(id);

			SendAdminAlert(COLOR_ADMINGROUP, "%s a modifié le nom de l'entrance ID: %d à \"%s\".", ReturnName(playerid), id, name);
		}
		else if (!strcmp(type, "type", true))
		{
			new typeint;

			if (sscanf(string, "d", typeint))
			{
				SendClientMessageEx(playerid, COLOR_USAGE, "/entrance edit <EntranceID> type <Type>");
				SendClientMessage(playerid, COLOR_YELLOW, "[TYPES]:{FFFFFF} 0: Aucun | 1: Auto-Ecole | 2: Banque | 3: Entrepot | 4: Mairie | 5: Salle de tir | 6: Position actuel");
				return 1;
			}
			if (typeint < 0 || typeint > 5)
			return SendClientMessageEx(playerid, COLOR_ERROR, "Le type entrer est incorrect. Il doit être comprit entre 0 et 5.");

			if (EntranceData[id][entranceType] == 3 && typeint != 3) {
				DestroyForklifts(id);
			}
			else if (EntranceData[id][entranceType] != 3 && typeint == 3) {
				CreateForklifts(id);
			}
			EntranceData[id][entranceType] = typeint;

			static Float:x, Float:y, Float:z;
			GetPlayerPos(playerid, x, y, z);
			switch (typeint)
			{
				case 1:
				{
					EntranceData[id][entranceInt][0] = -2029.5531;
					EntranceData[id][entranceInt][1] = -118.8003;
					EntranceData[id][entranceInt][2] = 1035.1719;
					EntranceData[id][entranceInt][3] = 0.0000;
					EntranceData[id][entranceInterior] = 3;
				}
				case 2:
				{
					EntranceData[id][entranceInt][0] = 1456.1918;
					EntranceData[id][entranceInt][1] = -987.9417;
					EntranceData[id][entranceInt][2] = 996.1050;
					EntranceData[id][entranceInt][3] = 90.0000;
					EntranceData[id][entranceInterior] = 6;
				}
				case 3:
				{
					EntranceData[id][entranceInt][0] = 1291.8246;
					EntranceData[id][entranceInt][1] = 5.8714;
					EntranceData[id][entranceInt][2] = 1001.0078;
					EntranceData[id][entranceInt][3] = 180.0000;
					EntranceData[id][entranceInterior] = 18;
				}
				case 4:
				{
					EntranceData[id][entranceInt][0] = 390.1687;
					EntranceData[id][entranceInt][1] = 173.8072;
					EntranceData[id][entranceInt][2] = 1008.3828;
					EntranceData[id][entranceInt][3] = 90.0000;
					EntranceData[id][entranceInterior] = 3;
				}
				case 5:
				{
					EntranceData[id][entranceInt][0] = 304.0165;
					EntranceData[id][entranceInt][1] = -141.9894;
					EntranceData[id][entranceInt][2] = 1004.0625;
					EntranceData[id][entranceInt][3] = 90.0000;
					EntranceData[id][entranceInterior] = 7;
				}
				case 6:
				{
					EntranceData[id][entranceInt][0] = x;
					EntranceData[id][entranceInt][1] = y;
					EntranceData[id][entranceInt][2] = z;
					EntranceData[id][entranceInt][3] = 90.0000;
					EntranceData[id][entranceInterior] = GetPlayerInterior(playerid);
				}
			}
			foreach (new i : Player)
			{
				if (PlayerData[i][pEntrance] == EntranceData[id][entranceID])
				{
					SetPlayerPos(i, EntranceData[id][entranceInt][0], EntranceData[id][entranceInt][1], EntranceData[id][entranceInt][2]);
					SetPlayerFacingAngle(i, EntranceData[id][entranceInt][3]);

					SetPlayerInterior(i, EntranceData[id][entranceInterior]);
					SetCameraBehindPlayer(i);
				}
			}
			Entrance_Save(id);
			SendAdminAlert(COLOR_ADMINGROUP, "%s a modifié le type de l'entrance ID: %d à %d.", ReturnName(playerid), id, typeint);
		}
	}
	if (!strcmp(nom, "supprimer", true))
	{
		static id = 0;
		if (sscanf(scmd, "d", id))
		{
			SendClientMessageEx(playerid, COLOR_USAGE, "/entrance supprimer <EntranceID>");
			return 1;
		}

		if ((id < 0 || id >= MAX_ENTRANCES) || !EntranceData[id][entranceExists]) return SendClientMessageEx(playerid, COLOR_ERROR, "Mauvais entrance ID.");

		Entrance_Delete(id);
		SendClientMessageEx(playerid, COLOR_INFO, "Vous avez supprimé l'entrance ID: %d.", id);
	}
	if (!strcmp(nom, "infos", true))
	{
		new id = -1, string[500];
		if ((id = Entrance_Nearest(playerid)) != -1)
		{
			format(string, sizeof(string), "ID : %d | Nom : %d | Password : %s | Icone : %d", id, EntranceData[id][entranceName], EntranceData[id][entrancePass], EntranceData[id][entranceIcon]);
			SendClientMessage(playerid, -1, string);

			format(string, sizeof(string), "Intérieur : %d | Extérieur : %d | Extérieur VW : %d | Type : %d", EntranceData[id][entranceInterior],  EntranceData[id][entranceExterior], EntranceData[id][entranceExteriorVW], EntranceData[id][entranceType]);
			SendClientMessage(playerid, -1, string);

			format(string, sizeof(string), "Custom : %d | World : %d | Pickup : %d | MapIcon : %d", EntranceData[id][entranceCustom],  EntranceData[id][entranceWorld], EntranceData[id][entrancePickup], EntranceData[id][entranceMapIcon]);
			SendClientMessage(playerid, -1, string);

		}
		else SendClientMessageEx(playerid, COLOR_ERROR, "Vous n'êtes pas à proximité d'une entrance.");
	}

	return 1;
}

CMD:biz(playerid, params[])
{
	static nom[24], scmd[128];
	if (sscanf(params, "s[24]S()[128]", nom, scmd))
	{
	    SendClientMessageEx(playerid, COLOR_USAGE, "/biz <options>");
	    SendClientMessage(playerid, COLOR_USAGE, "OPTIONS: acheter, vendre, lock, caisse, produits");
	    SendClientMessage(playerid, COLOR_USAGE, "OPTIONS: infos, nom, message, livraison, employer");

	    if (PlayerData[playerid][pAdmin] >= 5)
	    {
	    	SendClientMessage(playerid, COLOR_USAGE, "OPTIONS - ADMIN: reset, creer, supprimer, edit, infos, lock");
	    }
	    return 1;
	}
	if (!strcmp(nom, "reset", true))
	{
		new bizid = -1;

		if (PlayerData[playerid][pAdmin] < 5)
		return SendClientMessageEx(playerid, COLOR_ERROR, "Vous n'avez pas la permission d'utiliser cette commande.");

		if (sscanf(params, "d", bizid))
		return SendClientMessageEx(playerid, COLOR_USAGE, "/biz reset <businessID>");

		if ((bizid < 0 || bizid >= MAX_HOUSES) || !BusinessData[bizid][bizExists])
		return SendClientMessageEx(playerid, COLOR_ERROR, "Mauvais business ID.");

		BusinessData[bizid][bizOwner] = 0;

		Business_Refresh(bizid);
		Business_Save(bizid);

		SendClientMessageEx(playerid, COLOR_INFO, "Tu a vendu le bizz ID: %d.", bizid);
	}
	if (!strcmp(nom, "acheter", true))
	{
	    static id =-1;
		if ((id = Business_Nearest(playerid)) != -1)
		{
			if (Business_GetCount(playerid) >= MAX_OWNABLE_BUSINESSES)
			return SendClientMessageEx(playerid, COLOR_ERROR, "Vous avez déjà %d business, vous ne pouvez pas en avoir plus.", MAX_OWNABLE_BUSINESSES);

			if (BusinessData[id][bizOwner] != 0)
			return SendClientMessageEx(playerid, COLOR_ERROR, "Ce business appartient déjà à un joueur.");

			if (BusinessData[id][bizPrice] > GetMoney(playerid))
			return SendClientMessageEx(playerid, COLOR_ERROR, "Vous n'avez pas assez d'argent pour acheter ce biz.");

			BusinessData[id][bizOwner] = GetPlayerSQLID(playerid);

			Business_Refresh(id);
			Business_Save(id);

			GiveMoney(playerid, -BusinessData[id][bizPrice]);
			SendClientMessageEx(playerid, COLOR_INFO, "Vous avez bien acheté \"%s\" pour la somme de %s!", BusinessData[id][bizName], FormatNumber(BusinessData[id][bizPrice]));

			ShowPlayerFooter(playerid, "Vous avez ~g~acheté~w~ le business!");
			Log_Write("logs/biz_log.txt", "[%s] %s has purchased business ID: %d for %s.", ReturnDate(), ReturnName(playerid), id, FormatNumber(BusinessData[id][bizPrice]));
		}
	}
	if (!strcmp(nom, "vendre", true))
	{
		static id = -1;
		if (!IsPlayerInAnyVehicle(playerid) && (id = Business_Nearest(playerid)) != -1 && Business_IsOwner(playerid, id))
		{
			if (isnull(scmd) || (!isnull(scmd) && strcmp(scmd, "confirmer", true) != 0))
			{
				SendClientMessageEx(playerid, COLOR_USAGE, "/biz vendre \"confirmer\"");
				SendClientMessage(playerid, COLOR_INFO, "Vous êtes sur le point de vendre votre business, vous allez récupèrer 80%% du prix initial.");
			}
			else if (!strcmp(scmd, "confirmer", true))
			{
				BusinessData[id][bizOwner] = 0;
				new prix = (BusinessData[id][bizPrice]*80)/100;
				Business_Refresh(id);
				Business_Save(id);
				GiveMoney(playerid,prix);
				SendClientMessageEx(playerid, COLOR_INFO, "Vous avez vendu votre business: %s pour %d$ (80/100)", BusinessData[id][bizName],prix);
				Log_Write("logs/biz_log.txt", "[%s] %s has abandoned business ID: %d.", ReturnDate(), ReturnName(playerid), id);
			}
		}
		else SendClientMessageEx(playerid, COLOR_ERROR, "Vous n'êtes pas à proximité du bien à vendre.");
	}
	if (!strcmp(nom, "lock", true))
	{
		static id = -1;
		if (!IsPlayerInAnyVehicle(playerid) && (id = (Business_Inside(playerid) == -1) ? (Business_Nearest(playerid)) : (Business_Inside(playerid))) != -1)
		{
			if (Business_IsOwner(playerid, id) || PlayerData[playerid][pAdmin] >= 5)
			{
				if (!BusinessData[id][bizLocked])
				{
					BusinessData[id][bizLocked] = true;

					Business_Refresh(id);
					Business_Save(id);

					ShowPlayerFooter(playerid, "Vous avez ~r~fermé~w~ le business");
					PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);
				}
				else
				{
					BusinessData[id][bizLocked] = false;

					Business_Refresh(id);
					Business_Save(id);

					ShowPlayerFooter(playerid, "Vous avez ~g~ouvert~w~ le business");
					PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);
				}
			}
		}
		else SendClientMessageEx(playerid, COLOR_ERROR, "Vous n'êtes pas à portée de ce que vous voulez verrouiller.");
	}
	if (!strcmp(nom, "caisse", true))
	{
		static bizid = -1, type[24], str[12], amount;

		if ((bizid = Business_Inside(playerid)) != -1 && Business_IsOwner(playerid, bizid))
		{
			if (sscanf(scmd, "s[24]S()[12]", type, str))
			{
				SendClientMessageEx(playerid, COLOR_USAGE, "/biz caisse <options> (%s disponible)", FormatNumber(BusinessData[bizid][bizVault]));
				SendClientMessage(playerid, COLOR_USAGE, "OPTIONS: retirer, deposer, balance");
				return 1;
			}
			if (!strcmp(type, "retirer", true))
			{
				if (sscanf(str, "d", amount))
				return SendClientMessageEx(playerid, COLOR_USAGE, "/biz caisse <retirer> <montant>");

				if (amount < 1 || amount > BusinessData[bizid][bizVault])
				return SendClientMessageEx(playerid, COLOR_ERROR, "Montant invalide.");

				BusinessData[bizid][bizVault] -= amount;
				Business_Save(bizid);

				GiveMoney(playerid, amount);
				SendNearbyMessage(playerid, 15.0, COLOR_PURPLE, "%s retire un montant de %s dans la caisse du business.", ReturnName(playerid), FormatNumber(amount));
			}
			else if (!strcmp(type, "deposer", true))
			{
				if (sscanf(str, "d", amount))
				return SendClientMessageEx(playerid, COLOR_USAGE, "/biz caisse <deposer> <montant>");

				if (amount < 1 || amount > GetMoney(playerid))
				return SendClientMessageEx(playerid, COLOR_ERROR, "Montant invalide");

				BusinessData[bizid][bizVault] += amount;
				Business_Save(bizid);

				GiveMoney(playerid, -amount);
				SendNearbyMessage(playerid, 15.0, COLOR_PURPLE, "%s dépose un montant de %s dans la caisse du business.", ReturnName(playerid), FormatNumber(amount));
			}
			else if (!strcmp(type, "balance", true))
			{
				SendClientMessageEx(playerid, COLOR_INFO, "\"%s\" Il y a maintenant un solde total de: %s.", BusinessData[bizid][bizName], FormatNumber(BusinessData[bizid][bizVault]));
			}
		}
		else SendClientMessageEx(playerid, COLOR_ERROR, "Vous devez être dans l'intérieur de votre business.");
	}
	if (!strcmp(nom, "produits", true))
	{
		static bizid = -1;
		if ((bizid = Business_Inside(playerid)) != -1 && Business_IsOwner(playerid, bizid))
		{
			Business_ProductMenu(playerid, bizid);
		}
		else SendClientMessageEx(playerid, COLOR_ERROR, "Vous n'êtes pas dans votre maison ou dans votre business.");
	}
	if (!strcmp(nom, "infos", true))
	{
		new id = -1;
		if ((id = (Business_Inside(playerid) == -1) ? (Business_Nearest(playerid)) : (Business_Inside(playerid))) != -1 && Business_IsOwner(playerid, id))
		{
			SendClientMessageEx(playerid, COLOR_INFO, "ID: %d | Business: %s | Produits: %d | Caisse: %s", id, BusinessData[id][bizName], BusinessData[id][bizProducts], FormatNumber(BusinessData[id][bizVault]));
		}

		else if (PlayerData[playerid][pAdmin] >= 5)
		{
			static id_admin = -1;
			if ((id_admin = Business_Nearest(playerid)) != -1)
			{
	            SendClientMessageEx(playerid, COLOR_INFO, "ID: %d | Nom : %s | Produits : %d | Caisse : %d | Type : %d | Propriétaire : %s", id_admin, BusinessData[id_admin][bizName], BusinessData[id_admin][bizProducts], BusinessData[id_admin][bizVault], BusinessData[id_admin][bizType], IdsqlNom(BusinessData[id_admin][bizOwner]));
	            SendClientMessageEx(playerid, COLOR_INFO, "Vérouillé (1=oui;0=non) : %d | Shipment : %d | Prix : %d | Message : %s", BusinessData[id_admin][bizLocked], BusinessData[id_admin][bizShipment], BusinessData[id_admin][bizPrice], BusinessData[id_admin][bizMessage]);
			}
			else SendClientMessageEx(playerid, COLOR_ERROR, "Vous n'êtes pas près d'un business.");
		}
		else SendClientMessageEx(playerid, COLOR_ERROR, "Vous n'êtes pas près de votre business.");
	}
	if (!strcmp(nom, "nom", true))
	{
		new id = -1;
		if ((id = (Business_Inside(playerid) == -1) ? (Business_Nearest(playerid)) : (Business_Inside(playerid))) != -1 && Business_IsOwner(playerid, id))
		{
			if (isnull(scmd)) return SendClientMessageEx(playerid, COLOR_USAGE, "/biz nom <BizName>");

			if (strlen(scmd) > 32) return SendClientMessageEx(playerid, COLOR_ERROR, "Le nom de l'entreprise ne peut pas dépasser 32 caractères.");

			format(BusinessData[id][bizName], 32, scmd);

			Business_Refresh(id);
			Business_Save(id);

			SendClientMessageEx(playerid, COLOR_INFO, "Le nouveau nom du business est: \"%s\".", scmd);
		}
		else SendClientMessageEx(playerid, COLOR_ERROR, "Vous n'êtes pas près de votre business.");
	}
	if (!strcmp(nom, "message", true))
	{
		new id = -1;
		if ((id = (Business_Inside(playerid) == -1) ? (Business_Nearest(playerid)) : (Business_Inside(playerid))) != -1 && Business_IsOwner(playerid, id))
		{
			if (isnull(scmd)) return SendClientMessageEx(playerid, COLOR_USAGE, "/biz message <message> - Utilisez \"none\" pour le retirer.");

			if (!strcmp(scmd, "none", true))
			{
				BusinessData[id][bizMessage][0] = '\0';

				Business_Save(id);
				SendClientMessageEx(playerid, COLOR_INFO, "Vous avez supprimé le message d'entrée.");
			}
			else
			{
				format(BusinessData[id][bizMessage], 128, scmd);

				Business_Save(id);
				SendClientMessageEx(playerid, COLOR_INFO, "Le nouveau message du business est: \"%s\".", scmd);
			}
		}
		else SendClientMessageEx(playerid, COLOR_ERROR, "Vous n'êtes pas près de votre business.");
	}
	if (!strcmp(nom, "livraison", true))
	{
		new id = (Business_Inside(playerid) == -1) ? (Business_Nearest(playerid)) : (Business_Inside(playerid));
		if (id == -1 || !Business_IsOwner(playerid, id)) return SendClientMessageEx(playerid, COLOR_ERROR, "Vous n'êtes pas près de votre business.");
		if (BusinessData[id][bizType] == 5) return SendClientMessageEx(playerid, COLOR_ERROR, "Vous ne pouvez pas demander l'expédition pour ce type d'affaires.");

		if (BusinessData[id][bizShipment])
		{
			foreach (new i : Player) if (PlayerData[i][pShipment] == id)
			{
				CancelShipment(i);
				SendClientMessageEx(i, COLOR_INFO, "La demande d'expédition a été annulée.");
			}
			BusinessData[id][bizShipment] = 0;
			Business_Save(id);

			SendClientMessageEx(playerid, COLOR_INFO, "Votre entreprise ne demande plus une expédition.");
			SendJobMessage(1, COLOR_YELLOW, "** %s demande une expédition pour %s.", ReturnName(playerid), BusinessData[id][bizName]);
		}
		else
		{
			if (BusinessData[id][bizDeliver][0] == 0.0 && BusinessData[id][bizDeliver][1] == 0.0 && BusinessData[id][bizDeliver][2] == 0.0) return SendClientMessageEx(playerid, COLOR_ERROR, "Le point de livraison pour votre business n'est pas réglé.");

			BusinessData[id][bizShipment] = 1;
			Business_Save(id);

			SendClientMessageEx(playerid, COLOR_INFO, "Vous avez demandé une livraison pour votre business.");
			SendJobMessage(1, COLOR_YELLOW, "* %s demande un envoie pour %s (/expedier pour accepter).", ReturnName(playerid), BusinessData[id][bizName]);
		}
	}
	if (!strcmp(nom, "employer", true))
	{
		static bizid = -1, type[24], string2[128];

		if (((bizid = Business_Inside(playerid)) != -1 && Business_IsOwner(playerid, bizid)) || (PlayerData[playerid][pAdmin] >= 5 && PlayerData[playerid][pAdminDuty]))
		{
			if (sscanf(scmd, "s[24]S()[128]", type, string2))
			{
				SendClientMessageEx(playerid, COLOR_USAGE, "/biz employer <options>");
				SendClientMessage(playerid, COLOR_USAGE, "OPTIONS: ajouter, supprimer, skin, position, infos");
				return 1;
			}

			if (!strcmp(type, "ajouter", true))
			{
			    if(Actor_CountBiz(bizid) >= 2)
			    return SendClientMessage(playerid, COLOR_ERROR, "Vous ne pouvez pas avoir plus de 2 employés dans votre bizness.");
			    
				new actor_name[50];

				if (sscanf(string2, "s[50]", actor_name))
				return SendClientMessageEx(playerid, COLOR_USAGE, "/biz employer ajouter <Nom>");
				
				static
					actor_id = -1;

				actor_id = Actor_Create(playerid, bizid, actor_name);
				if (actor_id == -1) return SendClientMessageEx(playerid, COLOR_ERROR, "Le serveur a atteint sa limite d'actors.");

				new
				    Float:pos[3];
				    
				GetPlayerPos(playerid, pos[0], pos[1], pos[2]);
				SetPlayerPos(playerid, pos[0]+2, pos[1], pos[2]);
				
				SendClientMessageEx(playerid, COLOR_INFO, "Félicitation, vous avez ajouté un employé dans votre bizness. (ID: %d)", actor_id);
			}
			else if (!strcmp(type, "supprimer", true))
			{
				static actor_id = -1;

				if ((actor_id = Actor_Nearest(playerid)) != -1)
				{
				    if(ActorData[actor_id][actorBiz] != bizid)
				    return SendClientMessage(playerid, COLOR_ERROR, "Vous n'êtes pas à proximité d'un de vos employés.");
				    
					Actor_Delete(actor_id);
				    SendClientMessage(playerid, COLOR_INFO, "Vous avez viré votre employé de votre bizness.");
				}
				else SendClientMessage(playerid, COLOR_ERROR, "Vous n'êtes pas à proximité d'un de vos employés.");
			}
			else if (!strcmp(type, "skin", true))
			{
				new actor_id = -1;

				if ((actor_id = Actor_Nearest(playerid)) != -1)
				{
				    if(ActorData[actor_id][actorBiz] != bizid)
				    return SendClientMessage(playerid, COLOR_ERROR, "Vous n'êtes pas à proximité d'un de vos employés.");
				    
					new skinid;

					if (sscanf(string2, "d", skinid))
					return SendClientMessageEx(playerid, COLOR_USAGE, "/biz employer skin <SkinID>");
					
					if(skinid < 0 || skinid > 311)
					return SendClientMessageEx(playerid, COLOR_ERROR, "Le skin doit être comprit entre 1 et 311.");
					
					ActorData[actor_id][actorSkin] = skinid;
					
					Actor_Refresh(actor_id);
					Actor_Save(actor_id);
					
				    SendClientMessageEx(playerid, COLOR_INFO, "Vous avez modifier la tenue vestimentaire de votre employer (Skin: %d).", skinid);
				}
				else SendClientMessage(playerid, COLOR_ERROR, "Vous n'êtes pas à proximité d'un de vos employés.");
			}
			else if (!strcmp(type, "position", true))
			{
				new actor_id2;

				if (sscanf(string2, "d", actor_id2))
				return SendClientMessageEx(playerid, COLOR_USAGE, "/biz employer position <EmployerID (Utilisez \"/biz employer infos\" pour l'ID de l'employer)>");

				if(!ActorData[actor_id2][actorExists] || ActorData[actor_id2][actorBiz] != bizid)
				return SendClientMessageEx(playerid, COLOR_ERROR, "L'ID de l'employer que vous avez entrer est incorrect.");

				GetPlayerPos(playerid, ActorData[actor_id2][actorPos][0], ActorData[actor_id2][actorPos][1], ActorData[actor_id2][actorPos][2]);
				GetPlayerFacingAngle(playerid, ActorData[actor_id2][actorPos][3]);

				Actor_Refresh(actor_id2);
				Actor_Save(actor_id2);

				new
				    Float:pos[3];

				GetPlayerPos(playerid, pos[0], pos[1], pos[2]);
				SetPlayerPos(playerid, pos[0]+2, pos[1], pos[2]);

			    SendClientMessageEx(playerid, COLOR_INFO, "Vous avez modifier la position de votre employer.");
			}
			else if (!strcmp(type, "infos", true))
			{
			    if(Actor_CountBiz(bizid) == 0)
			    return SendClientMessage(playerid, COLOR_ERROR, "Vous avez aucun employer.");
			    
			    SendClientMessageEx(playerid, 0x7EA0DAFF, "Liste de vos employés:");
				SendClientMessage(playerid, 0x7EA0DAFF, "¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯");
				
			    for(new i=0; i<MAX_ACTORS; i++) if(ActorData[i][actorExists] && ActorData[i][actorBiz] == bizid)
			    {
					SendClientMessageEx(playerid, -1, "(ID:%d) %s", i, ActorData[i][actorName]);
				}
			}
		}
		else SendClientMessageEx(playerid, COLOR_ERROR, "Vous devez être dans l'intérieur de votre business.");
	}
	if (!strcmp(nom, "creer", true))
	{
		static type, price, id;
		if (PlayerData[playerid][pAdmin] < 6) return SendClientMessageEx(playerid, COLOR_ERROR, "Vous n'avez pas la permission d'utiliser cette commande.");

		if (sscanf(scmd, "dd", type, price))
		{
			SendClientMessageEx(playerid, COLOR_USAGE, "/biz creer [type] [price]");
			SendClientMessage(playerid, COLOR_YELLOW, "[TYPES]:{FFFFFF} 1: Retail | 2: Weapons | 3: Clothes | 4: Fast Food | 5: Dealership | 6: Gas Station");
			return 1;
		}
		if (type < 1 || type > 6) return SendClientMessageEx(playerid, COLOR_ERROR, "Le type est invalide. Il doit être comprit entre 1 et 6.");
		id = Business_Create(playerid, type, price);
		if (id == -1) return SendClientMessageEx(playerid, COLOR_ERROR, "Le serveur a atteint sa limite de biz.");

		SendClientMessageEx(playerid, COLOR_INFO, "Vous avez créé le biz ID: %d.", id);
	}
	if (!strcmp(nom, "edit", true))
	{
		static id, type[24], string2[128];

		if (PlayerData[playerid][pAdmin] < 5) return SendClientMessageEx(playerid, COLOR_ERROR, "Vous n'avez pas la permission d'utiliser cette commande.");

		if (sscanf(scmd, "ds[24]S()[128]", id, type, string2))
		{
			SendClientMessageEx(playerid, COLOR_USAGE, "/biz edit <BizID> [name]");
			SendClientMessage(playerid, COLOR_USAGE, "OPTIONS: location, interior, deliver, name, price, stock, type, cars, spawn");
			SendClientMessage(playerid, COLOR_USAGE, "OPTIONS: spawn, produits");
			return 1;
		}
		if ((id < 0 || id >= MAX_BUSINESSES) || !BusinessData[id][bizExists]) return SendClientMessageEx(playerid, COLOR_ERROR, "Mauvais business ID.");


		if (!strcmp(type, "location", true))
		{
			GetPlayerPos(playerid, BusinessData[id][bizPos][0], BusinessData[id][bizPos][1], BusinessData[id][bizPos][2]);
			GetPlayerFacingAngle(playerid, BusinessData[id][bizPos][3]);

			BusinessData[id][bizExterior] = GetPlayerInterior(playerid);
			BusinessData[id][bizExteriorVW] = GetPlayerVirtualWorld(playerid);

			Business_Refresh(id);
			Business_Save(id);

			SendAdminAlert(COLOR_ADMINGROUP, "%s a modifié la position du biz ID: %d.", ReturnName(playerid), id);
		}
		else if (!strcmp(type, "produits", true))
		{
		    if(Business_Inside(playerid) == -1)
		    return SendClientMessageEx(playerid, COLOR_ERROR, "Vous devez être dans le biz pour éditer ses produits.");
		    
			Business_ProductMenu(playerid, id);
		}
		else if (!strcmp(type, "interior", true))
		{
			GetPlayerPos(playerid, BusinessData[id][bizInt][0], BusinessData[id][bizInt][1], BusinessData[id][bizInt][2]);
			GetPlayerFacingAngle(playerid, BusinessData[id][bizInt][3]);

			BusinessData[id][bizInterior] = GetPlayerInterior(playerid);

			foreach (new i : Player)
			{
				if (PlayerData[i][pBusiness] == BusinessData[id][bizID])
				{
					SetPlayerPos(i, BusinessData[id][bizInt][0], BusinessData[id][bizInt][1], BusinessData[id][bizInt][2]);
					SetPlayerFacingAngle(i, BusinessData[id][bizInt][3]);

					SetPlayerInterior(i, BusinessData[id][bizInterior]);
					SetCameraBehindPlayer(i);
				}
			}
			Business_Save(id);
			SendAdminAlert(COLOR_ADMINGROUP, "%s a modifié la position intérieur du biz ID: %d.", ReturnName(playerid), id);
		}
		else if (!strcmp(type, "deliver", true))
		{
			if (BusinessData[id][bizType] == 5)
			return SendClientMessageEx(playerid, COLOR_ERROR, "This business doesn't accept deliveries.");

			if (GetPlayerInterior(playerid) > 0 || GetPlayerVirtualWorld(playerid) > 0)
			return SendClientMessageEx(playerid, COLOR_ERROR, "You can only place the delivery point outside interiors.");

			GetPlayerPos(playerid, BusinessData[id][bizDeliver][0], BusinessData[id][bizDeliver][1], BusinessData[id][bizDeliver][2]);
			Business_Refresh(id);

			Business_Save(id);
			SendAdminAlert(COLOR_ADMINGROUP, "%s a modifié le point de livraison du biz ID: %d.", ReturnName(playerid), id);
		}
		else if (!strcmp(type, "price", true))
		{
			new price;

			if (sscanf(string2, "d", price))
			return SendClientMessageEx(playerid, COLOR_USAGE, "/biz edit <BizID> price <Prix>");

			BusinessData[id][bizPrice] = price;

			Business_Refresh(id);
			Business_Save(id);

			SendAdminAlert(COLOR_ADMINGROUP, "%s a modifié le prix du biz ID: %d à %s$.", ReturnName(playerid), id, FormatNumber(price));
		}
		else if (!strcmp(type, "stock", true))
		{
			new amount;

			if (sscanf(string2, "d", amount))
			return SendClientMessageEx(playerid, COLOR_USAGE, "/biz edit <BizID> stock <Produits>");

			BusinessData[id][bizProducts] = amount;

			Business_Refresh(id);
			Business_Save(id);

			SendAdminAlert(COLOR_ADMINGROUP, "%s a modifié le stock du biz ID: %d à %s produits.", ReturnName(playerid), id, FormatNumber(amount, ""));
		}
		else if (!strcmp(type, "name", true))
		{
			new name[32];

			if (sscanf(string2, "s[32]", name))
			return SendClientMessageEx(playerid, COLOR_USAGE, "/biz edit <BizID> name <Name>");

			format(BusinessData[id][bizName], 32, name);

			Business_Refresh(id);
			Business_Save(id);

			SendAdminAlert(COLOR_ADMINGROUP, "%s a modifié le nom du biz ID: %d à \"%s\".", ReturnName(playerid), id, name);
		}
		else if (!strcmp(type, "custom", true))
		{
			if(BusinessData[id][bizCustom])
			{
				SendAdminAlert(COLOR_ADMINGROUP, "%s a désactiver le mode custom pour le biz ID: %d.", ReturnName(playerid), id);
				BusinessData[id][bizCustom] = 0;
			}
			else
			{
				SendAdminAlert(COLOR_ADMINGROUP, "%s a activer le mode custom pour le biz ID: %d.", ReturnName(playerid), id);
				BusinessData[id][bizCustom] = 1;
			}

			Business_Refresh(id);
			Business_Save(id);
		}
		else if (!strcmp(type, "type", true))
		{
			new typeint;

			if (sscanf(string2, "d", typeint))
			{
				SendClientMessageEx(playerid, COLOR_USAGE, "/biz edit <BizID> type <Type>");
				SendClientMessage(playerid, COLOR_YELLOW, "[TYPES]:{FFFFFF} 1: Retail | 2: Weapons | 3: Clothes | 4: Fast Food | 5: Concessionnaire | 6: Station-Essence");
				return 1;
			}
			if (typeint < 1 || typeint > 6) return SendClientMessageEx(playerid, COLOR_ERROR, "Le type doit être comprit entre 1 et 6.");

			BusinessData[id][bizType] = typeint;

			switch (typeint)
			{
				case 1:
				{
					BusinessData[id][bizInt][0] = -27.3074;
					BusinessData[id][bizInt][1] = -30.8741;
					BusinessData[id][bizInt][2] = 1003.5573;
					BusinessData[id][bizInt][3] = 0.0000;
					BusinessData[id][bizInterior] = 4;
				}
				case 2:
				{
					BusinessData[id][bizInt][0] = 316.3963;
					BusinessData[id][bizInt][1] = -169.8375;
					BusinessData[id][bizInt][2] = 999.6010;
					BusinessData[id][bizInt][3] = 0.0000;
					BusinessData[id][bizInterior] = 6;
				}
				case 3:
				{
					BusinessData[id][bizInt][0] = 161.4801;
					BusinessData[id][bizInt][1] = -96.5368;
					BusinessData[id][bizInt][2] = 1001.8047;
					BusinessData[id][bizInt][3] = 0.0000;
					BusinessData[id][bizInterior] = 18;
				}
				case 4:
				{
					BusinessData[id][bizInt][0] = 363.3402;
					BusinessData[id][bizInt][1] = -74.6679;
					BusinessData[id][bizInt][2] = 1001.5078;
					BusinessData[id][bizInt][3] = 315.0000;
					BusinessData[id][bizInterior] = 10;
				}
				case 5:
				{
					BusinessData[id][bizInt][0] = 1494.5612;
					BusinessData[id][bizInt][1] = 1304.2061;
					BusinessData[id][bizInt][2] = 1093.2891;
					BusinessData[id][bizInt][3] = 0.0000;
					BusinessData[id][bizInterior] = 3;
				}
				case 6:
				{
					BusinessData[id][bizInt][0] = -27.3383;
					BusinessData[id][bizInt][1] = -57.6909;
					BusinessData[id][bizInt][2] = 1003.5469;
					BusinessData[id][bizInt][3] = 0.0000;
					BusinessData[id][bizInterior] = 6;
				}
			}
			foreach (new i : Player)
			{
				if (PlayerData[i][pBusiness] == BusinessData[id][bizID])
				{
					SetPlayerPos(i, BusinessData[id][bizInt][0], BusinessData[id][bizInt][1], BusinessData[id][bizInt][2]);
					SetPlayerFacingAngle(i, BusinessData[id][bizInt][3]);

					SetPlayerInterior(i, BusinessData[id][bizInterior]);
					SetCameraBehindPlayer(i);
				}
			}
			Business_Refresh(id);

			Business_Save(id);
			SendAdminAlert(COLOR_ADMINGROUP, "%s a modifié le type du biz ID: %d à %d.", ReturnName(playerid), id, typeint);
		}
		else if (!strcmp(type, "cars", true))
		{
			if (BusinessData[id][bizType] != 5) return SendClientMessageEx(playerid, COLOR_ERROR, "Ce bizness n'est pas une concession.");

			PlayerData[playerid][pDealership] = id;
			Business_EditCars(playerid, id);
		}
		else if (!strcmp(type, "spawn", true))
		{
			if (BusinessData[id][bizType] != 5) return SendClientMessageEx(playerid, COLOR_ERROR, "Ce bizness n'est pas une concession.");
			if (GetPlayerInterior(playerid) > 0 || GetPlayerVirtualWorld(playerid) > 0) return SendClientMessageEx(playerid, COLOR_ERROR, "Vous pouvez uniquement attribuer des spawn véhicule à l'extérieur.");

			GetPlayerPos(playerid, BusinessData[id][bizSpawn][0], BusinessData[id][bizSpawn][1], BusinessData[id][bizSpawn][2]);
			GetPlayerFacingAngle(playerid, BusinessData[id][bizSpawn][3]);

			BusinessData[id][bizExterior] = GetPlayerInterior(playerid);

			Business_Save(id);
			SendAdminAlert(COLOR_ADMINGROUP, "%s a modifié le spawn des véhicules du biz ID: %d.", ReturnName(playerid), id);
		}
	}
	if (!strcmp(nom, "supprimer", true))
	{
		static id = 0;
		if (PlayerData[playerid][pAdmin] < 6) return SendClientMessageEx(playerid, COLOR_ERROR, "Vous n'avez pas la permission d'utiliser cette commande.");

		if (sscanf(scmd, "d", id))
		{
			SendClientMessageEx(playerid, COLOR_USAGE, "/biz supprimer <BizID>");
			return 1;
		}

		if ((id < 0 || id >= MAX_BUSINESSES) || !BusinessData[id][bizExists]) return SendClientMessageEx(playerid, COLOR_ERROR, "L'ID entrer est incorrect.");

		Business_Delete(id);
		SendClientMessageEx(playerid, COLOR_INFO, "Vous avez supprimé le biz ID: %d.", id);
	}
	if (!strcmp(nom, "mairie", true))
	{
		static id = 0;
		if (sscanf(scmd, "d", id))
		{
			SendClientMessageEx(playerid, COLOR_USAGE, "/biz mairie <BizID>");
			return 1;
		}

		if ((id < 0 || id >= MAX_BUSINESSES) || !BusinessData[id][bizExists]) return SendClientMessageEx(playerid, COLOR_ERROR, "L'ID entrer est incorrect.");

		BusinessData[id][bizOwner] = 99999999;

		Business_Refresh(id);
		Business_Save(id);

		SendClientMessageEx(playerid, COLOR_INFO, "Ce biz appartient maintenant à la mairie (/biz).", id);
	}
	return 1;
}

stock IsNearCapFuel(playerid, vehicleid, Float:range = 1.5)
{
	new
	    modelid = GetVehicleModel(vehicleid),
		Float:pos[6];

	GetVehicleModelInfo(modelid, VEHICLE_MODEL_INFO_PETROLCAP, pos[0], pos[1], pos[2]);
	GetVehiclePos(vehicleid, pos[3], pos[4], pos[5]);
	
	if(IsPlayerInRangeOfPoint(playerid, range, pos[0]+pos[3], pos[1]+pos[4], pos[2]+pos[5]))
	    return true;
	else
	    return false;
}

CMD:v(playerid, params[])
return cmd_vehicule(playerid, params);
CMD:vehicule(playerid, params[])
{
	// "scmd" pour sscanf
	static nom[24], scmd[128];
	if (sscanf(params, "s[24]S()[128]", nom, scmd))
	{
	    SendClientMessageEx(playerid, COLOR_USAGE, "/v(ehicule) <options>");
	    SendClientMessage(playerid, COLOR_USAGE, "OPTIONS: garer, spawn, lock, vendre, remplir, radio, tow");
	    SendClientMessage(playerid, COLOR_USAGE, "OPTIONS: coffre, liste, preter, clef, phare, capot, double");
	    SendClientMessage(playerid, COLOR_USAGE, "OPTIONS: fenetre, ejecter, ceinture, (r)etirer(t)unning, jeter");

	    if (PlayerData[playerid][pAdmin] >= 5)
	    {
	    	SendClientMessage(playerid, COLOR_USAGE, "OPTIONS - ADMIN: creer, jcreer, supprimer, edit, infos, liste [PlayerID/PlayerName]");
	    }
	    return 1;
	}
	if (!strcmp(nom, "retirertunning", true) || !strcmp(nom, "rt", true))
	{
		new
			carid = GetPlayerVehicleID(playerid);

		if (!carid)
			return SendClientMessageEx(playerid, COLOR_ERROR, "Vous devez être dans un véhicule.");

		if (IsVehicleImpounded(carid))
			return SendClientMessageEx(playerid, COLOR_ERROR, "Ce véhicule est mis en fourrière et vous ne pouvez pas l'utiliser.");

		if ((carid = Car_GetID(carid)) != -1 && Car_IsOwner(playerid, carid))
		{
			if (GetPlayerState(playerid) != PLAYER_STATE_DRIVER)
			return SendClientMessageEx(playerid, COLOR_ERROR, "Vous devez être le conducteur.");

			for (new i = 0; i < 14; i ++) {
				RemoveVehicleComponent(CarData[carid][carVehicle], CarData[carid][carMods][i]);

				CarData[carid][carMods][i] = 0;
			}
			Car_Save(carid);
			SendClientMessageEx(playerid, COLOR_INFO, "Vous avez supprimé les modifications de ce véhicule.");
		}
		else SendClientMessageEx(playerid, COLOR_ERROR, "Il n'y a aucun tuning à retirer.");
	}
	if (!strcmp(nom, "delouer", true))
	{
		new
		 	lights,
		 	alarm,
		 	doors,
			bonnet,
			boot,
			objective;

		if(!IsPlayerConnected(playerid))
		return SendClientMessage(playerid, COLOR_WHITE, "Vous devez être connecté pour utiliser cette commande.");

		if (DernieVehLoc[playerid] == -1 || DernieVehLocID[playerid] == -1)
		return SendClientMessage(playerid, COLOR_GREY, "Vous ne louez pas de véhicule.");

		CarData[ DernieVehLocID[playerid] ][carLocaID] = 0;
		CarData[ DernieVehLocID[playerid] ][carLocked] = 0;

		PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
		SendClientMessageEx(playerid, COLOR_INFO, "Vous avez délouer votre véhicule.");

		Car_Save(DernieVehLocID[playerid]);
		SetVehicleToRespawn(DernieVehLoc[playerid]);

		if(IsPlayerInAnyVehicle(playerid)) RemovePlayerFromVehicle(playerid);

	    DernieVehLoc[playerid] = -1;
	    DernieVehLocID[playerid] = -1;

		SetVehicleParamsEx(DernieVehLocID[playerid], 0, lights, alarm, doors, bonnet, boot, objective);
	}
	if (!strcmp(nom, "ceinture", true))
	{
		if (!IsPlayerInAnyVehicle(playerid))
			return SendClientMessageEx(playerid, COLOR_ERROR, "Vous devez être dans un véhicule.");

		if (!IsValidCeintureVehicle(GetVehicleModel(GetPlayerVehicleID(playerid))))
		    return SendClientMessageEx(playerid, COLOR_ERROR, "Il n'y a pas de ceinture dans ce véhicule.");
		    
		switch (PlayerData[playerid][pCeinture])
		{
			case 0:
			{
				SendNearbyMessage(playerid, 15.0, COLOR_PURPLE, "%s enfile sa ceinture.", ReturnName(playerid, 1));
				PlayerData[playerid][pCeinture] = 1;
			}
			case 1:
			{
				PlayerData[playerid][pCeinture] = 0;
				SendNearbyMessage(playerid, 15.0, COLOR_PURPLE, "%s retire sa ceinture.", ReturnName(playerid, 1));
			}
		}
	}
	if (!strcmp(nom, "tunningreset", true))
	{
		new
			carid = GetPlayerVehicleID(playerid);

		if (!carid)
			return SendClientMessageEx(playerid, COLOR_ERROR, "Vous devez être dans un véhicule.");

		if (IsVehicleImpounded(carid))
			return SendClientMessageEx(playerid, COLOR_ERROR, "Ce véhicule est mis en fourrière et vous ne pouvez pas l'utiliser.");

		if ((carid = Car_GetID(carid)) != -1 && Car_IsOwner(playerid, carid))
		{
			if (GetPlayerState(playerid) != PLAYER_STATE_DRIVER)
				return SendClientMessageEx(playerid, COLOR_ERROR, "Vous devez être le conducteur.");

			for (new i = 0; i < 14; i ++) {
				RemoveVehicleComponent(CarData[carid][carVehicle], CarData[carid][carMods][i]);

				CarData[carid][carMods][i] = 0;
			}
			Car_Save(carid);
			SendClientMessageEx(playerid, COLOR_INFO, "Vous avez supprimé les modifications de ce véhicule.");
		}
		else SendClientMessageEx(playerid, COLOR_ERROR, "Il n'y a aucun tuning à retirer.");
	}
	if (!strcmp(nom, "ejecter", true))
	{
		new
			targetid;

		if(sscanf(scmd, "u", targetid)) SendClientMessageEx(playerid, COLOR_USAGE, "/ejecter [ID]");
		else
		{
		    if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return SendClientMessageEx(playerid, COLOR_ERROR, "Vous devez être dans un véhicule et être conducteur pour utiliser cette commande.");
		    if (!IsPlayerConnected(targetid)) return SendClientMessageEx(playerid, COLOR_ERROR, "Ce joueur n'est pas connecté.");
		    if(GetPlayerVehicleID(targetid) == GetPlayerVehicleID(playerid))
		    {
	      	    SendClientMessageEx(playerid, COLOR_WHITE, "Vous éjectez %s de votre véhicule.", ReturnName(targetid, 0));
	      	    SendClientMessageEx(targetid, COLOR_WHITE,"Vous avez été éjecté par %s.", ReturnName(playerid));
	      	    RemovePlayerFromVehicle(targetid);
	      	}
		}
	}
	if (!strcmp(nom, "fenetre", true))
	{
		if(!IsPlayerInAnyVehicle(playerid)) return SendClientMessageEx(playerid, COLOR_ERROR, "Vous devez être dans un véhicule.");

		new vehicleid = GetPlayerVehicleID(playerid);
		new seatid = GetPlayerVehicleSeat(playerid);

	    GetVehicleParamsCarWindows(vehicleid, Fenetre[0][vehicleid], Fenetre[1][vehicleid], Fenetre[2][vehicleid], Fenetre[3][vehicleid]);

	   	Fenetre[seatid][vehicleid] = !Fenetre[seatid][vehicleid];

	   	if(Fenetre[seatid][vehicleid])
	   		SendNearbyMessage(playerid, 15.0, COLOR_PURPLE, "%s ferme la fenêtre.", ReturnName(playerid, 1));
	   	else
	   		SendNearbyMessage(playerid, 15.0, COLOR_PURPLE, "%s ouvre la fenêtre.", ReturnName(playerid, 1));

	    SetVehicleParamsCarWindows(vehicleid, Fenetre[0][vehicleid], Fenetre[1][vehicleid], Fenetre[2][vehicleid], Fenetre[3][vehicleid]);
	}
	if (!strcmp(nom, "spawn", true))
	{
		new
		    query[250];

	    mysql_format(g_iHandle, query, sizeof(query),"SELECT * FROM `cars` WHERE `carOwner` = '%d'", PlayerData[playerid][pID]);
		mysql_tquery(g_iHandle, query, "SpawnCar", "i", playerid);
	}
	if (!strcmp(nom, "garer", true))
	{
		new carid = GetPlayerVehicleID(playerid);
		if (!carid)  return SendClientMessageEx(playerid, COLOR_ERROR, "Vous devez être dans un véhicule.");
		if (IsVehicleImpounded(carid)) return SendClientMessageEx(playerid, COLOR_ERROR, "Ce véhicule est mis en fourrière et vous ne pouvez pas l'utiliser.");

		if ((carid = Car_GetID(carid)) != -1 && Car_IsOwner(playerid, carid))
		{
			if (GetPlayerState(playerid) != PLAYER_STATE_DRIVER)
			return SendClientMessageEx(playerid, COLOR_ERROR, "Vous devez être le conducteur.");
			
			if(!IsPlayerInRangeOfPoint(playerid, 10.0, CarData[carid][carPos][0], CarData[carid][carPos][1], CarData[carid][carPos][2]))
			{
				Dialog_Show(playerid, DIALOG_NEWCARSPAWN, DIALOG_STYLE_MSGBOX, "Changer le stationnement de votre véhicule", "Vous n'êtes pas à votre stationnement habituel (point-rouge minimap).\n\nSouhaitez-vous que cet endroit devienne votre stationnement?\nCette opération coûte 1'500$.", "Oui", "Non");
				Waypoint_Set(playerid, "Stationnement", CarData[carid][carPos][0], CarData[carid][carPos][1], CarData[carid][carPos][2]);
				return 1;
			}

			GetVehicleHealth(GetPlayerVehicleID(playerid), CarData[carid][carHealth_real]);
			GetVehicleDamageStatus(GetPlayerVehicleID(playerid), CarData[carid][carHealth][0], CarData[carid][carHealth][1], CarData[carid][carHealth][2], CarData[carid][carHealth][3]);

			Car_Save(carid);
		    Car_Unspawn(carid);
			SendClientMessageEx(playerid, COLOR_INFO, "Vous avez garé votre %s.", ReturnVehicleModelName(CarData[carid][carModel]));
		}
		else SendClientMessageEx(playerid, COLOR_ERROR, "Vous ne pouvez pas garer ce véhicule.");
	}
	if (!strcmp(nom, "lock", true))
	{
	   	static id = -1;
		if ((id = Car_Nearest(playerid)) != -1)
		{
			static engine, lights, alarm, doors, bonnet, boot, objective;

			GetVehicleParamsEx(CarData[id][carVehicle], engine, lights, alarm, doors, bonnet, boot, objective);

			if (Car_IsOwner(playerid, id) || (PlayerData[playerid][pFaction] != -1 && CarData[id][carFaction] == GetFactionType(playerid)) || CarData[id][carDouble] == PlayerData[playerid][pID] || CarData[id][carLocaID] == PlayerData[playerid][pID])
			{
				if (!CarData[id][carLocked])
				{
					CarData[id][carLocked] = true;
					Car_Save(id);

					ShowPlayerFooter(playerid, "Vous avez ~r~fermé~w~ le vehicule");
					PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);

					SetVehicleParamsEx(CarData[id][carVehicle], engine, lights, alarm, 1, bonnet, boot, objective);
					
					if(!IsModelBicycle(CarData[id][carModel])) SetTimerEx("FlashingHeadlights", 100, false, "dd", 5, CarData[id][carVehicle]);
				}
				else
				{
					CarData[id][carLocked] = false;
					Car_Save(id);

					ShowPlayerFooter(playerid, "Vous avez ~g~ouvert~w~ le vehicule");
					PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);

					SetVehicleParamsEx(CarData[id][carVehicle], engine, lights, alarm, 0, bonnet, boot, objective);
					if(!IsModelBicycle(CarData[id][carModel])) SetTimerEx("FlashingHeadlights", 100, false, "dd", 5, CarData[id][carVehicle]);
				}
			}
		}
		else SendClientMessageEx(playerid, COLOR_ERROR, "Vous n'êtes pas à portée de ce que vous voulez verrouiller.");
	}
	if (!strcmp(nom, "vendre", true))
	{
	    static id = -1, bizid = -1;
	    
		if ((bizid = Business_Nearest(playerid, 30.0)) == -1 || BusinessData[bizid][bizType] != 5) return SendClientMessageEx(playerid, COLOR_ERROR, "Vous n'êtes pas à proximité d'un concessionnaire.");
		if ((id = Car_Inside(playerid)) != -1 && Car_IsOwner(playerid, id))
		{
			if (isnull(scmd) || (!isnull(scmd) && strcmp(scmd, "confirmer", true) != 0))
			{
				SendClientMessageEx(playerid, COLOR_USAGE, "/v(ehicule) vendre \"confirmer\"");
				
				if (PlayerData[playerid][pDonator]) SendClientMessage(playerid, COLOR_INFO, "Vous êtes sur le point de vendre votre véhicule, vous allez récupèrer 100%% du prix initial.");
				else SendClientMessage(playerid, COLOR_INFO, "Vous êtes sur le point de vendre votre véhicule, vous allez récupèrer 80%% du prix initial.");
			}
		
			else if (CarData[id][carImpounded] != -1) return SendClientMessageEx(playerid, COLOR_ERROR, "Ce véhicule est en fourrière et vous ne pouvez pas l'utiliser.");

			else if (!strcmp(scmd, "confirmer", true))
			{
				new
					model = CarData[id][carModel],
					prix;

				if(PlayerData[playerid][pDonator] == 1) prix = CarData[id][carPrice];
				else prix = (CarData[id][carPrice]*80)/100;
				
				Car_Delete(id);
				GiveMoney(playerid,prix);
				SendClientMessageEx(playerid, COLOR_INFO, "Vous avez vendu votre %s pour %d$.", ReturnVehicleModelName(model),prix);
				Log_Write("logs/car_log.txt", "[%s] %s has abandoned their %s.", ReturnDate(), ReturnName(playerid), ReturnVehicleName(model));
			}
		}
		else SendClientMessageEx(playerid, COLOR_ERROR, "Vous n'êtes pas à proximité de votre véhicule.");
	}
	if (!strcmp(nom, "remplir", true))
	{
		static
			vehicleid = -1;

		if (PlayerData[playerid][pRefill] != INVALID_VEHICLE_ID)
		{
			BusinessData[PlayerData[playerid][pGasStation]][bizVault] += PlayerData[playerid][pRefillPrice];
			Business_Save(PlayerData[playerid][pGasStation]);

			GiveMoney(playerid, -PlayerData[playerid][pRefillPrice]);

			SendClientMessageEx(playerid, COLOR_INFO, "Vous avez remplit votre véhicule pour la somme de $%d.", PlayerData[playerid][pRefillPrice]);
			
			Car_Save(Car_GetID(PlayerData[playerid][pRefill]));
			StopRefilling(playerid);

			return 1;
		}
		new id = Pump_Nearest(playerid, 5.0);
		if (id != -1)
		{
			if (GetMoney(playerid) < 2) return SendClientMessage(playerid, COLOR_ERROR, "Vous n'avez pas assez d'argent.");
			if (GetPlayerVehicleID(playerid) != 0) return SendClientMessageEx(playerid, COLOR_ERROR, "Vous devez être en dehors du véhicule.");
			if ((vehicleid = Car_Nearest(playerid)) == -1) return SendClientMessageEx(playerid, COLOR_ERROR, "Vous n'êtes pas à proximité d'un véhicule.");
			//if (!IsNearCapFuel(playerid, CarData[vehicleid][carVehicle], 2.5)) return SendClientMessageEx(playerid, COLOR_ERROR, "Vous n'êtes pas à côté du réservoir de votre véhicule.");
			if (GetEngineStatus(CarData[vehicleid][carVehicle])) return SendClientMessageEx(playerid, COLOR_ERROR, "Il est nécessaire de couper votre moteur pour commencer à remplir votre véhicule.");
		
			if (CoreVehicles[ CarData[vehicleid][carVehicle] ][vehFuel] > 99)
			return SendClientMessageEx(playerid, COLOR_ERROR, "Le véhicule est déjà plein.");

			if (IsPumpOccupied(id))
			return SendClientMessageEx(playerid, COLOR_ERROR, "Cette pompe est déjà utilisé.");

			if (PumpData[id][pumpFuel] < 1)
			return SendClientMessageEx(playerid, COLOR_ERROR, "Cette pompe n'a plus assez de carburant.");

			PlayerData[playerid][pGasPump] = id;
			PlayerData[playerid][pGasStation] = PumpData[id][pumpBusiness];

			PlayerData[playerid][pRefill] = CarData[vehicleid][carVehicle];
			
			PlayerData[playerid][pRefillBar] = CreateProgressBar(228.00, 404.00, 211.50, 14.50, 625574655, 100.0);
			SetProgressBarValue(PlayerData[playerid][pRefillBar], CoreVehicles[ CarData[vehicleid][carVehicle] ][vehFuel]);
			ShowProgressBarForPlayer(playerid, PlayerData[playerid][pRefillBar]);
			
			SendClientMessage(playerid, COLOR_INFO, "Utilisez \"/v(ehicule) remplir\" pour arrêter le plein d'essence.");
		}
		else SendClientMessageEx(playerid, COLOR_ERROR, "Vous n'êtes pas à portée d'une pompe.");
	}
	if (!strcmp(nom, "radio", true))
	{
		new vehicleid = GetPlayerVehicleID(playerid);
		if (GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return SendClientMessageEx(playerid, COLOR_ERROR, "Vous devez être en conducteur dans un véhicule.");
		if (!IsEngineVehicle(vehicleid)) return SendClientMessageEx(playerid, COLOR_ERROR, "Ce véhicule n'a pas de radio.");

		Dialog_Show(playerid, Radio, DIALOG_STYLE_LIST, "Radio", "Culturel\nOldies\nOther\nPop\nRhythm & Blues\nRock\nTalk\nUrban\nElectric\nURL\nEteindre", "Select", "Cancel");
	}
	if (!strcmp(nom, "coffre", true))
	{
		static type[24], string[128];
		
		if (sscanf(scmd, "s[24]S()[128]", type, string))
		{
			SendClientMessageEx(playerid, COLOR_USAGE, "/v(ehicule) coffre <options>");
			SendClientMessage(playerid, COLOR_USAGE, "OPTIONS: voir, lock");
			if (GetFactionType(playerid) == FACTION_POLICE)
			{
				SendClientMessage(playerid, COLOR_USAGE, "OPTIONS-POLICE: forcer");
			}
			return 1;
		}
		if (!strcmp(type, "voir", true))
		{
		   	static id = -1;
			if ((id = Car_Nearest(playerid)) != -1)
			{
				if (IsVehicleImpounded(CarData[id][carVehicle])) return SendClientMessageEx(playerid, COLOR_ERROR, "Ce véhicule est mis en fourrière et vous ne pouvez pas l'utiliser.");
				if (IsPlayerInAnyVehicle(playerid)) return SendClientMessageEx(playerid, COLOR_ERROR, "Vous devez quitter le véhicule.");
				if (!IsDoorVehicle(CarData[id][carVehicle])) return SendClientMessageEx(playerid, COLOR_ERROR, "Ce véhicule n'a pas de coffre.");
				if (CarData[id][carLocked] || !GetTrunkStatus(CarData[id][carVehicle])) return SendClientMessageEx(playerid, COLOR_ERROR, "Le coffre du véhicule est vérouillé.");

				Car_ShowTrunk(playerid, CarData[id][carVehicle]);
			}
			else SendClientMessageEx(playerid, COLOR_ERROR, "Vous n'êtes pas près d'un véhicule.");
		}
		else if (!strcmp(type, "lock", true))
	    {
		   	static id = -1;
			if ((id = Car_Nearest(playerid)) != -1)
			{
				if (CarData[id][carLocked])
				return SendClientMessageEx(playerid, COLOR_ERROR, "Le coffre du véhicule est verouillé.");

				if (!GetTrunkStatus(CarData[id][carVehicle]))
				{
					SetTrunkStatus(CarData[id][carVehicle], 1);
					ShowPlayerFooter(playerid, "Vous avez ~g~ouvert~w~ le coffre !");
				}
				else
				{
					SetTrunkStatus(CarData[id][carVehicle], 0);
					ShowPlayerFooter(playerid, "Vous avez ~r~fermé~w~ le coffre !");
				}
			}
			else SendClientMessageEx(playerid, COLOR_ERROR, "Vous n'êtes pas près d'un véhicule.");
		}
		else if (!strcmp(type, "forcer", true))
	    {
	        if (GetFactionType(playerid) != FACTION_POLICE)
	            return SendClientMessageEx(playerid, COLOR_ERROR, "Vous devez être un agent du LSPD.");
	            
		   	static id = -1;
			if ((id = Car_Nearest(playerid)) != -1)
			{
				SetTrunkStatus(CarData[id][carVehicle], 1);
				ShowPlayerFooter(playerid, "Vous avez ~g~forcé~w~ le coffre !");
			}
			else SendClientMessageEx(playerid, COLOR_ERROR, "Vous n'êtes pas près d'un véhicule.");
		}
	}
	if (!strcmp(nom, "liste", true))
	{
	   	new
	   	    userid,
		    query[250];
		    
		if (sscanf(scmd, "u", userid))
		{
		    mysql_format(g_iHandle, query, sizeof(query),"SELECT * FROM `cars` WHERE `carOwner` = '%d'", PlayerData[playerid][pID]);
			mysql_tquery(g_iHandle, query, "ListCar", "ii", playerid, playerid);
		}
		else if (PlayerData[playerid][pAdmin] >= 3)
		{
			if (userid == INVALID_PLAYER_ID) return SendClientMessageEx(playerid, COLOR_ERROR, "Ce joueur n'est pas valide.");
			
		    mysql_format(g_iHandle, query, sizeof(query),"SELECT * FROM `cars` WHERE `carOwner` = '%d'", PlayerData[playerid][pID]);
			mysql_tquery(g_iHandle, query, "ListCar", "ii", playerid, userid);
		}
	}
	if (!strcmp(nom, "preter", true))
	{
		new Float:fX, Float:fY, Float:fZ;
		SendClientMessage(playerid, COLOR_GREY, "-----------------------------------------------------------");
		if (PlayerData[playerid][pCarD] > 0)
		{
			new voit = PlayerData[playerid][pCarD];
		    new id = Car_GetID(voit);
			GetVehiclePos(CarData[id][carVehicle], fX, fY, fZ);
			SendClientMessageEx(playerid, COLOR_YELLOW, "*Véhicule preté ID: %d | Modèle: %s | Localisation: %s", CarData[id][carVehicle], ReturnVehicleModelName(CarData[id][carModel]), GetLocation(fX, fY, fZ));
		}
		else SendClientMessage(playerid, COLOR_WHITE, "Vous ne possédez pas de véhicules prété");
		SendClientMessage(playerid, COLOR_GREY, "-----------------------------------------------------------");
	}
	if (!strcmp(nom, "clef", true))
	{
		new vehicleid = GetPlayerVehicleID(playerid);
		new id = Car_GetID(vehicleid);

		if(id == -1) return SendClientMessageEx(playerid, COLOR_ERROR, "Véhicule invalide.");
		if (!IsEngineVehicle(vehicleid)) return SendClientMessageEx(playerid, COLOR_ERROR, "Vous n'êtes pas à l'intérieur d'un véhicule.");
		if (GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return SendClientMessageEx(playerid, COLOR_ERROR, "Vous devez être conducteur.");
		if (CoreVehicles[vehicleid][vehFuel] < 1) return SendClientMessageEx(playerid, COLOR_ERROR, "Le réservoir est vide.");
		if (ReturnVehicleHealth(vehicleid) <= 300) return SendClientMessageEx(playerid, COLOR_ERROR, "Le moteur est HS.");
		if (CarData[id][carLoca] > 0 && CarData[id][carID] != PlayerData[playerid][pLocaID]) return SendClientMessageEx(playerid, COLOR_ERROR, "Vous n'avez pas les clés du véhicule.");
		if (CarData[id][carOwner] > 0 && CarData[id][carOwner] != PlayerData[playerid][pID] && CarData[id][carDouble] <= 0) return SendClientMessageEx(playerid, COLOR_ERROR, "Vous n'avez pas les clés du véhicule.");
		if (CarData[id][carDouble] > 0 && CarData[id][carDouble] != PlayerData[playerid][pID] && !Car_IsOwner(playerid, id)) return SendClientMessageEx(playerid, COLOR_ERROR, "Vous n'avez pas les clés du véhicule.");
		if (CarData[id][carSabot] != 0 && GetEngineStatus(vehicleid) == 0) return SendClientMessageEx(playerid, COLOR_ERROR, "Ce véhicule a un sabot, Utilisez /payersabot pour le retirer ($%d)",CarData[id][carSabPri]);

		switch (GetEngineStatus(vehicleid))
		{
			case false:
			{
				SetTimerEx("Demar",1500,0,"ii",playerid,vehicleid);
				//GameTextForPlayer(playerid, "~w~Démarrage en cours..",1000,3);
				ShowPlayerFooter(playerid, "~w~Démarrage en cours ...");
			}
			case true:
			{
				SetEngineStatus(vehicleid, false);
				ShowPlayerFooter(playerid, "Vous avez ~r~éteint~w~ le moteur");
			}
		}
	}
	if (!strcmp(nom, "phare", true))
	{
		new vehicleid = GetPlayerVehicleID(playerid);
		if (!IsEngineVehicle(vehicleid)) return SendClientMessageEx(playerid, COLOR_ERROR, "Vous devez être dans un véhicule.");
		if (GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return SendClientMessageEx(playerid, COLOR_ERROR, "Vous devez être conducteur pour utiliser cette commande.");

		switch (GetLightStatus(vehicleid))
		{
			case false:
			{
				SetLightStatus(vehicleid, true);
				ShowPlayerFooter(playerid, "Vous avez ~g~allumé~w~ les phares!");
			}
			case true:
			{
				SetLightStatus(vehicleid, false);
				ShowPlayerFooter(playerid, "Vous avez ~r~éteint~w~ les phares!");
			}
		}
	}
	if (!strcmp(nom, "capot", true))
	{
		for(new i = 1, j = GetVehiclePoolSize(); i <= j; i++) if (IsValidVehicle(i) && IsPlayerNearHood(playerid, i))
		{
			if (!IsDoorVehicle(i)) return SendClientMessageEx(playerid, COLOR_ERROR, "Ce véhicule n'a pas de capot.");

			if (!GetHoodStatus(i))
			{
				SetHoodStatus(i, true);
				ShowPlayerFooter(playerid, "Vous avez ~g~ouvert~w~ le capot.");
			}
			else
			{
				SetHoodStatus(i, false);
				ShowPlayerFooter(playerid, "Vous avez ~r~fermé~w~ le capot.");
			}
			return 1;
		}
		SendClientMessageEx(playerid, COLOR_ERROR, "Vous n'êtes pas près d'un véhicule avec un capot.");
	}
	if (!strcmp(nom, "jeter", true))
	{
		new cle = PlayerData[playerid][pCarD];
		new id = Car_GetID(cle);
		if (PlayerData[playerid][pCarD] <= 0)
		return SendClientMessageEx(playerid, COLOR_ERROR, "Vous n'avez pas de clés prêtées.");
		if (id != -1)
		{
			SendNearbyMessage(playerid, 15.0, COLOR_PURPLE, "* %s a jeté le double des clé de la %s", ReturnName(playerid), ReturnVehicleName(cle));
			CarData[id][carDouble] = 0;
			PlayerData[playerid][pCarD] = 0;
			Car_Save(id);
			SQL_SaveCharacter(playerid);
		}
	}
	if (!strcmp(nom, "double", true))
	{
		static userid, idcar;
		if (sscanf(scmd, "ud", userid, idcar))
		{
			SendClientMessageEx(playerid, COLOR_USAGE, "/v(ehicule) double <PlayerID/PlayerName> <ID du véhicule - /v(ehicule) liste>");
			return 1;
		}
		if (userid == INVALID_PLAYER_ID || userid == playerid ) return SendClientMessageEx(playerid, COLOR_ERROR, "Ce joueur n'est pas valide.");
		if (CarData[idcar][carDouble] > 0) return SendClientMessageEx(playerid, COLOR_ERROR, "Vous avez déjà passé le double à cette personne.");
		if (!Car_IsOwner(playerid, Car_GetID(idcar))) return SendClientMessageEx(playerid, COLOR_ERROR, "Vous ne pouvez pas donner les clés d'un véhicule qui ne vous appartient pas.");
		if (PlayerData[userid][pCarD] > 0) return SendClientMessageEx(playerid, COLOR_ERROR, "Cette personne a déjà un véhicule prêté.");
		if (idcar < 1 || idcar > MAX_VEHICLES || !IsValidVehicle(idcar)) return SendClientMessageEx(playerid, COLOR_ERROR, "L'ID de ce véhicule est incorrect.");

		new id = Car_GetID(idcar);
		if (id != -1)
		{
			SendNearbyMessage(playerid, 15.0, COLOR_PURPLE, "* %s préte les clés de sa %s à %s.", ReturnName(playerid), ReturnVehicleName(idcar), ReturnName(userid, 0));
			CarData[id][carDouble] = PlayerData[userid][pID];
			PlayerData[userid][pCarD] = idcar;
			Car_Save(id);
			SQL_SaveCharacter(userid);
		}
	}
	if (!strcmp(nom, "creer", true))
	{
		static model[32], color1, color2, id = -1, type = 0, job = 0, loca = 0;

		if (PlayerData[playerid][pAdmin] < 6) return SendClientMessageEx(playerid, COLOR_ERROR, "Vous n'avez pas la permission d'utiliser cette commande.");

		if (sscanf(scmd, "s[32]I(-1)I(-1)I(0)I(0)I(0)", model, color1, color2, type, job, loca))
		{
			SendClientMessageEx(playerid, COLOR_USAGE, "/v(ehicule) creer <ModelName/ModelID> <couleur 1> <couleur 2> <faction> <job> <location 1/0>");
			SendClientMessage(playerid, COLOR_YELLOW, "Utilisez (-1) pour sans faction et (-1) pour sans job et (1) pour la Location.");
			SendClientMessage(playerid, COLOR_YELLOW, "/typecar pour plus d'info");
			return 1;
		}
		if ((model[0] = GetVehicleModelByName(model)) == 0) return SendClientMessageEx(playerid, COLOR_ERROR, "ID invalide.");

		static Float:x, Float:y, Float:z, Float:angle;
		GetPlayerPos(playerid, x, y, z);
		GetPlayerFacingAngle(playerid, angle);

		id = Car_Create(0, model[0], x, y, z, angle, color1, color2, type, job,loca,0,GetPlayerVirtualWorld(playerid),GetPlayerInterior(playerid));

		if (id == -1) return SendClientMessageEx(playerid, COLOR_ERROR, "Le serveur a atteint la limite pour les véhicules dynamiques.");

		SetPlayerPosEx(playerid, x, y, z + 2, 1000);
		SendClientMessageEx(playerid, COLOR_INFO, "Vous avez créé avec succès le véhicule ID: %d.", CarData[id][carVehicle]);
	}
	if (!strcmp(nom, "apark", true))
	{
		if (PlayerData[playerid][pAdmin] < 5)
		return SendClientMessageEx(playerid, COLOR_ERROR, "Vous n'avez pas la permission d'utiliser cette commande.");
		
		new
		    id = Car_GetID(GetPlayerVehicleID(playerid));
		    
		if(id == -1)
		return SendClientMessageEx(playerid, COLOR_ERROR, "Vous n'êtes pas dans un véhicule ou ce véhicule ne peut pas être garer.");
		
		GetVehiclePos(GetPlayerVehicleID(playerid), CarData[id][carPos][0], CarData[id][carPos][1], CarData[id][carPos][2]);
		GetVehicleZAngle(GetPlayerVehicleID(playerid), CarData[id][carPos][3]);

		Car_Spawn(id);
		Car_Save(id);
		
		PutPlayerInVehicle(playerid, CarData[id][carVehicle], 0);
		SendClientMessageEx(playerid, COLOR_INFO, "Vous avez garé le véhicule ID: %d.", CarData[id][carVehicle]);
		
	}
	if (!strcmp(nom, "jcreer", true))
	{
		static userid, model[32];
		if (PlayerData[playerid][pAdmin] < 6) return SendClientMessageEx(playerid, COLOR_ERROR, "Vous n'avez pas la permission d'utiliser cette commande.");
		if (sscanf(scmd, "us[32]", userid, model))
 		{
		 	SendClientMessageEx(playerid, COLOR_USAGE, "/v(ehicule) jcreer <PlayerID/PlayerName> [modelid/name]");
			return 1;
		}
		if (Car_GetCount(userid) >= MAX_OWNABLE_CARS) return SendClientMessageEx(playerid, COLOR_ERROR, "Ce joueur ne peut pas posséder plus de véhicules.");
		if ((model[0] = GetVehicleModelByName(model)) == 0) return SendClientMessageEx(playerid, COLOR_ERROR, "L'ID de ce véhicule est incorrect.");

		static Float:x, Float:y, Float:z, Float:angle, id = -1;

		GetPlayerPos(userid, x, y, z);
		GetPlayerFacingAngle(userid, angle);

		id = Car_Create(PlayerData[userid][pID], model[0], x, y + 2, z + 1, angle, random(127), random(127), 0,0,0,0);

		if (id == -1)
		return SendClientMessageEx(playerid, COLOR_ERROR, "Le serveur a atteint la limite pour les véhicules dynamiques.");

		SendClientMessageEx(playerid, COLOR_INFO, "Vous avez créé un véhicule (ID: %d) qui appartiendra à %s.", CarData[id][carVehicle], ReturnName(userid, 0));
	}
	if (!strcmp(nom, "supprimer", true))
	{
		static id = 0;

		if (PlayerData[playerid][pAdmin] < 5) return SendClientMessageEx(playerid, COLOR_ERROR, "Vous n'avez pas la permission d'utiliser cette commande.");

		if (sscanf(scmd, "d", id))
		{
			if (IsPlayerInAnyVehicle(playerid))
			id = GetPlayerVehicleID(playerid);

			else return SendClientMessageEx(playerid, COLOR_USAGE, "/v(ehicule) supprimer [ID]");
		}
		if (!IsValidVehicle(id) || Car_GetID(id) == -1) return SendClientMessageEx(playerid, COLOR_ERROR, "L'ID de ce véhicule est incorrect.");

		Car_Delete(Car_GetID(id));
		SendClientMessageEx(playerid, COLOR_INFO, "Vous avez détruit avec succès le véhicule ID: %d.", id);
	}
	if (!strcmp(nom, "edit", true))
	{
		new id, type[24], string[128];
		if (PlayerData[playerid][pAdmin] < 5) return SendClientMessageEx(playerid, COLOR_ERROR, "Vous n'avez pas la permission d'utiliser cette commande.");

		if (sscanf(scmd, "ds[24]S()[128]", id, type, string))
		{
			SendClientMessageEx(playerid, COLOR_USAGE, "/v(ehicule) edit <VehicleID> <Options>");
			SendClientMessage(playerid, COLOR_USAGE, "OPTIONS: location, faction, loca, prixloca, job");
			SendClientMessage(playerid, COLOR_USAGE, "OPTIONS: heal, essence, model, valeur, color1, color2");
			return 1;
		}
		if (!IsValidVehicle(id) || Car_GetID(id) == -1) return SendClientMessageEx(playerid, COLOR_ERROR, "Mauvais vehicle ID.");

		id = Car_GetID(id);
		if (!strcmp(type, "location", true))
		{
			GetPlayerPos(playerid, CarData[id][carPos][0], CarData[id][carPos][1], CarData[id][carPos][2]);
			GetPlayerFacingAngle(playerid, CarData[id][carPos][3]);

			Car_Save(id);
			Car_Spawn(id);

			SetPlayerPosEx(playerid, CarData[id][carPos][0], CarData[id][carPos][1], CarData[id][carPos][2] + 2.0, 1000);
			SendAdminAlert(COLOR_ADMINGROUP, "%s a modifié la position du véhicule ID: %d.", ReturnName(playerid), CarData[id][carVehicle]);
		}
		if (!strcmp(type, "model", true))
		{
			static
				model[32];

			if (sscanf(string, "s[32]", model))
			{
				SendClientMessageEx(playerid, COLOR_USAGE, "/v edit <VehicleID> model <ModelID/ModelName>");
				return 1;
			}

            if ((model[0] = GetVehicleModelByName(model)) == 0) return SendClientMessageEx(playerid, COLOR_ERROR, "Le modèle entré est incorrect.");
			CarData[id][carModel] = model[0];
			
			Car_Save(id);
			Car_Spawn(id);
			
			SendAdminAlert(COLOR_ADMINGROUP, "%s a modifié le modèle du véhicule ID: %d à %d.", ReturnName(playerid), CarData[id][carVehicle], model[0]);
		}
		else if (!strcmp(type, "heal", true))
		{
			static
			Float:amount;

			if (sscanf(string, "f", amount))
			{
				SendClientMessageEx(playerid, COLOR_USAGE, "/v edit <VehicleID> heal <HealCar>");
				return 1;
			}
			
			if (amount < 0.0)
			return SendClientMessageEx(playerid, COLOR_ERROR, "La vie d'un véhicule ne peut pas être égale ou inférieure à 0.");

			if(amount >= 1000.0)
			{
			    RepairVehicle(CarData[id][carVehicle]);
			}
			
			SetVehicleHealth(CarData[id][carVehicle], amount);
			SendClientMessageEx(playerid, COLOR_INFO, "Vous avez fixé la vie du véhicule (ID: %d) à %.1f.", CarData[id][carVehicle], amount);
		}
		else if (!strcmp(type, "faction", true))
		{
			new typeint;

			if (sscanf(string, "d", typeint))
			{
				SendClientMessageEx(playerid, COLOR_USAGE, "/v(ehicule) edit [id] [faction] [type]");
				SendClientMessage(playerid, COLOR_YELLOW, "[TYPES]:{FFFFFF} 1: Police | 2: News | 3: Medical | 4: Government | 5: Gang | 6: Mafia | 7: Mecano");
				return 1;
			}
			if ((typeint < -1 || typeint > 7) && typeint != 0)
			return SendClientMessageEx(playerid, COLOR_ERROR, "La faction doit être comprit entre 1 et 7 (-1 pour aucune).");

			CarData[id][carFaction] = typeint;

			Car_Save(id);
			SendAdminAlert(COLOR_ADMINGROUP, "%s a modifié le type du véhicule ID: %d à %d.", ReturnName(playerid), CarData[id][carVehicle], typeint);
		}
		else if (!strcmp(type, "loca", true))
		{
			if (CarData[id][carLoca] == 0)
			{
			    CarData[id][carPrice] = 1;
			    SendAdminAlert(COLOR_ADMINGROUP, "%s a mit en location le véhicule ID: %d", ReturnName(playerid), CarData[id][carVehicle]);
			}
			else
			{
			    CarData[id][carPrice] = 1;
			    SendAdminAlert(COLOR_ADMINGROUP, "%s a enlevé de location le véhicule ID: %d", ReturnName(playerid), CarData[id][carVehicle]);
			}
			Car_Save(id);
		}
		else if (!strcmp(type, "prixloca", true))
		{
			new priceLocation;

			if (sscanf(string, "d", priceLocation))
			{
				SendClientMessageEx(playerid, COLOR_USAGE, "/v(ehicule) edit [id] prixloca [prix]");
				return 1;
			}
			if (priceLocation < 1 || priceLocation > 20000)
			return SendClientMessageEx(playerid, COLOR_ERROR, "Entre 1 et 20'000$.");

			CarData[id][carLocaPrice] = priceLocation;

			Car_Save(id);
			SendAdminAlert(COLOR_ADMINGROUP, "%s a ajusté le prix de location du vehicle ID: %d à %d$.", ReturnName(playerid), CarData[id][carVehicle], priceLocation);
		}
		else if (!strcmp(type, "valeur", true))
		{
			new typeint;

			if (sscanf(string, "d", typeint))
			{
				SendClientMessageEx(playerid, COLOR_USAGE, "/v(ehicule) edit [id] valeur [prix]");
				return 1;
			}
			if (typeint < 0 || typeint > 9900000)
			return SendClientMessageEx(playerid, COLOR_ERROR, "Entre 0 et 9900000.");

			CarData[id][carPrice] = typeint;

			Car_Save(id);
			SendAdminAlert(COLOR_ADMINGROUP, "%s a ajusté le prix du vehicle ID: %d à %d.", ReturnName(playerid), CarData[id][carVehicle], typeint);
		}
		else if (!strcmp(type, "essence", true))
		{
			new amount;

			if (sscanf(string, "d", amount))
			{
				SendClientMessageEx(playerid, COLOR_USAGE, "/v(ehicule) edit <VehicleID> essence <Quantité>");
				return 1;
			}
			if (amount < 0 || amount > 100)
			return SendClientMessageEx(playerid, COLOR_ERROR, "Entre 0 et 100.");

			CoreVehicles[CarData[id][carVehicle]][vehFuel] = amount;

			Car_Save(id);
			SendAdminAlert(COLOR_ADMINGROUP, "%s a modifié l'essence du véhicule ID: %d à %dL.", ReturnName(playerid), CarData[id][carVehicle], amount);
		}
		else if (!strcmp(type, "job", true))
		{
			new typeint;

			if (sscanf(string, "d", typeint))
			{
				SendClientMessageEx(playerid, COLOR_USAGE, "/v(ehicule) edit [id] [job] [id]");
				return 1;
			}
			if (typeint < 0 || typeint > 11)
			return SendClientMessageEx(playerid, COLOR_ERROR, "Le type doit être comprit entre 1 et 11.");

			CarData[id][carJob] = typeint;

			Car_Save(id);
			SendAdminAlert(COLOR_ADMINGROUP, "%s a modifié le job du véhicule ID: %d à %d.", ReturnName(playerid), CarData[id][carVehicle], typeint);
		}
		else if (!strcmp(type, "color1", true))
		{
			new color1;

			if (sscanf(string, "d", color1))
			return SendClientMessageEx(playerid, COLOR_USAGE, "/v(ehicule) edit [id] [color1] [color 1]");

			if (color1 < 0 || color1 > 255)
			return SendClientMessageEx(playerid, COLOR_ERROR, "La couleur doit être comprise entre 0 et 255.");

			CarData[id][carColor1] = color1;
			ChangeVehicleColor(CarData[id][carVehicle], CarData[id][carColor1], CarData[id][carColor2]);

			Car_Save(id);
			SendAdminAlert(COLOR_ADMINGROUP, "%s a modifié la couleur (1) du véhicule ID: %d à %d.", ReturnName(playerid), CarData[id][carVehicle], color1);
		}
		else if (!strcmp(type, "color2", true))
		{
			new color2;

			if (sscanf(string, "d", color2))
			return SendClientMessageEx(playerid, COLOR_USAGE, "/v(ehicule) edit [id] [color2] [color 2]");

			if (color2 < 0 || color2 > 255)
			return SendClientMessageEx(playerid, COLOR_ERROR, "La couleur doit être comprise entre 0 et 255.");

			CarData[id][carColor2] = color2;
			ChangeVehicleColor(CarData[id][carVehicle], CarData[id][carColor1], CarData[id][carColor2]);

			Car_Save(id);
			SendAdminAlert(COLOR_ADMINGROUP, "%s a modifié la couleur (2) du véhicule ID: %d à %d.", ReturnName(playerid), CarData[id][carVehicle], color2);
		}
	}
	if (!strcmp(nom, "infos", true))
	{
	    static
	        vehicle_id;

		if (sscanf(scmd, "d", vehicle_id))
			return SendClientMessageEx(playerid, COLOR_USAGE, "/v(ehicule) infos <VehicleID>");

	    new vehicle = Car_GetID(vehicle_id), string[500];

	    if(vehicle != -1)
	    {
		    format(string, sizeof(string), "ID Car : %d | Modèle : %d | Propriétaire : %s (%d) | Faction : %d | Job : %d", vehicle_id, CarData[vehicle][carModel], IdsqlNom(CarData[vehicle][carOwner]), CarData[vehicle][carOwner], CarData[vehicle][carFaction], CarData[vehicle][carJob]);
		    SendClientMessage(playerid, -1, string);

		    format(string, sizeof(string), "Couleur 1 : %d | Couleur 2 : %d | Paintjob : %d | Vérouillé (1=oui;0=non) : %d | Location (1=oui;0=non) : %d (%d$)", CarData[vehicle][carColor1], CarData[vehicle][carColor2], CarData[vehicle][carPaintjob], CarData[vehicle][carLocked], CarData[vehicle][carLoca], CarData[vehicle][carLocaPrice]);
		    SendClientMessage(playerid, -1, string);
		}
		else SendClientMessage(playerid, COLOR_ERROR, "Cette ID ne correspond à aucun véhicule.");
	}
	return 1;
}

CMD:ma(playerid, params[])
return cmd_maison(playerid, params);
CMD:m(playerid, params[])
return cmd_maison(playerid, params);
CMD:maison(playerid, params[])
{
    static nom[24], scmd[128];
	if (sscanf(params, "s[24]S()[128]", nom, scmd))
	{
	    SendClientMessageEx(playerid, COLOR_USAGE, "/maison <options>");
	    SendClientMessage(playerid, COLOR_USAGE, "OPTIONS: acheter, vendre, louer, delouer, heal, sonner");
	    SendClientMessage(playerid, COLOR_USAGE, "OPTIONS: coffre, fourniture, etagere, porte, lock");
	    SendClientMessage(playerid, COLOR_USAGE, "OPTIONS: prixlocation, location, lumiere");

	    if (PlayerData[playerid][pAdmin] >= 5)
	    {
	    	SendClientMessage(playerid, COLOR_USAGE, "OPTIONS - ADMIN: creer, supprimer, edit, infos, avendre");
	    }
	    return 1;
	}
	if (!strcmp(nom, "acheter", true))
	{
		new id = -1;
	    if ((id = House_Nearest(playerid)) != -1)
		{
			if (House_GetCount(playerid) >= MAX_OWNABLE_HOUSES && PlayerData[playerid][pDonator] != 1)
			return SendClientMessageEx(playerid, COLOR_ERROR, "Vous ne pouvez pas avoir plus de %d maison", MAX_OWNABLE_HOUSES);

			if (HouseData[id][houseOwner])
			return SendClientMessageEx(playerid, COLOR_ERROR, "Cette maison est déjà vendu.");

			if (HouseData[id][housePrice] > GetMoney(playerid))
			return SendClientMessageEx(playerid, COLOR_ERROR, "Vous n'avez pas assez d'argent sur vous.");

			HouseData[id][houseOwner] = GetPlayerSQLID(playerid);

			House_Refresh(id);
			House_Save(id);

			GiveMoney(playerid, -HouseData[id][housePrice]);
			SendClientMessageEx(playerid, COLOR_INFO, "Vous avez acheté \"%s\" pour la somme de %s!", HouseData[id][houseAddress], FormatNumber(HouseData[id][housePrice]));

			if(!AstucesChallenges[playerid][2] && PlayerData[playerid][pAstuces])
			{
			    ValidChallenges(playerid, 2);
			    SendClientMessage(playerid, COLOR_GREEN, "Vous avez débloqué le challenge \"{33CC33}Trouvez-vous un logement{FFFFFF}\". +1 point respect (/challenges)");
			}
			
			ShowPlayerFooter(playerid, "Vous avez ~g~acheté~w~ la maison");
			Log_Write("logs/house_log.txt", "[%s] %s has purchased house ID: %d for %s.", ReturnDate(), ReturnName(playerid), id, FormatNumber(HouseData[id][housePrice]));
		}
	}
	if (!strcmp(nom, "vendre", true))
	{
		new id = -1;
		if (!IsPlayerInAnyVehicle(playerid) && (id = House_Nearest(playerid)) != -1 && House_IsOwner(playerid, id))
		{
			if (isnull(scmd) || (!isnull(scmd) && strcmp(scmd, "confirmer", true) != 0))
			{
				SendClientMessageEx(playerid, COLOR_USAGE, "/maison vendre \"confirmer\"");
				SendClientMessage(playerid, COLOR_INFO, "Vous êtes sur le point de vendre votre propriété, vous allez récupèrer 80/100 pourcent de la somme.");
			}
			else if (!strcmp(scmd, "confirmer", true))
			{
				HouseData[id][houseOwner] = 0;
				new prix = (HouseData[id][housePrice]*80)/100;
				House_Refresh(id);
				House_Save(id);
				GiveMoney(playerid,prix);
				SendClientMessageEx(playerid, COLOR_INFO, "Vous avez vendu votre maison: %s pour %d$ (80/100)", HouseData[id][houseAddress],prix);
				Log_Write("logs/house_log.txt", "[%s] %s has abandoned house ID: %d.", ReturnDate(), ReturnName(playerid), id);
			}
		}
		else SendClientMessageEx(playerid, COLOR_ERROR, "Vous n'êtes pas à proximité de votre maison.");
	}
	if (!strcmp(nom, "lock", true))
	{
		new id = -1;
		if (!IsPlayerInAnyVehicle(playerid) && (id = (House_Inside(playerid) == -1) ? (House_Nearest(playerid)) : (House_Inside(playerid))) != -1 && (House_IsOwner(playerid, id) || PlayerData[playerid][pLocat] == id))
		{
			if (!HouseData[id][houseLocked])
			{
				HouseData[id][houseLocked] = true;
				House_Save(id);

				ShowPlayerFooter(playerid, "Vous avez ~r~fermé~w~ la maison");
				PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);
			}
			else
			{
				HouseData[id][houseLocked] = false;
				House_Save(id);

				ShowPlayerFooter(playerid, "Vous avez ~g~ouvert~w~ la maison");
				PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);
			}
		}
	}
	if (!strcmp(nom, "coffre", true))
	{
		static houseid = -1;

		if ((houseid = House_Inside(playerid)) != -1 && (House_IsOwner(playerid, houseid)))
		{
			House_OpenStorage(playerid, houseid);
		}
		else SendClientMessageEx(playerid, COLOR_ERROR, "Vous devez être dans votre maison et être proprétaire pour utiliser cette commande.");
	}
	if (!strcmp(nom, "fourniture", true))
	{
		new type[24], string[128];

		if (sscanf(scmd, "s[24]S()[128]", type, string))
		{
			SendClientMessageEx(playerid, COLOR_USAGE, "/ma(ison) fourniture <Options>");
			SendClientMessage(playerid, COLOR_USAGE, "OPTIONS: acheter, gerer");
			return 1;
		}

		if (!strcmp(type, "acheter", true))
		{
			static houseid = -1;
			if ((houseid = House_Inside(playerid)) != -1 && House_IsOwner(playerid, houseid))
			{
				new
					string2[512],
					stringx[512];

				string[0] = 0;
				for (new i = 0; i < sizeof(g_aFurnitureTypes); i ++)
				{
					format(string2, sizeof(string2), "%s%s\t%s\n", string2, g_aFurnitureTypes[i], FormatNumber(GetPriceFurniture(i)));
				}
				format(stringx, sizeof(stringx), "Produit\tPrix\n%s", string2);
				Dialog_Show(playerid, FurnituresBuy, DIALOG_STYLE_TABLIST_HEADERS, "Achat de fournitures", stringx, "Acheter", "X");
			}
			else SendClientMessageEx(playerid, COLOR_ERROR, "Vous devez être dans votre maison et être proprétaire pour utiliser cette commande.");
		}

		else if (!strcmp(type, "gerer", true))
		{
			static houseid = -1;
			if ((houseid = House_Inside(playerid)) != -1 && House_IsOwner(playerid, houseid))
			{
				new count = 0, string2[MAX_FURNITURE * 32], colorFurniture[10];
				for (new i = 0; i != MAX_FURNITURE; i ++) if (count < MAX_HOUSE_FURNITURE && FurnitureData[i][furnitureExists] && FurnitureData[i][furnitureHouse] == houseid)
				{
					ListedFurniture[playerid][count++] = i;

					if(FurnitureData[i][furnitureActive]) format(colorFurniture, sizeof(colorFurniture), "{33CC33}");
					else format(colorFurniture, sizeof(colorFurniture), "{FF0000}");

					format(string2, sizeof(string2), "%s%s%s (%.2fm)\n", string2, colorFurniture, FurnitureData[i][furnitureName], GetPlayerDistanceFromPoint(playerid, FurnitureData[i][furniturePos][0], FurnitureData[i][furniturePos][1], FurnitureData[i][furniturePos][2]));
				}
				if (count)
				{
					Dialog_Show(playerid, ListedFurniture, DIALOG_STYLE_LIST, "Liste des fournitures", string2, "Ok", "X");
				}
				else SendClientMessageEx(playerid, COLOR_ERROR, "Cette propriété n'a pas commandé de meubles.");
			}
			else SendClientMessageEx(playerid, COLOR_ERROR, "Vous devez être dans votre maison et être proprétaire pour utiliser cette commande.");
		}
	}
	if (!strcmp(nom, "porte", true))
	{
		new type[24], string[128];

		if (sscanf(scmd, "s[24]S()[128]", type, string))
		{
			SendClientMessageEx(playerid, COLOR_USAGE, "/ma(ison) porte <Options>");
			SendClientMessage(playerid, COLOR_USAGE, "OPTIONS: acheter, gerer");
			return 1;
		}

		if (!strcmp(type, "acheter", true))
		{
			static houseid = -1;
			if ((houseid = House_Inside(playerid)) != -1 && House_IsOwner(playerid, houseid))
			{
			    if(GetMoney(playerid) < 1500)
			    return SendClientMessage(playerid, COLOR_ERROR, "Vous devez avoir 1500$ pour acheter une porte.");
			    
				PlayerData[playerid][pDoorCreate] = houseid;
				ShowModelSelectionMenu(playerid, "Choix de la porte", MODEL_SELECTION_DOORS, Doors_Model_List, sizeof(Doors_Model_List), 0.0, 0.0, 180.0);
			}
			else SendClientMessageEx(playerid, COLOR_ERROR, "Vous devez être dans votre maison et être proprétaire pour utiliser cette commande.");
		}

		else if (!strcmp(type, "gerer", true))
		{
			static houseid = -1;
			if ((houseid = House_Inside(playerid)) != -1 && House_IsOwner(playerid, houseid))
			{
				new count = 0, string2[MAX_GATES * 32];
				for (new i = 0; i != MAX_GATES; i ++) if (count < MAX_GATES && GateData[i][gateExists] && GateData[i][gateHouseID] == houseid)
				{
					ListedDoors[playerid][count++] = i;
					format(string2, sizeof(string2), "%sPorte %d (%.2fm)\n", string2, count, GetPlayerDistanceFromPoint(playerid, GateData[i][gatePos][0], GateData[i][gatePos][1], GateData[i][gatePos][2]));
				}
				if (count)
				{
					Dialog_Show(playerid, ListedDoors, DIALOG_STYLE_LIST, "Liste des portes", string2, "Ok", "X");
				}
				else SendClientMessageEx(playerid, COLOR_ERROR, "Cette propriété n'a pas commandé de portes.");
			}
			else SendClientMessageEx(playerid, COLOR_ERROR, "Vous devez être dans votre maison et être proprétaire pour utiliser cette commande.");
		}
	}
	if (!strcmp(nom, "sonner", true))
	{
		new id = House_Nearest(playerid);
		if (id == -1) return SendClientMessageEx(playerid, COLOR_ERROR, "Vous devez être près d'une maison.");
		foreach (new i : Player) if (House_Inside(i) == id)
		{
			SendClientMessage(i, COLOR_PURPLE, "* La sonnerie ce fait entendre..");
			PlayerPlaySound(i, 20801, 0, 0, 0);
		}
		PlayerPlaySoundEx(playerid, 20801);
		SendNearbyMessage(playerid, 15.0, COLOR_PURPLE, "%s sonne à la porte de la maison.", ReturnName(playerid, 1));
	}
	if (!strcmp(nom, "lumiere", true))
	{
		static id = -1;
		if ((id = House_Inside(playerid)) != -1)
		{
			if (!HouseData[id][houseLights])
			{
				foreach (new i : Player) if (House_Inside(i) == id)
				{
					PlayerTextDrawHide(i, PlayerData[i][pTextdraws][62]);
				}
				SendNearbyMessage(playerid, 15.0, COLOR_PURPLE, "%s allume la lumière de la maison.", ReturnName(playerid, 1));
				HouseData[id][houseLights] = true;
			}
			else
			{
				foreach (new i : Player) if (House_Inside(i) == id)
				{
					PlayerTextDrawShow(i, PlayerData[i][pTextdraws][62]);
				}
				SendNearbyMessage(playerid, 15.0, COLOR_PURPLE, "%s éteint la lumière de la maison.", ReturnName(playerid, 1));
				HouseData[id][houseLights] = false;
			}
		}
		else SendClientMessageEx(playerid, COLOR_ERROR, "Vous devez être dans une maison pour utiliser cette commande.");
	}
	if (!strcmp(nom, "heal", true))
	{
		static houseid = -1;

		if ((houseid = House_Inside(playerid)) != -1 && (PlayerData[playerid][pLocat] == houseid || House_IsOwner(playerid, houseid)))
		{
			new
				Float:HP;

			GetPlayerHealth(playerid, HP);
			
			if(HP >= 80)
				return SendClientMessageEx(playerid, COLOR_ERROR, "Votre santé est déjà au maximum.");
			
			SendClientMessageEx(playerid, COLOR_INFO, "Votre vie est maintenant à 80HP.");
			SetPlayerHealth(playerid, 80.0);
		}
		else SendClientMessageEx(playerid, COLOR_ERROR, "Vous devez être dans votre maison/chambre pour utiliser cette commande.");
	}
	if (!strcmp(nom, "louer", true))
	{
		static id = -1;
		if(PlayerData[playerid][pLocat] != -1) return SendClientMessageEx(playerid, COLOR_ERROR, "Vous avez déjà louer une chambre, vous devez \"/maison delouer\" avant d'en louer une nouvelle.");

		if ((id = House_Nearest(playerid)) != -1)
		{
			if (!HouseData[id][houseLocStatus]) return SendClientMessageEx(playerid, COLOR_ERROR, "Ce domicile n'est pas louable.");
			if (HouseData[id][houseLocNb] >= 10) return SendClientMessageEx(playerid, COLOR_ERROR, "Toutes les chambres de cette maison ont déjà été louées.");
			if (HouseData[id][houseLocPrice] > GetMoney(playerid)) return SendClientMessageEx(playerid, COLOR_ERROR, "Vous n'avez pas assez d'argent sur vous.");

			PlayerData[playerid][pLocat] = id;
			if(HouseData[id][houseOwner]) HouseData[id][houseMoney] += HouseData[id][houseLocPrice];
			HouseData[id][houseLocNb] += 1;

			House_Refresh(id);
			House_Save(id);
			
			PlayerData[playerid][pSpawnPoint] = 3;

			GiveMoney(playerid, -HouseData[id][houseLocPrice]);
			cmd_enter(playerid, "\1");
			
			SendClientMessageEx(playerid, COLOR_INFO, "Félicitations pour votre location, vous payez désormais %s par payday.", FormatNumber(HouseData[id][houseLocPrice]));
			SendClientMessageEx(playerid, COLOR_USAGE, "Votre spawn par défaut est maintenant la chambre que vous louez.");
			
			if(!AstucesChallenges[playerid][2] && PlayerData[playerid][pAstuces])
			{
			    ValidChallenges(playerid, 2);
			    SendClientMessage(playerid, COLOR_GREEN, "Vous avez débloqué le challenge \"{33CC33}Trouvez-vous un logement{FFFFFF}\". +1 point respect (/challenges)");
			}

			Log_Write("logs/house_log.txt", "[%s] %s has rent house ID: %d for %s.", ReturnDate(), ReturnName(playerid), id, FormatNumber(HouseData[id][housePrice]));
		}
		else SendClientMessageEx(playerid, COLOR_ERROR, "Vous devez être devant une maison.");
	}
	if (!strcmp(nom, "delouer", true))
	{
		static id = -1;

		if(PlayerData[playerid][pLocat] == -1) return SendClientMessageEx(playerid, COLOR_ERROR, "Vous n'avez louer aucune chambre.");

		if ((id = House_Nearest(playerid)) != -1)
		{
			PlayerData[playerid][pLocat] = -1;
			HouseData[id][houseLocNb] -= 1;

			House_Refresh(id);
			House_Save(id);

			SendClientMessageEx(playerid, COLOR_INFO, "Vous avez mis fin à votre location, vous vous retrouvez sans domicile fixe.");

			Log_Write("logs/house_log.txt", "[%s] %s has abandoned house ID: %d for %s.", ReturnDate(), ReturnName(playerid), id, FormatNumber(HouseData[id][housePrice]));
		}
		else SendClientMessageEx(playerid, COLOR_ERROR, "Vous devez être devant une maison.");
	}
	if (!strcmp(nom, "etagere", true))
	{
		new
			houseid = House_Inside(playerid),
			typebuffet[24],
			string[50];
			
		if (houseid == -1 || !House_IsOwner(playerid, houseid))
		return SendClientMessageEx(playerid, COLOR_ERROR, "Vous devez être dans votre maison et être proprétaire pour utiliser cette commande.");
			
        if (sscanf(scmd, "s[24]S()[50]", typebuffet, string))
        {
            SendClientMessageEx(playerid, COLOR_USAGE, "/maison etagere <options>");
			SendClientMessage(playerid, COLOR_USAGE, "OPTIONS: acheter, ajuster, supprimer");
            return 1;
        }
        if(strcmp(typebuffet, "acheter", true) == 0)
        {
			if (isnull(string) || (!isnull(string) && strcmp(string, "confirmer", true) != 0))
			{
				SendClientMessageEx(playerid, COLOR_USAGE, "/maison etagere acheter \"confirmer\"");
				SendClientMessage(playerid, COLOR_INFO, "Vous êtes sur le point d'acheter une étagère pour votre maison, vous allez payer 1000$.");
			}
			else
			{
				if (Rack_Count(playerid) >= 4) return SendClientMessageEx(playerid, COLOR_ERROR, "Votre maison peut avoir seulement 4 étagère.");
				if (Rack_Nearest(playerid) != -1) return SendClientMessageEx(playerid, COLOR_ERROR, "Vous ne pouvez pas utiliser cette commande près d'une autre étagère.");
				if (GetMoney(playerid) < 1000) return SendClientMessageEx(playerid, COLOR_ERROR, "Vous n'avez pas assez d'argent pour acheter ceci.");

				new id = Rack_Create(playerid, houseid);
				if (id == -1) return SendClientMessageEx(playerid, COLOR_ERROR, "Il n'y a plus de place pour placer d'étagère.");

				ResetEditing(playerid);

				PlayerData[playerid][pEditRack] = id;

				EditDynamicObject(playerid, RackData[id][rackObjects][4]);

				GiveMoney(playerid, -1000);
				SendClientMessageEx(playerid, COLOR_INFO, "Vous avez acheter une étagère pour la somme de $1,000");
			}
        }
        if(strcmp(typebuffet, "ajuster", true) == 0)
        {
			new id = Rack_Nearest(playerid);
			if (id == -1) return SendClientMessageEx(playerid, COLOR_ERROR, "Vous n'êtes pas à porter d'une étagère.");

			PlayerData[playerid][pEditRack] = id;
			EditDynamicObject(playerid, RackData[id][rackObjects][4]);
        }
        if(strcmp(typebuffet, "supprimer", true) == 0)
        {
			new id = -1;
			if ((id = Rack_Nearest(playerid)) == -1) return SendClientMessageEx(playerid, COLOR_ERROR, "Vous n'êtes pas près d'une étagère.");

			Rack_Delete(id);
			SendClientMessageEx(playerid, COLOR_INFO, "Vous avez supprimer l'étagère.");
        }
	}
	if (!strcmp(nom, "prixlocation", true))
	{
		new id = -1, price;
		if (!IsPlayerInAnyVehicle(playerid) && (id = (House_Inside(playerid) == -1) ? (House_Nearest(playerid)) : (House_Inside(playerid))) != -1 && House_IsOwner(playerid, id))
		{
			if (sscanf(scmd, "d", price))
			{
				SendClientMessageEx(playerid, COLOR_USAGE, "/maison prixlocation <montant>");
				return 1;
			}
			if (price < 50 || price > 500) return SendClientMessageEx(playerid, COLOR_USAGE, "/prixlocation <montant> (entre $50 et $500)");

			HouseData[id][houseLocPrice] = price;

			SendClientMessageEx(playerid, COLOR_INFO, "Vous avez fixé le prix de location à $%d.", price);
		}
		else SendClientMessageEx(playerid, COLOR_ERROR, "Vous devez être dans votre maison et être proprétaire pour utiliser cette commande.");
	}
	if (!strcmp(nom, "location", true))
	{
		static id = -1;
		if (!IsPlayerInAnyVehicle(playerid) && (id = (House_Inside(playerid) == -1) ? (House_Nearest(playerid)) : (House_Inside(playerid))) != -1 && House_IsOwner(playerid, id))
		{
			if (HouseData[id][houseLocStatus])
			{
				HouseData[id][houseLocStatus] = false;
				House_Save(id);

				SendClientMessageEx(playerid, COLOR_INFO, "Votre domicile n'est désormais plus louable.");
				foreach(new i : Player)
				{
					if(PlayerData[i][pLocat] == id)
					{
						PlayerData[i][pLocat] = -1;
						SendClientMessageEx(playerid, COLOR_INFO, "Le propriétaire du domicile que vous avez louer vous a expulsé, vous êtes sans domicile fixe.");
					}
				}
				new query[128];
				format(query,sizeof(query),"UPDATE `characters` SET `Location` = '-1' WHERE `Location` = %d", id);
				mysql_function_query(g_iHandle, query, false, "", "");
			}
			else
			{
				HouseData[id][houseLocStatus] = true;
				House_Save(id);

				SendClientMessageEx(playerid, COLOR_INFO, "Votre domicile est désormais louable.");
			}
		}
		else SendClientMessageEx(playerid, COLOR_ERROR, "Vous devez être dans votre maison et être proprétaire pour utiliser cette commande.");
	}
	// COMMANDES ADMINISTRATIVE :
	if (!strcmp(nom, "creer", true))
	{
	    static price, id, address[32], location = 50;
		if (PlayerData[playerid][pAdmin] < 5) return SendClientMessageEx(playerid, COLOR_ERROR, "Vous n'avez pas la permission d'utiliser cette commande.");

		if (sscanf(scmd, "dI(50)s[32]", price, location, address))
		{
			SendClientMessageEx(playerid, COLOR_USAGE, "/maison creer <prix> <prix de location> <adresse>");
			return 1;
		}

		for (new i = 0; i != MAX_HOUSES; i ++) if (HouseData[i][houseExists] && !strcmp(HouseData[i][houseAddress], address, true))
		{
			return SendClientMessageEx(playerid, COLOR_ERROR, "L'adresse \"%s\" est déjà utilisée (ID: %d).", address, i);
		}
		id = House_Create(playerid, address, price, location);
		if (id == -1) return SendClientMessageEx(playerid, COLOR_ERROR, "Le serveur a atteint la limite des maisons.");
		SendClientMessageEx(playerid, COLOR_INFO, "Vous avez créé la maison ID %d avec succès.", id);
	}
	if (!strcmp(nom, "supprimer", true))
	{
		static id = 0;
		if (PlayerData[playerid][pAdmin] < 5) return SendClientMessageEx(playerid, COLOR_ERROR, "Vous n'avez pas la permission d'utiliser cette commande.");
		if (sscanf(scmd, "d", id))
		{
			SendClientMessageEx(playerid, COLOR_USAGE, "/maison supprimer [HouseID]");
			return 1;
		}
		if ((id < 0 || id >= MAX_HOUSES) || !HouseData[id][houseExists]) return SendClientMessageEx(playerid, COLOR_ERROR, "Cette ID est inconnue.");

		House_Delete(id);
		SendClientMessageEx(playerid, COLOR_INFO, "Vous avez supprimer la maison ID: %d.", id);
	}
	if (!strcmp(nom, "edit", true))
	{
		static id, type[24], string[128];

		if (PlayerData[playerid][pAdmin] < 5) return SendClientMessageEx(playerid, COLOR_ERROR, "Vous n'avez pas la permission d'utiliser cette commande.");

		if (sscanf(scmd, "ds[24]S()[128]", id, type, string))
		{
			SendClientMessageEx(playerid, COLOR_USAGE, "/maison edit <HouseID> <options>");
			SendClientMessage(playerid, COLOR_USAGE, "OPTIONS: location, interior, price, address, type");
			SendClientMessage(playerid, COLOR_USAGE, "OPTIONS: prixlocation");
			return 1;
		}
		if ((id < 0 || id >= MAX_HOUSES) || !HouseData[id][houseExists])
		return SendClientMessageEx(playerid, COLOR_ERROR, "Mauvais house ID.");

		if (!strcmp(type, "location", true))
		{
			GetPlayerPos(playerid, HouseData[id][housePos][0], HouseData[id][housePos][1], HouseData[id][housePos][2]);
			GetPlayerFacingAngle(playerid, HouseData[id][housePos][3]);

			HouseData[id][houseExterior] = GetPlayerInterior(playerid);
			HouseData[id][houseExteriorVW] = GetPlayerVirtualWorld(playerid);

			House_Refresh(id);
			House_Save(id);

			SendAdminAlert(COLOR_ADMINGROUP, "%s a changer la position de la maison ID: %d.", ReturnName(playerid), id);
		}
		else if (!strcmp(type, "interior", true))
		{
			GetPlayerPos(playerid, HouseData[id][houseInt][0], HouseData[id][houseInt][1], HouseData[id][houseInt][2]);
			GetPlayerFacingAngle(playerid, HouseData[id][houseInt][3]);

			HouseData[id][houseInterior] = GetPlayerInterior(playerid);

			foreach (new i : Player)
			{
				if (PlayerData[i][pHouse] == HouseData[id][houseID])
				{
					SetPlayerPos(i, HouseData[id][houseInt][0], HouseData[id][houseInt][1], HouseData[id][houseInt][2]);
					SetPlayerFacingAngle(i, HouseData[id][houseInt][3]);

					SetPlayerInterior(i, HouseData[id][houseInterior]);
					SetCameraBehindPlayer(i);
				}
			}
			House_Save(id);
			SendAdminAlert(COLOR_ADMINGROUP, "%s a changer le spawn interieur de la maison ID: %d.", ReturnName(playerid), id);
		}
		else if (!strcmp(type, "price", true))
		{
			new price;
			if (sscanf(string, "d", price))
			{
				SendClientMessageEx(playerid, COLOR_USAGE, "/maison edit [HouseID] price [Nouveau Prix]");
				return 1;
			}

			HouseData[id][housePrice] = price;

			House_Refresh(id);
			House_Save(id);

			SendAdminAlert(COLOR_ADMINGROUP, "%s a changer le prix de la maison ID: %d à %s.", ReturnName(playerid), id, FormatNumber(price));
		}
		else if (!strcmp(type, "prixlocation", true))
		{
			new price;
			if (sscanf(string, "d", price))
			{
				SendClientMessageEx(playerid, COLOR_USAGE, "/maison edit <HouseID> prixlocation <Prix>");
				return 1;
			}

			HouseData[id][houseLocPrice] = price;

			House_Refresh(id);
			House_Save(id);

			SendAdminAlert(COLOR_ADMINGROUP, "%s a changer de location de la maison ID: %d à %s.", ReturnName(playerid), id, FormatNumber(price));
		}
		else if (!strcmp(type, "address", true))
		{
			new address[32];
			if (sscanf(string, "s[32]", address))
			{
				SendClientMessageEx(playerid, COLOR_USAGE, "/maison edit [HouseID] address [Nouvelle Adresse]");
				return 1;
			}

			format(HouseData[id][houseAddress], 32, address);

			House_Refresh(id);
			House_Save(id);

			SendAdminAlert(COLOR_ADMINGROUP, "%s a changer l'adresse de la maison ID: %d à \"%s\".", ReturnName(playerid), id, address);
		}
		else if (!strcmp(type, "type", true))
		{
			new typeint;
			if (sscanf(string, "d", typeint))
			{
				SendClientMessageEx(playerid, COLOR_USAGE, "/maison edit [HouseID] type [Intérieur ID]");
				return 1;
			}

			if (typeint < 1 || typeint > sizeof(arrHouseInteriors)) return SendClientMessageEx(playerid, COLOR_ERROR, "L'ID d'intérieur doit être entre 1 et %d.", sizeof(arrHouseInteriors));

			HouseData[id][houseInt][0] = arrHouseInteriors[typeint][eHouseX];
			HouseData[id][houseInt][1] = arrHouseInteriors[typeint][eHouseY];
			HouseData[id][houseInt][2] = arrHouseInteriors[typeint][eHouseZ];
			HouseData[id][houseInt][3] = arrHouseInteriors[typeint][eHouseAngle];
			HouseData[id][houseInterior] = arrHouseInteriors[typeint][eHouseInterior];

			foreach (new i : Player)
			{
				if (PlayerData[i][pHouse] == HouseData[id][houseID])
				{
					SetPlayerPos(i, HouseData[id][houseInt][0], HouseData[id][houseInt][1], HouseData[id][houseInt][2]);
					SetPlayerFacingAngle(i, HouseData[id][houseInt][3]);

					SetPlayerInterior(i, HouseData[id][houseInterior]);
					SetCameraBehindPlayer(i);
				}
			}
			House_Save(id);
			SendAdminAlert(COLOR_ADMINGROUP, "%s a changer l'intérieur de la maison ID: %d à %d.", ReturnName(playerid), id, typeint);
		}
	}
	//House_Nearest
	if (!strcmp(nom, "infos", true))
	{
	    if (PlayerData[playerid][pAdmin] < 5) return SendClientMessageEx(playerid, COLOR_ERROR, "Vous n'avez pas la permission d'utiliser cette commande.");

	    new idhouse = House_Nearest(playerid);
	    new string[700];

	    format(string, sizeof(string), "=========[Maison appartenant à %s #%d]=========", IdsqlNom(HouseData[idhouse][houseOwner]), idhouse);
	    SendClientMessage(playerid, COLOR_GREY, string);

	    format(string, sizeof(string), "ID : %d | Propriétaire : %s (%d) | Prix : %d$ | Intérieur : %d", HouseData[idhouse][houseID], IdsqlNom(HouseData[idhouse][houseOwner]), HouseData[idhouse][houseOwner], HouseData[idhouse][housePrice], HouseData[idhouse][houseInterior]);
	    SendClientMessage(playerid, COLOR_WHITE, string);

	    format(string, sizeof(string), "Positions extérieurs : X = %f | Y = %f | Z = %f", HouseData[idhouse][housePos][0], HouseData[idhouse][housePos][1], HouseData[idhouse][housePos][2]);
	    SendClientMessage(playerid, COLOR_WHITE, string);

	    format(string, sizeof(string), "Positions intérieurs : X = %f | Y = %f | Z = %f", HouseData[idhouse][houseInt][0], HouseData[idhouse][houseInt][1], HouseData[idhouse][houseInt][2]);
	    SendClientMessage(playerid, COLOR_WHITE, string);

	    format(string, sizeof(string), "Locked = %d | Money = %d | Prix location = %d | Status location = %d | Nombre de locataires = %d", HouseData[idhouse][houseLocked], HouseData[idhouse][houseMoney], HouseData[idhouse][houseLocPrice], HouseData[idhouse][houseLocStatus], HouseData[idhouse][houseLocNb]);
	    SendClientMessage(playerid, COLOR_WHITE, string);

	    format(string, sizeof(string), "Pickups = %d | Lumière = %d", HouseData[idhouse][housePickup], HouseData[idhouse][houseLights]);
	    SendClientMessage(playerid, COLOR_WHITE, string);
	}

	if (!strcmp(nom, "avendre", true))
	{
		new houseid = -1;

		if (sscanf(scmd, "d", houseid))
			return SendClientMessageEx(playerid, COLOR_USAGE, "/maison avendre <MaisonID>");

		if ((houseid < 0 || houseid >= MAX_HOUSES) || !HouseData[houseid][houseExists])
			return SendClientMessageEx(playerid, COLOR_ERROR, "L'ID de la maison entré est incorrect.");

		HouseData[houseid][houseOwner] = 0;

		House_Refresh(houseid);
		House_Save(houseid);

		SendClientMessageEx(playerid, COLOR_INFO, "Vous avez mit en vente la maison ID: %d.", houseid);
	}

	return 1;
}

CMD:j(playerid, params[])
return cmd_job(playerid, params);

CMD:job(playerid, params[])
{
	static nom[24], scmd[128];
	if (sscanf(params, "s[24]S()[128]", nom, scmd))
	{
	    SendClientMessageEx(playerid, COLOR_USAGE, "/j(ob) <options>");
	    SendClientMessage(playerid, COLOR_USAGE, "OPTIONS: prendre, quitter, localiser, service");

		switch (PlayerData[playerid][pJob])
		{
			case JOB_COURIER: SendClientMessage(playerid, COLOR_USAGE, "OPTIONS LIVREUR: livraison, dechargement, expedier, listebiz");
			case JOB_MECHANIC: SendClientMessage(playerid, COLOR_USAGE, "OPTIONS MÉCANICIEN: reparer, paintjob, remplir, mappel, mcasier, nitro, peindre");
			case JOB_TAXI: SendClientMessage(playerid, COLOR_USAGE, "OPTIONS TAXI: appels");
			case JOB_MINER: SendClientMessage(playerid, COLOR_USAGE, "OPTIONS MINEUR: miner, infomine, minevendre, jetermine");
			case JOB_FOOD_VENDOR: SendClientMessage(playerid, COLOR_USAGE, "OPTIONS PIZZA-BOY: fvendre, pizza");
			case JOB_GARBAGE: SendClientMessage(playerid, COLOR_USAGE, "OPTIONS ÉBOUEUR: prendresac, decharger, localiserordure");
			case JOB_SORTER: SendClientMessage(playerid, COLOR_USAGE, "OPTIONS TRIEUR: trier, cargo");
			case JOB_MEDIC: SendClientMessage(playerid, COLOR_USAGE, "OPTIONS MÉDECIN: /d(epartemental), mtransferer, mdeposer, reanimer, mbarrage");
		}
		if (PlayerData[playerid][pAdmin] >= 5) SendClientMessage(playerid, COLOR_USAGE, "OPTIONS ADMIN: creer, supprimer, edit");
	    return 1;
	}
	if (!strcmp(nom, "creer", true))
	{
		static
		type,
		id = -1;

		if (PlayerData[playerid][pAdmin] < 5)
		return SendClientMessageEx(playerid, COLOR_ERROR, "Vous n'avez pas la permission d'utiliser cette commande.");

		if (sscanf(scmd, "d", type))
		return SendClientMessageEx(playerid, COLOR_USAGE, "/j(ob) creer <Type>");

		if (type < 1 || type > 11)
		return SendClientMessageEx(playerid, COLOR_ERROR, "Type invalide, entre 1 et 11.");

		id = Job_Create(playerid, type);

		if (id == -1)
		return SendClientMessageEx(playerid, COLOR_ERROR, "Le serveur a atteint sa limite de job.");

		SendClientMessageEx(playerid, COLOR_INFO, "Vous avez crée le Job ID: %d.", id);
	}
	if (!strcmp(nom, "supprimer", true))
	{
		static
		id = 0;

		if (PlayerData[playerid][pAdmin] < 5)
		return SendClientMessageEx(playerid, COLOR_ERROR, "Vous n'avez pas la permission d'utiliser cette commande.");

		if (sscanf(scmd, "d", id))
		return SendClientMessageEx(playerid, COLOR_USAGE, "/j(ob) supprimer <JobID>");

		if ((id < 0 || id >= MAX_DYNAMIC_JOBS) || !JobData[id][jobExists])
		return SendClientMessageEx(playerid, COLOR_ERROR, "L'ID entrer est incorrect");

		Job_Delete(id);
		SendClientMessageEx(playerid, COLOR_INFO, "Vous avez supprimé le Job ID: %d.", id);
	}
	if (!strcmp(nom, "edit", true))
	{
		static
		id,
		type[24],
		string[128];

		if (PlayerData[playerid][pAdmin] < 5)
		return SendClientMessageEx(playerid, COLOR_ERROR, "Vous n'avez pas la permission d'utiliser cette commande.");

		if (sscanf(scmd, "ds[24]S()[128]", id, type, string))
		{
			SendClientMessageEx(playerid, COLOR_USAGE, "/j(ob) edit <JobID> <options>");
			SendClientMessage(playerid, COLOR_USAGE, "OPTIONS: location, type, point, deliver, lock");
			return 1;
		}
		if ((id < 0 || id >= MAX_DYNAMIC_JOBS) || !JobData[id][jobExists]) return SendClientMessageEx(playerid, COLOR_ERROR, "L'ID entrer est incorrect.");

		if (!strcmp(type, "location", true))
		{
			static
			Float:x,
			Float:y,
			Float:z;

			GetPlayerPos(playerid, x, y, z);

			JobData[id][jobPos][0] = x;
			JobData[id][jobPos][1] = y;
			JobData[id][jobPos][2] = z;

			JobData[id][jobInterior] = GetPlayerInterior(playerid);
			JobData[id][jobWorld] = GetPlayerVirtualWorld(playerid);

			Job_Refresh(id);
			Job_Save(id);

			SendAdminAlert(COLOR_ADMINGROUP, "%s a modifié la position du job ID: %d.", ReturnName(playerid), id);
		}
		else if (!strcmp(type, "type", true))
		{
			new typeint;

			if (sscanf(string, "d", typeint))
			return SendClientMessageEx(playerid, COLOR_USAGE, "/j(ob) edit [id] [type] [new type]");

			if (typeint < 1 || typeint > 8)
			return SendClientMessageEx(playerid, COLOR_ERROR, "Type invalide,  1 à 10.");

			JobData[id][jobType] = typeint;

			Job_Refresh(id);
			Job_Save(id);

			SendAdminAlert(COLOR_ADMINGROUP, "%s a ajusté le type du job ID: %d à %s.", ReturnName(playerid), id, Job_GetName(typeint));
		}
		else if (!strcmp(type, "lock", true))
		{
			if(JobData[id][jobLock])
			{
			    JobData[id][jobLock] = false;
				SendAdminAlert(COLOR_ADMINGROUP, "%s a dévérouiller le job ID: %d (%s).", ReturnName(playerid), id, Job_GetName(JobData[id][jobType]));
			}
			else
			{
			    JobData[id][jobLock] = true;
				SendAdminAlert(COLOR_ADMINGROUP, "%s a vérouiller le job ID: %d (%s).", ReturnName(playerid), id, Job_GetName(JobData[id][jobType]));
			}

			Job_Refresh(id);
			Job_Save(id);
		}
		else if (!strcmp(type, "point", true))
		{
			static
			Float:x,
			Float:y,
			Float:z;

			GetPlayerPos(playerid, x, y, z);

			JobData[id][jobPoint][0] = x;
			JobData[id][jobPoint][1] = y;
			JobData[id][jobPoint][2] = z;
			JobData[id][jobPointInt] = GetPlayerInterior(playerid);
			JobData[id][jobPointWorld] = GetPlayerVirtualWorld(playerid);

			Job_Refresh(id);
			Job_Save(id);

			SendAdminAlert(COLOR_ADMINGROUP, "%s a ajusté le point du job ID %d.", ReturnName(playerid), id);
		}
		else if (!strcmp(type, "deliver", true))
		{
			if (GetPlayerInterior(playerid) > 0 || GetPlayerVirtualWorld(playerid) > 0)
			return SendClientMessageEx(playerid, COLOR_ERROR, "Impossible de placer le point dans un intérieur.");

			static
			Float:x,
			Float:y,
			Float:z;

			GetPlayerPos(playerid, x, y, z);

			JobData[id][jobDeliver][0] = x;
			JobData[id][jobDeliver][1] = y;
			JobData[id][jobDeliver][2] = z;

			Job_Refresh(id);
			Job_Save(id);

			SendAdminAlert(COLOR_ADMINGROUP, "%s a modifié le point de livraison du job ID: %d.", ReturnName(playerid), id);
		}
		else if (!strcmp(type, "int", true))
		{
			new interior;

			if (sscanf(string, "d", interior))
			return SendClientMessageEx(playerid, COLOR_USAGE, "/j(ob) edit [id] int <InteriorID>");

			if (interior < 0)
			return SendClientMessageEx(playerid, COLOR_ERROR, "L'intérieur doit être supérieur ou égal à 0.");

			JobData[id][jobInterior] = interior;

			Job_Refresh(id);
			Job_Save(id);

			SendAdminAlert(COLOR_ADMINGROUP, "%s a ajusté l'intérieur du job ID: %d à %d.", ReturnName(playerid), id, interior);
		}
		else if (!strcmp(type, "vw", true))
		{
			new vw;

			if (sscanf(string, "d", vw))
			return SendClientMessageEx(playerid, COLOR_USAGE, "/j(ob) edit [id] vw <InteriorID>");

			if (vw < 0)
			return SendClientMessageEx(playerid, COLOR_ERROR, "L'intérieur doit être supérieur ou égal à 0.");

			JobData[id][jobWorld] = vw;

			Job_Refresh(id);
			Job_Save(id);

			SendAdminAlert(COLOR_ADMINGROUP, "%s a ajusté l'intérieur du job ID: %d à %d.", ReturnName(playerid), id, vw);
		}
	}
	if (!strcmp(nom, "prendre", true))
	{
		static
		id = -1;

		if ((id = Job_Nearest(playerid, 1.5)) != -1)
		{
		    if (PlayerData[playerid][pJob] != 0)
		        return SendClientMessage(playerid, COLOR_ERROR, "Vous avez déjà un job. (/j(ob) quitter)");
		        
		    if(JobData[id][jobLock])
				return SendClientMessageEx(playerid, COLOR_ERROR, "Il n'y a plus aucun emploi disponible dans ce job.");
				
			if (PlayerData[playerid][pJob] == JobData[id][jobType])
				return SendClientMessageEx(playerid, COLOR_ERROR, "Vous avez déjà ce job.");

			PlayerData[playerid][pJob] = JobData[id][jobType];

			SendClientMessageEx(playerid, COLOR_INFO, "Vous êtes désormais %s - utilisez \"/j(ob)\" pour plus d'informations.", Job_GetName(JobData[id][jobType]));

			if(!AstucesChallenges[playerid][5] && PlayerData[playerid][pAstuces])
			{
			    ValidChallenges(playerid, 5);
			    SendClientMessage(playerid, COLOR_GREEN, "Vous avez débloqué le challenge \"{33CC33}Trouver un emploi disponible à l'ANPE{FFFFFF}\". +1 point respect (/challenges)");
			}
			return 1;
			
		}
		return SendClientMessageEx(playerid, COLOR_ERROR, "Vous n'êtes pas sur le pick-up d'un Job.");
	}
	if (!strcmp(nom, "quitter", true))
	{
	    if(PlayerData[playerid][pJobDuty] != 0)
	        return SendClientMessage(playerid, COLOR_ERROR, "Vous devez quitter votre service.");
	        
		if (PlayerData[playerid][pJob] == 0)
		    return SendClientMessageEx(playerid, COLOR_ERROR, "Vous n'avez pas de job.");

		SendClientMessageEx(playerid, COLOR_INFO, "Vous avez quitté votre job de \"%s\".", Job_GetName(PlayerData[playerid][pJob]));
		PlayerData[playerid][pJob] = 0;
	}

	if (!strcmp(nom, "service", true))
	{
		if(PlayerData[playerid][pJob] == 0)
		return SendClientMessage(playerid, COLOR_ERROR, "Vous n'avez pas de job.");
		
		if(PlayerData[playerid][pJobDuty] != 0)
		{
		    PlayerData[playerid][pJobDuty] = 0;
		    SetPlayerSkin(playerid, PlayerData[playerid][pSkin]);

			new vehicleid = GetPlayerVehicleID(playerid);

			if (IsPlayerInWarehouse(playerid) && GetVehicleModel(vehicleid) == 530 && CoreVehicles[vehicleid][vehLoadType] == 7)
			{
				CoreVehicles[vehicleid][vehLoadType] = 0;
				DestroyObject(CoreVehicles[vehicleid][vehCrate]);

				CoreVehicles[vehicleid][vehCrate] = INVALID_OBJECT_ID;
				DisablePlayerCheckpoint(playerid);
			}
			
			if (PlayerData[playerid][pJob] == JOB_MINER)
			{
				PlayerData[playerid][pMinedRock] = -1;
				PlayerData[playerid][pMineTime] = 0;
				PlayerData[playerid][pMining] = false;

				DisablePlayerCheckpoint(playerid);

				if(IsPlayerAttachedObjectSlotUsed(playerid, 4)) RemovePlayerAttachedObject(playerid, 4);
				SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
			}
			if (PlayerData[playerid][pJob] == JOB_COURIER)
			{
				if (PlayerData[playerid][pUnloading] != -1)
				{
					PlayerData[playerid][pUnloading] = -1;
					PlayerData[playerid][pUnloadVehicle] = INVALID_VEHICLE_ID;

					DisablePlayerCheckpoint(playerid);
				}
				if (PlayerData[playerid][pDeliverShipment])
				{
					PlayerData[playerid][pShipment] = -1;
					PlayerData[playerid][pDeliverShipment] = 0;

					DisablePlayerCheckpoint(playerid);
				}
				if (PlayerData[playerid][pLoading])
				{
					PlayerData[playerid][pLoading] = 0;
					PlayerData[playerid][pLoadType] = 0;

					DisablePlayerCheckpoint(playerid);
				}
				if (PlayerData[playerid][pLoadCrate])
				{
					PlayerData[playerid][pLoadCrate] = 0;

					if(IsPlayerAttachedObjectSlotUsed(playerid, 4)) RemovePlayerAttachedObject(playerid, 4);
					SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
				}
			}
			if (PlayerData[playerid][pJob] == JOB_TAXI)
			{
				foreach (new i : Player) if (PlayerData[i][pTaxiPlayer] == playerid && IsPlayerInVehicle(i, GetPlayerVehicleID(playerid))) {
					LeaveTaxi(i, playerid);
				}
				SetPlayerColor(playerid, COLOR_WHITE);

				PlayerData[playerid][pJobDuty] = 0;

				DestroyObject(objectTaxi[playerid]);

				if (PlayerData[playerid][pTaxiPNJ] != -1)
				{
					Reset_TaxiCalls(PlayerData[playerid][pTaxiPNJ]);
					PlayerData[playerid][pTaxiPNJ] = -1;
					DisableWaypoint(playerid);
				}
			}
		    
		    SendClientMessage(playerid, COLOR_INFO, "Vous quittez votre service.");
		    return 1;
		}
		
		switch(PlayerData[playerid][pJob])
		{
		    case JOB_COURIER:
		    {
				PlayerData[playerid][pJobDuty] = JOB_COURIER;
		   		SendClientMessage(playerid, COLOR_INFO, "Vous êtes maintenant en service. (/job)");

		   		if(PlayerData[playerid][pGender] == 1) SetPlayerSkin(playerid, 153);
		   		else SetPlayerSkin(playerid, 193);
		    }
		    case JOB_MECHANIC:
		    {
				PlayerData[playerid][pJobDuty] = JOB_MECHANIC;
		   		SendClientMessage(playerid, COLOR_INFO, "Vous êtes maintenant en service. (/job)");

		   		if(PlayerData[playerid][pGender] == 1) SetPlayerSkin(playerid, 8);
		   		else SetPlayerSkin(playerid, 193);
		    }
		    case JOB_TAXI:
		    {
			    new
			        vehicle_id = GetPlayerVehicleID(playerid);

				if (!Taxi_HasLicense(playerid) || vehicle_id == 0)
				return SendClientMessageEx(playerid, COLOR_ERROR, "Vous n'avez pas de license taxi ou vous n'êtes pas dans un véhicule.");
				
				PlayerData[playerid][pJobDuty] = JOB_TAXI;
		   		SendClientMessage(playerid, COLOR_INFO, "Vous êtes maintenant en service. (/job)");
			
				objectTaxi[playerid] = CreateObject(Taxi_GetLicense(playerid), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
			    AttachObjectToVehicle(objectTaxi[playerid], vehicle_id, -0.0, -0.39, attInfo[GetVehicleModel(vehicle_id) - 400][_attPos] + 0.1, 0.0, 0.0, 0.0);

				SetPlayerColor(playerid, 0xF5DEB300);

				SendClientMessageToAllEx(COLOR_GREEN, "[TAXI]: %s est en service taxi, veuillez utiliser \"/appeler 1222\" pour appeler un taxi.", ReturnName(playerid));
		    }
		    case JOB_MINER:
		    {
				PlayerData[playerid][pJobDuty] = JOB_MINER;
		   		SendClientMessage(playerid, COLOR_INFO, "Vous êtes maintenant en service. (/job)");

		   		if(PlayerData[playerid][pGender] == 1) SetPlayerSkin(playerid, 27);
		   		else SetPlayerSkin(playerid, 193);
		   		
		   		SetPlayerAttachedObject(playerid, 4, 18634, 6, 0.156547, 0.039423, 0.026570, 198.109115, 6.364907, 262.997558, 1.000000, 1.000000, 1.000000);
		    }
			case JOB_FOOD_VENDOR:
			{
				PlayerData[playerid][pJobDuty] = JOB_FOOD_VENDOR;
		   		SendClientMessage(playerid, COLOR_INFO, "Vous êtes maintenant en service. (/job)");

		   		if(PlayerData[playerid][pGender] == 1) SetPlayerSkin(playerid, 155);
		   		else SetPlayerSkin(playerid, 205);
			}
			case JOB_GARBAGE:
			{
				PlayerData[playerid][pJobDuty] = JOB_GARBAGE;
		   		SendClientMessage(playerid, COLOR_INFO, "Vous êtes maintenant en service. (/job)");

		   		if(PlayerData[playerid][pGender] == 1) SetPlayerSkin(playerid, 16);
		   		else SetPlayerSkin(playerid, 193);
			}
			case JOB_SORTER:
			{
				PlayerData[playerid][pJobDuty] = JOB_SORTER;
		   		SendClientMessage(playerid, COLOR_INFO, "Vous êtes maintenant en service. (/job)");

		   		if(PlayerData[playerid][pGender] == 1) SetPlayerSkin(playerid, 260);
		   		else SetPlayerSkin(playerid, 193);
			}
			case JOB_MEDIC:
			{
				PlayerData[playerid][pJobDuty] = JOB_MEDIC;
		   		SendClientMessage(playerid, COLOR_INFO, "Vous êtes maintenant en service. (/job)");

		   		if(PlayerData[playerid][pGender] == 1) SetPlayerSkin(playerid, 274);
		   		else SetPlayerSkin(playerid, 308);
			}
		}
	}

	if (!strcmp(nom, "localiser", true))
	{
		switch(PlayerData[playerid][pJob])
		{
		    case JOB_COURIER:
		    {
		        DisableWaypoint(playerid);
				Waypoint_Set(playerid, "Livreur", 1789.6064,-2070.0134,13.5806);
		    }
		    case JOB_MECHANIC:
		    {
		        DisableWaypoint(playerid);
				Waypoint_Set(playerid, "Mécanicien", 2001.4365,-2087.5046,13.5469);
		    }
		    case JOB_TAXI:
		    {
		        SendClientMessage(playerid, COLOR_USAGE, "Ce job n'a aucun dépôt, vous devez utiliser votre véhicule personnel.");
		        SendClientMessage(playerid, COLOR_USAGE, "Rendez-vous au point rouge pour passer votre license de taxi.");

		        DisableWaypoint(playerid);
				Waypoint_Set(playerid, "Examen taximan", 1248.0793,-1562.8497,13.6137);
		    }
		    case JOB_MINER:
		    {
		        DisableWaypoint(playerid);
				Waypoint_Set(playerid, "Mineur", 904.6766,-1221.5021,16.9766);
		    }
			case JOB_FOOD_VENDOR:
			{
		        DisableWaypoint(playerid);
				Waypoint_Set(playerid, "Livreur de pizza", 2098.6902,-1805.5105,13.5547);
			}
			case JOB_GARBAGE:
			{
		        DisableWaypoint(playerid);
				Waypoint_Set(playerid, "Éboueur", 2448.6230,-2090.1577,13.5469);
			}
			case JOB_SORTER:
			{
		        DisableWaypoint(playerid);
				Waypoint_Set(playerid, "Trieur", 2226.5935,-2224.4404,13.5469);
			}
			case JOB_MEDIC:
			{
		        DisableWaypoint(playerid);
				Waypoint_Set(playerid, "Médecin", 1185.4725,-1323.9545,13.5720);
			}
			default:
			{
			    SendClientMessage(playerid, COLOR_USAGE, "Vous n'avez aucun job, vous pouvez en trouver en allant à l'agence d'emploi.");

		        DisableWaypoint(playerid);
				Waypoint_Set(playerid, "Agence d'emploi", 591.9761,-1244.3782,18.0175);
			}
		}
	}

	if (!strcmp(nom, "listebiz", true))
	{
		if (PlayerData[playerid][pJob] != JOB_COURIER)
		return SendClientMessageEx(playerid, COLOR_ERROR, "Vous n'avez pas le job approprié.");

		if(PlayerData[playerid][pJobDuty] != JOB_COURIER)
		return SendClientMessageEx(playerid, COLOR_ERROR, "Vous n'êtes pas en service. {FFFFFF}(/job service)");

		new
		    string[1500],
			type[20];

		format(string, sizeof(string), "#\tNom\tLocalisation\tType\n");
		for(new i=0; i<MAX_BUSINESSES; i++) if(BusinessData[i][bizExists])
		{
		    if(BusinessData[i][bizDeliver][0] == 0.0) continue;
            switch (BusinessData[i][bizType]) {
				case 1: type = "24/7";
				case 2: type = "Ammunation";
				case 3: type = "Vetements";
				case 4: type = "Fast Food";
				case 6: type = "Station Essence";
				default: continue;
			}
			format(string, sizeof(string), "%s%d\t%s\t%s\t%s\n", string, i, BusinessData[i][bizName], GetLocation(BusinessData[i][bizPos][0], BusinessData[i][bizPos][1], BusinessData[i][bizPos][2]), type);
		}
		
		Dialog_Show(playerid, ListDelivery, DIALOG_STYLE_TABLIST_HEADERS, "Liste des commerces", string, "Valider", "Annuler");
	}

	if (!strcmp(nom, "livraison", true))
	{
		new id = Job_NearestPoint(playerid);

		if (PlayerData[playerid][pJob] != JOB_COURIER)
		return SendClientMessageEx(playerid, COLOR_ERROR, "Vous n'avez pas le job approprié.");

		if(PlayerData[playerid][pJobDuty] != JOB_COURIER)
		return SendClientMessageEx(playerid, COLOR_ERROR, "Vous n'êtes pas en service. {FFFFFF}(/job service)");
		
		if (id == -1 || JobData[id][jobType] != JOB_COURIER)
		return SendClientMessageEx(playerid, COLOR_ERROR, "Vous n'êtes pas sur le point de chargement.");

		if (!PlayerData[playerid][pLoading] && !PlayerData[playerid][pLoadType])
		{
			if (IsPlayerInAnyVehicle(playerid))
			return SendClientMessageEx(playerid, COLOR_ERROR, "Vous devez sortir du véhicule pour commencer le chargement.");

			Dialog_Show(playerid, StartDelivery, DIALOG_STYLE_LIST, "Selection du Type", "Fournitures\nAmmunation\nVetements\nNourriture\nEssence", "Ok", "X");
		}
		else
		{
			PlayerData[playerid][pLoading] = 0;
			PlayerData[playerid][pLoadType] = 0;
			PlayerData[playerid][pLoadCrate] = 0;

			RemovePlayerAttachedObject(playerid, 4);
			SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);

			DisablePlayerCheckpoint(playerid);
			SendClientMessageEx(playerid, COLOR_INFO, "Vous ne chargez plus de caisse.");
		}
	}
	if (!strcmp(nom, "dechargement", true))
	{
		new
			id = Business_NearestDeliver(playerid),
			vid = GetPlayerVehicleID(playerid);

		if (PlayerData[playerid][pJob] != JOB_COURIER)
		return SendClientMessageEx(playerid, COLOR_ERROR, "Vous n'avez pas le job approprié.");

		if(PlayerData[playerid][pJobDuty] != JOB_COURIER)
		return SendClientMessageEx(playerid, COLOR_ERROR, "Vous n'êtes pas en service. {FFFFFF}(/job service)");

		if (id == -1)
		return SendClientMessageEx(playerid, COLOR_ERROR, "Vous n'êtes pas à portée d'un point de livraison.");

		if (!IsLoadableVehicle(vid))
		return SendClientMessageEx(playerid, COLOR_ERROR, "Vous n'êtes pas à l'intérieur d'un camion de livraison.");

		if (!CoreVehicles[vid][vehLoadType] || CoreVehicles[vid][vehLoads] < 1)
		return SendClientMessageEx(playerid, COLOR_ERROR, "Il n'y a rien chargé dans ce véhicule.");

		if (PlayerData[playerid][pUnloading] != -1)
		return SendClientMessageEx(playerid, COLOR_ERROR, "Vous avez déjà déchargez vos caisses.");

		if (PlayerData[playerid][pShipment] != -1 && id != PlayerData[playerid][pShipment])
		return SendClientMessageEx(playerid, COLOR_ERROR, "Vous n'avez pas accepté l'expédition pour ce business.");

		switch (CoreVehicles[vid][vehLoadType])
		{
			case 1:
			{
				if (BusinessData[id][bizType] != 1 && BusinessData[id][bizType] != 6)
				return SendClientMessageEx(playerid, COLOR_ERROR, "Cette entreprise ne peut pas accepter cette charge (type incorrect).");
			}
			case 2..4:
			{
				if (BusinessData[id][bizType] != CoreVehicles[vid][vehLoadType])
				return SendClientMessageEx(playerid, COLOR_ERROR, "Cette entreprise ne peut pas accepter cette charge (type incorrect).");
			}
			case 5:
			{
				if (BusinessData[id][bizType] != 6)
				return SendClientMessageEx(playerid, COLOR_ERROR, "Cette entreprise ne peut pas accepter cette charge (type incorrect).");
			}
		}
		static
		Float:fX,
		Float:fY,
		Float:fZ;

		DisableWaypoint(playerid);

		GetVehicleBoot(vid, fX, fY, fZ);
		RemovePlayerFromVehicle(playerid);

		PlayerData[playerid][pUnloading] = id;
		PlayerData[playerid][pUnloadVehicle] = vid;

		SetPlayerCheckpoint(playerid, fX, fY, fZ, 1.0);
		SendClientMessageEx(playerid, COLOR_INFO, "Veuillez decharger les caisses puis les déposer au checkpoint.");
	}
	if (!strcmp(nom, "expedier", true))
	{
		if (PlayerData[playerid][pJob] != JOB_COURIER)
		return SendClientMessageEx(playerid, COLOR_ERROR, "Vous n'avez pas le job approprié.");

		if(PlayerData[playerid][pJobDuty] != JOB_COURIER)
		return SendClientMessageEx(playerid, COLOR_ERROR, "Vous n'êtes pas en service. {FFFFFF}(/job service)");

		if (PlayerData[playerid][pShipment] != -1)
		{
			CancelShipment(playerid);
			SendClientMessageEx(playerid, COLOR_INFO, "Vous avez annulé l'envoi.");
		}
		else
		{
			ShowShipments(playerid);
		}

	}
	if (!strcmp(nom, "reparer", true))
	{
		new targ,prix;

		if (PlayerData[playerid][pJob] != JOB_MECHANIC)
		return SendClientMessageEx(playerid, COLOR_ERROR, "Vous n'avez pas la permission d'utiliser cette commande.");

		if(PlayerData[playerid][pJobDuty] != JOB_MECHANIC)
		return SendClientMessageEx(playerid, COLOR_ERROR, "Vous n'êtes pas en service. {FFFFFF}(/job service)");

	    if (!IsPlayerInRangeOfPoint(playerid, 50.0, 1993.3275, -2037.2626, 14.5514))
		return SendClientMessageEx(playerid, COLOR_ERROR, "Vous n'êtes pas au bon endroit.");

		if (sscanf(scmd, "ud", targ,prix))
		return SendClientMessageEx(playerid, COLOR_USAGE, "/j(ob) reparer <PlayerID/PlayerName> <Prix>");

		if (prix <= 0 || prix > 3000)
		return SendClientMessageEx(playerid, COLOR_ERROR, "Entre 100$ et 3000$");

		SendClientMessageEx(targ, COLOR_INFO, "Le mécanicien %s vous propose une réparation pour la somme de %d", ReturnName(playerid), prix);
		SendClientMessageEx(targ, COLOR_INFO, "Utilisez \"/accepter reparation\" pour accepter sa proposition.");
		
		SendClientMessageEx(playerid, COLOR_INFO, "Vous proposez une réparation à %s pour la somme de %d", ReturnName(targ), prix);

		RepaID[targ] = playerid;
		ReparPri[targ] = prix;
	}
	if (!strcmp(nom, "paintjob", true))
	{
		static
		paintjobid;

		if (PlayerData[playerid][pJob] != JOB_MECHANIC)
		return SendClientMessageEx(playerid, COLOR_ERROR, "Vous n'avez pas la permission d'utiliser cette commande.");

		if(PlayerData[playerid][pJobDuty] != JOB_MECHANIC)
		return SendClientMessageEx(playerid, COLOR_ERROR, "Vous n'êtes pas en service. {FFFFFF}(/job service)");

		if (!IsPlayerInAnyVehicle(playerid))
		return SendClientMessageEx(playerid, COLOR_ERROR, "Vous devez être dans un véhicule.");

	    if (!IsPlayerInRangeOfPoint(playerid, 50.0, 1993.3275, -2037.2626, 14.5514))
		return SendClientMessageEx(playerid, COLOR_ERROR, "Vous n'êtes pas au bon endroit.");

		if (sscanf(scmd, "d", paintjobid))
		return SendClientMessageEx(playerid, COLOR_USAGE, "/j(ob) paintjob <PaintjobID> (-1 pour retirer)");

		if (paintjobid < -1 || paintjobid > 5)
		return SendClientMessageEx(playerid, COLOR_ERROR, "Le paintjob doit etre entre 1 et 5");

		if (paintjobid == -1)
		paintjobid = 6;

		SetVehiclePaintjob(GetPlayerVehicleID(playerid), paintjobid);
		SendClientMessageEx(playerid, COLOR_INFO, "Vous avez bien changé le paintjob de votre véhicule.");
	}
	if (!strcmp(nom, "remplir", true))
	{
		new targ,prix;

		if (PlayerData[playerid][pJob] != JOB_MECHANIC)
		return SendClientMessageEx(playerid, COLOR_ERROR, "Vous n'avez pas la permission d'utiliser cette commande.");

		if(PlayerData[playerid][pJobDuty] != JOB_MECHANIC)
		return SendClientMessageEx(playerid, COLOR_ERROR, "Vous n'êtes pas en service. {FFFFFF}(/job service)");

		if (sscanf(scmd, "ud", targ,prix))
		return SendClientMessageEx(playerid, COLOR_USAGE, "/j(ob) remplir <PlayerID/PlayerName> <Prix>");

	    if (!IsPlayerInRangeOfPoint(playerid, 50.0, 1993.3275, -2037.2626, 14.5514))
		return SendClientMessageEx(playerid, COLOR_ERROR, "Vous n'êtes pas au bon endroit.");


		if (prix <= 0 || prix > 300)
		return SendClientMessageEx(playerid, COLOR_ERROR, "Entre 100$ et 300$");

		SendClientMessageEx(targ, COLOR_INFO, "Le mécanicien %s vous propose un plein d'essence pour la somme de %d", ReturnName(playerid), prix);
		SendClientMessageEx(targ, COLOR_INFO, "Utilisez \"/accepter plein\" pour accepter sa proposition.");

		SendClientMessageEx(playerid, COLOR_INFO, "Vous proposez un plein d'essence à %s pour la somme de %d", ReturnName(targ), prix);

		PleinID[targ] = playerid;
		PleinPri[targ] = prix;
	}
	if (!strcmp(nom, "mappel", true))
	{
		if (PlayerData[playerid][pJob] != JOB_MECHANIC)
		return SendClientMessageEx(playerid, COLOR_ERROR, "Vous n'avez pas la permission d'utiliser cette commande.");

		if(PlayerData[playerid][pJobDuty] != JOB_MECHANIC)
		return SendClientMessageEx(playerid, COLOR_ERROR, "Vous n'êtes pas en service. {FFFFFF}(/job service)");
		
		if (MecanoApel == -1)
		return SendClientMessageEx(playerid, COLOR_ERROR, "Il n'y a aucun appel");

		SendClientMessageEx(playerid, COLOR_INFO, "Vous avez l'appel de votre client %s.", ReturnName(MecanoApel, 0));
		SendClientMessageEx(MecanoApel, COLOR_INFO, "%s a accepté votre appel.", ReturnName(playerid));

		static
		Float:X,
		Float:Y,
		Float:Z;

		GetPlayerPos(MecanoApel, X, Y, Z);

		SetPlayerCheckpoint(playerid, X, Y, Z, 5);
		MecanoApel = -1;
	}
	if (!strcmp(nom, "appels", true))
	{
		if (PlayerData[playerid][pJob] != JOB_TAXI)
		return SendClientMessageEx(playerid, COLOR_ERROR, "Vous n'avez pas le job approprié.");

		if(PlayerData[playerid][pJobDuty] != JOB_TAXI)
		return SendClientMessageEx(playerid, COLOR_ERROR, "Vous n'êtes pas en service. {FFFFFF}(/job service)");

		Taxi_ShowCalls(playerid);
	}
	if (!strcmp(nom, "infomine", true))
	{
		new
		    mineid = -1;
		    
		if (PlayerData[playerid][pJob] != JOB_MINER)
		return SendClientMessageEx(playerid, COLOR_ERROR, "Vous n'avez pas le job approprié.");

		if(PlayerData[playerid][pJobDuty] != JOB_MINER)
		return SendClientMessageEx(playerid, COLOR_ERROR, "Vous n'êtes pas en service. {FFFFFF}(/job service)");

		if ((mineid = Mine_Nearest(playerid)) != -1)
		{
		    new
		        string[250],
				title[60];
				
			format(title, sizeof(title), "{%06x}%s {FFFFFF}- Informations",
				OreData[ MineData[mineid][mineType] ][Color] >>> 8,
				OreData[ MineData[mineid][mineType] ][Name]);

			format(string, sizeof(string), "\
			Nom\t{%06x}%s\n\
			Valeur\t%d$\n\
			Temps de minage\t%d secondes",
	            OreData[ MineData[mineid][mineType] ][Color] >>> 8,
				OreData[ MineData[mineid][mineType] ][Name],
				OreData[ MineData[mineid][mineType] ][Value],
				OreData[ MineData[mineid][mineType] ][MiningTime]);
			
			ShowPlayerDialog(playerid, 9999, DIALOG_STYLE_TABLIST, title, string, "Fermer", "");
			
		}
		else SendClientMessageEx(playerid, COLOR_ERROR, "Vous n'êtes pas prêt d'un mineraie.");
	}
	if (!strcmp(nom, "minevendre", true))
	{
	    new
			carid = Car_GetID(GetPlayerVehicleID(playerid)),
			id = -1;
			
		if (PlayerData[playerid][pJob] != JOB_MINER)
		return SendClientMessageEx(playerid, COLOR_ERROR, "Vous n'avez pas le job approprié.");

		if(PlayerData[playerid][pJobDuty] != JOB_MINER)
		return SendClientMessageEx(playerid, COLOR_ERROR, "Vous n'êtes pas en service. {FFFFFF}(/job service)");

		if ((id = Job_NearestDeliver(playerid)) == -1 || JobData[id][jobType] != JOB_MINER)
		return SendClientMessageEx(playerid, COLOR_ERROR, "Vous n'êtes pas à côté de l'entrepot.");

		if(!IsPlayerInAnyVehicle(playerid))
		return SendClientMessageEx(playerid, COLOR_ERROR, "Vous n'êtes pas dans un véhicule.");
		
		new
			price = 0;
			
		for(new i=0; i<5; i++) if(CarData[carid][carMine][i] != -1)
	    {
	        price += OreData[ MineData[ CarData[carid][carMine][i] ][mineType] ][Value];
	        CarData[carid][carMine][i] = -1;
	    }
	    
	    if(price > 0)
		{
			SendClientMessageEx(playerid, COLOR_GREY, "Vous avez vendu vos minerais d'une valeur de %d$.", price);
			GiveMoney(playerid, price);
		}
		else SendClientMessage(playerid, COLOR_ERROR, "Aucun minerai n'est présent dans votre véhicule.");
	}
	if (!strcmp(nom, "jetermine", true))
	{
		if (PlayerData[playerid][pJob] != JOB_MINER)
		return SendClientMessageEx(playerid, COLOR_ERROR, "Vous n'avez pas le job approprié.");

		if (PlayerData[playerid][pJobDuty] != JOB_MINER)
		return SendClientMessageEx(playerid, COLOR_ERROR, "Vous n'êtes pas en service. {FFFFFF}(/job service)");
		
		if (PlayerData[playerid][pMining] != 2)
		return SendClientMessageEx(playerid, COLOR_ERROR, "Vous n'avez aucune mine dans vos mains.");
		
		PlayerData[playerid][pMinedRock] = -1;
		PlayerData[playerid][pMineTime] = 0;
		PlayerData[playerid][pMining] = false;

		if(IsPlayerAttachedObjectSlotUsed(playerid, 4)) RemovePlayerAttachedObject(playerid, 4);
		SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
		
		SendClientMessage(playerid, COLOR_INFO, "Vous avez jeté le mineraie.");
	}
	if (!strcmp(nom, "miner", true))
	{
		new
		    mineid = -1;
		    
		if (PlayerData[playerid][pJob] != JOB_MINER)
		return SendClientMessageEx(playerid, COLOR_ERROR, "Vous n'avez pas le job approprié.");

		if(PlayerData[playerid][pJobDuty] != JOB_MINER)
		return SendClientMessageEx(playerid, COLOR_ERROR, "Vous n'êtes pas en service. {FFFFFF}(/job service)");
		  
		if ((mineid = Mine_Nearest(playerid)) != -1)
		{
		    PlayerData[playerid][pMining] = 1;
		    PlayerData[playerid][pMinedRock] = mineid;
		    PlayerData[playerid][pMineTime] = OreData[ MineData[mineid][mineType] ][MiningTime];
		    
		    TogglePlayerControllable(playerid, false);
		}
		else SendClientMessageEx(playerid, COLOR_ERROR, "Vous n'êtes pas prêt d'un mineraie.");
	}
	if (!strcmp(nom, "pizza", true))
	{
	    new job_id = Job_NearestPoint(playerid);
	    
		if (PlayerData[playerid][pJob] != JOB_FOOD_VENDOR)
		return SendClientMessageEx(playerid, COLOR_ERROR, "Vous n'avez pas le job approprié.");

		if(PlayerData[playerid][pJobDuty] != JOB_FOOD_VENDOR)
		return SendClientMessageEx(playerid, COLOR_ERROR, "Vous n'êtes pas en service. {FFFFFF}(/job service)");

		if (job_id == -1)
		return SendClientMessageEx(playerid, COLOR_ERROR, "Vous n'êtes pas dans les cuisines de la pizzeria.");

		if (JobData[job_id][jobType] != JOB_FOOD_VENDOR)
		return SendClientMessageEx(playerid, COLOR_ERROR, "Vous n'êtes pas dans les cuisines de la pizzeria.");
		
		if (PlayerData[playerid][pPizza_House] != -1)
		{
			PlayerData[playerid][pPizza_House] = -1;
			PlayerData[playerid][pPizza_Vehicle] = -1;

			SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
			if(IsPlayerAttachedObjectSlotUsed(playerid, 9)) RemovePlayerAttachedObject(playerid, 9);
			
			SendClientMessage(playerid, COLOR_INFO, "Vous annulez votre livraison de pizza.");
		}
		else
		{
			new
			    id = -1;

			if ((id = GetRandomHouse()) == -1)
			return SendClientMessageEx(playerid, COLOR_ERROR, "Il n'y a aucune maison à livré en ce moment.");

			PlayerData[playerid][pPizza_House] = id;
			PlayerData[playerid][pPizza_Vehicle] = -1;

			SetPlayerSpecialAction(playerid, SPECIAL_ACTION_CARRY);
	        SetPlayerAttachedObject(playerid, 9, 2814, 6, 0.100001, -0.002001, -0.139001, 76.799995, -178.799942, 0.000000);

			SendClientMessageEx(playerid, COLOR_INFO, "Pour commencer, allez ranger votre pizza dans votre véhicule. {FF0000}(Touche 'N')");
		}


	}
	if (!strcmp(nom, "fvendre", true))
	{
		if (PlayerData[playerid][pJob] != JOB_FOOD_VENDOR)
		return SendClientMessageEx(playerid, COLOR_ERROR, "Vous n'avez pas le job approprié.");

		if(PlayerData[playerid][pJobDuty] != JOB_FOOD_VENDOR)
		return SendClientMessageEx(playerid, COLOR_ERROR, "Vous n'êtes pas en service. {FFFFFF}(/job service)");

		if (GetVehicleModel(GetPlayerVehicleID(playerid)) != 423)
		return SendClientMessageEx(playerid, COLOR_ERROR, "Vous n'êtes pas dans un camion de hot-dog.");

		static
			userid,
			food[24],
			price;

		if (sscanf(scmd, "us[24]d", userid, food, price))
		{
			SendClientMessageEx(playerid, COLOR_USAGE, "/j(ob) fvendre <PlayerID/PlayerName> <options> <Prix>");
			SendClientMessage(playerid, COLOR_USAGE, "OPTIONS: eau, soda, burger, pizza, viande");
			return 1;
		}
		if (userid == INVALID_PLAYER_ID || !IsPlayerNearPlayer(playerid, userid, 7.0))
		return SendClientMessageEx(playerid, COLOR_ERROR, "Ce joueur n'est pas près de vous.");

		if (price < 1 || price > 20)
		return SendClientMessageEx(playerid, COLOR_ERROR, "Pas en dessous de $1 ou plus de $20.");

		if (!strcmp(food, "eau", true))
		{
			PlayerData[userid][pFoodSeller] = playerid;
			PlayerData[userid][pFoodType] = 1;
			PlayerData[userid][pFoodPrice] = price;

			SendClientMessageEx(userid, COLOR_INFO, "%s vous a offert de l'eau pour $%d (utilisez \"/accepter achat\" pour accepter).", ReturnName(playerid), price);
			SendClientMessageEx(playerid, COLOR_INFO, "Vous avez reçu de l'eau à %s pour la somme de $%d.", ReturnName(userid, 0), price);
		}
		else if (!strcmp(food, "soda", true))
		{
			PlayerData[userid][pFoodSeller] = playerid;
			PlayerData[userid][pFoodType] = 2;
			PlayerData[userid][pFoodPrice] = price;

			SendClientMessageEx(userid, COLOR_INFO, "%s vous a offert un soda pour $%d (utilisez \"/accepter achat\" pour accepter).", ReturnName(playerid), price);
			SendClientMessageEx(playerid, COLOR_INFO, "Vous avez offert un soda à %s pour la somme de $%d.", ReturnName(userid, 0), price);
		}
		else if (!strcmp(food, "burger", true))
		{
			PlayerData[userid][pFoodSeller] = playerid;
			PlayerData[userid][pFoodType] = 3;
			PlayerData[userid][pFoodPrice] = price;

			SendClientMessageEx(userid, COLOR_INFO, "%s vous a offert un burger pour $%d (utilisez \"/accepter achat\" pour accepter).", ReturnName(playerid), price);
			SendClientMessageEx(playerid, COLOR_INFO, "Vous avez offert un burger à %s pour la somme de $%d.", ReturnName(userid, 0), price);
		}
		else if (!strcmp(food, "pizza", true))
		{
			PlayerData[userid][pFoodSeller] = playerid;
			PlayerData[userid][pFoodType] = 4;
			PlayerData[userid][pFoodPrice] = price;

			SendClientMessageEx(userid, COLOR_INFO, "%s vous a offert un pizza pour $%d (utilisez \"/accepter achat\" pour accepter).", ReturnName(playerid), price);
			SendClientMessageEx(playerid, COLOR_INFO, "Vous avez offert une pizza à %s pour la somme de $%d.", ReturnName(userid, 0), price);
		}
		else if (!strcmp(food, "viande", true))
		{
			PlayerData[userid][pFoodSeller] = playerid;
			PlayerData[userid][pFoodType] = 5;
			PlayerData[userid][pFoodPrice] = price;

			SendClientMessageEx(userid, COLOR_INFO, "%s vous a offert de la viande pour $%d (utilisez \"/accepter achat\" pour accepter).", ReturnName(playerid), price);
			SendClientMessageEx(playerid, COLOR_INFO, "Vous avez offert de la viande à %s pour la somme de $%d.", ReturnName(userid, 0), price);
		}
	}
	if (!strcmp(nom, "prendresac", true))
	{
		new
		id = Garbage_Nearest(playerid),
		string[64];

		if (PlayerData[playerid][pJob] != JOB_GARBAGE)
		return SendClientMessageEx(playerid, COLOR_ERROR, "Vous n'avez pas le job approprié.");

		if(PlayerData[playerid][pJobDuty] != JOB_GARBAGE)
		return SendClientMessageEx(playerid, COLOR_ERROR, "Vous n'êtes pas en service. {FFFFFF}(/job service)");

		if (id == -1)
		return SendClientMessageEx(playerid, COLOR_ERROR, "Vous n'êtes pas à portée des ordures.");

		if (GarbageData[id][garbageCapacity] < 1)
		return SendClientMessageEx(playerid, COLOR_ERROR, "Cette poubelle est vide.");

		if (PlayerData[playerid][pCarryTrash])
		return SendClientMessageEx(playerid, COLOR_ERROR, "Vous portez déjà un sac poubelle.");

		GarbageData[id][garbageCapacity]--;
		Garbage_Save(id);

		PlayerData[playerid][pCarryTrash] = 1;
		SendNearbyMessage(playerid, 2.0, COLOR_PURPLE, "%s prend un sac poubelle de la beine.", ReturnName(playerid, 1), string);

		format(string, sizeof(string), "{FFFFFF}Capacité: %d/20", GarbageData[id][garbageCapacity]);
		UpdateDynamic3DTextLabelText(GarbageData[id][garbageText3D], COLOR_DEFAULT, string);

		SetPlayerAttachedObject(playerid, 4, 1264, 6, 0.000000, 0.000000, 0.000000, 0.000000, 270.000000, 90.000000, 0.500000, 0.500000, 0.500000);
		ShowPlayerFooter(playerid, "Appuyez sur ~y~'N'~w~ pour charger les ordures.");
	}
	if (!strcmp(nom, "decharger", true))
	{
		new
		vehicleid = GetPlayerVehicleID(playerid),
		id = Job_NearestPoint(playerid, 5.0);

		if (PlayerData[playerid][pJob] != JOB_GARBAGE)
		return SendClientMessageEx(playerid, COLOR_ERROR, "Vous n'avez pas le job approprié.");

		if(PlayerData[playerid][pJobDuty] != JOB_GARBAGE)
		return SendClientMessageEx(playerid, COLOR_ERROR, "Vous n'êtes pas en service. {FFFFFF}(/job service)");

		if (GetVehicleModel(vehicleid) != 408)
		return SendClientMessageEx(playerid, COLOR_ERROR, "Vous devez être au volant d'un camion à ordures.");

		if (id == -1 || JobData[id][jobType] != JOB_GARBAGE)
		return SendClientMessageEx(playerid, COLOR_ERROR, "Vous n'êtes pas près d'un dépot d'ordures.");

		if (CoreVehicles[vehicleid][vehTrash] < 1)
		return SendClientMessageEx(playerid, COLOR_ERROR, "Il n'y a aucune poubelle chargé dans le véhicule.");

		ShowPlayerFooter(playerid, "DÉHARGEMENT EN COURS...");

        garbageDecharge[playerid][0] = CoreVehicles[vehicleid][vehTrash]*15;
        garbageDecharge[playerid][1] = CoreVehicles[vehicleid][vehTrash];
		CoreVehicles[vehicleid][vehTrash] = 0;
        
		SetTimerEx("garbage_Decharge", 1000*30, false, "i", playerid);
		TogglePlayerControllable(playerid, false);
	}
	if (!strcmp(nom, "localiserordure", true))
	{
		if (PlayerData[playerid][pJob] != JOB_GARBAGE)
		return SendClientMessageEx(playerid, COLOR_ERROR, "Vous n'avez pas le job approprié.");

		if(PlayerData[playerid][pJobDuty] != JOB_GARBAGE)
		return SendClientMessageEx(playerid, COLOR_ERROR, "Vous n'êtes pas en service. {FFFFFF}(/job service)");

		new id = GetClosestGarbage(playerid);

		if (id == -1)
		return SendClientMessageEx(playerid, COLOR_ERROR, "Il n'y a pas de poubelles disponibles.");

		PlayerData[playerid][pCP] = 1;

		SetPlayerCheckpoint(playerid, GarbageData[id][garbagePos][0], GarbageData[id][garbagePos][1], GarbageData[id][garbagePos][2], 2.5);
		SendClientMessageEx(playerid, COLOR_INFO, "Un checkpoint a été placer sur la poubelle la plus proche.");
	}
	if (!strcmp(nom, "trier", true))
	{
		new id = -1;

		if (PlayerData[playerid][pJob] != JOB_SORTER)
		return SendClientMessageEx(playerid, COLOR_ERROR, "Vous n'avez pas le job approprié.");

		if(PlayerData[playerid][pJobDuty] != JOB_SORTER)
		return SendClientMessageEx(playerid, COLOR_ERROR, "Vous n'êtes pas en service. {FFFFFF}(/job service)");

		if ((id = Job_NearestPoint(playerid)) == -1 || JobData[id][jobType] != JOB_SORTER)
		return SendClientMessageEx(playerid, COLOR_ERROR, "Vous n'êtes pas près du centre de tri.");

		if(PlayerData[playerid][pSortingType] == 2)
		return SendClientMessageEx(playerid, COLOR_ERROR, "Vous êtes déjà entrain de faire un cycle.");
		
		switch (PlayerData[playerid][pSorting])
		{
			case 0:
			{

				PlayerData[playerid][pSorting] = 1;
				PlayerData[playerid][pSortingType] = 1;
				PlayerData[playerid][pSortCrate] = 0;
				PlayerData[playerid][pSortingBase] = id;

				SendClientMessageEx(playerid, COLOR_INFO, "Vous avez récupèrer un carton, amenez le au checkpoint.");

				SetPlayerAttachedObject(playerid, 4, 1220, 5, 0.137832, 0.176979, 0.151424, 96.305931, 185.363006, 20.328088, 0.699999, 0.800000, 0.699999);
				SetPlayerSpecialAction(playerid, SPECIAL_ACTION_CARRY);

				ApplyAnimation(playerid, "CARRY", "liftup", 4.1, 0, 0, 0, 0, 0, 1);

				new
				    random_Checkpoint = random(sizeof(g_arrSortingCheckpoint_foot));

				SetPlayerCheckpoint(playerid, g_arrSortingCheckpoint_foot[random_Checkpoint][0], g_arrSortingCheckpoint_foot[random_Checkpoint][1], g_arrSortingCheckpoint_foot[random_Checkpoint][2], 1.0);
			}
			default:
			{
				PlayerData[playerid][pSorting] = 0;
				PlayerData[playerid][pSortingType] = 0;
				PlayerData[playerid][pSortCrate] = 0;
				PlayerData[playerid][pSortingBase] = -1;

				RemovePlayerAttachedObject(playerid, 4);
				SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);

				DisablePlayerCheckpoint(playerid);
				SendClientMessageEx(playerid, COLOR_INFO, "Vous avez fini votre tri.");
			}
		}
	}
	if (!strcmp(nom, "cargo", true))
	{
		new id = -1;

		if (PlayerData[playerid][pJob] != JOB_SORTER)
		return SendClientMessageEx(playerid, COLOR_ERROR, "Vous n'avez pas le job approprié.");

		if(PlayerData[playerid][pJobDuty] != JOB_SORTER)
		return SendClientMessageEx(playerid, COLOR_ERROR, "Vous n'êtes pas en service. {FFFFFF}(/job service)");

		if ((id = Job_NearestDeliver(playerid)) == -1 || JobData[id][jobType] != JOB_SORTER)
		return SendClientMessageEx(playerid, COLOR_ERROR, "Vous n'êtes pas près du centre de tri.");

		if(PlayerData[playerid][pSortingType] != 0)
		return SendClientMessageEx(playerid, COLOR_ERROR, "Vous êtes déjà entrain de faire un cycle.");

		switch (PlayerData[playerid][pSorting])
		{
			case 0:
			{
				PlayerData[playerid][pSorting] = 1;
				PlayerData[playerid][pSortingType] = 2;
				PlayerData[playerid][pSortCrate] = 0;
				PlayerData[playerid][pSortingBase] = id;

				new
				    random_Checkpoint = random(sizeof(g_arrSortingCheckpoint_car));

				SetPlayerCheckpoint(playerid, g_arrSortingCheckpoint_car[random_Checkpoint][0], g_arrSortingCheckpoint_car[random_Checkpoint][1], g_arrSortingCheckpoint_car[random_Checkpoint][2], 5.0);

				new
				    Float:pos[4];
				    
				GetPlayerPos(playerid, pos[0], pos[1], pos[2]);
				GetPlayerFacingAngle(playerid, pos[3]);


				PlayerData[playerid][pSortingVehicle] = CreateVehicle(530, pos[0], pos[1], pos[2], pos[3], 0, 0, -1);
				
				new
					lights, alarm, bonnet, boot, objective;

				SetVehicleParamsEx(PlayerData[playerid][pSortingVehicle], 1, lights, alarm, 1, bonnet, boot, objective);
				
				CoreVehicles[ PlayerData[playerid][pSortingVehicle] ][vehFuel] = 100;
				ResetVehicle(PlayerData[playerid][pSortingVehicle]);
				
				PutPlayerInVehicle(playerid, PlayerData[playerid][pSortingVehicle], 0);

				PlayerData[playerid][pSortingObject][0] = CreateObject(1220, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
				PlayerData[playerid][pSortingObject][1] = CreateObject(1220, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
				PlayerData[playerid][pSortingObject][2] = CreateObject(1220, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
				
				AttachObjectToVehicle(PlayerData[playerid][pSortingObject][0], PlayerData[playerid][pSortingVehicle], -0.324999, 0.674999, 0.274999, 0.000000, 0.000000, 0.000000);
				AttachObjectToVehicle(PlayerData[playerid][pSortingObject][1], PlayerData[playerid][pSortingVehicle], 0.424999, 0.679999, 0.274999, 0.000000, 0.000000, 0.000000);
				AttachObjectToVehicle(PlayerData[playerid][pSortingObject][2], PlayerData[playerid][pSortingVehicle], 0.034999, 0.704999, 0.959999, 0.000000, 0.000000, 0.000000);
				
				SendClientMessageEx(playerid, COLOR_INFO, "Vous avez récupérés des cartons avec votre Forklift, amenez les au checkpoints.");
			}
			default:
			{
				PlayerData[playerid][pSorting] = 0;
				PlayerData[playerid][pSortingType] = 0;
				PlayerData[playerid][pSortCrate] = 0;
				PlayerData[playerid][pSortingBase] = -1;

				DestroyObject(PlayerData[playerid][pSortingObject][0]);
				DestroyObject(PlayerData[playerid][pSortingObject][1]);
				DestroyObject(PlayerData[playerid][pSortingObject][2]);

				PlayerData[playerid][pSortingObject][0] = -1;
				PlayerData[playerid][pSortingObject][1] = -1;
				PlayerData[playerid][pSortingObject][2] = -1;

				DestroyVehicle(PlayerData[playerid][pSortingVehicle]);
				PlayerData[playerid][pSortingVehicle] = 0;

				DisablePlayerCheckpoint(playerid);
				SendClientMessageEx(playerid, COLOR_INFO, "Vous avez fini votre tri.");
			}
		}
	}
	if (!strcmp(nom, "mtransferer", true))
	{
		static
		userid,
		seatid;

		if (PlayerData[playerid][pJob] != JOB_MEDIC)
		return SendClientMessageEx(playerid, COLOR_ERROR, "Vous n'avez pas le job approprié.");

		if(PlayerData[playerid][pJobDuty] != JOB_MEDIC)
		return SendClientMessageEx(playerid, COLOR_ERROR, "Vous n'êtes pas en service. {FFFFFF}(/job service)");

		if (sscanf(scmd, "u", userid))
		return SendClientMessageEx(playerid, COLOR_USAGE, "/j(ob) mtransferer <PlayerID/PlayerName>");

		if (userid == INVALID_PLAYER_ID || !IsPlayerNearPlayer(playerid, userid, 10.0))
		return SendClientMessageEx(playerid, COLOR_ERROR, "Ce joueur n'est pas près de vous.");

		if (userid == playerid)
		return SendClientMessageEx(playerid, COLOR_ERROR, "Vous ne pouvez pas vous charger vous-même dans une ambulance.");

		if (!PlayerData[userid][pInjured])
		return SendClientMessageEx(playerid, COLOR_ERROR, "Ce joueur n'est pas blessé.");

		for(new i = 1, j = GetVehiclePoolSize(); i <= j; i++) if (IsPlayerNearBoot(playerid, i) && GetVehicleModel(i) == 416)
		{
			seatid = GetAvailableSeat(i, 2);

			if (seatid == -1)
			return SendClientMessageEx(playerid, COLOR_ERROR, "Il n'y a pas de place pour le patient.");

			ClearAnimations(userid);
			PlayerData[userid][pInjured] = 2;

			PutPlayerInVehicle(userid, i, seatid);
			SendNearbyMessage(playerid, 15.0, COLOR_PURPLE, "%s ouvre l'ambulance et charges %s à l'intérieur.", ReturnName(playerid), ReturnName(userid, 0));

			TogglePlayerControllable(userid, 0);
			SetPlayerHealth(userid, 100.0);
			return 1;
		}
		SendClientMessageEx(playerid, COLOR_ERROR, "Vous devez être près d'une ambulance.");
	}
	if (!strcmp(nom, "mdeposer", true))
	{
		static
		userid;

		if (PlayerData[playerid][pJob] != JOB_MEDIC)
		return SendClientMessageEx(playerid, COLOR_ERROR, "Vous n'avez pas le job approprié.");

		if(PlayerData[playerid][pJobDuty] != JOB_MEDIC)
		return SendClientMessageEx(playerid, COLOR_ERROR, "Vous n'êtes pas en service. {FFFFFF}(/job service)");

		if (sscanf(params, "u", userid))
		return SendClientMessageEx(playerid, COLOR_USAGE, "/j(ob) mdeposer <PlayerID/PlayerName>");

		if (userid == INVALID_PLAYER_ID || !IsPlayerInVehicle(playerid, GetPlayerVehicleID(playerid)))
		return SendClientMessageEx(playerid, COLOR_ERROR, "Ce joueur n'est pas près de vous.");

		if (userid == playerid)
		return SendClientMessageEx(playerid, COLOR_ERROR, "Vous ne pouvez pas vous livrer vous même à l'hôpital.");

		if (!PlayerData[userid][pInjured])
		return SendClientMessageEx(playerid, COLOR_ERROR, "Ce joueur n'est pas blessé.");

		for (new i = 0; i < sizeof(arrHospitalDeliver); i ++) if (IsPlayerInRangeOfPoint(playerid, 5.0, arrHospitalDeliver[i][0], arrHospitalDeliver[i][1], arrHospitalDeliver[i][2]))
		{
			ClearAnimations(userid);

			SetPlayerInterior(userid, 3);
			SendClientMessageEx(playerid, COLOR_INFO, "Vous avez livré %s à l'hôpital.", ReturnName(userid, 0));

			SetPlayerPos(userid, -204.5867, -1740.7955, 675.7687);
			SetPlayerFacingAngle(userid, 0.0000);

			TogglePlayerControllable(userid, 1);
			SetCameraBehindPlayer(userid);

			SetPlayerVirtualWorld(userid, i + 5000);
			PlayerData[userid][pHospitalInt] = i;

			PlayerData[userid][pHospital] = -1;
			PlayerData[userid][pHospitalTime] = 0;

			SendClientMessageEx(userid, COLOR_INFO, "Vous avez été transferé à l'hôpital le plus proche.");

			GameTextForPlayer(userid, " ", 1, 3);

			PlayerData[userid][pInjured] = 0;
			TextDrawHideForPlayer(userid, gServerTextdraws[2]);
			return 1;
		}
		SendClientMessageEx(playerid, COLOR_ERROR, "Vous devez être près d'une hôpital.");
	}
	if (!strcmp(nom, "reanimer", true))
	{
		if (PlayerData[playerid][pJob] != JOB_MEDIC)
		return SendClientMessageEx(playerid, COLOR_ERROR, "Vous n'avez pas le job approprié.");

		if(PlayerData[playerid][pJobDuty] != JOB_MEDIC)
		return SendClientMessageEx(playerid, COLOR_ERROR, "Vous n'êtes pas en service. {FFFFFF}(/job service)");

		new userid;

		if (sscanf(scmd, "u", userid))
			return SendClientMessageEx(playerid, COLOR_USAGE, "/j(ob) reanimer <PlayerID/PlayerName>");

		if (!IsPlayerNearPlayer(playerid, userid, 6.0))
			return SendClientMessageEx(playerid, COLOR_ERROR, "Ce joueur n'est pas près de vous.");

		if (playerid == userid)
			return SendClientMessageEx(playerid, COLOR_ERROR, "Vous ne pouvez pas vous réanimer vous même.");

		if (userid == INVALID_PLAYER_ID)
			return SendClientMessageEx(playerid, COLOR_ERROR, "Ce joueur n'est pas connecté.");

		if (!PlayerData[userid][pInjured])
			return SendClientMessageEx(playerid, COLOR_ERROR, "Ce joueur n'est pas blessé.");

		if(PlayerData[userid][pBankMoney] >= 300)
		{
			PlayerData[playerid][pBankMoney] += 300;
			PlayerData[userid][pBankMoney] -= 300;
			PlayerData[userid][pInjured] = 0;
			ClearAnimations(userid);
			TextDrawHideForPlayer(userid, gServerTextdraws[2]);
			TogglePlayerControllable(userid,1);
			SendClientMessageEx(playerid, COLOR_INFO, "Vous avez réanimé %s, vous gagnez 300$ dans votre compte en banque.", ReturnName(userid, 0));
			SendClientMessageEx(userid, COLOR_INFO, "%s vous a soigné, un retrait de 300$ a été effectué sur votre compte en banque.", ReturnName(playerid));
		}
		else
			return SendClientMessageEx(playerid, COLOR_ERROR, "Ce joueur n'a pas 300$ en banque, il ne peut pas être réanimé.");
	}
	if (!strcmp(nom, "mbarrage", true))
	{
		if (PlayerData[playerid][pJob] != JOB_MEDIC)
		return SendClientMessageEx(playerid, COLOR_ERROR, "Vous n'avez pas le job approprié.");

		if(PlayerData[playerid][pJobDuty] != JOB_MEDIC)
		return SendClientMessageEx(playerid, COLOR_ERROR, "Vous n'êtes pas en service. {FFFFFF}(/job service)");

		if (isnull(scmd))
		{
			SendClientMessageEx(playerid, COLOR_USAGE, "/j(ob) mbarrage <options>");
			SendClientMessage(playerid, COLOR_USAGE, "OPTIONS: cone, retirer, retirertous");
			return 1;
		}
		static
		Float:fX,
		Float:fY,
		Float:fZ,
		Float:fA;

		GetPlayerPos(playerid, fX, fY, fZ);
		GetPlayerFacingAngle(playerid, fA);

		if (!strcmp(scmd, "cone", true))
		{
			if (IsPlayerInAnyVehicle(playerid))
			return SendClientMessageEx(playerid, COLOR_ERROR, "Vous devez être à pied.");

			for (new i = 0; i != MAX_BARRICADES; i ++) if (!BarricadeData[i][cadeExists])
			{
				BarricadeData[i][cadeExists] = true;
				BarricadeData[i][cadeType] = 3;

				BarricadeData[i][cadePos][0] = fX;
				BarricadeData[i][cadePos][1] = fY;
				BarricadeData[i][cadePos][2] = fZ;

				BarricadeData[i][cadeObject] = CreateDynamicObject(1238, fX, fY, fZ+0.2, 0.0, 0.0, fA);
				SetPlayerPos(playerid, fX + 2, fY + 2, fZ + 2);

				SendNearbyMessage(playerid, 15.0, COLOR_PURPLE, "%s pose un cone.", ReturnName(playerid, 1));
				SendJobMessage(JOB_MEDIC, COLOR_RADIO, "RADIO: %s pose un cone à %s.", ReturnName(playerid), GetLocation(fX, fY, fZ));
				return 1;
			}
			SendClientMessageEx(playerid, COLOR_ERROR, "Il y a trop de barrage, retirer en.");
		}
		if (!strcmp(scmd, "cone", true))
		{
			for (new i = 0; i != MAX_BARRICADES; i ++) if (!BarricadeData[i][cadeExists])
			{
				BarricadeData[i][cadeExists] = true;
				BarricadeData[i][cadeType] = 3;

				BarricadeData[i][cadePos][0] = fX;
				BarricadeData[i][cadePos][1] = fY;
				BarricadeData[i][cadePos][2] = fZ;

				BarricadeData[i][cadeObject] = CreateDynamicObject(1237, fX, fY, fZ-1, 0.0, 0.0, fA);
				SetPlayerPos(playerid, fX + 2, fY + 2, fZ + 2);

				SendNearbyMessage(playerid, 15.0, COLOR_PURPLE, "%s pose un cone.", ReturnName(playerid, 1));
				SendJobMessage(JOB_MEDIC, COLOR_RADIO, "RADIO: %s pose un cone à %s.", ReturnName(playerid), GetLocation(fX, fY, fZ));
				return 1;
			}
			SendClientMessageEx(playerid, COLOR_ERROR, "Il y a trop de barrage, retirer en.");
		}
		if (!strcmp(scmd, "retirer", true))
		{
			for (new i = 0; i != MAX_BARRICADES; i ++) if (BarricadeData[i][cadeExists] && BarricadeData[i][cadeType] == 3 && IsPlayerInRangeOfPoint(playerid, 5.0, BarricadeData[i][cadePos][0], BarricadeData[i][cadePos][1], BarricadeData[i][cadePos][2]))
			{
				BarricadeData[i][cadeExists] = 0;
				BarricadeData[i][cadeType] = 0;

				DestroyDynamicObject(BarricadeData[i][cadeObject]);

				SendNearbyMessage(playerid, 15.0, COLOR_PURPLE, "%s retire le barrage.", ReturnName(playerid, 1));
				SendJobMessage(JOB_MEDIC, COLOR_RADIO, "RADIO: %s retire le barrage à %s.", ReturnName(playerid), GetLocation(fX, fY, fZ));
				return 1;
			}
			SendClientMessageEx(playerid, COLOR_ERROR, "Vous n'êtes pas près d'un barrage.");
		}
		if (!strcmp(scmd, "retirertous", true))
		{
			for (new i = 0; i != MAX_BARRICADES; i ++) if (BarricadeData[i][cadeExists] && BarricadeData[i][cadeType] == 3)
			{
				BarricadeData[i][cadeExists] = 0;
				BarricadeData[i][cadeType] = 0;

				DestroyDynamicObject(BarricadeData[i][cadeObject]);
			}
			SendJobMessage(JOB_MEDIC, COLOR_RADIO, "RADIO: %s a retiré tout les barrages.", ReturnName(playerid));
		}
	}
	if (!strcmp(nom, "peindre", true))
	{
		new
			targ,
			prix,
			color1,
			color2;
		
		if (PlayerData[playerid][pJob] != JOB_MECHANIC)
		return SendClientMessageEx(playerid, COLOR_ERROR, "Vous n'avez pas la permission d'utiliser cette commande.");

		if(PlayerData[playerid][pJobDuty] != JOB_MECHANIC)
		return SendClientMessageEx(playerid, COLOR_ERROR, "Vous n'êtes pas en service. {FFFFFF}(/job service)");

		if (sscanf(scmd, "uddd", targ, color1, color2, prix))
		{
			SendClientMessageEx(playerid, COLOR_USAGE, "/j(ob) peindre <PlayerID/PlayerName> <Couleur 1> <Couleur 2> <Prix>");
			return 1;
		}
		
		if (prix <= 0 || prix > 3000)
		return SendClientMessageEx(playerid, COLOR_ERROR, "Entre 100$ et 3000$");

		SendClientMessageEx(targ, COLOR_INFO, "Le mécanicien %s vous propose une peinture pour la somme de %d", ReturnName(playerid), prix);
		SendClientMessageEx(targ, COLOR_INFO, "Utilisez \"/accepter peinture\" pour accepter sa proposition.");

		PeintureID[targ] = playerid;
		PeinturePri[targ] = prix;

		PeintureColor1[targ] = color1;
		PeintureColor2[targ] = color2;
	}
	if (!strcmp(nom, "nitro", true))
	{
		if (PlayerData[playerid][pJob] != JOB_MECHANIC)
		return SendClientMessageEx(playerid, COLOR_ERROR, "Vous n'avez pas le job approprié.");

		if(PlayerData[playerid][pJobDuty] != JOB_MECHANIC)
		return SendClientMessageEx(playerid, COLOR_ERROR, "Vous n'êtes pas en service. {FFFFFF}(/job service)");

		if (IsPlayerInAnyVehicle(playerid))
		return SendClientMessageEx(playerid, COLOR_ERROR, "Vous devez être à pied.");

		if (!Inventory_HasItem(playerid, "NOS"))
		return SendClientMessageEx(playerid, COLOR_ERROR, "Vous n'avez pas de NOS dans votre inventaire.");

		for(new i = 1, j = GetVehiclePoolSize(); i <= j; i++) if (IsValidVehicle(i) && IsPlayerNearHood(playerid, i))
		{
			if (!IsEngineVehicle(i) || IsABike(i) || IsABoat(i) || IsAPlane(i) || IsAHelicopter(i))
			return SendClientMessageEx(playerid, COLOR_ERROR, "Vous ne pouvez pas mettre de nitro sur ce véhicule.");

			if (!GetHoodStatus(i))
			return SendClientMessageEx(playerid, COLOR_ERROR, "Le capot doit être ouvert.");

			Inventory_Remove(playerid, "NOS Canister");
			ApplyAnimation(playerid, "BD_FIRE", "wash_up", 4.1, 0, 0, 0, 0, 0, 1);

			AddComponent(i, 1010);
			SendNearbyMessage(playerid, 15.0, COLOR_PURPLE, "* %s place une cartouche de NOS dans le moteur du véhicule.", ReturnName(playerid));
			return 1;
		}
		SendClientMessageEx(playerid, COLOR_ERROR, "Vous devez être devant le capot d'un véhicule.");
	}
	return 1;
}

CMD:fcasier(playerid, params[])
{
	new factionid = PlayerData[playerid][pFaction];
	if (factionid == -1) return SendClientMessageEx(playerid, COLOR_ERROR, "Vous n'êtes pas membre d'une faction.");
	if (!IsNearFactionLocker(playerid)) return SendClientMessageEx(playerid, COLOR_ERROR, "Vous n'êtes pas près de votre casier faction.");

	if (FactionData[factionid][factionType] == FACTION_POLICE)
	{
		Dialog_Show(playerid, Locker, DIALOG_STYLE_LIST, "Casier faction", "{DE3838}DUTY ON/OFF\nGilet pare balle\nSkins\nArmes\nCoffre {9CE59C}(%s)", "Ok", "X",FormatNumber(FactionData[factionid][factionArge]));
	}
	else if(FactionData[factionid][factionType] == FACTION_GOV)
	{
		Dialog_Show(playerid, Locker, DIALOG_STYLE_LIST, "Casier faction", "{DE3838}DUTY ON/OFF\nGilet pare balle\nSkins\nArmes", "Ok", "X");
	}
	else
	{
   		Dialog_Show(playerid, Locker, DIALOG_STYLE_LIST, "Casier faction", "Skins\nArgent\nArmes", "Ok", "X");
	}
	return 1;
}

CMD:setleader(playerid, params[])
{
	static
	userid,
	id;

	if (PlayerData[playerid][pAdmin] < 4)
	return SendClientMessageEx(playerid, COLOR_ERROR, "Vous n'avez pas la permission d'utiliser cette commande.");

	if (sscanf(params, "ud", userid, id))
	return SendClientMessageEx(playerid, COLOR_USAGE, "/setleader <PlayerID/PlayerName> <FactionID> (-1 pour aucune faction)");

	if (userid == INVALID_PLAYER_ID)
	return SendClientMessageEx(playerid, COLOR_ERROR, "Ce joueur n'est pas valide.");

	if ((id < -1 || id >= MAX_FACTIONS) || (id != -1 && !FactionData[id][factionExists]))
	return SendClientMessageEx(playerid, COLOR_ERROR, "Vous avez specifié un ID faction invalide.");

	if (id == -1)
	{
		ResetFaction(userid);

		SendClientMessageEx(playerid, COLOR_INFO, "Vous avez retiré le leading de sa faction à %s.", ReturnName(userid, 0));
		SendClientMessageEx(userid, COLOR_INFO, "L'administrateur %s vous a retiré le leading de votre faction.", ReturnName(playerid));
	}
	else
	{
		SetFaction(userid, id);
		PlayerData[userid][pFactionRank] = FactionData[id][factionRanks];
		SQL_SaveCharacter(userid);
		SendClientMessageEx(playerid, COLOR_INFO, "Vous avez assigné à %s le leading de la faction \"%s\".", ReturnName(userid, 0), FactionData[id][factionName]);
		SendClientMessageEx(userid, COLOR_INFO, "L'administrateur %s vous a assigné le leading de la faction \"%s\".", ReturnName(playerid), FactionData[id][factionName]);
	}
	return 1;
}

CMD:membres(playerid, params[])
{
	new factionid = PlayerData[playerid][pFaction];

 	if (factionid == -1)
	    return SendClientMessageEx(playerid, COLOR_ERROR, "Vous n'êtes pas membre d'une faction.");

	SendClientMessage(playerid, COLOR_SERVER, "Membres disponibles:");
	SendClientMessage(playerid, COLOR_SERVER, "¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯");

	foreach (new i : Player) if (PlayerData[i][pFaction] == factionid)
	{
	    if(PlayerData[i][pOnDuty] == 1)
	    {
			SendClientMessageEx(playerid, COLOR_YELLOW, "[ID: %d] %s - %s(%d) - Numéro: %d %s", i, ReturnName(i, 0), Faction_GetRank(i), PlayerData[i][pFactionRank], PlayerData[i][pPhone], PlayerData[i][pSpeciality]);
		}
		else
		{
			SendClientMessageEx(playerid, COLOR_WHITE, "[ID: %d] %s - %s(%d) - Numéro: %d", i, ReturnName(i, 0), Faction_GetRank(i), PlayerData[i][pFactionRank], PlayerData[i][pPhone]);
		}
	}
	return 1;
}

CMD:jmembres(playerid, params[])
{
	
	if(PlayerData[playerid][pJob] == 0)
	    return SendClientMessageEx(playerid, COLOR_ERROR, "Vous n'avez pas de job.");

	SendClientMessage(playerid, COLOR_SERVER, "Membres du job disponibles:");
	SendClientMessage(playerid, COLOR_SERVER, "¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯");

	foreach (new i : Player) if (PlayerData[i][pJob] == PlayerData[playerid][pJob])
	{
	    if(PlayerData[i][pJobDuty] == 1)
	    {
			SendClientMessageEx(playerid, COLOR_YELLOW, "[ID: %d] %s - En service", i, ReturnName(i));
		}
		else
		{
			SendClientMessageEx(playerid, COLOR_WHITE, "[ID: %d] %s - Hors service", i, ReturnName(i));
		}
	}
	return 1;
}

CMD:changerspawn(playerid, params[])
{
	new point;
	if(sscanf(params, "i", point)) return SendClientMessageEx(playerid, COLOR_USAGE, "/changerspawn [0-3] (0: Aéroport | 1: Faction | 2: Dernière connexion | 3: Maison)");
	if(point == 0)
	{
		SendClientMessage(playerid, COLOR_WHITE, "Vous avez changé votre spawn, vous spawnerez à l'aéroport.");
		PlayerData[playerid][pSpawnPoint] = 0;
		return 1;
	}
	if(point == 1)
	{
		if(PlayerData[playerid][pFactionID] == -1)
		{
			SendClientMessageEx(playerid, COLOR_ERROR, "Vous n'êtes pas dans une faction.");
			return 1;
		}
		SendClientMessage(playerid, COLOR_WHITE, "Vous avez changé votre spawn, vous spawnerez dans votre QG faction.");
		PlayerData[playerid][pSpawnPoint] = 1;
		return 1;
	}
	if(point == 2)
	{
		SendClientMessage(playerid, COLOR_WHITE, "Vous avez changé votre spawn, vous spawnerez à votre dernière connexion.");
		PlayerData[playerid][pSpawnPoint] = 2;
		return 1;
	}
	if(point == 3)
	{
	    if (House_GetCount(playerid) >= MAX_OWNABLE_HOUSES || PlayerData[playerid][pLocat] != -1)
	    {
	        SendClientMessage(playerid, COLOR_WHITE, "Vous avez changé votre spawn, vous spawnerez à votre maison.");
			PlayerData[playerid][pSpawnPoint] = 3;
 		}
 		else SendClientMessageEx(playerid, COLOR_ERROR, "Vous n'avez pas de maison.");
	    return 1;
	}
	return 1;
}

CMD:arrest(playerid, params[])
{
    if (PlayerData[playerid][pAdmin] < 5) return SendClientMessageEx(playerid, COLOR_ERROR, "Vous n'avez pas la permission d'utiliser cette commande.");

	static nom[24], scmd[128];
	if (sscanf(params, "s[24]S()[128]", nom, scmd))
	{
	    SendClientMessageEx(playerid, COLOR_USAGE, "/arrest <options>");
	    SendClientMessage(playerid, COLOR_USAGE, "OPTIONS: creer, supprimer");
	    return 1;
	}
	if (!strcmp(nom, "creer", true))
	{
		static
			id = -1,
			Float:x,
			Float:y,
			Float:z;

		GetPlayerPos(playerid, x, y, z);

		id = Arrest_Create(x, y, z, GetPlayerInterior(playerid), GetPlayerVirtualWorld(playerid));

		if (id == -1)
			return SendClientMessageEx(playerid, COLOR_ERROR, "Le serveur a atteint sa limite de point d'arrestation.");

		SendClientMessageEx(playerid, COLOR_INFO, "Vous avez créé le point d'arrestation ID: %d.", id);
	}
	if (!strcmp(nom, "supprimer", true))
	{
		static
			id = 0;

		if (sscanf(scmd, "d", id))
			return SendClientMessageEx(playerid, COLOR_USAGE, "/arrest supprimer <ArrestID>");

		if ((id < 0 || id >= MAX_ARREST_POINTS) || !ArrestData[id][arrestExists])
			return SendClientMessageEx(playerid, COLOR_ERROR, "Mauvais arrest point ID.");

		Arrest_Delete(id);
		SendClientMessageEx(playerid, COLOR_INFO, "You have successfully destroyed arrest point ID: %d.", id);
	}
	return 1;
}

CMD:impound(playerid, params[])
{
    if (PlayerData[playerid][pAdmin] < 5) return SendClientMessageEx(playerid, COLOR_ERROR, "Vous n'avez pas la permission d'utiliser cette commande.");

	static nom[24], scmd[128];
	if (sscanf(params, "s[24]S()[128]", nom, scmd))
	{
	    SendClientMessageEx(playerid, COLOR_USAGE, "/impound <options>");
	    SendClientMessage(playerid, COLOR_USAGE, "OPTIONS: creer, supprimer, edit");
	    return 1;
	}
	if (!strcmp(nom, "creer", true))
	{
		static
			id = -1,
			Float:x,
			Float:y,
			Float:z;

		if (GetPlayerInterior(playerid) > 0 || GetPlayerVirtualWorld(playerid) > 0)
			return SendClientMessageEx(playerid, COLOR_ERROR, "Vous ne pouvez pas créer une fourrière dans un intérieur.");

		GetPlayerPos(playerid, x, y, z);

		id = Impound_Create(x, y, z);

		if (id == -1)
			return SendClientMessageEx(playerid, COLOR_ERROR, "Le serveur a atteint sa limite de fourrière.");

		SendClientMessageEx(playerid, COLOR_INFO, "Vous avez créé la fourrière ID: %d.", id);
	}
	if (!strcmp(nom, "supprimer", true))
	{
		static
			id = 0;

		if (sscanf(scmd, "d", id))
			return SendClientMessageEx(playerid, COLOR_USAGE, "/impound supprimer [impound id]");

		if ((id < 0 || id >= MAX_IMPOUND_LOTS) || !ImpoundData[id][impoundExists])
			return SendClientMessageEx(playerid, COLOR_ERROR, "L'ID de la fourrière entrer est incorrect.");

		Impound_Delete(id);
		SendClientMessageEx(playerid, COLOR_INFO, "Vous avez supprimé la fourrière ID: %d.", id);
	}
	if (!strcmp(nom, "edit", true))
	{
		static
			id,
			type[24],
			string[128];

		if (sscanf(scmd, "ds[24]S()[128]", id, type, string))
		{
			SendClientMessageEx(playerid, COLOR_USAGE, "/impound edit <ImpoundID> <options>");
			SendClientMessage(playerid, COLOR_USAGE, "OPTIONS:{D4D4D4} location, release");
			return 1;
		}
		if ((id < 0 || id >= MAX_IMPOUND_LOTS) || !ImpoundData[id][impoundExists])
		return SendClientMessageEx(playerid, COLOR_ERROR, "L'ID de la fourrière est incorrect.");

		if (!strcmp(type, "location", true))
		{
			static
			Float:x,
			Float:y,
			Float:z;

			GetPlayerPos(playerid, x, y, z);

			ImpoundData[id][impoundLot][0] = x;
			ImpoundData[id][impoundLot][1] = y;
			ImpoundData[id][impoundLot][2] = z;

			Impound_Refresh(id);
			Impound_Save(id);

			SendAdminAlert(COLOR_ADMINGROUP, "%s a modifié la position de la fourrière ID: %d.", ReturnName(playerid), id);
		}
		else if (!strcmp(type, "release", true))
		{
			static
			Float:x,
			Float:y,
			Float:z,
			Float:angle;

			GetPlayerPos(playerid, x, y, z);
			GetPlayerFacingAngle(playerid, angle);

			ImpoundData[id][impoundRelease][0] = x;
			ImpoundData[id][impoundRelease][1] = y;
			ImpoundData[id][impoundRelease][2] = z;
			ImpoundData[id][impoundRelease][3] = angle;

			Impound_Save(id);
			SendAdminAlert(COLOR_ADMINGROUP, "%s a modifié le point de la fourrière ID: %d.", ReturnName(playerid), id);
		}
	}
	return 1;
}



Dialog:Dialog_Account(playerid, response, listitem, inputtext[])
{
	if(!response) return 1;
	
	switch(listitem)
	{
	    case 0: // style de combat
	    {
	        Dialog_Show(playerid, Account_StyleCombat, DIALOG_STYLE_LIST, "Gstion de votre compte - Combat", "Normal\nBoxe\nKung Fu\nGenoux\nPied\nCoude", "Ok", "X");
	    }
	    case 1: // Changer mot de passe
	    {
	        Dialog_Show(playerid, Account_PasswordCheck, DIALOG_STYLE_INPUT, "Gstion de votre compte - Mot de passe", "Par mesure de sécurité, entrez votre mot de passe actuel:", "Ok", "X");
	    }
	    case 2: // Gestion des tchats
	    {
			dialog_TchatAccounts(playerid);
	    }
	}
	return 1;
}

stock dialog_TchatAccounts(playerid)
{
// #define COLOR_RED         FF0000
// #define COLOR_GREEN       33CC33
	new
	    string[800],

		ooc_chat[20],
		faction_chat[20],
		news_chat[20],
		admin_chat[60];

    if (PlayerData[playerid][pDisableOOC] == 1)
    	format(ooc_chat, sizeof(ooc_chat), "{FF0000}Désactivé");
	else
    	format(ooc_chat, sizeof(ooc_chat), "{33CC33}Activé");



    if (PlayerData[playerid][pDisableFaction] == 1)
    	format(faction_chat, sizeof(faction_chat), "{FF0000}Désactivé");
	else
    	format(faction_chat, sizeof(faction_chat), "{33CC33}Activé");



    if (PlayerData[playerid][pDisableBC] == 1)
    	format(news_chat, sizeof(news_chat), "{FF0000}Désactivé");
	else
    	format(news_chat, sizeof(news_chat), "{33CC33}Activé");
	
	if(PlayerData[playerid][pAdmin] != 0)
	{
	    if (PlayerData[playerid][pDisableAdmin] == 1)
	    	format(admin_chat, sizeof(admin_chat), "Tchat admininistration\t{FF0000}Désactivé");
		else
	    	format(admin_chat, sizeof(admin_chat), "Tchat admininistration\t{33CC33}Activé");
	}
	
	format(string, sizeof(string), "\
	Tchat OOC (/b)\t%s\n\
	Tchat faction (/f)\t%s\n\
	Tchat journaliste/news\t%s\n\
	%s", ooc_chat, faction_chat, news_chat, admin_chat);
	
	Dialog_Show(playerid, DIALOG_ACCOUNT_TCHATS, DIALOG_STYLE_TABLIST, "Gestion de votre compte", string, "Valider", "Annuler");
	return 1;
}
Dialog:DIALOG_ACCOUNT_TCHATS(playerid, response, listitem, inputtext[])
{
	if(!response)
	{
		cmd_compte(playerid, "\1");
		return 1;
	}
	
	switch(listitem)
	{
		case 0:
		{ // TCHAT OOC
			if(PlayerData[playerid][pDisableOOC] == 1) PlayerData[playerid][pDisableOOC] = 0;
			else PlayerData[playerid][pDisableOOC] = 1;
		}
		case 1:
		{ // TCHAT FACTION
			if(PlayerData[playerid][pDisableFaction] == 1) PlayerData[playerid][pDisableFaction] = 0;
			else PlayerData[playerid][pDisableFaction] = 1;
		}
		case 2:
		{ // TCHAT JOURNALISTE/NEWS
			if(PlayerData[playerid][pDisableBC] == 1) PlayerData[playerid][pDisableBC] = 0;
			else PlayerData[playerid][pDisableBC] = 1;
		}
		case 3:
		{ // TCHAT ADMINISTRATION
			if(PlayerData[playerid][pDisableAdmin] == 1) PlayerData[playerid][pDisableAdmin] = 0;
			else PlayerData[playerid][pDisableAdmin] = 1;
		}
	}
	dialog_TchatAccounts(playerid);
	return 1;
}

Dialog:Account_NewPassword(playerid, response, listitem, inputtext[])
{
	if(!response) return 1;

	if(strlen(inputtext) < 4 || strlen(inputtext) > 40)
		return Dialog_Show(playerid, Account_NewPassword, DIALOG_STYLE_LIST, "Gstion de votre compte - Mot de passe", "Votre mot de passe doit avoir entre 4 et 40 caractères.\nEntrez votre nouveau mot de passe:", "Ok", "X");

	static
		query[300],
		buffer[129];

	WP_Hash(buffer, sizeof(buffer), inputtext);

	format(query, sizeof(query), "UPDATE `characters` SET `Password` = '%s' WHERE `Username` = '%s'", buffer, PlayerData[playerid][pUsername]);
	mysql_function_query(g_iHandle, query, false, "", "");

	SendClientMessage(playerid, COLOR_GREEN, "Votre mot de passe a été mit à jour.");
	return 1;
}

Dialog:Account_PasswordCheck(playerid, response, listitem, inputtext[])
{
	if(!response) return 1;

	static
		query[300],
		buffer[129];

	WP_Hash(buffer, sizeof(buffer), inputtext);
	
	format(query, sizeof(query), "SELECT `ID` FROM `characters` WHERE `Username` = '%s' AND `Password` = '%s'", ReturnName(playerid), buffer);
	mysql_function_query(g_iHandle, query, true, "SQL_CheckPassword", "dd", playerid, 1);
	return 1;
}

forward SQL_CheckPassword(playerid, type);
public SQL_CheckPassword(playerid, type)
{
	static
	    rows,
		fields;

	cache_get_data(rows, fields, g_iHandle);

	if (!rows)
	{
		SendClientMessage(playerid, COLOR_ERROR, "Le mot de passe entré est invalide. L'action vous est interdite.");
		cmd_compte(playerid, "\1");
	}
	else
	{
	    switch(type)
	    {
			case 1: Dialog_Show(playerid, Account_NewPassword, DIALOG_STYLE_INPUT, "Gstion de votre compte - Mot de passe", "Entrez votre nouveau mot de passe:", "Ok", "X");
	    }
	}
	return 1;
}

Dialog:Account_StyleCombat(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		switch(listitem)
		{
			case 0:
			{
				PlayerData[playerid][pCombat] = 0;
				SetPlayerFightingStyle (playerid, FIGHT_STYLE_NORMAL);
			}
			case 1:
			{
				PlayerData[playerid][pCombat] = 1;
				SetPlayerFightingStyle (playerid, FIGHT_STYLE_BOXING);
			}
			case 2:
			{
				PlayerData[playerid][pCombat] = 2;
				SetPlayerFightingStyle (playerid, FIGHT_STYLE_KUNGFU);
			}
			case 3:
			{
				PlayerData[playerid][pCombat] = 3;
				SetPlayerFightingStyle (playerid, FIGHT_STYLE_KNEEHEAD);
			}
			case 4:
			{
				PlayerData[playerid][pCombat] = 4;
				SetPlayerFightingStyle (playerid, FIGHT_STYLE_GRABKICK);
			}
			case 5:
			{
				PlayerData[playerid][pCombat] = 5;
				SetPlayerFightingStyle (playerid, FIGHT_STYLE_ELBOW);
			}
			default:
			{
				PlayerData[playerid][pCombat] = 6;
				SetPlayerFightingStyle (playerid, FIGHT_STYLE_NORMAL);
			}
		}
		SendClientMessage(playerid, COLOR_GREEN, "Votre style de combat a bien été changé.");
	}
	return 1;
}

CMD:compte(playerid, params[])
{
	new
	    string[800];

	format(string, sizeof(string), "\
	Changer le style de combat\n\
	Changer votre mot de passe\n\
	Gestion des tchats");

	Dialog_Show(playerid, Dialog_Account, DIALOG_STYLE_LIST, "Gestion de votre compte", string, "Valider", "Annuler");
	return 1;
}

CMD:payer(playerid, params[])
{
	static
	userid,
	amount;

	if (sscanf(params, "ud", userid, amount))
	return SendClientMessageEx(playerid, COLOR_USAGE, "/payer <PlayerID/PlayerName> <Montant>");

	if (userid == INVALID_PLAYER_ID || !IsPlayerNearPlayer(playerid, userid, 5.0))
	return SendClientMessageEx(playerid, COLOR_ERROR, "Ce joueur n'est pas connecté ou il n'est pas près de vous.");

	if (userid == playerid)
	return SendClientMessageEx(playerid, COLOR_ERROR, "Vous ne pouvez pas vous donner de l'argent");

	if (amount < 1)
	return SendClientMessageEx(playerid, COLOR_ERROR, "Vous ne pouvez pas payer moins de 1$");

	if (amount > GetMoney(playerid))
	return SendClientMessageEx(playerid, COLOR_ERROR, "Vous n'avez pas assez d'argent.");

	static
	string[72];

	GiveMoney(playerid, -amount);
	GiveMoney(userid, amount);

    //SendClientMessageEx(playerid, COLOR_INFO, "Vous avez reçu la somme de %d de la part de %s", FormatNumber(amount), ReturnName(playerid));
	format(string, sizeof(string), "Vous avez reçu ~g~%s~w~ de la part de %s.", FormatNumber(amount), ReturnName(playerid, 1));
	ShowPlayerFooter(userid, string);

    //SendClientMessageEx(playerid, COLOR_INFO, "Vous avez donner la somme de %d à %s", FormatNumber(amount), ReturnName(userid, 0));
	format(string, sizeof(string), "Vous avez donné ~r~%s~w~ à %s.", FormatNumber(amount), ReturnName(userid, 1));
	ShowPlayerFooter(playerid, string);

	SendClientMessageEx(userid, COLOR_INFO, "Vous avez reçu %s de la part de %s", FormatNumber(amount), ReturnName(playerid, 1));
	SendClientMessageEx(playerid, COLOR_INFO, "Vous avez donné %s à %s", FormatNumber(amount), ReturnName(userid, 1));
	
	ApplyAnimation(playerid,"DEALER","shop_pay",3.0,0,0,0,0,0);

	Log_Write("logs/pay_log.txt", "[%s] %s (%s) has paid %s to %s (%s).", ReturnDate(), ReturnName(playerid), PlayerData[playerid][pIP], FormatNumber(amount), ReturnName(userid, 0), PlayerData[userid][pIP]);
	return 1;
}

CMD:d(playerid, params[])
{
	if (GetFactionType(playerid) != FACTION_POLICE && PlayerData[playerid][pJob] != JOB_MEDIC && GetFactionType(playerid) != FACTION_GOV)
	return SendClientMessageEx(playerid, COLOR_ERROR, "Vous devez être dans une faction gouvernementale.");

	if (isnull(params))
	return SendClientMessageEx(playerid, COLOR_USAGE, "/d <RadioDépartementale>");

	for (new i = 0; i != MAX_FACTIONS; i ++) if (FactionData[i][factionType] == FACTION_POLICE || FactionData[i][factionType] == FACTION_GOV) {
		SendFactionMessage(i, 0xff8282ff, "%s %s: %s", Faction_GetRank(playerid), ReturnName(playerid), params);
	}
	for (new i = 0; i != MAX_PLAYERS; i ++) if (IsPlayerConnected(i) && PlayerData[i][pJob] == JOB_MEDIC && PlayerData[i][pJobDuty]) {
		SendClientMessageEx(i, 0xff8282ff, "%s %s: %s", Faction_GetRank(playerid), ReturnName(playerid), params);
	}
	Log_Write("logs/faction_chat.txt", "[%s] [/d] %s %s: %s", ReturnDate(), Faction_GetRank(playerid), ReturnName(playerid), params);
	return 1;
}

CMD:gps(playerid, params[])
{
	if (!Inventory_HasItem(playerid, "GPS") && !VehicleHasGPS(GetPlayerVehicleID(playerid)))
		return SendClientMessageEx(playerid, COLOR_ERROR, "Vous devez avoir un GPS pour l'utiliser.");

	if (PlayerData[playerid][pInjured] || PlayerData[playerid][pLoading] > 0 || PlayerData[playerid][pUnloading] != -1 || PlayerData[playerid][pDeliverShipment] > 0)
		return SendClientMessageEx(playerid, COLOR_ERROR, "Vous ne pouvez pas utiliser cette commande pour l'instant.");

	Dialog_Show(playerid, MainGPS, DIALOG_STYLE_LIST, "GPS", "Lieux importants\nRechercher un commerce\nRechercher une maison\nEmplacements Personnalisés", "Ok", "X");
	return 1;
}

CMD:jerrican(playerid, params[])
{
	new vehicleid = GetNearestVehicle(playerid);

	if (IsPlayerInAnyVehicle(playerid) || vehicleid == INVALID_VEHICLE_ID)
	return SendClientMessageEx(playerid, COLOR_ERROR, "Vous n'êtes pas près d'un véhicule.");

	if (!Inventory_HasItem(playerid, "Jerrican"))
	return SendClientMessageEx(playerid, COLOR_ERROR, "Vous n'avez pas de Jérrican sur vous.");

	if (GetEngineStatus(vehicleid))
	return SendClientMessageEx(playerid, COLOR_ERROR, "Vous devez arrêter le moteur avant de faire le plein.");

	if (CoreVehicles[vehicleid][vehFuel] > 95)
	return SendClientMessageEx(playerid, COLOR_ERROR, "Ce véhicule n'a pas besoin d'essence.");

	if (PlayerData[playerid][pFuelCan])
	return SendClientMessageEx(playerid, COLOR_ERROR, "Vous utilisez déjà un jerrican.");

	PlayerData[playerid][pFuelCan] = 1;

	Inventory_Remove(playerid, "Jerrican");
	GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~r~Remplissage..", 5200, 3);

	SendNearbyMessage(playerid, 15.0, COLOR_PURPLE, "%s récupère le tuyau de la station puis remplit son reservoir..", ReturnName(playerid, 1));
	SetTimerEx("RefillUpdate", 5000, false, "dd", playerid, vehicleid);

	return 1;
}

CMD:amendes(playerid, params[])
{
	static
	string[MAX_PLAYER_TICKETS * 64];

	if (!IsPlayerInRangeOfPoint(playerid, 3.0, 1455.4907,-1728.5502,1052.0490))
	return SendClientMessageEx(playerid, COLOR_ERROR, "Vous devez être à la mairie pour payer vos amendes.");

	string[0] = 0;

	new
	    count = 0;
	    
	for (new i = 0; i < MAX_PLAYER_TICKETS; i ++) if (TicketData[playerid][i][ticketExists])
	{
		count++;
		format(string, sizeof(string), "%s%d - %s (%s - %s)\n", string, i, TicketData[playerid][i][ticketReason], FormatNumber(TicketData[playerid][i][ticketFee]), TicketData[playerid][i][ticketDate]);
	}
	if(count == 0) return SendClientMessage(playerid, COLOR_ERROR, "Vous n'avez aucune amende.");

	Dialog_Show(playerid, MyTickets, DIALOG_STYLE_LIST, "Amendes", string, "Payer", "X");
	return 1;
}



CMD:donnerargent(playerid, params[])
{
	static
	userid,
	amount;

	if (PlayerData[playerid][pAdmin] < 6)
	return SendClientMessageEx(playerid, COLOR_ERROR, "Vous n'avez pas la permission d'utiliser cette commande.");

	if (sscanf(params, "ud", userid, amount))
	return SendClientMessageEx(playerid, COLOR_USAGE, "/donnerargent <PlayerID/PlayerName> <Montant>");

	if (userid == INVALID_PLAYER_ID)
	return SendClientMessageEx(playerid, COLOR_ERROR, "Le joueur n'est pas valide.");

	GiveMoney(userid, amount);

	SendClientMessageEx(playerid, COLOR_INFO, "%s vous avez donné à %s la somme de %d$.", ReturnName(playerid, 1), ReturnName(userid, 0), amount);
	Log_Write("logs/admin_log.txt", "[%s] %s has given %s to %s.", ReturnDate(), ReturnName(playerid), FormatNumber(amount), ReturnName(userid, 0));

	return 1;
}

CMD:drogue(playerid, params[])
{
	if (isnull(params))
	{
		SendClientMessageEx(playerid, COLOR_USAGE, "/drogue <options>");
		SendClientMessage(playerid, COLOR_USAGE, "OPTIONS: marijuana, cocaine, heroine, steroides");
		return 1;
	}
	if (PlayerData[playerid][pDrugTime] > 0)
	return SendClientMessageEx(playerid, COLOR_ERROR, "Vous devez attendre que les effets disparaissent.");

	if (!strcmp(params, "marijuana", true))
	{
		if (Inventory_Count(playerid, "Marijuana") < 1)
		return SendClientMessageEx(playerid, COLOR_ERROR, "Vous devez avoir un grammes sur vous.");

        if (!Inventory_HasItem(playerid, "Briquet"))
		return SendClientMessageEx(playerid, COLOR_ERROR, "Vous n'avez pas de briquet.");
		
		PlayerData[playerid][pDrugTime] = 40;
		PlayerData[playerid][pDrugUsed] = 1;

		Inventory_Remove(playerid, "Marijuana", 1);
		ApplyAnimation(playerid, "SMOKING", "M_smk_in", 4.1, 0, 0, 0, 0, 0, 1);

		SetPlayerSpecialAction(playerid, SPECIAL_ACTION_SMOKE_CIGGY);
		SendNearbyMessage(playerid, 15.0, COLOR_PURPLE, "%s sort un briquet puis allume son joint.", ReturnName(playerid));
		SetPlayerHealth(playerid, 120);
	}
	else if (!strcmp(params, "cocaine", true))
	{
		if (Inventory_Count(playerid, "Cocaine") < 2)
		return SendClientMessageEx(playerid, COLOR_ERROR, "Vous devez avoir deux grammes sur vous.");

		PlayerData[playerid][pDrugTime] = 60;
		PlayerData[playerid][pDrugUsed] = 2;

		Inventory_Remove(playerid, "Cocaine", 2);

		ApplyAnimation(playerid, "SMOKING", "M_smk_in", 4.1, 0, 0, 0, 0, 0, 1);
		SendNearbyMessage(playerid, 15.0, COLOR_PURPLE, "%s sort quelques grammes de cocaîne qu'il sniffe ensuite.", ReturnName(playerid));
		SetPlayerArmour(playerid, 20);
	}
	else if (!strcmp(params, "heroine", true))
	{
		if (Inventory_Count(playerid, "Heroine") < 1)
		return SendClientMessageEx(playerid, COLOR_ERROR, "Vous devez avoir un grammes sur vous.");

		PlayerData[playerid][pDrugTime] = 30;
		PlayerData[playerid][pDrugUsed] = 3;

		Inventory_Remove(playerid, "Heroine", 1);

		ApplyAnimation(playerid, "SMOKING", "M_smk_in", 4.1, 0, 0, 0, 0, 0, 1);
		SendNearbyMessage(playerid, 15.0, COLOR_PURPLE, "%s sort une dose d'heroîne ainsi qu'une seringue puis ce pique le bras.", ReturnName(playerid));
		SetPlayerArmour(playerid, 40);
	}
	else if (!strcmp(params, "Steroides", true))
	{
		if (!Inventory_HasItem(playerid, "Steroides"))
		return SendClientMessageEx(playerid, COLOR_ERROR, "Vous devez avoir une pillule.");

		if (ReturnHealth(playerid) <= 5)
		return SendClientMessageEx(playerid, COLOR_ERROR, "Votre santé est trop faible pour prendre des stéroïdes.");

		PlayerData[playerid][pDrugTime] = 60;
		PlayerData[playerid][pDrugUsed] = 4;

		SetPlayerHealth(playerid, ReturnHealth(playerid) - 5);
		Inventory_Remove(playerid, "Steroides", 1);

		ApplyAnimation(playerid, "SMOKING", "M_smk_in", 4.1, 0, 0, 0, 0, 0, 1);
		SendNearbyMessage(playerid, 15.0, COLOR_PURPLE, "%s prend quelques pillules puis les avale.", ReturnName(playerid));
	}
	return 1;
}

CMD:typecar(playerid, params[])
{
	if (PlayerData[playerid][pAdmin] < 1)
	return SendClientMessageEx(playerid, COLOR_ERROR, "Vous n'avez pas la permission d'utiliser cette commande.");

	SendClientMessageEx(playerid, COLOR_YELLOW, "FACTION:{FFFFFF} LSPD: %d | Journaliste: %d | Gouvernement: %d | Gang: %d | Mafia: %d", FACTION_POLICE, FACTION_NEWS, FACTION_GOV, FACTION_GANG, FACTION_MAFIA);
	SendClientMessageEx(playerid, COLOR_YELLOW, "JOB:{FFFFFF} Livreur: %d | Mécanicien: %d | Taxi: %d | Mineur: %d | Pizzaboy: %d", JOB_COURIER, JOB_MECHANIC, JOB_TAXI, JOB_MINER, JOB_FOOD_VENDOR);
	SendClientMessageEx(playerid, COLOR_YELLOW, "JOB:{FFFFFF} Eboueur: %d | Trieur/Docker: %d | Médecin: %d", JOB_GARBAGE, JOB_SORTER, JOB_MEDIC);
	return 1;
}

CMD:sac(playerid, params[])
{
    if (!Inventory_HasItem(playerid, "Sac a dos"))
		return SendClientMessageEx(playerid, COLOR_ERROR, "Vous n'avez pas de sac sur vous.");

	static
		nom[24],
		scmd[128];

	if (sscanf(params, "s[24]S()[128]", nom, scmd))
	{
	    SendClientMessageEx(playerid, COLOR_USAGE, "/sac <options>");
	    SendClientMessage(playerid, COLOR_USAGE, "OPTIONS: voir, ranger, ajuster, poser");
	    return 1;
	}
	if (!strcmp(nom, "poser", true))
	{
		new
			id = GetPlayerBackpack(playerid);

		if (!Inventory_HasItem(playerid, "Sac a dos") || id == -1)
			return SendClientMessageEx(playerid, COLOR_ERROR, "Vous n'avez pas de sac sur vous.");

		if (IsPlayerInAnyVehicle(playerid) || !IsPlayerSpawned(playerid))
			return SendClientMessageEx(playerid, COLOR_ERROR, "Vous ne pouvez pas poser sac pour le moment.");

		static
		Float:x,
		Float:y,
		Float:z;

		GetPlayerPos(playerid, x, y, z);

		BackpackData[id][backpackPlayer] = 0;
		BackpackData[id][backpackPos][0] = x;
		BackpackData[id][backpackPos][1] = y;
		BackpackData[id][backpackPos][2] = z;
		BackpackData[id][backpackInterior] = GetPlayerInterior(playerid);
		BackpackData[id][backpackWorld] = GetPlayerVirtualWorld(playerid);

		Backpack_Refresh(id);
		Backpack_Save(id);

		Inventory_Remove(playerid, "Sac a dos");
		SendNearbyMessage(playerid, 15.0, COLOR_PURPLE, "%s pose son sac à dos au sol.", ReturnName(playerid));

		SetAccessories(playerid);
	}
	if (!strcmp(nom, "voir", true))
	{
		Backpack_Open(playerid);
	}
	if (!strcmp(nom, "ranger", true))
	{
		if(PlayerData[playerid][pSac] == 1)
		{
		    RemovePlayerAttachedObject(playerid, 5);
		    PlayerData[playerid][pSac] = 0;
		}
		else
		{
			SetPlayerAttachedObject(playerid, 5, 3026, 1, -0.134207, -0.093048, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000);
			PlayerData[playerid][pSac] = 1;
		}
	}
	if (!strcmp(nom, "ajuster", true))
	{
		if(PlayerData[playerid][pSac] == 1)
		{
		    PlayerData[playerid][pEditType] = 4;
		    EditAttachedObject(playerid, 5);

			SendClientMessage(playerid, COLOR_INFO, "Vous modifiez la position de votre sac à dos.");
		}
		else
		{
			SendClientMessageEx(playerid, COLOR_ERROR, "Vous devez sortir votre sac pour l'ajuster. {FFFFFF}(/sac ranger)");
		}
	}
	return 1;
}

CMD:itemlist(playerid, params[])
{
	if (PlayerData[playerid][pAdmin] < 4)
		return SendClientMessageEx(playerid, COLOR_ERROR, "Vous n'avez pas la permission d'utiliser cette commande.");

	static
	string[1024];

	if (!strlen(string)) {
		for (new i = 0; i < sizeof(g_aInventoryItems); i ++) {
			format(string, sizeof(string), "%s%s\n", string, g_aInventoryItems[i][e_InventoryItem]);
		}
	}
	return Dialog_Show(playerid, ShowOnly, DIALOG_STYLE_LIST, "Liste des items", string, "Ok", "X");
}

CMD:fourriere(playerid, params[])
{
	if (!IsPlayerInRangeOfPoint(playerid, 3.0, 1455.4802,-1724.3979,1052.0490))
		return SendClientMessageEx(playerid, COLOR_ERROR, "Vous devez être à la Mairie.");

	new
	string[32 * MAX_OWNABLE_CARS],
	count;

	for (new i = 0; i < MAX_DYNAMIC_CARS; i ++) if (count < MAX_OWNABLE_CARS && CarData[i][carExists] && Car_IsOwner(playerid, i) && CarData[i][carImpounded] != -1)
	{
		format(string, sizeof(string), "%s%d: %s (%s)\n", string, count + 1, ReturnVehicleName(CarData[i][carVehicle]), FormatNumber(CarData[i][carImpoundPrice]));
		ListedVehicles[playerid][count++] = i;
	}
	if (!count)
	SendClientMessageEx(playerid, COLOR_ERROR, "Vous n'avez pas de véhicule en fourrière.");

	else Dialog_Show(playerid, ReleaseCar, DIALOG_STYLE_LIST, "Fourrière", string, "Ok", "X");
	return 1;
}

CMD:tow(playerid, params[])
{
	if (GetVehicleModel(GetPlayerVehicleID(playerid)) != 525)
	return SendClientMessageEx(playerid, COLOR_ERROR, "Vous n'êtes pas au volant d'un tow-truck");

	if (GetPlayerState(playerid) != PLAYER_STATE_DRIVER)
	return SendClientMessageEx(playerid, COLOR_ERROR, "Vous devez être en place conducteur.");

	new vehicleid = GetVehicleFromBehind(GetPlayerVehicleID(playerid));

	if (vehicleid == INVALID_VEHICLE_ID)
	return SendClientMessageEx(playerid, COLOR_ERROR, "Il n'y a aucun véhicule dans les alentours.");

	if (!IsDoorVehicle(vehicleid) || IsAPlane(vehicleid) || IsABoat(vehicleid) || IsAHelicopter(vehicleid))
	return SendClientMessageEx(playerid, COLOR_ERROR, "Vous ne pouvez pas remorquer ce véhicule.");

	AttachTrailerToVehicle(vehicleid, GetPlayerVehicleID(playerid));
	SendNearbyMessage(playerid, 15.0, COLOR_PURPLE, "%s remorque la %s sur son tow-truck", ReturnName(playerid), ReturnVehicleName(vehicleid));
	return 1;
}

CMD:untow(playerid, params[])
{
	if (GetVehicleModel(GetPlayerVehicleID(playerid)) != 525)
	return SendClientMessageEx(playerid, COLOR_ERROR, "Vous n'êtes pas au voulant d'un tow-truck.");

	if (GetPlayerState(playerid) != PLAYER_STATE_DRIVER)
	return SendClientMessageEx(playerid, COLOR_ERROR, "Vous devez être en place conducteur.");

	new
	trailerid = GetVehicleTrailer(GetPlayerVehicleID(playerid));

	if (!trailerid)
	return SendClientMessageEx(playerid, COLOR_ERROR, "Il n'y a pas de véhicule accroché sur le tow-truck.");

	DetachTrailerFromVehicle(GetPlayerVehicleID(playerid));
	SendNearbyMessage(playerid, 15.0, COLOR_PURPLE, "%s décroche la %s de son tow-truck", ReturnName(playerid), ReturnVehicleName(trailerid));

	return 1;
}

CMD:freq(playerid, params[])
{
	new channel;

	if (!Inventory_HasItem(playerid, "Radio"))
	return SendClientMessageEx(playerid, COLOR_ERROR, "Vous devez avoir une radio.");

	if (sscanf(params, "d", channel))
	{
		SendClientMessageEx(playerid, COLOR_USAGE, "/freq <texte> (0 pour desactiver)");

		if (PlayerData[playerid][pChannel] > 0)
		SendClientMessageEx(playerid, COLOR_INFO, "Votre fréquence actuel: %d.", PlayerData[playerid][pChannel]);

		return 1;
	}
	if (channel < 0 || channel > 999)
	return SendClientMessageEx(playerid, COLOR_ERROR, "Pas en dessous de 1 ou plus de 999.");

	PlayerData[playerid][pChannel] = channel;

	if (channel == 0)
	SendClientMessageEx(playerid, COLOR_INFO, "Vous avez désactiver votre radio.");

	else SendClientMessageEx(playerid, COLOR_INFO, "Vous avez défini la fréquence de votre radio à %d, utilisez (\"/r <texte>\").", channel);
	return 1;
}

CMD:gsms(playerid, params[])
{
	if (isnull(params))
	return SendClientMessageEx(playerid, COLOR_USAGE, "/gsms <sms global>");

	if (!Inventory_HasItem(playerid, "Radio"))
	return SendClientMessageEx(playerid, COLOR_ERROR, "Vous devez avoir une radio.");

	if (!PlayerData[playerid][pChannel])
	return SendClientMessageEx(playerid, COLOR_ERROR, "Votre radio n'a pas de fréquence (/freq).");

	static
	string[128];
	if (strlen(params) > 90)
	{
		format(string, sizeof(string), "(GSMS) %s dit: %.90s",ReturnName(playerid), params);
		SendRadioMessage(PlayerData[playerid][pChannel], 0x6694BDFF, string);
		format(string, sizeof(string), "...%s",params[90]);
		SendRadioMessage(PlayerData[playerid][pChannel], 0x6694BDFF, string);
	}
	else {
		format(string, sizeof(string),"(GSMS) %s dit: %s",ReturnName(playerid), params);
		SendRadioMessage(PlayerData[playerid][pChannel], 0x6694BDFF, string);
	}
	return 1;
}

CMD:r(playerid, params[])
{
	if (isnull(params))
	return SendClientMessageEx(playerid, COLOR_USAGE, "/r <radio>");

	if (!Inventory_HasItem(playerid, "Radio"))
	return SendClientMessageEx(playerid, COLOR_ERROR, "Vous devez avoir une radio.");

	if (!PlayerData[playerid][pChannel])
	return SendClientMessageEx(playerid, COLOR_ERROR, "Votre radio n'a pas de fréquence (/freq).");

	static
	string[128];
	if(PlayerData[playerid][pChannel] == 911 && GetFactionType(playerid) != FACTION_POLICE) return SendClientMessageEx(playerid, COLOR_ERROR, "Cette fréquence peut être utiliser par le LSPD seulement.");
	if(PlayerData[playerid][pChannel] == 912 && GetFactionType(playerid) != FACTION_GOV) return SendClientMessageEx(playerid, COLOR_ERROR, "Cette fréquence peut être utiliser par le gouvernement seulement.");

	format(string, sizeof(string),"%s (radio): %s",ReturnName(playerid), params);
	SendRadioMessage(PlayerData[playerid][pChannel], 0x8080FF96, string);
	SendNearbyMessage(playerid, 5.0, COLOR_GREY, "%s (radio): %s", ReturnName(playerid), params);

	return 1;
}

CMD:checkpoint(playerid, params[])
{
	if (PlayerData[playerid][pDrivingTest] || PlayerData[playerid][pTaxiTest])
	return SendClientMessageEx(playerid, COLOR_ERROR, "Vous ne pouvez pas faire cette commande le temps que vous passez votre permis.");

	new
	vehicleid = GetPlayerVehicleID(playerid);

	PlayerData[playerid][pCP] = 0;

	if (PlayerData[playerid][pSorting] != -1)
	{
		PlayerData[playerid][pSorting] = -1;
		PlayerData[playerid][pSortCrate] = 0;

		RemovePlayerAttachedObject(playerid, 4);
		SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
	}
	if (PlayerData[playerid][pMining] != 0)
	{
		PlayerData[playerid][pMinedRock] = 0;
		PlayerData[playerid][pMineTime] = 0;

		RemovePlayerAttachedObject(playerid, 4);
		SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
	}
	if (PlayerData[playerid][pUnloading] != -1)
	{
		PlayerData[playerid][pUnloading] = -1;
		PlayerData[playerid][pUnloadVehicle] = INVALID_VEHICLE_ID;
	}
	if (PlayerData[playerid][pLoading])
	{
		PlayerData[playerid][pLoading] = 0;
		PlayerData[playerid][pLoadType] = 0;
	}
	if (PlayerData[playerid][pLoadCrate])
	{
		PlayerData[playerid][pLoadCrate] = 0;

		RemovePlayerAttachedObject(playerid, 4);
		SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
	}
	if (IsPlayerInWarehouse(playerid) && GetVehicleModel(vehicleid) == 530 && CoreVehicles[vehicleid][vehLoadType] == 7)
	{
		CoreVehicles[vehicleid][vehLoadType] = 0;
		CoreVehicles[vehicleid][vehCrate] = INVALID_OBJECT_ID;

		DestroyObject(CoreVehicles[vehicleid][vehCrate]);
	}
	DisablePlayerCheckpoint(playerid);
	SendClientMessageEx(playerid, COLOR_INFO, "Vous avez désactivé tous les points checkpoint.");
	return 1;
}

CMD:proprietes(playerid, params[])
return cmd_propriete(playerid, params);

CMD:propriete(playerid, params[])
{
	new count;

	for (new i = 0; i < MAX_HOUSES; i ++) if (House_IsOwner(playerid, i)) {
		SendClientMessageEx(playerid, COLOR_LIGHTGREEN, "* Maison ID: %d | Adresse: %s | Localisation: %s", i, HouseData[i][houseAddress], GetLocation(HouseData[i][housePos][0], HouseData[i][housePos][1], HouseData[i][housePos][2]));

		count++;
	}
	for (new i = 0; i < MAX_BUSINESSES; i ++) if (Business_IsOwner(playerid, i) && BusinessData[i][bizOwner] != 99999999) {
		SendClientMessageEx(playerid, COLOR_LIGHTRED, "* Business ID: %d | Nom: %s | Localisation: %s", i, BusinessData[i][bizName], GetLocation(BusinessData[i][bizPos][0], BusinessData[i][bizPos][1], BusinessData[i][bizPos][2]));

		count++;
	}
	for (new i = 0; i < MAX_DYNAMIC_CARS; i ++) if (Car_IsOwner(playerid, i)) {
		SendClientMessageEx(playerid, COLOR_LIGHTGREEN, "* Véhicule ID: %d | Modèle: %s | Emplacement: %s", i, ReturnVehicleModelName(CarData[i][carModel]), GetLocation(CarData[i][carPos][0], CarData[i][carPos][1], CarData[i][carPos][2]));

		count++;
	}
	if (!count)
	return SendClientMessageEx(playerid, COLOR_ERROR, "Vous ne possédez pas de maison, de biz ou de véhicule.");

	return 1;
}

CMD:jetpack(playerid, params[])
{
	if (PlayerData[playerid][pAdmin] < 4)
	return SendClientMessageEx(playerid, COLOR_ERROR, "Vous n'avez pas la permission d'utiliser cette commande.");

	if(PlayerData[playerid][pJetpack] != 1)
	{
		PlayerData[playerid][pJetpack] = 1;

		SetPlayerSpecialAction(playerid, SPECIAL_ACTION_USEJETPACK);
		SendClientMessage(playerid, COLOR_INFO, "Utilisez \"/jetpack\" pour le ranger.");
	}
	else
	{
		PlayerData[playerid][pJetpack] = 0;
		SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
	}
	return 1;
}

CMD:meteo(playerid, params[])
{
	new weatherid;

	if (PlayerData[playerid][pAdmin] < 4)
	return SendClientMessageEx(playerid, COLOR_ERROR, "Vous n'avez pas la permission d'utiliser cette commande.");

	if (sscanf(params, "d", weatherid))
	return SendClientMessageEx(playerid, COLOR_USAGE, "/meteo <WeatherID>");

	SetWeather(weatherid);
	SendClientMessageEx(playerid, COLOR_INFO, "Vous avez changé le temps, ID: %d.", weatherid);
	return 1;
}

CMD:settime(playerid, params[])
{
	new time;

	if (sscanf(params, "d", time))
	return SendClientMessageEx(playerid, COLOR_USAGE, "/settime <Heure>");

	SetPlayerTime(playerid, time, 0);
	SendClientMessageEx(playerid, COLOR_INFO, "Vous avez changé l'heure à %dh00.", time);
	return 1;
}

CMD:settimeall(playerid, params[])
{
	new time;

	if (PlayerData[playerid][pAdmin] < 4)
	return SendClientMessageEx(playerid, COLOR_ERROR, "Vous n'avez pas la permission d'utiliser cette commande.");

	if (sscanf(params, "d", time))
	return SendClientMessageEx(playerid, COLOR_USAGE, "/settimeall <Heure>");

	foreach(new i:Player) SetPlayerTime(i, time, 0);
	SendClientMessageEx(playerid, COLOR_INFO, "Vous avez changé l'heure à %dh00 pour tout les joueurs.", time);
	return 1;
}

CMD:levermains(playerid, params[])
{
	if (!AnimationCheck(playerid))
	return SendClientMessageEx(playerid, COLOR_ERROR, "Vous ne pouvez pas effectuer d'animations pour le moment.");

	SetPlayerSpecialAction(playerid, SPECIAL_ACTION_HANDSUP);
	return 1;
}

CMD:pisser(playerid, params[])
{
	if (!AnimationCheck(playerid))
	return SendClientMessageEx(playerid, COLOR_ERROR, "Vous ne pouvez pas effectuer d'animations pour le moment.");

	SetPlayerSpecialAction(playerid, 68);
	return 1;
}

CMD:assis(playerid, params[])
{
    new type;

	if (!AnimationCheck(playerid))
	    return SendClientMessageEx(playerid, COLOR_ERROR, "Vous ne pouvez pas faire d'animations pour le moment.");

	if (sscanf(params, "d", type))
	    return SendClientMessageEx(playerid, COLOR_USAGE, "/assis <1-15>");

	if (type < 1 || type > 15)
	    return SendClientMessageEx(playerid, COLOR_ERROR, "Type invalide.");

	switch (type) {
		case 1: ApplyAnimationEx(playerid, "CRIB", "PED_Console_Loop", 4.1, 1, 0, 0, 0, 0);
		case 2: ApplyAnimationEx(playerid, "INT_HOUSE", "LOU_In", 4.1, 0, 0, 0, 1, 0);
		case 3: ApplyAnimationEx(playerid, "MISC", "SEAT_LR", 4.1, 1, 0, 0, 0, 0);
		case 4: ApplyAnimationEx(playerid, "MISC", "Seat_talk_01", 4.1, 1, 0, 0, 0, 0);
		case 5: ApplyAnimationEx(playerid, "MISC", "Seat_talk_02", 4.1, 1, 0, 0, 0, 0);
		case 6: ApplyAnimationEx(playerid, "ped", "SEAT_down", 4.1, 0, 0, 0, 1, 0);
        case 7: ApplyAnimation(playerid,"BEACH", "ParkSit_M_loop", 4.0, 1, 0, 0, 0, 0);
	    case 8: ApplyAnimation(playerid,"SUNBATHE","ParkSit_M_IdleA", 4.0, 1, 0, 0, 0, 0);
		case 9: ApplyAnimation(playerid,"SUNBATHE","ParkSit_M_IdleB", 4.0, 1, 0, 0, 0, 0);
		case 10: ApplyAnimation(playerid,"SUNBATHE","ParkSit_M_IdleC", 4.0, 1, 0, 0, 0, 0);
		case 11: ApplyAnimation(playerid,"BEACH", "ParkSit_W_loop", 4.0, 1, 0, 0, 0, 0);
		case 12: ApplyAnimation(playerid,"SUNBATHE","ParkSit_W_IdleA", 4.0, 1, 0, 0, 0, 0);
		case 13: ApplyAnimation(playerid,"SUNBATHE","ParkSit_W_IdleB", 4.0, 1, 0, 0, 0, 0);
        case 14: ApplyAnimation(playerid,"SUNBATHE","ParkSit_W_IdleC", 4.0, 1, 0, 0, 0, 0);
        case 15: ApplyAnimation(playerid,"INT_Office","OFF_Sit_In", 4.0, 1, 0, 0, 0, 0);
	}
	return 1;
}

CMD:animlist(playerid, params[])
return cmd_animcmds(playerid, params);
CMD:animations(playerid, params[])
return cmd_animcmds(playerid, params);
CMD:animation(playerid, params[])
return cmd_animcmds(playerid, params);

CMD:animcmds(playerid, params[])
{
	SendClientMessage(playerid, COLOR_CLIENT, "ANIMATION:{FFFFFF} /dance | /levermains | /bat | /bar | /lavermains | /coucher | /musculation");
	SendClientMessage(playerid, COLOR_CLIENT, "ANIMATION:{FFFFFF} /porter | /crack | /dormir | /sauter | /deal | /manger | /vomir | /gsigne");
	SendClientMessage(playerid, COLOR_CLIENT, "ANIMATION:{FFFFFF} /cagoule | /taguer | /jeter | /bureau | /kiss | /lowrider | /croiser | /chat");
	SendClientMessage(playerid, COLOR_CLIENT, "ANIMATION:{FFFFFF} /show | /strip | /fumer | /cpied | /branler | /seposer | /roulade | /bomb");
	SendClientMessage(playerid, COLOR_CLIENT, "ANIMATION:{FFFFFF} /assis | /deal | /fuck | /marcher | /pisser | /essoufler | /sexe");
	SendClientMessage(playerid, COLOR_GREY, "Pour stopper toutes animations en cours, utilisez la commande /sa.");
	return 1;
}

CMD:lowrider(playerid, params[])
{
    new type;

	if (sscanf(params, "d", type))
	    return SendClientMessageEx(playerid, COLOR_USAGE, "/lowrider [1-8]");

	if (type < 1 || type > 8)
	    return SendClientMessageEx(playerid, COLOR_ERROR, "Type invalide.");

	switch (type) {
	    case 1: ApplyAnimation(playerid, "LOWRIDER","lrgirl_hair", 4.0, 0, 1, 1, 1, -1);
		case 2: ApplyAnimation(playerid, "LOWRIDER","lrgirl_hurry", 4.0, 0, 1, 1, 1, -1);
		case 3: ApplyAnimation(playerid, "LOWRIDER","lrgirl_idleloop", 4.0, 0, 1, 1, 1, -1);
		case 4: ApplyAnimation(playerid, "LOWRIDER","lrgirl_idle_to_l0", 4.0, 0, 1, 1, 1, -1);
		case 5: ApplyAnimation(playerid, "LOWRIDER","lrgirl_l0_loop", 4.0, 0, 1, 1, 1, -1);
		case 6: ApplyAnimation(playerid, "LOWRIDER","lrgirl_l1_loop", 4.0, 0, 1, 1, 1, -1);
		case 7: ApplyAnimation(playerid, "LOWRIDER","lrgirl_l1_to_l2", 4.0, 0, 1, 1, 1, -1);
		case 8: ApplyAnimation(playerid, "LOWRIDER","lrgirl_l2_to_l3", 4.0, 0, 1, 1, 1, -1);
	}
	return 1;
}

CMD:marcher(playerid, params[])
{
    new type;

	if (!AnimationCheck(playerid))
	    return SendClientMessageEx(playerid, COLOR_ERROR, "Vous ne pouvez pas effectuer d'animations pour le moment.");

	if (sscanf(params, "d", type))
	    return SendClientMessageEx(playerid, COLOR_USAGE, "/marcher <1-17>");

	if (type < 1 || type > 19)
	    return SendClientMessageEx(playerid, COLOR_ERROR, "Type invalide.");

	switch (type) {
	    case 1: ApplyAnimationEx(playerid, "FAT", "FatWalk", 4.1, 1, 1, 1, 1, 1, 1);
	    case 2: ApplyAnimationEx(playerid, "MUSCULAR", "MuscleWalk", 4.1, 1, 1, 1, 1, 1, 1);
	    case 3: ApplyAnimationEx(playerid, "PED", "WALK_armed", 4.1, 1, 1, 1, 1, 1, 1);
	    case 4: ApplyAnimationEx(playerid, "PED", "WALK_civi", 4.1, 1, 1, 1, 1, 1, 1);
	    case 5: ApplyAnimationEx(playerid, "PED", "WALK_fat", 4.1, 1, 1, 1, 1, 1, 1);
	    case 6: ApplyAnimationEx(playerid, "PED", "WALK_fatold", 4.1, 1, 1, 1, 1, 1, 1);
	    case 7: ApplyAnimationEx(playerid, "PED", "WALK_gang1", 4.1, 1, 1, 1, 1, 1, 1);
	    case 8: ApplyAnimationEx(playerid, "PED", "WALK_gang2", 4.1, 1, 1, 1, 1, 1, 1);
	    case 9: ApplyAnimationEx(playerid, "PED", "WALK_player", 4.1, 1, 1, 1, 1, 1, 1);
	    case 10: ApplyAnimationEx(playerid, "PED", "WALK_old", 4.1, 1, 1, 1, 1, 1, 1);
	    case 11: ApplyAnimationEx(playerid, "PED", "WALK_wuzi", 4.1, 1, 1, 1, 1, 1, 1);
	    case 12: ApplyAnimationEx(playerid, "PED", "WOMAN_walkbusy", 4.1, 1, 1, 1, 1, 1, 1);
	    case 13: ApplyAnimationEx(playerid, "PED", "WOMAN_walkfatold", 4.1, 1, 1, 1, 1, 1, 1);
	    case 14: ApplyAnimationEx(playerid, "PED", "WOMAN_walknorm", 4.1, 1, 1, 1, 1, 1, 1);
	    case 15: ApplyAnimationEx(playerid, "PED", "WOMAN_walksexy", 4.1, 1, 1, 1, 1, 1, 1);
	    case 16: ApplyAnimationEx(playerid, "PED", "WOMAN_walkshop", 4.1, 1, 1, 1, 1, 1, 1);
        case 17: ApplyAnimation(playerid,"ped","WOMAN_walksexy",4.1,1,1,1,1,1);
	}
	return 1;
}

CMD:strip(playerid, params[])
{
    new type;

	if (!AnimationCheck(playerid))
	    return SendClientMessageEx(playerid, COLOR_ERROR, "Vous ne pouvez pas effectuer d'animations pour le moment.");

	if (sscanf(params, "d", type))
	    return SendClientMessageEx(playerid, COLOR_USAGE, "/strip <1-7>");

	if (type < 1 || type > 7)
	    return SendClientMessageEx(playerid, COLOR_ERROR, "Type invalide.");

	switch (type) {
	    case 1: ApplyAnimation(playerid,"STRIP","strip_A",4.0,1,1,1,1,0);
        case 2: ApplyAnimation(playerid,"STRIP","strip_B",4.0,1,1,1,1,0);
        case 3: ApplyAnimation(playerid,"STRIP","strip_C",4.0,1,1,1,1,0);
        case 4: ApplyAnimation(playerid,"STRIP","strip_D",4.0,1,1,1,1,0);
        case 5: ApplyAnimation(playerid,"STRIP","strip_E",4.0,1,1,1,1,0);
        case 6: ApplyAnimation(playerid,"STRIP","strip_F",4.0,1,1,1,1,0);
        case 7: ApplyAnimation(playerid,"STRIP","strip_G",4.0,1,1,1,1,0);
	}
	return 1;
}

CMD:cpied(playerid, params[])
{
    new type;

	if (!AnimationCheck(playerid))
	    return SendClientMessageEx(playerid, COLOR_ERROR, "Vous ne pouvez pas effectuer d'animations pour le moment.");

	if (sscanf(params, "d", type))
	    return SendClientMessageEx(playerid, COLOR_USAGE, "/cpied <1-5>");

	if (type < 1 || type > 5)
	    return SendClientMessageEx(playerid, COLOR_ERROR, "Type invalide.");

	switch (type) {
	    case 1: ApplyAnimation(playerid,"FIGHT_B","FightB_G",4.0,0,0,0,0,0);
        case 2: ApplyAnimation(playerid,"FIGHT_C","FightC_M",4.0,0,1,1,0,0);
        case 3: ApplyAnimation(playerid,"FIGHT_D","FightD_G",4.0,0,0,0,0,0);
        case 4: ApplyAnimation(playerid,"FIGHT_B","FightB_1",4.0,0,1,1,0,0);
        case 5: ApplyAnimation(playerid, "POLICE", "Door_Kick", 3.0, 0, 0, 0, 0, 0);
	}
	return 1;
}

CMD:branler(playerid, params[])
{
    new type;

	if (!AnimationCheck(playerid))
	    return SendClientMessageEx(playerid, COLOR_ERROR, "Vous ne pouvez pas effectuer d'animations pour le moment.");

	if (sscanf(params, "d", type))
	    return SendClientMessageEx(playerid, COLOR_USAGE, "/branler <1-3>");

	if (type < 1 || type > 3)
	    return SendClientMessageEx(playerid, COLOR_ERROR, "Type invalide.");

	switch (type) {
		case 1: ApplyAnimation(playerid,"PAULNMAC","wank_in",4.0,1,1,1,1,0);
		case 2: ApplyAnimation(playerid,"PAULNMAC","wank_loop",4.0, 1, 0, 0, 1, 0);
		case 3: ApplyAnimation(playerid,"PAULNMAC","wank_out",4.0,1,1,1,1,0);
	}
	return 1;
}

CMD:show(playerid, params[])
{
	if (!AnimationCheck(playerid))
	return SendClientMessageEx(playerid, COLOR_ERROR, "Vous ne pouvez pas effectuer d'animations pour le moment.");

	ApplyAnimation(playerid,"RIOT","RIOT_ANGRY",4.0,0,0,0,0,0);
	return 1;
}

CMD:bat(playerid, params[])
{
	new type;

	if (!AnimationCheck(playerid))
	return SendClientMessageEx(playerid, COLOR_ERROR, "Vous ne pouvez pas effectuer d'animations pour le moment.");

	if (sscanf(params, "d", type))
	return SendClientMessageEx(playerid, COLOR_USAGE, "/bat <1-5>");

	if (type < 1 || type > 5)
	return SendClientMessageEx(playerid, COLOR_ERROR, "Animation invalide.");

	switch (type) {
		case 1: ApplyAnimation(playerid, "BASEBALL", "Bat_1", 4.1, 0, 1, 1, 0, 0, 1);
		case 2: ApplyAnimation(playerid, "BASEBALL", "Bat_2", 4.1, 0, 1, 1, 0, 0, 1);
		case 3: ApplyAnimation(playerid, "BASEBALL", "Bat_3", 4.1, 0, 1, 1, 0, 0, 1);
		case 4: ApplyAnimation(playerid, "BASEBALL", "Bat_4", 4.1, 0, 0, 0, 0, 0, 1);
		case 5: ApplyAnimationEx(playerid, "BASEBALL", "Bat_IDLE", 4.1, 1, 0, 0, 0, 0, 1);
	}
	return 1;
}

CMD:tomber(playerid, params[])
{
	new type;

	if (!AnimationCheck(playerid))
	return SendClientMessageEx(playerid, COLOR_ERROR, "Vous ne pouvez pas effectuer d'animations pour le moment.");

	if (sscanf(params, "d", type))
	return SendClientMessageEx(playerid, COLOR_USAGE, "/tomber <1-6>");

	if (type < 1 || type > 6)
	return SendClientMessageEx(playerid, COLOR_ERROR, "Animation invalide.");

	switch (type) {
		case 1: ApplyAnimation(playerid, "ped", "FLOOR_hit", 4.0, 0, 1, 1, 1, -1);
		case 2: ApplyAnimation(playerid, "ped", "FLOOR_hit_f", 4.0, 0, 1, 1, 1, -1);
		case 3: ApplyAnimation(playerid, "ped", "KO_shot_front", 4.0, 0, 1, 1, 1, -1);
		case 4: ApplyAnimation(playerid, "ped", "KO_shot_stom", 4.0, 0, 1, 1, 1, -1);
	    case 5: ApplyAnimation(playerid, "ped", "BIKE_fall_off", 4.0, 0, 1, 1, 1, -1);
		case 6: ApplyAnimation(playerid, "FINALE", "FIN_Land_Die", 4.0, 0, 1, 1, 1, -1);
	}
	return 1;
}

CMD:fuck(playerid, params[])
{
    if (!AnimationCheck(playerid))
	    return SendClientMessageEx(playerid, COLOR_ERROR, "Vous ne pouvez pas effectuer d'animations pour le moment.");

	ApplyAnimation(playerid, "PED", "fucku", 4.1, 0, 0, 0, 0, 0);
	return 1;
}

CMD:coude(playerid, params[])
{
	if (!AnimationCheck(playerid))
	return SendClientMessageEx(playerid, COLOR_ERROR, "Vous ne pouvez pas effectuer d'animations pour le moment.");

	ApplyAnimation(playerid, "BASEBALL", "Bat_M", 4.1, 0, 0, 0, 0, 0, 1);
	return 1;
}

CMD:bar(playerid, params[])
{
	new type;

	if (!AnimationCheck(playerid))
	return SendClientMessageEx(playerid, COLOR_ERROR, "Vous ne pouvez pas effectuer d'animations pour le moment.");

	if (sscanf(params, "d", type))
	return SendClientMessageEx(playerid, COLOR_USAGE, "/bar <1-8>");

	if (type < 1 || type > 8)
	return SendClientMessageEx(playerid, COLOR_ERROR, "Animation invalide.");

	switch (type) {
		case 1: ApplyAnimation(playerid, "BAR", "Barserve_bottle", 4.1, 0, 0, 0, 0, 0, 1);
		case 2: ApplyAnimation(playerid, "BAR", "Barserve_give", 4.1, 0, 0, 0, 0, 0, 1);
		case 3: ApplyAnimation(playerid, "BAR", "Barserve_glass", 4.1, 0, 0, 0, 0, 0, 1);
		case 4: ApplyAnimation(playerid, "BAR", "Barserve_in", 4.1, 0, 0, 0, 0, 0, 1);
		case 5: ApplyAnimation(playerid, "BAR", "Barserve_order", 4.1, 0, 0, 0, 0, 0, 1);
		case 6: ApplyAnimationEx(playerid, "BAR", "BARman_idle", 4.1, 1, 0, 0, 0, 0, 1);
		case 7: ApplyAnimationEx(playerid, "BAR", "dnk_stndM_loop", 4.1, 0, 0, 0, 0, 0, 1);
		case 8: ApplyAnimationEx(playerid, "BAR", "dnk_stndF_loop", 4.1, 0, 0, 0, 0, 0, 1);
	}
	return 1;
}

CMD:lavermains(playerid, params[])
{
	if (!AnimationCheck(playerid))
	return SendClientMessageEx(playerid, COLOR_ERROR, "Vous ne pouvez pas effectuer d'animations pour le moment.");

	ApplyAnimation(playerid, "BD_FIRE", "wash_up", 4.1, 0, 0, 0, 0, 0, 1);
	return 1;
}

CMD:coucher(playerid, params[])
{
	new type;

	if (!AnimationCheck(playerid))
	return SendClientMessageEx(playerid, COLOR_ERROR, "Vous ne pouvez pas effectuer d'animations pour le moment.");

	if (sscanf(params, "d", type))
	return SendClientMessageEx(playerid, COLOR_USAGE, "/coucher <1-5>");

	if (type < 1 || type > 5)
	return SendClientMessageEx(playerid, COLOR_ERROR, "Invalide.");

	switch (type) {
		case 1: ApplyAnimationEx(playerid, "BEACH", "bather", 4.1, 1, 0, 0, 0, 0, 1);
		case 2: ApplyAnimationEx(playerid, "BEACH", "Lay_Bac_Loop", 4.1, 1, 0, 0, 0, 0, 1);
		case 3: ApplyAnimationEx(playerid, "BEACH", "ParkSit_M_loop", 4.1, 1, 0, 0, 0, 0, 1);
		case 4: ApplyAnimationEx(playerid, "BEACH", "ParkSit_W_loop", 4.1, 1, 0, 0, 0, 0, 1);
		case 5: ApplyAnimationEx(playerid, "BEACH", "SitnWait_loop_W", 4.1, 1, 0, 0, 0, 0, 1);
	}
	return 1;
}

CMD:musculation(playerid, params[])
{
	new type;

	if (!AnimationCheck(playerid))
	return SendClientMessageEx(playerid, COLOR_ERROR, "Vous ne pouvez pas effectuer d'animations pour le moment.");

	if (sscanf(params, "d", type))
	return SendClientMessageEx(playerid, COLOR_USAGE, "/musculation <1-7>");

	if (type < 1 || type > 7)
	return SendClientMessageEx(playerid, COLOR_ERROR, "Animation invalide.");

	switch (type) {
		case 1: ApplyAnimation(playerid, "benchpress", "gym_bp_celebrate", 4.1, 0, 0, 0, 0, 0, 1);
		case 2: ApplyAnimationEx(playerid, "benchpress", "gym_bp_down", 4.1, 0, 0, 0, 1, 0, 1);
		case 3: ApplyAnimation(playerid, "benchpress", "gym_bp_getoff", 4.1, 0, 0, 0, 0, 0, 1);
		case 4: ApplyAnimationEx(playerid, "benchpress", "gym_bp_geton", 4.1, 0, 0, 0, 1, 0, 1);
		case 5: ApplyAnimationEx(playerid, "benchpress", "gym_bp_up_A", 4.1, 0, 0, 0, 1, 0, 1);
		case 6: ApplyAnimationEx(playerid, "benchpress", "gym_bp_up_B", 4.1, 0, 0, 0, 1, 0, 1);
		case 7: ApplyAnimationEx(playerid, "benchpress", "gym_bp_up_smooth", 4.1, 0, 0, 0, 1, 0, 1);
	}
	return 1;
}

CMD:sexe(playerid, params[])
{
	new type;

	if (!AnimationCheck(playerid))
	return SendClientMessageEx(playerid, COLOR_ERROR, "Vous ne pouvez pas effectuer d'animations pour le moment.");

	if (sscanf(params, "d", type))
	return SendClientMessageEx(playerid, COLOR_USAGE, "/sexe <1-4>");

	if (type < 1 || type > 4)
	return SendClientMessageEx(playerid, COLOR_ERROR, "Animation invalide.");

	switch (type) {
		case 1: ApplyAnimationEx(playerid, "BLOWJOBZ", "BJ_COUCH_LOOP_W", 4.1, 1, 0, 0, 0, 0, 1);
		case 2: ApplyAnimationEx(playerid, "BLOWJOBZ", "BJ_COUCH_LOOP_P", 4.1, 1, 0, 0, 0, 0, 1);
		case 3: ApplyAnimationEx(playerid, "BLOWJOBZ", "BJ_STAND_LOOP_W", 4.1, 1, 0, 0, 0, 0, 1);
		case 4: ApplyAnimationEx(playerid, "BLOWJOBZ", "BJ_STAND_LOOP_P", 4.1, 1, 0, 0, 0, 0, 1);
	}
	return 1;
}

CMD:bomb(playerid, params[])
{
	if (!AnimationCheck(playerid))
	return SendClientMessageEx(playerid, COLOR_ERROR, "Vous ne pouvez pas effectuer d'animations pour le moment.");

	ApplyAnimation(playerid, "BOMBER", "BOM_Plant", 4.1, 0, 0, 0, 0, 0, 1);
	return 1;
}

CMD:porter(playerid, params[])
{
	new type;

	if (!AnimationCheck(playerid))
	return SendClientMessageEx(playerid, COLOR_ERROR, "Vous ne pouvez pas effectuer d'animations pour le moment.");

	if (sscanf(params, "d", type))
	return SendClientMessageEx(playerid, COLOR_USAGE, "/porter <1-6>");

	if (type < 1 || type > 6)
	return SendClientMessageEx(playerid, COLOR_ERROR, "Animation invalide.");

	switch (type) {
		case 1: ApplyAnimation(playerid, "CARRY", "liftup", 4.1, 0, 0, 0, 0, 0, 1);
		case 2: ApplyAnimation(playerid, "CARRY", "liftup05", 4.1, 0, 0, 0, 0, 0, 1);
		case 3: ApplyAnimation(playerid, "CARRY", "liftup105", 4.1, 0, 0, 0, 0, 0, 1);
		case 4: ApplyAnimation(playerid, "CARRY", "putdwn", 4.1, 0, 0, 0, 0, 0, 1);
		case 5: ApplyAnimation(playerid, "CARRY", "putdwn05", 4.1, 0, 0, 0, 0, 0, 1);
		case 6: ApplyAnimation(playerid, "CARRY", "putdwn105", 4.1, 0, 0, 0, 0, 0, 1);
	}
	return 1;
}

CMD:crack(playerid, params[])
{
	new type;

	if (!AnimationCheck(playerid))
	return SendClientMessageEx(playerid, COLOR_ERROR, "Vous ne pouvez pas effectuer d'animations pour le moment.");

	if (sscanf(params, "d", type))
	return SendClientMessageEx(playerid, COLOR_USAGE, "/crack <1-6>");

	if (type < 1 || type > 6)
	return SendClientMessageEx(playerid, COLOR_ERROR, "Animation invalide.");

	switch (type) {
		case 1: ApplyAnimationEx(playerid, "CRACK", "crckdeth1", 4.1, 0, 0, 0, 1, 0, 1);
		case 2: ApplyAnimationEx(playerid, "CRACK", "crckdeth2", 4.1, 1, 0, 0, 0, 0, 1);
		case 3: ApplyAnimationEx(playerid, "CRACK", "crckdeth3", 4.1, 0, 0, 0, 1, 0, 1);
		case 4: ApplyAnimationEx(playerid, "CRACK", "crckidle1", 4.1, 0, 0, 0, 1, 0, 1);
		case 5: ApplyAnimationEx(playerid, "CRACK", "crckidle2", 4.1, 0, 0, 0, 1, 0, 1);
		case 6: ApplyAnimationEx(playerid, "CRACK", "crckidle3", 4.1, 0, 0, 0, 1, 0, 1);
	}
	return 1;
}

CMD:allonger(playerid, params[])
{
	new type;

	if (!AnimationCheck(playerid))
	return SendClientMessageEx(playerid, COLOR_ERROR, "Vous ne pouvez pas effectuer d'animations pour le moment.");

	if (sscanf(params, "d", type))
	return SendClientMessageEx(playerid, COLOR_USAGE, "/allonger <1-5>");

	if (type < 1 || type > 5)
	return SendClientMessageEx(playerid, COLOR_ERROR, "Animation invalide.");

	switch (type) {
		case 1: ApplyAnimationEx(playerid, "BEACH", "ParkSit_M_loop", 4.1, 0, 0, 0, 1, 0, 1);
		case 2: ApplyAnimationEx(playerid, "BEACH", "ParkSit_W_loop", 4.1, 1, 0, 0, 0, 0, 1);
		case 3: ApplyAnimationEx(playerid, "BEACH", "SitnWait_loop_W", 4.1, 0, 0, 0, 1, 0, 1);
		case 4: ApplyAnimationEx(playerid, "BEACH", "Lay_Bac_Loop ", 4.1, 0, 0, 0, 1, 0, 1);
		case 5: ApplyAnimationEx(playerid, "BEACH", "bather", 4.1, 0, 0, 0, 1, 0, 1);
	}
	return 1;
}

CMD:dormir(playerid, params[])
{
	new type;

	if (!AnimationCheck(playerid))
	return SendClientMessageEx(playerid, COLOR_ERROR, "Vous ne pouvez pas effectuer d'animations pour le moment.");

	if (sscanf(params, "d", type))
	return SendClientMessageEx(playerid, COLOR_USAGE, "/dormir <1-2>");

	if (type < 1 || type > 2)
	return SendClientMessageEx(playerid, COLOR_ERROR, "Animation invalide.");

	switch (type) {
		case 1: ApplyAnimationEx(playerid, "CRACK", "crckdeth4", 4.1, 0, 0, 0, 1, 0, 1);
		case 2: ApplyAnimationEx(playerid, "CRACK", "crckidle4", 4.1, 0, 0, 0, 1, 0, 1);
	}
	return 1;
}

CMD:sauter(playerid, params[])
{
	if (!AnimationCheck(playerid))
	return SendClientMessageEx(playerid, COLOR_ERROR, "Vous ne pouvez pas effectuer d'animations pour le moment.");

	ApplyAnimation(playerid, "DODGE", "Crush_Jump", 4.1, 0, 1, 1, 0, 0, 1);
	return 1;
}

CMD:deal(playerid, params[])
{
	new type;

	if (!AnimationCheck(playerid))
	return SendClientMessageEx(playerid, COLOR_ERROR, "Vous ne pouvez pas effectuer d'animations pour le moment.");

	if (sscanf(params, "d", type))
	return SendClientMessageEx(playerid, COLOR_USAGE, "/deal <1-6>");

	if (type < 1 || type > 6)
	return SendClientMessageEx(playerid, COLOR_ERROR, "Animation invalide.");

	switch (type) {
		case 1: ApplyAnimation(playerid, "DEALER", "DEALER_DEAL", 4.1, 0, 0, 0, 0, 0, 1);
		case 2: ApplyAnimation(playerid, "DEALER", "DRUGS_BUY", 4.1, 0, 0, 0, 0, 0, 1);
		case 3: ApplyAnimation(playerid, "DEALER", "shop_pay", 4.1, 0, 0, 0, 0, 0, 1);
		case 4: ApplyAnimationEx(playerid, "DEALER", "DEALER_IDLE_01", 4.1, 1, 0, 0, 0, 0, 1);
		case 5: ApplyAnimationEx(playerid, "DEALER", "DEALER_IDLE_02", 4.1, 1, 0, 0, 0, 0, 1);
		case 6: ApplyAnimationEx(playerid, "DEALER", "DEALER_IDLE_03", 4.1, 1, 0, 0, 0, 0, 1);
	}
	return 1;
}

CMD:dance(playerid, params[])
{
	new type;

	if (!AnimationCheck(playerid))
	return SendClientMessageEx(playerid, COLOR_ERROR, "Vous ne pouvez pas effectuer d'animations pour le moment.");

	if (sscanf(params, "d", type))
	return SendClientMessageEx(playerid, COLOR_USAGE, "/dance <1-14>");

	if (type < 1 || type > 14)
	return SendClientMessageEx(playerid, COLOR_ERROR, "Animation invalide.");

	switch (type) {
        case 1: SetPlayerSpecialAction(playerid,SPECIAL_ACTION_DANCE1);
        case 2: SetPlayerSpecialAction(playerid,SPECIAL_ACTION_DANCE2);
        case 3: SetPlayerSpecialAction(playerid,SPECIAL_ACTION_DANCE3);
        case 4: SetPlayerSpecialAction(playerid,SPECIAL_ACTION_DANCE4);
		case 5: ApplyAnimationEx(playerid, "DANCING", "dance_loop", 4.1, 1, 0, 0, 0, 0, 1);
		case 6: ApplyAnimationEx(playerid, "DANCING", "DAN_Left_A", 4.1, 1, 0, 0, 0, 0, 1);
		case 7: ApplyAnimationEx(playerid, "DANCING", "DAN_Right_A", 4.1, 1, 0, 0, 0, 0, 1);
		case 8: ApplyAnimationEx(playerid, "DANCING", "DAN_Loop_A", 4.1, 1, 0, 0, 0, 0, 1);
		case 9: ApplyAnimationEx(playerid, "DANCING", "DAN_Up_A", 4.1, 1, 0, 0, 0, 0, 1);
		case 10: ApplyAnimationEx(playerid, "DANCING", "DAN_Down_A", 4.1, 1, 0, 0, 0, 0, 1);
		case 11: ApplyAnimationEx(playerid, "DANCING", "dnce_M_a", 4.1, 1, 0, 0, 0, 0, 1);
		case 12: ApplyAnimationEx(playerid, "DANCING", "dnce_M_e", 4.1, 1, 0, 0, 0, 0, 1);
		case 13: ApplyAnimationEx(playerid, "DANCING", "dnce_M_b", 4.1, 1, 0, 0, 0, 0, 1);
		case 14: ApplyAnimationEx(playerid, "DANCING", "dnce_M_c", 4.1, 1, 0, 0, 0, 0, 1);
	}
	return 1;
}

CMD:manger(playerid, params[])
{
	new type;

	if (!AnimationCheck(playerid))
	return SendClientMessageEx(playerid, COLOR_ERROR, "Vous ne pouvez pas effectuer d'animations pour le moment.");

	if (sscanf(params, "d", type))
	return SendClientMessageEx(playerid, COLOR_USAGE, "/manger <1-3>");

	if (type < 1 || type > 3)
	return SendClientMessageEx(playerid, COLOR_ERROR, "Animation invalide.");

	switch (type) {
		case 1: ApplyAnimation(playerid, "FOOD", "EAT_Burger", 4.1, 0, 0, 0, 0, 0, 1);
		case 2: ApplyAnimation(playerid, "FOOD", "EAT_Chicken", 4.1, 0, 0, 0, 0, 0, 1);
		case 3: ApplyAnimation(playerid, "FOOD", "EAT_Pizza", 4.1, 0, 0, 0, 0, 0, 1);
	}
	return 1;
}

CMD:seposer(playerid, params[])
{
	new type;

	if (!AnimationCheck(playerid))
	return SendClientMessageEx(playerid, COLOR_ERROR, "Vous ne pouvez pas effectuer d'animations pour le moment.");

	if (sscanf(params, "d", type))
	return SendClientMessageEx(playerid, COLOR_USAGE, "/seposer <1-2>");

	if (type < 1 || type > 2)
	return SendClientMessageEx(playerid, COLOR_ERROR, "Animation invalide.");

	switch (type) {
		case 1: ApplyAnimation(playerid,"GANGS","leanIDLE",4.0,0,0,0,1,0);
        case 2: ApplyAnimation(playerid,"MISC","Plyrlean_loop",4.0,0,0,0,1,0);
	}
	return 1;
}

CMD:croiser(playerid, params[])
{
	new type;

	if (!AnimationCheck(playerid))
	return SendClientMessageEx(playerid, COLOR_ERROR, "Vous ne pouvez pas effectuer d'animations pour le moment.");

	if (sscanf(params, "d", type))
	return SendClientMessageEx(playerid, COLOR_USAGE, "/croiser <1-5>");

	if (type < 1 || type > 5)
	return SendClientMessageEx(playerid, COLOR_ERROR, "Animation invalide.");

	switch (type) {
		case 1: ApplyAnimation(playerid, "COP_AMBIENT", "Coplook_loop", 4.0, 0, 1, 1, 1, -1);
		case 2: ApplyAnimation(playerid, "DEALER", "DEALER_IDLE", 4.0, 0, 1, 1, 1, -1);
		case 3: ApplyAnimation(playerid, "DEALER", "DEALER_IDLE_01", 4.0, 0, 1, 1, 1, -1);
		case 4: ApplyAnimation(playerid, "DEALER", "DEALER_IDLE_02", 4.0, 0, 1, 1, 1, -1);
		case 5: ApplyAnimation(playerid, "DEALER", "DEALER_IDLE_03", 4.0, 0, 1, 1, 1, -1);
	}
	return 1;
}

CMD:roulade(playerid, params[])
{
	new type;

	if (!AnimationCheck(playerid))
	return SendClientMessageEx(playerid, COLOR_ERROR, "Vous ne pouvez pas effectuer d'animations pour le moment.");

	if (sscanf(params, "d", type))
	return SendClientMessageEx(playerid, COLOR_USAGE, "/roulade <1-3>");

	if (type < 1 || type > 3)
	return SendClientMessageEx(playerid, COLOR_ERROR, "Animation invalide.");

	switch (type) {
		case 1: ApplyAnimation(playerid,"ped","Crouch_Roll_L",4.0,0,1,1,0,0);
		case 2: ApplyAnimation(playerid,"ped","Crouch_Roll_R",4.0,0,1,1,0,0);
		case 3: ApplyAnimation(playerid,"ped","EV_dive",4.0,0,1,1,0,0);
	}
	return 1;
}

CMD:fumer(playerid, params[])
{
	new type;

	if (!AnimationCheck(playerid))
	return SendClientMessageEx(playerid, COLOR_ERROR, "Vous ne pouvez pas effectuer d'animations pour le moment.");

	if (sscanf(params, "d", type))
	return SendClientMessageEx(playerid, COLOR_USAGE, "/fumer <1-2>");

	if (type < 1 || type > 2)
	return SendClientMessageEx(playerid, COLOR_ERROR, "Animation invalide.");

	switch (type) {
		case 1: ApplyAnimation(playerid,"SMOKING", "M_smklean_loop", 4.0, 1, 0, 0, 1, 0);
		case 2: ApplyAnimation(playerid,"GANGS","smkcig_prtl",4.0,0,1,1,1,1);
	}
	return 1;
}

CMD:viser(playerid, params[])
{
	new type;

	if (!AnimationCheck(playerid))
	return SendClientMessageEx(playerid, COLOR_ERROR, "Vous ne pouvez pas effectuer d'animations pour le moment.");

	if (sscanf(params, "d", type))
	return SendClientMessageEx(playerid, COLOR_USAGE, "/viser <1-7>");

	if (type < 1 || type > 7)
	return SendClientMessageEx(playerid, COLOR_ERROR, "Animation invalide.");

	switch (type) {
		case 1: ApplyAnimation(playerid,"PED","gang_gunstand",4.0,1,1,1,1,1);
		case 2: ApplyAnimation(playerid, "SHOP", "SHP_Gun_Aim", 4.0, 0, 1, 1, 1, -1);
		case 3: ApplyAnimation(playerid,"PED","Driveby_L",4.0, 0, 1, 1, 1, -1);
		case 4: ApplyAnimation(playerid,"PED","Driveby_R",4.0, 0, 1, 1, 1, -1);
		case 5: ApplyAnimation(playerid,"ped", "ARRESTgun", 4.0, 0, 1, 1, 1, -1);
		case 6: ApplyAnimation(playerid, "SHOP", "ROB_Loop_Threat", 4.0, 1, 0, 0, 0, 0);
		case 7: ApplyAnimation(playerid, "PED", "GUN_STAND", 4.0, 1, 0, 0, 0, 0);
	}
	return 1;
}

CMD:vomir(playerid, params[])
{
	if (!AnimationCheck(playerid))
	return SendClientMessageEx(playerid, COLOR_ERROR, "Vous ne pouvez pas effectuer d'animations pour le moment.");

	ApplyAnimation(playerid, "FOOD", "EAT_Vomit_P", 4.1, 0, 0, 0, 0, 0, 1);
	return 1;
}

CMD:essoufler(playerid, params[])
{
	if (!AnimationCheck(playerid))
	return SendClientMessageEx(playerid, COLOR_ERROR, "Vous ne pouvez pas effectuer d'animations pour le moment.");

	ApplyAnimation(playerid,"FAT","IDLE_tired", 4.0, 1, 0, 0, 0, 0);
	return 1;
}

CMD:gsigne(playerid, params[])
{
	new type;

	if (!AnimationCheck(playerid))
	return SendClientMessageEx(playerid, COLOR_ERROR, "Vous ne pouvez pas effectuer d'animations pour le moment.");

	if (sscanf(params, "d", type))
	return SendClientMessageEx(playerid, COLOR_USAGE, "/gsigne <1-14>");

	if (type < 1 || type > 14)
	return SendClientMessageEx(playerid, COLOR_ERROR, "Animation invalide.");

	switch (type) {
		case 1: ApplyAnimation(playerid, "GHANDS", "gsign1", 4.1, 0, 0, 0, 0, 0, 1);
		case 2: ApplyAnimation(playerid, "GHANDS", "gsign1LH", 4.1, 0, 0, 0, 0, 0, 1);
		case 3: ApplyAnimation(playerid, "GHANDS", "gsign2", 4.1, 0, 0, 0, 0, 0, 1);
		case 4: ApplyAnimation(playerid, "GHANDS", "gsign2LH", 4.1, 0, 0, 0, 0, 0, 1);
		case 5: ApplyAnimation(playerid, "GHANDS", "gsign3", 4.1, 0, 0, 0, 0, 0, 1);
		case 6: ApplyAnimation(playerid, "GHANDS", "gsign3LH", 4.1, 0, 0, 0, 0, 0, 1);
		case 7: ApplyAnimation(playerid, "GHANDS", "gsign4", 4.1, 0, 0, 0, 0, 0, 1);
		case 8: ApplyAnimation(playerid, "GHANDS", "gsign4LH", 4.1, 0, 0, 0, 0, 0, 1);
		case 9: ApplyAnimation(playerid, "GHANDS", "gsign5", 4.1, 0, 0, 0, 0, 0, 1);
		case 10: ApplyAnimation(playerid, "GHANDS", "gsign5LH", 4.1, 0, 0, 0, 0, 0, 1);
		case 11: ApplyAnimation(playerid, "GANGS", "Invite_No", 4.1, 0, 0, 0, 0, 0, 1);
		case 12: ApplyAnimation(playerid, "GANGS", "Invite_Yes", 4.1, 0, 0, 0, 0, 0, 1);
		case 13: ApplyAnimation(playerid, "GANGS", "prtial_gngtlkD", 4.1, 0, 0, 0, 0, 0, 1);
		case 14: ApplyAnimation(playerid, "GANGS", "smkcig_prtl", 4.1, 0, 0, 0, 0, 0, 1);
	}
	return 1;
}

CMD:chat(playerid, params[])
{
	new type;

	if (!AnimationCheck(playerid))
	return SendClientMessageEx(playerid, COLOR_ERROR, "Vous ne pouvez pas effectuer d'animations pour le moment.");

	if (sscanf(params, "d", type))
	return SendClientMessageEx(playerid, COLOR_USAGE, "/chat <1-6>");

	if (type < 1 || type > 6)
	return SendClientMessageEx(playerid, COLOR_ERROR, "Animation invalide.");

	switch (type) {
		case 1: ApplyAnimation(playerid, "GANGS", "prtial_gngtlkA", 4.1, 0, 0, 0, 0, 0, 1);
		case 2: ApplyAnimation(playerid, "GANGS", "prtial_gngtlkB", 4.1, 0, 0, 0, 0, 0, 1);
		case 3: ApplyAnimation(playerid, "GANGS", "prtial_gngtlkE", 4.1, 0, 0, 0, 0, 0, 1);
		case 4: ApplyAnimation(playerid, "GANGS", "prtial_gngtlkF", 4.1, 0, 0, 0, 0, 0, 1);
		case 5: ApplyAnimation(playerid, "GANGS", "prtial_gngtlkG", 4.1, 0, 0, 0, 0, 0, 1);
		case 6: ApplyAnimation(playerid, "GANGS", "prtial_gngtlkH", 4.1, 0, 0, 0, 0, 0, 1);
	}
	return 1;
}

CMD:cagoule(playerid, params[])
{
	if (!AnimationCheck(playerid))
	return SendClientMessageEx(playerid, COLOR_ERROR, "Vous ne pouvez pas effectuer d'animations pour le moment.");

	ApplyAnimation(playerid, "goggles", "goggles_put_on", 4.1, 0, 0, 0, 0, 0, 1);
	return 1;
}

CMD:taguer(playerid, params[])
{
	if (!AnimationCheck(playerid))
	return SendClientMessageEx(playerid, COLOR_ERROR, "Vous ne pouvez pas effectuer d'animations pour le moment.");

	ApplyAnimationEx(playerid, "GRAFFITI", "spraycan_fire", 4.1, 1, 0, 0, 0, 0, 1);
	return 1;
}

CMD:jeter(playerid, params[])
{
	if (!AnimationCheck(playerid))
	return SendClientMessageEx(playerid, COLOR_ERROR, "Vous ne pouvez pas effectuer d'animations pour le moment.");

	ApplyAnimation(playerid, "GRENADE", "WEAPON_throw", 4.1, 0, 0, 0, 0, 0, 1);
	return 1;
}

CMD:swipe(playerid, params[])
{
	if (!AnimationCheck(playerid))
	return SendClientMessageEx(playerid, COLOR_ERROR, "Vous ne pouvez pas effectuer d'animations pour le moment.");

	ApplyAnimation(playerid, "HEIST9", "Use_SwipeCard", 4.1, 0, 0, 0, 0, 0, 1);
	return 1;
}

CMD:bureau(playerid, params[])
{
	new type;

	if (!AnimationCheck(playerid))
	return SendClientMessageEx(playerid, COLOR_ERROR, "Vous ne pouvez pas effectuer d'animations pour le moment.");

	if (sscanf(params, "d", type))
	return SendClientMessageEx(playerid, COLOR_USAGE, "/bureau <1-6>");

	if (type < 1 || type > 6)
	return SendClientMessageEx(playerid, COLOR_ERROR, "Animation invalide.");

	switch (type) {
		case 1: ApplyAnimationEx(playerid, "INT_OFFICE", "OFF_Sit_Bored_Loop", 4.1, 1, 0, 0, 0, 0, 1);
		case 2: ApplyAnimationEx(playerid, "INT_OFFICE", "OFF_Sit_Crash", 4.1, 1, 0, 0, 0, 0, 1);
		case 3: ApplyAnimationEx(playerid, "INT_OFFICE", "OFF_Sit_Drink", 4.1, 1, 0, 0, 0, 0, 1);
		case 4: ApplyAnimationEx(playerid, "INT_OFFICE", "OFF_Sit_Read", 4.1, 1, 0, 0, 0, 0, 1);
		case 5: ApplyAnimationEx(playerid, "INT_OFFICE", "OFF_Sit_Type_Loop", 4.1, 1, 0, 0, 0, 0, 1);
		case 6: ApplyAnimationEx(playerid, "INT_OFFICE", "OFF_Sit_Watch", 4.1, 1, 0, 0, 0, 0, 1);
	}
	return 1;
}

CMD:kiss(playerid, params[])
{
	new type;

	if (!AnimationCheck(playerid))
	return SendClientMessageEx(playerid, COLOR_ERROR, "Vous ne pouvez pas effectuer d'animations pour le moment.");

	if (sscanf(params, "d", type))
	return SendClientMessageEx(playerid, COLOR_USAGE, "/kiss <1-6>");

	if (type < 1 || type > 6)
	return SendClientMessageEx(playerid, COLOR_ERROR, "Animation invalide.");

	switch (type) {
		case 1: ApplyAnimation(playerid, "KISSING", "Grlfrd_Kiss_01", 4.1, 0, 0, 0, 0, 0, 1);
		case 2: ApplyAnimation(playerid, "KISSING", "Grlfrd_Kiss_02", 4.1, 0, 0, 0, 0, 0, 1);
		case 3: ApplyAnimation(playerid, "KISSING", "Grlfrd_Kiss_03", 4.1, 0, 0, 0, 0, 0, 1);
		case 4: ApplyAnimation(playerid, "KISSING", "Playa_Kiss_01", 4.1, 0, 0, 0, 0, 0, 1);
		case 5: ApplyAnimation(playerid, "KISSING", "Playa_Kiss_02", 4.1, 0, 0, 0, 0, 0, 1);
		case 6: ApplyAnimation(playerid, "KISSING", "Playa_Kiss_03", 4.1, 0, 0, 0, 0, 0, 1);
	}
	return 1;
}

CMD:knife(playerid, params[])
{
	new type;

	if (!AnimationCheck(playerid))
	return SendClientMessageEx(playerid, COLOR_ERROR, "Vous ne pouvez pas effectuer d'animations pour le moment.");

	if (sscanf(params, "d", type))
	return SendClientMessageEx(playerid, COLOR_USAGE, "/knife <1-8>");

	if (type < 1 || type > 8)
	return SendClientMessageEx(playerid, COLOR_ERROR, "Animation invalide.");

	switch (type) {
		case 1: ApplyAnimation(playerid, "KNIFE", "knife_1", 4.1, 0, 1, 1, 0, 0, 1);
		case 2: ApplyAnimation(playerid, "KNIFE", "knife_2", 4.1, 0, 1, 1, 0, 0, 1);
		case 3: ApplyAnimation(playerid, "KNIFE", "knife_3", 4.1, 0, 1, 1, 0, 0, 1);
		case 4: ApplyAnimation(playerid, "KNIFE", "knife_4", 4.1, 0, 1, 1, 0, 0, 1);
		case 5: ApplyAnimationEx(playerid, "KNIFE", "WEAPON_knifeidle", 4.1, 1, 0, 0, 0, 0, 1);
		case 6: ApplyAnimation(playerid, "KNIFE", "KILL_Knife_Player", 4.1, 0, 0, 0, 0, 0, 1);
		case 7: ApplyAnimation(playerid, "KNIFE", "KILL_Knife_Ped_Damage", 4.1, 0, 0, 0, 0, 0, 1);
		case 8: ApplyAnimation(playerid, "KNIFE", "KILL_Knife_Ped_Die", 4.1, 0, 0, 0, 0, 0, 1);
	}
	return 1;
}

CMD:apaintjob(playerid, params[])
{
	static
	paintjobid;

	if (PlayerData[playerid][pAdmin] < 3)
	return SendClientMessageEx(playerid, COLOR_ERROR, "Vous n'avez pas la permission d'utiliser cette commande.");

	if (!IsPlayerInAnyVehicle(playerid))
	return SendClientMessageEx(playerid, COLOR_ERROR, "Vous n'êtes pas dans un véhicule.");

	if (sscanf(params, "d", paintjobid))
	return SendClientMessageEx(playerid, COLOR_USAGE, "/apaintjob <PaintjobID> (-1 pour désactiver)");

	if (paintjobid < -1 || paintjobid > 5)
	return SendClientMessageEx(playerid, COLOR_ERROR, "Le paintjob doit être comprit entre -1 et 5.");

	if (paintjobid == -1)
	paintjobid = 6;

	SetVehiclePaintjob(GetPlayerVehicleID(playerid), paintjobid);
	SendClientMessageEx(playerid, COLOR_INFO, "Vous avez modifier le paintjob de votre véhicule à %d.", paintjobid);
	return 1;
}

CMD:panel(playerid, params[])
{
	if (PlayerData[playerid][pAdmin] < 6)
	return SendClientMessageEx(playerid, COLOR_ERROR, "Vous n'avez pas la permission d'utiliser cette commande.");

	if (g_ServerLocked)
	Dialog_Show(playerid, ServerPanel, DIALOG_STYLE_LIST, "Server Panel", "Dévérouiller le serveur\nModifier le nom d'hôte", "Valider", "Annuler");

	else Dialog_Show(playerid, ServerPanel, DIALOG_STYLE_LIST, "Server Panel", "Vérouiller le serveur\nModifier le nom d'hôte", "Valider", "Annuler");
	return 1;
}
CMD:spawnitem(playerid, params[])
{
	if (PlayerData[playerid][pAdmin] < 4)
	return SendClientMessageEx(playerid, COLOR_ERROR, "Vous n'avez pas la permission d'utiliser cette commande.");

	if (isnull(params))
	return SendClientMessageEx(playerid, COLOR_USAGE, "/spawnitem <ItemName> (/itemlist pour la liste)");

	static
	Float:x,
	Float:y,
	Float:z;

	GetPlayerPos(playerid, x, y, z);

	for (new i = 0; i < sizeof(g_aInventoryItems); i ++) if (!strcmp(g_aInventoryItems[i][e_InventoryItem], params, true))
	{
		new id = DropItem(g_aInventoryItems[i][e_InventoryItem], "Admin", g_aInventoryItems[i][e_InventoryModel], 1, x, y, z - 0.9, GetPlayerInterior(playerid), GetPlayerVirtualWorld(playerid));

		if (id == -1)
		return SendClientMessageEx(playerid, COLOR_ERROR, "Le serveur a atteint sa limite d'item.");
		Log_Write("logs/spawnitem.txt", "[%s] %s has spawned %s", ReturnDate(), ReturnName(playerid), g_aInventoryItems[i][e_InventoryItem]);
		SendClientMessageEx(playerid, COLOR_INFO, "Vous avez spawn un(e) \"%s\" (Utiliser /setquantity pour modifier sa quantité).", g_aInventoryItems[i][e_InventoryItem]);
		return 1;
	}
	SendClientMessageEx(playerid, COLOR_ERROR, "Le nom de l'item est invalide. {FFFFFF}(/itemlist)");
	return 1;
}

CMD:setquantity(playerid, params[])
{
	static
	id = -1,
	amount;

	if (PlayerData[playerid][pAdmin] < 4)
	return SendClientMessageEx(playerid, COLOR_ERROR, "Vous n'avez pas la permission d'utiliser cette commande.");

	if ((id = Item_Nearest(playerid)) == -1)
	return SendClientMessageEx(playerid, COLOR_ERROR, "Vous n'êtes pas à proximité d'une item.");

	if (sscanf(params, "d", amount))
	return SendClientMessageEx(playerid, COLOR_USAGE, "/setquantity <Montant>");

	if (amount < 1)
	return SendClientMessageEx(playerid, COLOR_ERROR, "La quantité ne peut pas être inférieur à 1.");

	Item_SetQuantity(id, amount);
	Log_Write("logs/spawnitem.txt", "[%s] %s has set the quantity of %s to %d.", ReturnDate(), ReturnName(playerid), DroppedItems[id][droppedItem], amount);
	SendClientMessageEx(playerid, COLOR_INFO, "Vous avez modifié la quantité de \"%s\" à %d.", DroppedItems[id][droppedItem], amount);
	return 1;
}

CMD:destroyitem(playerid, params[])
{
	static
	id = -1;

	if (PlayerData[playerid][pAdmin] < 4)
	return SendClientMessageEx(playerid, COLOR_ERROR, "Vous n'avez pas la permission d'utiliser cette commande.");

	if ((id = Item_Nearest(playerid)) == -1)
	return SendClientMessageEx(playerid, COLOR_ERROR, "Vous n'êtes pas à proximité d'une item.");

	SendClientMessageEx(playerid, COLOR_INFO, "Vous avez supprimé un(e) \"%s\".", DroppedItems[id][droppedItem]);
	Item_Delete(id);
	return 1;
}

CMD:destroysac(playerid, params[])
{
	static
	id = -1;

	if (PlayerData[playerid][pAdmin] < 4)
	return SendClientMessageEx(playerid, COLOR_ERROR, "Vous n'avez pas la permission d'utiliser cette commande.");

	if ((id = Backpack_Nearest(playerid)) == -1)
	return SendClientMessageEx(playerid, COLOR_ERROR, "Vous n'êtes pas à proximité d'une sac à dos.");

	SendClientMessageEx(playerid, COLOR_INFO, "Vous avez supprimé le sac à dos ID: %d.", id);
	Backpack_Delete(id);
	return 1;
}

CMD:boombox(playerid, params[])
{
	static
	type[24],
	string[128];

	if (!Inventory_HasItem(playerid, "Boombox") && PlayerData[playerid][pAdmin] < 3)
	return SendClientMessageEx(playerid, COLOR_ERROR, "Vous n'avez pas de boombox, allez-en acheter une au 24/7.");

	if (sscanf(params, "s[24]S()[128]", type, string))
	{
		SendClientMessageEx(playerid, COLOR_USAGE, "/boombox <options>");
		SendClientMessage(playerid, COLOR_USAGE, "OPTIONS: poser, prendre, url");

		if (PlayerData[playerid][pAdmin] > 3)
		{
			SendClientMessage(playerid, COLOR_USAGE, "OPTIONS - ADMIN: delete");
		}
		return 1;
	}
	if (!strcmp(type, "poser", true))
	{
		if (BoomboxData[playerid][boomboxPlaced])
		return SendClientMessageEx(playerid, COLOR_ERROR, "Vous avez déjà posé une boombox au sol.");

		if (Boombox_Nearest(playerid) != INVALID_PLAYER_ID)
		return SendClientMessageEx(playerid, COLOR_ERROR, "Une autre boombox interfère dans la zone.");

		if (IsPlayerInAnyVehicle(playerid))
		return SendClientMessageEx(playerid, COLOR_ERROR, "Vous devez sortir du véhicule.");

		Boombox_Place(playerid);

		SendClientMessageEx(playerid, COLOR_INFO, "Vous avez posé une boombox (utilisez \"/boombox\" pour plus d'options).");
	}
	else if (!strcmp(type, "prendre", true))
	{
		if (!BoomboxData[playerid][boomboxPlaced])
		return SendClientMessageEx(playerid, COLOR_ERROR, "Vous n'avez pas posé de boombox.");

		if (!IsPlayerInRangeOfPoint(playerid, 3.0, BoomboxData[playerid][boomboxPos][0], BoomboxData[playerid][boomboxPos][1], BoomboxData[playerid][boomboxPos][2]))
		return SendClientMessageEx(playerid, COLOR_ERROR, "Vous n'êtes pas près d'une boombox.");

		Boombox_Destroy(playerid);
		SendNearbyMessage(playerid, 15.0, COLOR_PURPLE, "%s ramasse sa boombox.", ReturnName(playerid));
	}
	else if (!strcmp(type, "url", true))
	{
		if (sscanf(string, "s[128]", string))
		return SendClientMessageEx(playerid, COLOR_USAGE, "/boombox url <MusicURL>");

		if (!BoomboxData[playerid][boomboxPlaced])
		return SendClientMessageEx(playerid, COLOR_ERROR, "Vous n'avez pas poser de boombox.");

		if (!IsPlayerInRangeOfPoint(playerid, 3.0, BoomboxData[playerid][boomboxPos][0], BoomboxData[playerid][boomboxPos][1], BoomboxData[playerid][boomboxPos][2]))
		return SendClientMessageEx(playerid, COLOR_ERROR, "Vous n'êtes pas à portée de votre boombox.");

		Boombox_SetURL(playerid, string);
		return SendClientMessageEx(playerid, COLOR_ERROR, "Vous avez changer l'URL de votre boombox.");
	}
	else if (!strcmp(type, "delete", true))
	{
		if (PlayerData[playerid][pAdmin] < 3)
			return SendClientMessageEx(playerid, COLOR_ERROR, "Vous n'avez pas la permission d'utiliser cette commande.");

		foreach (new i : Player) if (BoomboxData[i][boomboxPlaced] && IsPlayerInRangeOfPoint(playerid, 3.0, BoomboxData[i][boomboxPos][0], BoomboxData[i][boomboxPos][1], BoomboxData[i][boomboxPos][2])) {
			Boombox_Destroy(i);

			SendClientMessageEx(playerid, COLOR_INFO, "Vous avez supprimer la boombox de %s.", ReturnName(i, 0));
			return SendClientMessageEx(i, COLOR_INFO, "%s a supprimer votre boombox.", ReturnName(playerid));
		}
		SendClientMessageEx(playerid, COLOR_ERROR, "Il n'y a aucune boombox à proximiter de vous.");
	}
	return 1;
}

CMD:localiser(playerid, params[])
{
	new number;

	if (PlayerData[playerid][pAdmin] < 3)
	return SendClientMessageEx(playerid, COLOR_ERROR, "Vous n'avez pas la permission d'utiliser cette commande.");

	if (sscanf(params, "d", number))
	return SendClientMessageEx(playerid, COLOR_USAGE, "/localiser <numéro>");

	if (number == 0)
	return SendClientMessageEx(playerid, COLOR_ERROR, "Numéro invalide.");

	if (GetNumberOwner(number) != INVALID_PLAYER_ID)
	return SendClientMessageEx(playerid, COLOR_INFO, "Le numéro de téléphone %d est détenue par %s.", number, ReturnName(GetNumberOwner(number), 0));

	SendClientMessageEx(playerid, COLOR_ERROR, "Il n'y a aucun joueur en ligne avec ce numéro de téléphone.");
	return 1;
}

CMD:flipcar(playerid, params[])
{
	new vehicleid = GetPlayerVehicleID(playerid);

	if (PlayerData[playerid][pAdmin] < 3)
	return SendClientMessageEx(playerid, COLOR_ERROR, "Vous n'avez pas la permission d'utiliser cette commande.");

	if (vehicleid > 0 && isnull(params))
	{
		FlipVehicle(vehicleid);
		SendClientMessageEx(playerid, COLOR_INFO, "Vous avez retourner votre véhicule.");
	}
	else
	{
		if (sscanf(params, "d", vehicleid))
		return SendClientMessageEx(playerid, COLOR_USAGE, "/flipcar <VehicleID>");

		else if (!IsValidVehicle(vehicleid))
		return SendClientMessageEx(playerid, COLOR_ERROR, "Mauvais vehicle ID.");

		FlipVehicle(vehicleid);
		SendClientMessageEx(playerid, COLOR_INFO, "Vous remettez le véhicule ID: %d au sol.", vehicleid);
	}
	return 1;
}

CMD:admins(playerid, params[])
{
	if (PlayerData[playerid][pLevel] < 2)
	return SendClientMessageEx(playerid, COLOR_ERROR, "Vous devez être level 3+ pour utiliser cette commande.");
	
	new count = 0;

	SendClientMessage(playerid, 0x7EA0DAFF, "Liste des administrateurs connectés:");
	SendClientMessage(playerid, 0x7EA0DAFF, "¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯");

	foreach (new i : Player) if ((PlayerData[i][pAdmin] > 0 || PlayerData[i][pHelper]) && PlayerData[i][pAdminHide] < 1)
	{
		if (PlayerData[i][pHelper])
		    SendClientMessageEx(playerid, COLOR_WHITE, "[Helpeur] %s | N/A", ReturnName(i));
		    
		else
		{
			if (PlayerData[i][pAdminDuty])
				SendClientMessageEx(playerid, COLOR_WHITE, "[%s] %s | {33CC33}DutyON", GetAdminRank(i), ReturnName(i));

			else
				SendClientMessageEx(playerid, COLOR_WHITE, "[%s] %s | DutyOFF", GetAdminRank(i), ReturnName(i));
		}
		
		count++;
	}
	if (!count) {
		SendClientMessage(playerid, COLOR_WHITE, "Aucun administrateur n'est actuellement disponible.");
	}
	return 1;
}

CMD:mp(playerid, params[])
return cmd_montrerpermis(playerid, params);
CMD:montrerpermis(playerid, params[])
{
	static
	userid;

	if (sscanf(params, "u", userid))
	return SendClientMessageEx(playerid, COLOR_USAGE, "/mp <PlayerID/PlayerName>");

	if (userid == INVALID_PLAYER_ID || !IsPlayerNearPlayer(playerid, userid, 5.0))
	return SendClientMessageEx(playerid, COLOR_ERROR, "Ce joueur n'est pas près de vous.");

	SendClientMessage(userid, COLOR_GREY, "-----------------------------------------------------------");

	if (Inventory_HasItem(playerid, "Permis de conduire")) SendClientMessageEx(userid, COLOR_WHITE, "Permis de conduire | {33CC33}(Passé)");
	else SendClientMessageEx(userid, COLOR_WHITE, "Permis de conduire | {AA3333}(Non passé)");

	if (Inventory_HasItem(playerid, "Permis d'arme")) SendClientMessageEx(userid, COLOR_WHITE, "Permis port d'armes | {33CC33}(Passé)");
	else SendClientMessageEx(userid, COLOR_WHITE, "Permis port d'armes | {AA3333}(Non passé)");

	SendClientMessage(userid, COLOR_GREY, "-----------------------------------------------------------");
	SendNearbyMessage(playerid, 15.0, COLOR_PURPLE, "%s récupère ses permis qu'il montre à %s.", ReturnName(playerid), ReturnName(userid, 0));
	return 1;
}

CMD:voirpermis(playerid, params[])
{
	SendClientMessage(playerid, COLOR_GREY, "-----------------------------------------------------------");

	if (Inventory_HasItem(playerid, "Permis de conduire")) SendClientMessageEx(playerid, COLOR_WHITE, "Permis de conduire | {33CC33}(Passé)");
	else SendClientMessageEx(playerid, COLOR_WHITE, "Permis de conduire | {AA3333}(Non passé)");

	if (Inventory_HasItem(playerid, "Permis d'arme")) SendClientMessageEx(playerid, COLOR_WHITE, "Permis port d'armes | {33CC33}(Passé)");
	else SendClientMessageEx(playerid, COLOR_WHITE, "Permis port d'armes | {AA3333}(Non passé)");

	SendClientMessage(playerid, COLOR_GREY, "-----------------------------------------------------------");
	return 1;
}

CMD:animparler(playerid, params[])
{
	if(PlayerData[playerid][pAnimParler])
	{
		SendClientMessage(playerid, COLOR_WHITE, "Animation activée.");
		PlayerData[playerid][pAnimParler] = false;
	}
	else
	{
		SendClientMessage(playerid, COLOR_WHITE, "Animation désactivée.");
		PlayerData[playerid][pAnimParler] = true;
	}
	return 1;
}

CMD:ci(playerid, params[])
return cmd_carte(playerid, params);
CMD:carte(playerid, params[])
{
	static
	userid,
	string[260];

	if (sscanf(params, "u", userid))
	return SendClientMessageEx(playerid, COLOR_USAGE, "/(c)arte <PlayerID/PlayerName>");

	if (userid == INVALID_PLAYER_ID || !IsPlayerNearPlayer(playerid, userid, 5.0))
	return SendClientMessageEx(playerid, COLOR_ERROR, "Ce joueur n'est pas près de vous.");

	SendClientMessage(userid, COLOR_GREY, "-----------------------------------------------------------");

	format(string, sizeof(string), "{FFFFFF}Nom:{C4E5FF} %s {FFFFFF}",ReturnName(playerid));
	SendClientMessageEx(userid, COLOR_WHITE, string);

	format(string, sizeof(string), "{FFFFFF}Sexe:{C4E5FF} %s {FFFFFF}| Naissance:{C4E5FF} %s {FFFFFF}| Origine:{C4E5FF} %s", (PlayerData[playerid][pGender] == 2) ? ("Femme") : ("Homme"), PlayerData[playerid][pBirthdate], PlayerData[playerid][pOrigin]);
	SendClientMessageEx(userid, COLOR_WHITE, string);

	SendClientMessage(userid, COLOR_GREY, "-----------------------------------------------------------");
	SendNearbyMessage(playerid, 15.0, COLOR_PURPLE, "%s récupère sa carte d'identité qu'il montre à %s.", ReturnName(playerid), ReturnName(userid, 0));
	return 1;
}

CMD:clearinventory(playerid, params[])
{
	static
		userid,
		reason[50];

	if (PlayerData[playerid][pAdmin] < 5)
	return SendClientMessageEx(playerid, COLOR_ERROR, "Vous n'avez pas la permission d'utiliser cette commande.");

	if (sscanf(params, "us[50]", userid, reason))
	return SendClientMessageEx(playerid, COLOR_USAGE, "/clearinventory <PlayerID/PlayerName> <Raison>");

	if (userid == INVALID_PLAYER_ID)
	return SendClientMessageEx(playerid, COLOR_ERROR, "Ce joueur n'est pas valide.");

	Inventory_Clear(userid);

	SendClientMessageEx(playerid, COLOR_ADMIN, "Vous avez vidé l'inventaire de %s, raison : %s", ReturnName(userid, 0), reason);
	SendClientMessageEx(userid, COLOR_ADMIN, "%s a vidé votre inventaire, raison: %s", ReturnName(playerid), reason);

	SendAdminAlert(COLOR_ADMINGROUP, "%s a vidé l'inventaire de %s, raison: %s", ReturnName(playerid), ReturnName(userid, 0), reason);
	return 1;
}

CMD:avertissements(playerid, params[])
{
	SendClientMessage(playerid, COLOR_GREY, "-----------------------------------------------------------");
	SendClientMessageEx(playerid, COLOR_LIGHTRED, "Warnings (%d/3)", PlayerData[playerid][pWarnings]);

	if (PlayerData[playerid][pWarnings] >= 1 && strlen(PlayerData[playerid][pWarn1]))
	SendClientMessageEx(playerid, COLOR_WHITE, "* 1er Warning: \"%s\"", PlayerData[playerid][pWarn1]);

	if (PlayerData[playerid][pWarnings] >= 2 && strlen(PlayerData[playerid][pWarn2]))
	SendClientMessageEx(playerid, COLOR_WHITE, "* 2eme Warning: \"%s\"", PlayerData[playerid][pWarn2]);

	SendClientMessage(playerid, COLOR_GREY, "-----------------------------------------------------------");
	return 1;
}

CMD:listwarns(playerid, params[])
{
	static
	userid;

	if (PlayerData[playerid][pAdmin] < 3)
		return SendClientMessageEx(playerid, COLOR_ERROR, "Vous n'avez pas la permission d'utiliser cette commande.");

	if (sscanf(params, "u", userid))
		return SendClientMessageEx(playerid, COLOR_USAGE, "/listwarns <PlayerID/PlayerName>");

	if (userid == INVALID_PLAYER_ID)
		return SendClientMessageEx(playerid, COLOR_ERROR, "Ce joueur n'est pas valide.");

	SendClientMessage(playerid, COLOR_GREY, "-----------------------------------------------------------");
	SendClientMessageEx(playerid, COLOR_LIGHTRED, "Warning(s) de: %s (%d/3)", ReturnName(userid, 0), PlayerData[userid][pWarnings]);

	if (PlayerData[userid][pWarnings] >= 1 && strlen(PlayerData[userid][pWarn1]))
		SendClientMessageEx(playerid, COLOR_WHITE, "* 1er Warning: \"%s\"", PlayerData[userid][pWarn1]);

	if (PlayerData[userid][pWarnings] >= 2 && strlen(PlayerData[userid][pWarn2]))
		SendClientMessageEx(playerid, COLOR_WHITE, "* 2eme Warning: \"%s\"", PlayerData[userid][pWarn2]);

	SendClientMessage(playerid, COLOR_GREY, "-----------------------------------------------------------");
	return 1;
}

CMD:warn(playerid, params[])
{
	static
	userid,
	reason[32];

	if (PlayerData[playerid][pAdmin] < 2)
	return SendClientMessageEx(playerid, COLOR_ERROR, "Vous n'avez pas la permission d'utiliser cette commande.");

	if (sscanf(params, "us[32]", userid, reason))
	return SendClientMessageEx(playerid, COLOR_USAGE, "/warn <PlayerID/PlayerName> <Raison>");

	if (userid == INVALID_PLAYER_ID)
	return SendClientMessageEx(playerid, COLOR_ERROR, "Ce joueur n'est pas valide.");

	if (PlayerData[userid][pAdmin] > PlayerData[playerid][pAdmin])
	return SendClientMessageEx(playerid, COLOR_ERROR, "The specified player has higher authority.");

	switch (++ PlayerData[userid][pWarnings])
	{
		case 1:
		{
			format(PlayerData[userid][pWarn1], 32, reason);

			SendClientMessageEx(userid, COLOR_ADMIN, "L'administrateur %s vous a attribué un avertissement. \"%s\".", ReturnName(playerid), reason);
			SendClientMessageEx(playerid, COLOR_ADMIN, "Vous avez attribué un avertissement à %s pour \"%s\".", ReturnName(userid, 0), reason);
		}
		case 2:
		{
			format(PlayerData[userid][pWarn2], 32, reason);

			SendClientMessageEx(userid, COLOR_ADMIN, "L'administrateur %s vous a attribué un avertissement. \"%s\".", ReturnName(playerid), reason);
			SendClientMessageEx(playerid, COLOR_ADMIN, "Vous avez attribué un avertissement à %s pour \"%s\".", ReturnName(userid, 0), reason);
		}
		default:
		{
			ResetWarnings(userid);

			SendClientMessageEx(userid, COLOR_ADMIN, "Vous avez été banni suite à un nombre excessif d'avertissement. (\"%s\").", reason);
			SendAdminAlert(COLOR_ADMINGROUP, "%s a été banni par %s, raison: %s", ReturnName(userid, 0), ReturnName(playerid), reason);

			Blacklist_Add(PlayerData[userid][pIP], PlayerData[userid][pUsername], PlayerData[playerid][pUsername], reason);
			KickEx(userid);
		}
	}
	Log_Write("logs/warn_log.txt", "[%s] %s a averti %s pour %s.", ReturnDate(), ReturnName(playerid), ReturnName(userid, 0), reason);
	return 1;
}

CMD:clearwarns(playerid, params[])
{
	static
	userid;

	if (PlayerData[playerid][pAdmin] < 5)
	return SendClientMessageEx(playerid, COLOR_ERROR, "Vous n'avez pas la permission d'utiliser cette commande.");

	if (sscanf(params, "u", userid))
	return SendClientMessageEx(playerid, COLOR_USAGE, "/clearwarns <PlayerID/PlayerName>");

	if (userid == INVALID_PLAYER_ID)
	return SendClientMessageEx(playerid, COLOR_ERROR, "Ce joueur n'est pas valide.");

	ResetWarnings(userid);

	SendClientMessageEx(playerid, COLOR_ADMIN, "Vous avez supprimé les avertissements de %s.", ReturnName(userid, 0));
	SendClientMessageEx(userid, COLOR_ADMIN, "%s a supprimé vos avertissements.", ReturnName(playerid));

	SendAdminAlert(COLOR_ADMINGROUP, "%s a supprimé les avertissements de %d.", ReturnName(playerid), ReturnName(userid, 0));
	return 1;
}



CMD:donnergun(playerid, params[])
{
	new
	weaponid = GetWeapon(playerid),
	ammo = GetPlayerAmmo(playerid),
	userid;

	if (!weaponid)
	return SendClientMessageEx(playerid, COLOR_ERROR, "Vous n'avez aucune arme en main.");

	if (sscanf(params, "u", userid))
	return SendClientMessageEx(playerid, COLOR_USAGE, "/donnergun <PlayerID/PlayerName>");

	if (userid == INVALID_PLAYER_ID || !IsPlayerNearPlayer(playerid, userid, 5.0))
	return SendClientMessageEx(playerid, COLOR_ERROR, "Ce joueur n'est pas près de vous.");

	if (userid == playerid)
	return SendClientMessageEx(playerid, COLOR_ERROR, "Vous ne pouvez pas vous donnez une arme.");

 	if (PlayerData[userid][pLevel] < 3)
	return SendClientMessageEx(playerid, COLOR_ERROR, "Ce joueur n'est pas level 2.");

	if (GetFactionType(playerid) == FACTION_POLICE)
	return SendClientMessageEx(playerid, COLOR_ERROR, "Vous ne pouvez pas donner en étant en LSPD.");

	if (PlayerData[userid][pGuns][g_aWeaponSlots[weaponid]] != 0)
	return SendClientMessageEx(playerid, COLOR_ERROR, "Ce joueur a déjà une arme.");

	ResetWeapon(playerid, weaponid);
	GiveWeaponToPlayer(userid, weaponid, ammo);
	//AttachArme(userid, weaponid);

	SendNearbyMessage(playerid, 15.0, COLOR_PURPLE, "%s prend son %s qu'il donne à %s.", ReturnName(playerid), ReturnWeaponName(weaponid), ReturnName(userid, 0));
	Log_Write("logs/give_log.txt", "[%s] %s (%s) has given a %s with %d ammo to %s (%s).", ReturnDate(), ReturnName(playerid), PlayerData[playerid][pIP], ReturnWeaponName(weaponid), ammo, ReturnName(userid, 0), PlayerData[userid][pIP]);
	return 1;
}

CMD:vw(playerid, params[]) {
	SendClientMessageEx(playerid, COLOR_CLIENT, "World: %d", GetPlayerVirtualWorld(playerid));
	return 1;
}

CMD:time(playerid, params[])
{
	static
		string[128],
		month[12],
		date[6];

	getdate(date[2], date[1], date[0]);
	gettime(date[3], date[4], date[5]);

	switch (date[1]) {
		case 1: month = "Janvier";
		case 2: month = "Fevrier";
		case 3: month = "Mars";
		case 4: month = "Avril";
		case 5: month = "Mai";
		case 6: month = "Juin";
		case 7: month = "Juillet";
		case 8: month = "Aout";
		case 9: month = "Septembre";
		case 10: month = "Octobre";
		case 11: month = "Novembre";
		case 12: month = "Decembre";
	}
	format(string, sizeof(string), "~y~%02d %s %d~n~~w~%02d:%02d", date[0], month, date[2], date[3], date[4]);
	GameTextForPlayer(playerid, string, 6000, 1);
	return 1;
}

CMD:healall(playerid, params[])
{
	if (PlayerData[playerid][pAdmin] < 4)
	return SendClientMessageEx(playerid, COLOR_ERROR, "Vous n'avez pas la permission d'utiliser cette commande.");

	foreach (new i : Player) if(IsPlayerNearPlayer(playerid, i, 50.0))
	{
		SetPlayerHealth(i, 99.0);
	}
	SendAdminAlert(COLOR_ADMINGROUP, "%s a heal tout les joueurs à proximité de lui.", ReturnName(playerid));
	return 1;
}

CMD:saveall(playerid, params[])
{
	if (PlayerData[playerid][pAdmin] < 5)
	return SendClientMessageEx(playerid, COLOR_ERROR, "Vous n'avez pas la permission d'utiliser cette commande.");

	foreach (new i : Player) {
		SQL_SaveCharacter(i);
	}
	SendAdminAlert(COLOR_ADMINGROUP, "L'administrateur %s a sauvegardé l'intégralité des comptes.", ReturnName(playerid));
	return 1;
}


CMD:w(playerid, params[])
return cmd_whisper(playerid, params);

CMD:whisper(playerid, params[])
{
	new userid, text[128];

	if (sscanf(params, "us[128]", userid, text))
	return SendClientMessageEx(playerid, COLOR_USAGE, "/(w)hisper <PlayerID/PlayerName> <texte>");

	if (userid == INVALID_PLAYER_ID || !IsPlayerNearPlayer(playerid, userid, 5.0))
	return SendClientMessageEx(playerid, COLOR_ERROR, "Ce joueur n'est pas près de vous.");

	if (userid == playerid)
	return SendClientMessageEx(playerid, COLOR_ERROR, "Vous ne pouvez pas vous chuchottez vous même.");

	if (strlen(text) > 80) {
		SendClientMessageEx(userid, COLOR_YELLOW, "Chuchottement de %s (%d): %.80s", ReturnName(playerid), playerid, text);
		SendClientMessageEx(userid, COLOR_YELLOW, "...%s", text[80]);

		SendClientMessageEx(playerid, COLOR_YELLOW, "Chuchottement à %s (%d): %.80s", ReturnName(userid, 0), userid, text);
		SendClientMessageEx(playerid, COLOR_YELLOW, "...%s", text[80]);
	}
	else {
		SendClientMessageEx(userid, COLOR_YELLOW, "Chuchottement de %s (%d): %s", ReturnName(playerid), playerid, text);
		SendClientMessageEx(playerid, COLOR_YELLOW, "Chuchottement à %s (%d): %s", ReturnName(userid, 0), userid, text);
	}
	
	new
	    string[150];
	    
	format(string, sizeof(string), "%s murmure quelques mots avec %s.", ReturnName(playerid), ReturnName(userid, 0));
	SetPlayerChatBubble(playerid, string, COLOR_PURPLE, 30.0, 3000);
	return 1;
}
CMD:nomoff(playerid, params[])
{
	if (PlayerData[playerid][pLevel] < 7 && PlayerData[playerid][pDonator] != 1)
		return SendClientMessageEx(playerid, COLOR_ERROR, "Vous devez être level 7 pour utiliser cette commande.");

	static
		name[24];

	switch (PlayerData[playerid][pMaskOn])
	{
		case 0:
		{
			GetPlayerName(playerid, name, sizeof(name));
			SendClientMessage(playerid, COLOR_WHITE, "Votre nom est maintenant invisible.");
			SendClientMessage(playerid, COLOR_WHITE, "Utilisez /nomon pour remettre votre nom visible.");
			PlayerData[playerid][pMaskOn] = 1;
			Log_Write("logs/mask_log.txt", "%s s'est mis en nom-off: (ID: %s) - (%s)",name,ReturnName(playerid),ReturnDate());
		}
	}
	return 1;
}

CMD:nomon(playerid, params[])
{
	if (PlayerData[playerid][pLevel] < 7)
		return SendClientMessageEx(playerid, COLOR_ERROR, "Vous devez être level 7 pour utiliser cette commande.");

	static
		name[24];

	switch (PlayerData[playerid][pMaskOn])
	{
		case 1:
		{
			GetPlayerName(playerid, name, sizeof(name));
			SendClientMessage(playerid, COLOR_WHITE, "Votre nom est de nouveau visible.");
			SendClientMessage(playerid, COLOR_WHITE, "Utilisez /nomoff pour remettre votre nom en invisible.");
			PlayerData[playerid][pMaskOn] = 0;
			Log_Write("logs/mask_log.txt", "%s c'est mis en nom-on: (ID: %s) - (%s)",name,ReturnName(playerid),ReturnDate());
		}
	}
	return 1;
}

CMD:masked(playerid, params[])
{
	if (PlayerData[playerid][pAdmin] < 2)
	return SendClientMessageEx(playerid, COLOR_ERROR, "Vous n'avez pas la permission d'utiliser cette commande.");

	static
	name[24];

	SendClientMessage(playerid, COLOR_GREY, "-----------------------------------------------------------");

	foreach (new i : Player) if (PlayerData[i][pMaskOn]) {
		GetPlayerName(i, name, sizeof(name));

		SendClientMessageEx(playerid, COLOR_WHITE, "* %s (%d) - SkinID: %d", name, PlayerData[i][pMaskID], GetPlayerSkin(i));
	}
	SendClientMessage(playerid, COLOR_GREY, "-----------------------------------------------------------");
	return 1;
}

CMD:voirarmes(playerid, params[])
{
	new userid;

	if (PlayerData[playerid][pAdmin] < 2)
	return SendClientMessageEx(playerid, COLOR_ERROR, "Vous n'avez pas la permission d'utiliser cette commande.");

	if (sscanf(params, "u", userid))
	return SendClientMessageEx(playerid, COLOR_USAGE, "/voirarmes <PlayerID/PlayerName>");

	if (userid == INVALID_PLAYER_ID)
	return SendClientMessageEx(playerid, COLOR_ERROR, "Ce joueur n'est pas connecté.");

	new
	weaponid,
	ammo;

	SendClientMessage(playerid, COLOR_GREY, "-----------------------------------------------------------");
	SendClientMessageEx(playerid, COLOR_LIGHTRED, "* Armes de %s", ReturnName(userid, 0));

	for (new i = 0; i < 13; i ++)
	{
		GetPlayerWeaponData(userid, i, weaponid, ammo);

		if (weaponid > 0)
		SendClientMessageEx(playerid, COLOR_WHITE, "* %s (%d munitions)", ReturnWeaponName(weaponid), ammo);
	}
	SendClientMessage(playerid, COLOR_GREY, "-----------------------------------------------------------");
	return 1;
}

CMD:setinventory(playerid, params[])
{
	static
	userid,
	capacity;

	if (PlayerData[playerid][pAdmin] < 4)
	return SendClientMessageEx(playerid, COLOR_ERROR, "Vous n'avez pas la permission d'utiliser cette commande.");

	if (sscanf(params, "ud", userid, capacity))
	return SendClientMessageEx(playerid, COLOR_USAGE, "/setinventory <PlayerID/PlayerName> <Montant>");

	if (userid == INVALID_PLAYER_ID)
	return SendClientMessageEx(playerid, COLOR_ERROR, "Ce joueur n'est pas connecté.");

	if (capacity < 1 || capacity > 120)
	return SendClientMessageEx(playerid, COLOR_ERROR, "Cette quantité ne peut pas excéder 120.");

	PlayerData[userid][pCapacity] = capacity;

	SendClientMessageEx(playerid, COLOR_INFO, "Vous avez fixé la capacité de stockage d'inventaire de %s à %d objets.", ReturnName(userid, 0), capacity);
	SendClientMessageEx(userid, COLOR_INFO, "%s a fixé la capacité de stockage de votre inventaier à %d objets.", ReturnName(playerid), capacity);
	return 1;
}

CMD:de(playerid, params[])
{
	new
	number = random(6) + 1;

	SendNearbyMessage(playerid, 15.0, COLOR_PURPLE, "(Jeu): %s lance un dé puis tombe sur %d.", ReturnName(playerid), number);
	return 1;
}

CMD:salutation(playerid, params[])
{
	static
	userid,
	type;

	if (sscanf(params, "ud", userid, type))
	return SendClientMessageEx(playerid, COLOR_USAGE, "/salutation <PlayerID/PlayerName> <Type>");

	if (userid == INVALID_PLAYER_ID || !IsPlayerNearPlayer(playerid, userid, 6.0))
	return SendClientMessageEx(playerid, COLOR_ERROR, "Ce joueur n'est pas près de vous, ou il n'est pas connecté.");

	if (userid == playerid)
	return SendClientMessageEx(playerid, COLOR_ERROR, "Vous ne pouvez pas vous serrer la main.");

	if (type < 1 || type > 6)
	return SendClientMessageEx(playerid, COLOR_ERROR, "Vous devez choisir entre 1 et 6.");

	PlayerData[userid][pShakeOffer] = playerid;
	PlayerData[userid][pShakeType] = type;

	SendClientMessageEx(userid, COLOR_INFO, "%s vous propose de vous saluer. (utilisez \"/accepter saluer\").", ReturnName(playerid));
	SendClientMessageEx(playerid, COLOR_INFO, "Vous avez proposé à %s de vous saluer.", ReturnName(userid, 0));
	return 1;
}

CMD:fouiller(playerid, params[])
{
	static
	userid;

	if (sscanf(params, "u", userid))
	return SendClientMessageEx(playerid, COLOR_USAGE, "/fouiller <PlayerID/PlayerName>");

	if (userid == INVALID_PLAYER_ID || !IsPlayerNearPlayer(playerid, userid, 6.0))
	return SendClientMessageEx(playerid, COLOR_ERROR, "Ce joueur n'est pas près de vous.");

	if (userid == playerid)
	return SendClientMessageEx(playerid, COLOR_ERROR, "Vous ne pouvez pas vous fouillez vous même.");

	PlayerData[userid][pFriskOffer] = playerid;

	SendClientMessageEx(userid, COLOR_INFO, "%s propose de vous fouillez (utilisez \"/accepter fouiller\").", ReturnName(playerid));
	SendClientMessageEx(playerid, COLOR_INFO, "Vous proposez à %s de le fouiller.", ReturnName(userid, 0));
	return 1;
}
CMD:destroytag(playerid, params[])
{

	if (PlayerData[playerid][pAdmin] < 2)
	return SendClientMessageEx(playerid, COLOR_ERROR, "Vous n'avez pas la permission d'utiliser cette commande.");

	new id = Graffiti_Nearest(playerid);

	if (id == -1)
	return SendClientMessageEx(playerid, COLOR_ERROR, "Vous n'êtes pas à proximité d'un tag.");

	Graffiti_Delete(id);
	SendClientMessageEx(playerid, COLOR_INFO, "Vous avez supprimer le tag ID: %d.", id);
	return 1;
}

stock ResetVar_TempTag(playerid)
{
	TagData_temp[playerid][tagID] = -1;
	TagData_temp[playerid][tagType] = -1;

	format(TagData_temp[playerid][tagText], 16, "Aucun");
	TagData_temp[playerid][tagColor] = 0;
	format(TagData_temp[playerid][tagFont], 16, "Arial");
	TagData_temp[playerid][tagSize] = 24;
}

stock ShowDialog_tag(playerid)
{
	switch(TagData_temp[playerid][tagType])
	{
	    case 1:
	    {
	        ShowModelSelectionMenu(playerid, "TAG: Choix de l'image", MODEL_SELECTION_TAG, {18665, 18666, 18667, 18664, 18663, 18660, 18661, 18662}, 8, -16.0, 0.0, -55.0);
	    }
	    case 2:
	    {
			new
				string[1024];
				
			format(string, sizeof(string), "\
			{7EA0DA}Contenu:{FFFFFF} %s\n\
			{7EA0DA}Police:{FFFFFF} %s\n\
			{7EA0DA}Taille:{FFFFFF} %d\n\
			{7EA0DA}Couleur:{FFFFFF} %s\n\
			{33CC33}> Créer le tag\n\
			{FF0000}> Remettre à zéro les paramètres",

			TagData_temp[playerid][tagText],
			TagData_temp[playerid][tagFont],
			TagData_temp[playerid][tagSize],
			GetColor_tag(TagData_temp[playerid][tagColor], true));
	        Dialog_Show(playerid, Tag_SetType2, DIALOG_STYLE_LIST, "Tag - Configuration", string, "Ok", "X");
	    }
	    default:
	    {
	        Dialog_Show(playerid, Tag_ChooseType, DIALOG_STYLE_LIST, "Tag - Choisissez le type", "1 - Tags texturés en image\n2 - Tags personnalisés à l'écrit", "Ok", "X");
	    }
	}
	return 1;
}

Dialog:Tag_ChooseType(playerid, response, listitem, inputtext[])
{
	if(!response)
	{
		ResetVar_TempTag(playerid);
		return 1;
	}

	switch(listitem)
	{
		case 0: TagData_temp[playerid][tagType] = 1, SendClientMessage(playerid, COLOR_INFO, "Vous avez choisis de créer un tag de type \"Tags texturés en image\".");
		case 1: TagData_temp[playerid][tagType] = 2, SendClientMessage(playerid, COLOR_INFO, "Vous avez choisis de créer un tag de type \"Tags personnalisés à l'écrit\".");
	}

	ShowDialog_tag(playerid);
	return 1;
}

Dialog:Tag_SetType2(playerid, response, listitem, inputtext[])
{
	if(!response)
	{
  		ResetVar_TempTag(playerid);
		SendClientMessage(playerid, COLOR_INFO, "La création de votre tag a été annulée.");
		return 1;
	}

	switch(listitem)
	{
		case 0:
		{
		    Dialog_Show(playerid, Tag_SetText, DIALOG_STYLE_INPUT, "Tag - Configuration", "Insérez le texte que contiendra vous souhaitez tagger.\n\n{FF0000}ATTENTION: Le nombre de caractère doit être comprit entre 1 et 15.", "Ok", "X");
		}
		case 1:
		{
		    Dialog_Show(playerid, Tag_SetFont, DIALOG_STYLE_LIST, "Tag - Configuration", "1 - Arial\n2 - Comic Sans MS\n3 - Diploma\n4 - Dripping\n5 - Levi Brush\n6 - From Street Art", "Ok", "X");
		}
		case 2:
		{
		    Dialog_Show(playerid, Tag_SetSize, DIALOG_STYLE_INPUT, "Tag - Configuration", "Choisissez la taille du tag.\n\n{FF0000}ATTENTION: La taille doit être comprise entre 1 et 150.", "Ok", "X");
		}
		case 3:
		{
		    Dialog_Show(playerid, Tag_SetColor, DIALOG_STYLE_LIST, "Tag - Configuration", "\
			{FFFFFF}1 - Blanc\n\
			{FFFFFF}2 -{FF8C8C} Rouge clair\n\
			{FFFFFF}3 -{8C90FF} Bleu clair\n\
			{FFFFFF}4 -{ABFF8C} Vert clair\n\
			{FFFFFF}5 -{FF0000} Rouge\n\
			{FFFFFF}6 -{0059FF} Bleu\n\
			{FFFFFF}7 -{2CB000} Vert\n\
			{FFFFFF}8 -{CA61ED} Violet\n\
			{FFFFFF}9 -{F1FF78} Jaune\n\
			{FFFFFF}10 -{BA0000} Rouge foncé\n\
			{FFFFFF}11 -{001AAB} Bleu foncé\n\
			{FFFFFF}12 -{1F7D00} Vert foncé\
			", "Ok", "X");
		}
		case 4:
		{
		    new
		        string[500];

			format(string, sizeof(string), "\
			Etes-vous sûr de vouloir créer ce tag avec les\n\
			paramètes indiqués ci-dessous ?\n\n\
			{7EA0DA}Contenu:{FFFFFF} %s\n\
			{7EA0DA}Police:{FFFFFF} %s\n\
			{7EA0DA}Taille:{FFFFFF} %d\n\
			{7EA0DA}Couleur:{FFFFFF} %s",

			TagData_temp[playerid][tagText],
			TagData_temp[playerid][tagFont],
			TagData_temp[playerid][tagSize],
			GetColor_tag(TagData_temp[playerid][tagColor], true));
		    Dialog_Show(playerid, Tag_Create2, DIALOG_STYLE_MSGBOX, "Tag - Confirmation du tag", string, "Oui", "Modifier");
		}
		case 5:
		{
		    SendClientMessage(playerid, COLOR_INFO, "Vous avez réinitialiser les paramètres de votre tag.");
		    
		    ResetVar_TempTag(playerid);
		    
		    TagData_temp[playerid][tagType] = 2;
			ShowDialog_tag(playerid);
		}
	}
	return 1;
}

Dialog:Tag_SetText(playerid, response, listitem, inputtext[])
{
	if(!response)
	{
		ShowDialog_tag(playerid);
		return 1;
	}

	if(strlen(inputtext) <= 0 || strlen(inputtext) > 15)
		return Dialog_Show(playerid, Tag_SetText, DIALOG_STYLE_MSGBOX, "Tag - Configuration", "Insérez le texte que contiendra vous souhaitez tagger.\n\n{FF0000}ATTENTION: Le nombre de caractère doit être comprit entre 1 et 15.", "Ok", "X");


	sscanf(inputtext, "s[16]", TagData_temp[playerid][tagText]);
	ShowDialog_tag(playerid);
	return 1;
}

Dialog:Tag_SetSize(playerid, response, listitem, inputtext[])
{
	if(!response)
	{
		ShowDialog_tag(playerid);
		return 1;
	}

	if(strval(inputtext) <= 0 || strval(inputtext) > 150)
		return Dialog_Show(playerid, Tag_SetSize, DIALOG_STYLE_INPUT, "Tag - Configuration", "Choisissez la taille du tag.\n\n{FF0000}ATTENTION: La taille doit être comprise entre 1 et 150.", "Ok", "X");


	sscanf(inputtext, "d", TagData_temp[playerid][tagSize]);
	ShowDialog_tag(playerid);
	return 1;
}

Dialog:Tag_SetFont(playerid, response, listitem, inputtext[])
{
	if(!response)
	{
		ShowDialog_tag(playerid);
		return 1;
	}

	switch(listitem)
	{
	    case 0: format(TagData_temp[playerid][tagFont], 20, "Arial");
	    case 1: format(TagData_temp[playerid][tagFont], 20, "Comic Sans MS");
	    case 2: format(TagData_temp[playerid][tagFont], 20, "Diploma");
	    case 3: format(TagData_temp[playerid][tagFont], 20, "Dripping");
	    case 4: format(TagData_temp[playerid][tagFont], 20, "Levi Brush");
	    case 5: format(TagData_temp[playerid][tagFont], 20, "From Street Art");
	}

	SendClientMessageEx(playerid, COLOR_INFO, "Vous avez choisis la police \"%s\" pour votre tag.", TagData_temp[playerid][tagFont]);
	ShowDialog_tag(playerid);
	return 1;
}

Dialog:Tag_SetColor(playerid, response, listitem, inputtext[])
{
	if(!response)
	{
		ShowDialog_tag(playerid);
		return 1;
	}

	TagData_temp[playerid][tagColor] = listitem;

	SendClientMessageEx(playerid, COLOR_INFO, "Vous avez choisis la couleur \"%s{33CCFF}\" pour votre tag.", GetColor_tag(TagData_temp[playerid][tagColor], true));
	ShowDialog_tag(playerid);
	return 1;
}


Dialog:Tag_Create2(playerid, response, listitem, inputtext[])
{
	if(!response)
	{
		ShowDialog_tag(playerid);
		return 1;
	}


    PlayerData[playerid][pMakeGraffiti] = 2;
    SetPlayerAmmo(playerid, WEAPON_SPRAYCAN, 1500);
	SendClientMessage(playerid, COLOR_USAGE, "Taggez en direction du mur pour faire apparaitre votre tag.");

	return 1;
}


Dialog:Tag_Create1(playerid, response, listitem, inputtext[])
{
	if(!response)
	{
		ShowDialog_tag(playerid);
		return 1;
	}

    PlayerData[playerid][pMakeGraffiti] = 1;
    SetPlayerAmmo(playerid, WEAPON_SPRAYCAN, 1500);
    SendClientMessage(playerid, COLOR_USAGE, "Taggez en direction du mur pour faire apparaitre votre tag.");
	return 1;
}

stock GetColor_tag(color, bool:formatted = false)
{
	new
	    content[50];
	    
	switch(color)
	{
		case 0:
		{ // BLANC
		    if(formatted) format(content, sizeof(content), "{FFFFFF}Blanc");
		    else format(content, sizeof(content), "{FFFFFF}");
		}
		case 1:
		{ // Rouge clair
		    if(formatted) format(content, sizeof(content), "{FF8C8C}Rouge clair");
		    else format(content, sizeof(content), "{FF8C8C}");
		}
		case 2:
		{ // Bleu clair
		    if(formatted) format(content, sizeof(content), "{8C90FF}Bleu clair");
		    else format(content, sizeof(content), "{8C90FF}");
		}
		case 3:
		{ // Vert clair
		    if(formatted) format(content, sizeof(content), "{ABFF8C}Vert clair");
		    else format(content, sizeof(content), "{ABFF8C}");
		}
		case 4:
		{ // Rouge
		    if(formatted) format(content, sizeof(content), "{FF0000}Rouge");
		    else format(content, sizeof(content), "{FF0000}");
		}
		case 5:
		{ // Bleu
		    if(formatted) format(content, sizeof(content), "{0059FF}Bleu");
		    else format(content, sizeof(content), "{0059FF}");
		}
		case 6:
		{ // Vert
		    if(formatted) format(content, sizeof(content), "{2CB000}Vert");
		    else format(content, sizeof(content), "{2CB000}");
		}
		case 7:
		{ // Violet
		    if(formatted) format(content, sizeof(content), "{CA61ED}Violet");
		    else format(content, sizeof(content), "{CA61ED}");
		}
		case 8:
		{ // Jaune
		    if(formatted) format(content, sizeof(content), "{F1FF78}Jaune");
		    else format(content, sizeof(content), "{F1FF78}");
		}
		case 9:
		{ // Rouge foncé
		    if(formatted) format(content, sizeof(content), "{BA0000}Rouge foncé");
		    else format(content, sizeof(content), "{BA0000}");
		}
		case 10:
		{ // VERT
		    if(formatted) format(content, sizeof(content), "{001AAB}Bleu foncé");
		    else format(content, sizeof(content), "{001AAB}");
		}
		case 11:
		{ // Vert foncé
		    if(formatted) format(content, sizeof(content), "{1F7D00}Vert foncé");
		    else format(content, sizeof(content), "{1F7D00}");
		}
	}
	
	return content;
}

Dialog:DIALOG_TAG_LIST(playerid, response, listitem, inputtext[])
{
	if(!response) return 1;
	
	new
	    tagid,
		title[50];
	    
	sscanf(inputtext, "d", tagid);
	if(!GraffitiData[tagid][graffitiExists]) return 1;
	
	SetPVarInt(playerid, "TAG_LISTEDIT", tagid);
	
	format(title, sizeof(title), "Gestion du tag #%d", tagid);
	Dialog_Show(playerid, DIALOG_TAG_LISTEDIT, DIALOG_STYLE_LIST, title, "Voir les informations détaillés\nLocaliser le tag\nSupprimer le tag", "Valider", "Annuler");
	return 1;
}

Dialog:DIALOG_TAG_LISTEDIT(playerid, response, listitem, inputtext[])
{
	new
	    tagid = GetPVarInt(playerid, "TAG_LISTEDIT");

	if(!response) return 1;
	if(!GraffitiData[tagid][graffitiExists]) return 1;

	switch(listitem)
	{
		case 0:
		{
			new
			    title[50],
			    content[1000];
			    
			format(title, sizeof(title), "Informations sur le tag #%d", tagid);
			
			if(GraffitiData[tagid][graffitiModelID] == -1)
			{
				format(content, sizeof(content), "\
	   			Informations relatives au tag %d:\n\n\
				{7EA0DA}Contenu:{FFFFFF} %s\n\
				{7EA0DA}Police:{FFFFFF} %s\n\
				{7EA0DA}Taille:{FFFFFF} %d\n\
				{7EA0DA}Couleur:{FFFFFF} %s\n\
				{7EA0DA}Position:{FFFFFF} %s",

				tagid,
				GraffitiData[tagid][graffitiText],
				GraffitiData[tagid][graffitiFont],
				GraffitiData[tagid][graffitiSize],
				GetColor_tag(GraffitiData[playerid][graffitiColor], true),
				GetLocation(GraffitiData[tagid][graffitiPos][0], GraffitiData[tagid][graffitiPos][1], GraffitiData[tagid][graffitiPos][2]));
			}
			else
			{
				format(content, sizeof(content), "\
	   			Informations relatives au tag %d:\n\n\
				{7EA0DA}ModelID:{FFFFFF} %d\n\
				{7EA0DA}Position:{FFFFFF} %s",

				tagid,
				GraffitiData[tagid][graffitiModelID],
				GetLocation(GraffitiData[tagid][graffitiPos][0], GraffitiData[tagid][graffitiPos][1], GraffitiData[tagid][graffitiPos][2]));
			}
			
		    Dialog_Show(playerid, DIALOG_TAG_LISTINFO, DIALOG_STYLE_MSGBOX, title, content, "Ok", "");
		}
		case 1:
		{
		    new
		        title[60];

			format(title, sizeof(title), "Tag %d", tagid);
			
			Waypoint_Set(playerid, title, GraffitiData[tagid][graffitiPos][0], GraffitiData[tagid][graffitiPos][1], GraffitiData[tagid][graffitiPos][2]);
			SendClientMessage(playerid, COLOR_INFO, "Le tag est indiquez sur votre mini-map (point rouge).");
		}
		case 2:
		{
		    Graffiti_Delete(tagid);
			SendClientMessageEx(playerid, COLOR_INFO, "Le tag %d a été supprimé.", tagid);
		}
	}
	return 1;
}

CMD:gang(playerid, params[])
{
	if (GetFactionType(playerid) != FACTION_GANG) return SendClientMessageEx(playerid, COLOR_ERROR, "Vous n'avez pas la permission d'utiliser cette commande.");

	static nom[24], scmd[128];
	if (sscanf(params, "s[24]S()[128]", nom, scmd))
	{
	    SendClientMessageEx(playerid, COLOR_USAGE, "/gang <options>");
	    SendClientMessage(playerid, COLOR_USAGE, "OPTIONS: tag, achetergraine, /planter, /recolter, /braquer");
	    return 1;
	}
	if (!strcmp(nom, "tag", true))
	{
		static type[24], string[128];
	    if (sscanf(scmd, "s[24]S()[128]", type, string))
	    {
	        SendClientMessageEx(playerid, COLOR_USAGE, "/gang tag <nom>");
	    	SendClientMessage(playerid, COLOR_USAGE, "OPTIONS: creer, supprimer, liste");
	        return 1;
	    }

	    if (!strcmp(type, "creer", true))
	    {
			if (GetPlayerInterior(playerid) > 0 || GetPlayerVirtualWorld(playerid) > 0)
			return SendClientMessageEx(playerid, COLOR_ERROR, "Vous pouvez créer des tags uniquement en dehors d'un batiment.");
			
			if (PlayerData[playerid][pMakeGraffiti] != 0)
			return SendClientMessageEx(playerid, COLOR_ERROR, "Vous êtes déjà entrain de créer un tag.");

			if (GetPlayerWeapon(playerid) != 41)
			return SendClientMessageEx(playerid, COLOR_ERROR, "Vous n'avez pas de bombe à tag.");

			if (GetPlayerAmmo(playerid) < 90)
			return SendClientMessageEx(playerid, COLOR_ERROR, "Il n'y a plus assez de peinture dans votre bombe à tag (90+).");

			SendClientMessageEx(playerid, COLOR_INFO, "Choisissez les paramètres pour votre tag.");
			ShowDialog_tag(playerid);
		}
	    if (!strcmp(type, "supprimer", true))
	    {
			new id = Graffiti_Nearest(playerid);

  			if (id == -1)
			return SendClientMessageEx(playerid, COLOR_ERROR, "Vous n'êtes pas à proximité d'un tag.");

			if(GraffitiData[id][graffitiFaction] != PlayerData[playerid][pFaction])
			return SendClientMessageEx(playerid, COLOR_ERROR, "Vous ne pouvez pas supprimer ce tag, il n'appartient pas à votre faction.");

			Graffiti_Delete(id);
			SendClientMessageEx(playerid, COLOR_INFO, "Vous avez supprimer le tag ID: %d.", id);
		}
	    if (!strcmp(type, "liste", true))
    	{
		    new
		        title[60],
		        content[150*20],
				count = 0;

			format(content, sizeof(content), "ID\tType\tTexte\tPosition\n");
			for(new i=0; i<MAX_GRAFFITI_POINTS; i++) if(GraffitiData[i][graffitiExists] && GraffitiData[i][graffitiFaction] == PlayerData[playerid][pFaction])
			{
			    count ++;

				if(GraffitiData[i][graffitiModelID] == -1) format(content, sizeof(content), "%s%d\tTexte\t%s\t%s\n", content, i, GraffitiData[i][graffitiText], GetLocation(GraffitiData[i][graffitiPos][0], GraffitiData[i][graffitiPos][1], GraffitiData[i][graffitiPos][2]));
				else format(content, sizeof(content), "%s%d\tImage\tN/A\t%s\n", content, i, GetLocation(GraffitiData[i][graffitiPos][0], GraffitiData[i][graffitiPos][1], GraffitiData[i][graffitiPos][2]));
			}
			
			if(count <= 0)
				return SendClientMessage(playerid, COLOR_ERROR, "Aucun tag n'a été créer par votre faction.");
				

			format(title, sizeof(title), "%s (%d tags)", FactionData[ PlayerData[playerid][pFaction] ][factionName], count);
			Dialog_Show(playerid, DIALOG_TAG_LIST, DIALOG_STYLE_TABLIST_HEADERS, title, content, "Valider", "Annuler");
		}
	}
	if (!strcmp(nom, "achetergraine", true)) // R2
	{
		if (PlayerData[playerid][pFactionRank] < 2) return SendClientMessageEx(playerid, COLOR_ERROR, "Vous devez être rang 2.");
		if (!IsPlayerInRangeOfPoint(playerid, 2, 1117.0446,-297.6486,73.9922))
		{
			SendClientMessageEx(playerid, COLOR_ERROR, "Vous n'êtes pas au bon endroit. (point rouge minimap)");
			Waypoint_Set(playerid, "Achat de graines", 1117.0446, -297.6486, 73.9922);
			return 1;
		}
		
		new
		    content[500];

		format(content, sizeof(content), "Type\tNom\tPrix\tÉtat\n");
		
		format(content, sizeof(content), "%s\
		Graine\tMarijuana\t%d$\t%s\n\
		Graine\tCoca\t%d$\t%s\n\
		Graine\tOpium\t%d$\t%s\n\
		Drogue\tStéroïdes\t%d$\t%s",

		content,
		
		PRICE_MARIJUANA,
        (FactionData[ PlayerData[playerid][pFaction] ][factionUpgrade][UPGRADE_MARIJUANA] == 1) ? ("{33CC33}Débloqué") : ("{FF0000}Bloqué"),
        
        PRICE_COCA,
        (FactionData[ PlayerData[playerid][pFaction] ][factionUpgrade][UPGRADE_COCA] == 1) ? ("{33CC33}Débloqué") : ("{FF0000}Bloqué"),
        
        PRICE_OPIUM,
        (FactionData[ PlayerData[playerid][pFaction] ][factionUpgrade][UPGRADE_HEROINE] == 1) ? ("{33CC33}Débloqué") : ("{FF0000}Bloqué"),
        
        PRICE_STEROIDES,
        (FactionData[ PlayerData[playerid][pFaction] ][factionUpgrade][UPGRADE_STEROIDES] == 1) ? ("{33CC33}Débloqué") : ("{FF0000}Bloqué")
		);

		Dialog_Show(playerid, DIALOG_ACHAT_DRUG, DIALOG_STYLE_TABLIST_HEADERS, "Achat de drogue (Étape 1: choix)", content, "Valider", "Annuler");
	}
	return 1;
}
// Type, quantité
new temp_BuyDrug[MAX_PLAYERS][3];

Dialog:DIALOG_ACHAT_DRUG(playerid, response, listitem, inputtext[])
{
	if(!response) return 1;
	
	new
	    factionid = PlayerData[playerid][pFaction];
	    
	switch(listitem)
	{
		case 0:
		{ // Marijuana (graine)
		    if(FactionData[factionid][factionUpgrade][UPGRADE_MARIJUANA] != 1)
		    {
				SendClientMessage(playerid, COLOR_ERROR, "Votre faction n'a pas débloquer l'atout \"Marijuana\".");
		        return cmd_gang(playerid, "achetergraine");
			}
			
			temp_BuyDrug[playerid][0] = 1;
			Dialog_Show(playerid, DIALOG_ACHAT_DRUG2, DIALOG_STYLE_INPUT, "Achat de drogue (Étape 2: quantité)", "Choisissez la quantité désiré à l'achat.", "Valider", "Annuler");
		}
		case 1:
		{ // Coca (graine)
		    if(FactionData[factionid][factionUpgrade][UPGRADE_COCA] != 1)
		    {
				SendClientMessage(playerid, COLOR_ERROR, "Votre faction n'a pas débloquer l'atout \"Coca\".");
		        return cmd_gang(playerid, "achetergraine");
			}

			temp_BuyDrug[playerid][0] = 2;
			Dialog_Show(playerid, DIALOG_ACHAT_DRUG2, DIALOG_STYLE_INPUT, "Achat de drogue (Étape 2: quantité)", "Choisissez la quantité désiré à l'achat.", "Valider", "Annuler");
		}
		case 2:
		{ // Opium (graine)
		    if(FactionData[factionid][factionUpgrade][UPGRADE_HEROINE] != 1)
		    {
				SendClientMessage(playerid, COLOR_ERROR, "Votre faction n'a pas débloquer l'atout \"Opium\".");
		        return cmd_gang(playerid, "achetergraine");
			}

			temp_BuyDrug[playerid][0] = 3;
			Dialog_Show(playerid, DIALOG_ACHAT_DRUG2, DIALOG_STYLE_INPUT, "Achat de drogue (Étape 2: quantité)", "Choisissez la quantité désiré à l'achat.", "Valider", "Annuler");
		}
		case 3:
		{ // Stéroides (drogue)
		    if(FactionData[factionid][factionUpgrade][UPGRADE_STEROIDES] != 1)
		    {
				SendClientMessage(playerid, COLOR_ERROR, "Votre faction n'a pas débloquer l'atout \"Stéroides\".");
		        return cmd_gang(playerid, "achetergraine");
			}

			temp_BuyDrug[playerid][0] = 4;
			Dialog_Show(playerid, DIALOG_ACHAT_DRUG2, DIALOG_STYLE_INPUT, "Achat de drogue (Étape 2: quantité)", "Choisissez la quantité désiré à l'achat.", "Valider", "Annuler");
		}
	}
	return 1;
}

Dialog:DIALOG_ACHAT_DRUG2(playerid, response, listitem, inputtext[])
{
	if(!response) return 1;

	new
	    amount,
		content[500],
		
		type[10],
		name[15],
		price;
	    
	if(sscanf(inputtext, "d", amount))
	    return Dialog_Show(playerid, DIALOG_ACHAT_DRUG2, DIALOG_STYLE_INPUT, "Achat de drogue (Étape 2: quantité)", "La valeur entré est incorrecte.\n\nChoisissez la quantité désiré à l'achat.", "Valider", "Annuler");

	switch(temp_BuyDrug[playerid][0])
	{
		case 1:
		{
		    type = "Graine";
		    name = "Marijuana";
		    price = PRICE_MARIJUANA;
		}
		case 2:
		{
		    type = "Graine";
		    name = "Coca";
		    price = PRICE_COCA;
		}
		case 3:
		{
		    type = "Graine";
		    name = "Opium";
		    price = PRICE_OPIUM;
		}
		case 4:
		{
		    type = "Drogue";
		    name = "Stéroïdes";
		    price = PRICE_STEROIDES;
		}
	}

	temp_BuyDrug[playerid][1] = amount;
	temp_BuyDrug[playerid][2] = price*temp_BuyDrug[playerid][1];
	
	format(content, sizeof(content), "Récapitulatif de votre commande:\n\n\n{7EA0DA}Type:{FFFFFF} %s\n{7EA0DA}Nom:{FFFFFF} %s\n{7EA0DA}Prix à l'unité:{FFFFFF} %d$\n{7EA0DA}Quantité:{FFFFFF} %d\n{7EA0DA}Prix total à payer:{FFFFFF} %d$",
	type,
	name,
	price,
	temp_BuyDrug[playerid][1],
	temp_BuyDrug[playerid][2]);
	
	Dialog_Show(playerid, DIALOG_ACHAT_DRUG3, DIALOG_STYLE_MSGBOX, "Achat de drogue (Étape 3: confirmation)", content, "Valider", "Annuler");
	return 1;
}

Dialog:DIALOG_ACHAT_DRUG3(playerid, response, listitem, inputtext[])
{
	if(!response)
	{
	    temp_BuyDrug[playerid][0] = 0;
	    temp_BuyDrug[playerid][1] = 0;
	    temp_BuyDrug[playerid][2] = 0;
	    return cmd_gang(playerid, "achetergraine");
	}
	
	if(GetMoney(playerid) < temp_BuyDrug[playerid][2])
 	{
	 	SendClientMessage(playerid, COLOR_ERROR, "Vous n'avez pas assez d'argent.");
	    return cmd_gang(playerid, "achetergraine");
	}
	
	switch(temp_BuyDrug[playerid][0])
	{
		case 1:
		{
		    Inventory_Add(playerid, "Graines de Marijuana", 1578, temp_BuyDrug[playerid][1]);
		    SendClientMessageEx(playerid, COLOR_INFO, "Vous avez acheté %d graine(s) de Marijuana pour la somme de %d$.", temp_BuyDrug[playerid][1], temp_BuyDrug[playerid][2]);
		    
		    GiveMoney(playerid, -temp_BuyDrug[playerid][2]);

			FactionData[ PlayerData[playerid][pFaction] ][factionCredit] += 1;
			Faction_Save(PlayerData[playerid][pFaction]);
		}
		case 2:
		{
		    Inventory_Add(playerid, "Coca", 1578, temp_BuyDrug[playerid][1]);
		    SendClientMessageEx(playerid, COLOR_INFO, "Vous avez acheté %d graine(s) de Coca pour la somme de %d$.", temp_BuyDrug[playerid][1], temp_BuyDrug[playerid][2]);
		    
		    GiveMoney(playerid, -temp_BuyDrug[playerid][2]);

			FactionData[ PlayerData[playerid][pFaction] ][factionCredit] += 1;
			Faction_Save(PlayerData[playerid][pFaction]);
		}
		case 3:
		{
		    Inventory_Add(playerid, "Opium", 1578, temp_BuyDrug[playerid][1]);
		    SendClientMessageEx(playerid, COLOR_INFO, "Vous avez acheté %d graine(s) d'Opium pour la somme de %d$.", temp_BuyDrug[playerid][1], temp_BuyDrug[playerid][2]);
		    
		    GiveMoney(playerid, -temp_BuyDrug[playerid][2]);

			FactionData[ PlayerData[playerid][pFaction] ][factionCredit] += 1;
			Faction_Save(PlayerData[playerid][pFaction]);
		}
		case 4:
		{
		    Inventory_Add(playerid, "Steroides", 1578, temp_BuyDrug[playerid][1]);
		    SendClientMessageEx(playerid, COLOR_INFO, "Vous avez acheté %dg de stéroides pour la somme de %d$.", temp_BuyDrug[playerid][1], temp_BuyDrug[playerid][2]);
		    
		    GiveMoney(playerid, -temp_BuyDrug[playerid][2]);

			FactionData[ PlayerData[playerid][pFaction] ][factionCredit] += 1;
			Faction_Save(PlayerData[playerid][pFaction]);
		}
	}
	
    temp_BuyDrug[playerid][0] = 0;
    temp_BuyDrug[playerid][1] = 0;
    temp_BuyDrug[playerid][2] = 0;
	return 1;
}

VerificationWeapon_crat(playerid, typeCrate)
{
	new weapons[13][2];

	for (new i = 0; i <= 12; i++)
	{
	    GetPlayerWeaponData(playerid, i, weapons[i][0], weapons[i][1]);
	}

	switch(typeCrate)
	{
	    case 3: if(weapons[2][0] != 0) return false;
	    case 4: if(weapons[2][0] != 0) return false;
	    case 5: if(weapons[2][0] != 0) return false;
	    case 6: if(weapons[3][0] != 0) return false;
	    case 7: if(weapons[4][0] != 0) return false;
	    case 8: if(weapons[4][0] != 0) return false;
	    case 9: if(weapons[4][0] != 0) return false;
	    case 10: if(weapons[5][0] != 0) return false;
	    case 11: if(weapons[5][0] != 0) return false;
	    case 12: if(weapons[6][0] != 0) return false;
	    case 13: if(weapons[6][0] != 0) return false;
	}
	return true;
}

CMD:mafia(playerid, params[])
{
	if (GetFactionType(playerid) != FACTION_MAFIA) return SendClientMessageEx(playerid, COLOR_ERROR, "Vous n'avez pas la permission d'utiliser cette commande (mafia)");

	static nom[24], scmd[128];
	if (sscanf(params, "s[24]S()[128]", nom, scmd))
	{
	    SendClientMessageEx(playerid, COLOR_USAGE, "/mafia <nom>");
	    SendClientMessage(playerid, COLOR_USAGE, "OPTIONS: creerarme, achetercaisse, achetergraine, /planter");
	    return 1;
	}
	if (!strcmp(nom, "creerarme", true))
	{
	    static
			id = -1;
	    
		if ((id = House_Inside(playerid)) != -1)
		{
		    if(HouseData[id][houseFaction] != PlayerData[playerid][pFaction])
		    	return SendClientMessage(playerid, COLOR_ERROR, "Vous devez être dans la planque de votre faction.");
		    	
			if (PlayerData[playerid][pCarryCrate] == -1) return SendClientMessageEx(playerid, COLOR_ERROR, "Vous ne portez pas de caisse.");
			if (PlayerData[playerid][pCrafting]) return SendClientMessageEx(playerid, COLOR_ERROR, "Vous êtes déjà entrain de crée");
			if (CrateData[PlayerData[playerid][pCarryCrate]][crateType] < 1 || CrateData[PlayerData[playerid][pCarryCrate]][crateType] > 13) return SendClientMessageEx(playerid, COLOR_ERROR, "Il n'y a pas de matériaux dans cette caisse.");
			if (!VerificationWeapon_crat(playerid, CrateData[PlayerData[playerid][pCarryCrate]][crateType])) return SendClientMessageEx(playerid, COLOR_ERROR, "Vous avez déjà une arme de ce type sur vous.");
			
			PlayerData[playerid][pCrafting] = 1;

			SendNearbyMessage(playerid, 15.0, COLOR_PURPLE, "%s commence à fabriquer des %s.", ReturnName(playerid), Crate_GetType(CrateData[PlayerData[playerid][pCarryCrate]][crateType]));
			GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~r~Fabrication en cours..", 16000, 3);

			TogglePlayerControllable(playerid, 0);
			SetTimerEx("CraftParts", 8000, false, "dd", playerid, PlayerData[playerid][pCarryCrate]);
		}
		else SendClientMessage(playerid, COLOR_ERROR, "Vous devez être dans la planque de votre faction.");
	}
	if (!strcmp(nom, "achetercaisse", true))
	{
		if (PlayerData[playerid][pLevel] < 2) return SendClientMessageEx(playerid, COLOR_ERROR, "Vous devez être level 2 pour utiliser cette commande.");
	    if (!IsPlayerInRangeOfPoint(playerid, 2, -1465.0233,339.5170,7.1875))
		{
			SendClientMessageEx(playerid, COLOR_ERROR, "Vous n'êtes pas au bon endroit.");
            ShowPlayerFooter(playerid, "~r~La position a été indiquée sur votre minimap.");
            Waypoint_Set(playerid, "Achat de caisse", -1465.0233,339.5170,7.1875);
			return 1;
		}

        new
		    content[700];

		format(content, sizeof(content), "Type\tPrix\tÉtat\n");

		format(content, sizeof(content), "%s\
		Munitions\t%d$\t%s\n\
		Cocktail Molotov\t%d$\t%s\n\
		Silencieux\t%d$\t%s\n\
		Colt-45\t%d$\t%s\n\
		Desert Eagle\t%d$\t%s\n\
		Shotgun\t%d$\t%s\n\
		UZI\t%d$\t%s\n\
		Tec-9\t%d$\t%s\n\
		MP5\t%d$\t%s\n\
		AK-47\t%d$\t%s\n\
		M4A1\t%d$\t%s\n\
		Rifle\t%d$\t%s\n\
		Sniper Rifle\t%d$\t%s",

		content,

		PRICE_MUNITIONS,
        (FactionData[ PlayerData[playerid][pFaction] ][factionUpgrade][UPGRADE_MUNITION] == 1) ? ("{33CC33}Débloqué") : ("{FF0000}Bloqué"),

        PRICE_COCKTAIL,
        (FactionData[ PlayerData[playerid][pFaction] ][factionUpgrade][UPGRADE_COCKTAIL] == 1) ? ("{33CC33}Débloqué") : ("{FF0000}Bloqué"),

        PRICE_SILENCIEUX,
        (FactionData[ PlayerData[playerid][pFaction] ][factionUpgrade][UPGRADE_SILENCIEUX] == 1) ? ("{33CC33}Débloqué") : ("{FF0000}Bloqué"),

        PRICE_COLT,
        (FactionData[ PlayerData[playerid][pFaction] ][factionUpgrade][UPGRADE_COLT] == 1) ? ("{33CC33}Débloqué") : ("{FF0000}Bloqué"),

        PRICE_EAGLE,
        (FactionData[ PlayerData[playerid][pFaction] ][factionUpgrade][UPGRADE_EAGLE] == 1) ? ("{33CC33}Débloqué") : ("{FF0000}Bloqué"),

        PRICE_SHOTGUN,
        (FactionData[ PlayerData[playerid][pFaction] ][factionUpgrade][UPGRADE_SHOTGUN] == 1) ? ("{33CC33}Débloqué") : ("{FF0000}Bloqué"),

        PRICE_UZI,
        (FactionData[ PlayerData[playerid][pFaction] ][factionUpgrade][UPGRADE_UZI] == 1) ? ("{33CC33}Débloqué") : ("{FF0000}Bloqué"),

        PRICE_TEC9,
        (FactionData[ PlayerData[playerid][pFaction] ][factionUpgrade][UPGRADE_TEC9] == 1) ? ("{33CC33}Débloqué") : ("{FF0000}Bloqué"),

        PRICE_MP5,
        (FactionData[ PlayerData[playerid][pFaction] ][factionUpgrade][UPGRADE_MP5] == 1) ? ("{33CC33}Débloqué") : ("{FF0000}Bloqué"),

        PRICE_AK47,
        (FactionData[ PlayerData[playerid][pFaction] ][factionUpgrade][UPGRADE_AK47] == 1) ? ("{33CC33}Débloqué") : ("{FF0000}Bloqué"),

        PRICE_M4A1,
        (FactionData[ PlayerData[playerid][pFaction] ][factionUpgrade][UPGRADE_M4] == 1) ? ("{33CC33}Débloqué") : ("{FF0000}Bloqué"),

        PRICE_RIFLE,
        (FactionData[ PlayerData[playerid][pFaction] ][factionUpgrade][UPGRADE_RIFLE] == 1) ? ("{33CC33}Débloqué") : ("{FF0000}Bloqué"),

        PRICE_SNIPER,
        (FactionData[ PlayerData[playerid][pFaction] ][factionUpgrade][UPGRADE_SNIPER] == 1) ? ("{33CC33}Débloqué") : ("{FF0000}Bloqué")
		);

		Dialog_Show(playerid, DIALOG_ACHAT_WEAPON, DIALOG_STYLE_TABLIST_HEADERS, "Achat de caisse d'arme", content, "Valider", "Annuler");
	}
	if (!strcmp(nom, "achetergraine", true)) // R2
	{
		if (PlayerData[playerid][pFactionRank] < 2) return SendClientMessageEx(playerid, COLOR_ERROR, "Vous devez être rang 2.");
		if (!IsPlayerInRangeOfPoint(playerid, 2, 1117.0446,-297.6486,73.9922))
		{
			SendClientMessageEx(playerid, COLOR_ERROR, "Vous n'êtes pas au bon endroit. (point rouge minimap)");
			Waypoint_Set(playerid, "Achat de graines", 1117.0446, -297.6486, 73.9922);
			return 1;
		}

		new
		    content[500];

		format(content, sizeof(content), "Type\tNom\tPrix\tÉtat\n");

		format(content, sizeof(content), "%s\
		Graine\tMarijuana\t%d$\t%s\n\
		Graine\tCoca\t%d$\t%s\n\
		Graine\tOpium\t%d$\t%s\n\
		Drogue\tStéroïdes\t%d$\t%s",

		content,

		PRICE_MARIJUANA,
        (FactionData[ PlayerData[playerid][pFaction] ][factionUpgrade][UPGRADE_MARIJUANA] == 1) ? ("{33CC33}Débloqué") : ("{FF0000}Bloqué"),

        PRICE_COCA,
        (FactionData[ PlayerData[playerid][pFaction] ][factionUpgrade][UPGRADE_COCA] == 1) ? ("{33CC33}Débloqué") : ("{FF0000}Bloqué"),

        PRICE_OPIUM,
        (FactionData[ PlayerData[playerid][pFaction] ][factionUpgrade][UPGRADE_HEROINE] == 1) ? ("{33CC33}Débloqué") : ("{FF0000}Bloqué"),

        PRICE_STEROIDES,
        (FactionData[ PlayerData[playerid][pFaction] ][factionUpgrade][UPGRADE_STEROIDES] == 1) ? ("{33CC33}Débloqué") : ("{FF0000}Bloqué")
		);

		Dialog_Show(playerid, DIALOG_ACHAT_DRUG, DIALOG_STYLE_TABLIST_HEADERS, "Achat de drogue (Étape 1: choix)", content, "Valider", "Annuler");
	}
	return 1;
}

Dialog:DIALOG_ACHAT_WEAPON(playerid, response, listitem, inputtext[])
{
	if(!response) return 1;
	
	new
	    id = -1;
	    
	switch(listitem)
	{
	    case 0:
	    { // Munition
	        if(FactionData[ PlayerData[playerid][pFaction] ][factionUpgrade][UPGRADE_MUNITION] != 1)
	        {
	            SendClientMessage(playerid, COLOR_ERROR, "Votre faction n'a pas débloqué l'atout \"Munition\".");
				return cmd_mafia(playerid, "achetercaisse");
	        }
	        
	        if(GetMoney(playerid) < PRICE_MUNITIONS)
	        {
	            SendClientMessage(playerid, COLOR_ERROR, "Vous n'avez pas assez d'argent.");
				return cmd_mafia(playerid, "achetercaisse");
			}

			id = Crate_Create(playerid, 1);

			if(id == -1)
			    return SendClientMessage(playerid, COLOR_ERROR, "Le serveur a atteint sa limite de caisse.");
			    
			GiveMoney(playerid, -PRICE_MUNITIONS);
	    }
	    case 1:
	    { // Cocktail
	        if(FactionData[ PlayerData[playerid][pFaction] ][factionUpgrade][UPGRADE_COCKTAIL] != 1)
	        {
	            SendClientMessage(playerid, COLOR_ERROR, "Votre faction n'a pas débloqué l'atout \"Cocktail Molotov\".");
				return cmd_mafia(playerid, "achetercaisse");
	        }

	        if(GetMoney(playerid) < PRICE_COCKTAIL)
	        {
	            SendClientMessage(playerid, COLOR_ERROR, "Vous n'avez pas assez d'argent.");
				return cmd_mafia(playerid, "achetercaisse");
			}

			id = Crate_Create(playerid, 2);

			if(id == -1)
			    return SendClientMessage(playerid, COLOR_ERROR, "Le serveur a atteint sa limite de caisse.");

			GiveMoney(playerid, -PRICE_COCKTAIL);
	    }
	    case 2:
	    { // Silencieux
	        if(FactionData[ PlayerData[playerid][pFaction] ][factionUpgrade][UPGRADE_MUNITION] != 1)
	        {
	            SendClientMessage(playerid, COLOR_ERROR, "Votre faction n'a pas débloqué l'atout \"Munition\".");
				return cmd_mafia(playerid, "achetercaisse");
	        }

	        if(GetMoney(playerid) < PRICE_MUNITIONS)
	        {
	            SendClientMessage(playerid, COLOR_ERROR, "Vous n'avez pas assez d'argent.");
				return cmd_mafia(playerid, "achetercaisse");
			}

			id = Crate_Create(playerid, 3);

			if(id == -1)
			    return SendClientMessage(playerid, COLOR_ERROR, "Le serveur a atteint sa limite de caisse.");

			GiveMoney(playerid, -PRICE_MUNITIONS);
	    }
	    case 3:
	    { // Colt 45
	        if(FactionData[ PlayerData[playerid][pFaction] ][factionUpgrade][UPGRADE_COLT] != 1)
	        {
	            SendClientMessage(playerid, COLOR_ERROR, "Votre faction n'a pas débloqué l'atout \"Colt-45\".");
				return cmd_mafia(playerid, "achetercaisse");
	        }

	        if(GetMoney(playerid) < PRICE_COLT)
	        {
	            SendClientMessage(playerid, COLOR_ERROR, "Vous n'avez pas assez d'argent.");
				return cmd_mafia(playerid, "achetercaisse");
			}

			id = Crate_Create(playerid, 4);

			if(id == -1)
			    return SendClientMessage(playerid, COLOR_ERROR, "Le serveur a atteint sa limite de caisse.");

			GiveMoney(playerid, -PRICE_COLT);
	    }
	    case 4:
	    { // Eagle
	        if(FactionData[ PlayerData[playerid][pFaction] ][factionUpgrade][UPGRADE_EAGLE] != 1)
	        {
	            SendClientMessage(playerid, COLOR_ERROR, "Votre faction n'a pas débloqué l'atout \"Desert Eagle\".");
				return cmd_mafia(playerid, "achetercaisse");
	        }

	        if(GetMoney(playerid) < PRICE_EAGLE)
	        {
	            SendClientMessage(playerid, COLOR_ERROR, "Vous n'avez pas assez d'argent.");
				return cmd_mafia(playerid, "achetercaisse");
			}

			id = Crate_Create(playerid, 5);

			if(id == -1)
			    return SendClientMessage(playerid, COLOR_ERROR, "Le serveur a atteint sa limite de caisse.");

			GiveMoney(playerid, -PRICE_EAGLE);
	    }
	    case 5:
	    { // Shotgun
	        if(FactionData[ PlayerData[playerid][pFaction] ][factionUpgrade][UPGRADE_SHOTGUN] != 1)
	        {
	            SendClientMessage(playerid, COLOR_ERROR, "Votre faction n'a pas débloqué l'atout \"Shotgun\".");
				return cmd_mafia(playerid, "achetercaisse");
	        }

	        if(GetMoney(playerid) < PRICE_SHOTGUN)
	        {
	            SendClientMessage(playerid, COLOR_ERROR, "Vous n'avez pas assez d'argent.");
				return cmd_mafia(playerid, "achetercaisse");
			}

			id = Crate_Create(playerid, 6);

			if(id == -1)
			    return SendClientMessage(playerid, COLOR_ERROR, "Le serveur a atteint sa limite de caisse.");

			GiveMoney(playerid, -PRICE_SHOTGUN);
	    }
	    case 6:
	    { // UZI
	        if(FactionData[ PlayerData[playerid][pFaction] ][factionUpgrade][UPGRADE_UZI] != 1)
	        {
	            SendClientMessage(playerid, COLOR_ERROR, "Votre faction n'a pas débloqué l'atout \"UZI\".");
				return cmd_mafia(playerid, "achetercaisse");
	        }

	        if(GetMoney(playerid) < PRICE_UZI)
	        {
	            SendClientMessage(playerid, COLOR_ERROR, "Vous n'avez pas assez d'argent.");
				return cmd_mafia(playerid, "achetercaisse");
			}

			id = Crate_Create(playerid, 7);

			if(id == -1)
			    return SendClientMessage(playerid, COLOR_ERROR, "Le serveur a atteint sa limite de caisse.");

			GiveMoney(playerid, -PRICE_UZI);
	    }
	    case 7:
	    { // Tec-9
	        if(FactionData[ PlayerData[playerid][pFaction] ][factionUpgrade][UPGRADE_TEC9] != 1)
	        {
	            SendClientMessage(playerid, COLOR_ERROR, "Votre faction n'a pas débloqué l'atout \"TEC-9\".");
				return cmd_mafia(playerid, "achetercaisse");
	        }

	        if(GetMoney(playerid) < PRICE_TEC9)
	        {
	            SendClientMessage(playerid, COLOR_ERROR, "Vous n'avez pas assez d'argent.");
				return cmd_mafia(playerid, "achetercaisse");
			}

			id = Crate_Create(playerid, 8);

			if(id == -1)
			    return SendClientMessage(playerid, COLOR_ERROR, "Le serveur a atteint sa limite de caisse.");

			GiveMoney(playerid, -PRICE_TEC9);
	    }
	    case 8:
	    { // MP5
	        if(FactionData[ PlayerData[playerid][pFaction] ][factionUpgrade][UPGRADE_MP5] != 1)
	        {
	            SendClientMessage(playerid, COLOR_ERROR, "Votre faction n'a pas débloqué l'atout \"MP5\".");
				return cmd_mafia(playerid, "achetercaisse");
	        }

	        if(GetMoney(playerid) < PRICE_MP5)
	        {
	            SendClientMessage(playerid, COLOR_ERROR, "Vous n'avez pas assez d'argent.");
				return cmd_mafia(playerid, "achetercaisse");
			}

			id = Crate_Create(playerid, 9);

			if(id == -1)
			    return SendClientMessage(playerid, COLOR_ERROR, "Le serveur a atteint sa limite de caisse.");

			GiveMoney(playerid, -PRICE_MP5);
	    }
	    case 9:
	    { // AK-47
	        if(FactionData[ PlayerData[playerid][pFaction] ][factionUpgrade][UPGRADE_AK47] != 1)
	        {
	            SendClientMessage(playerid, COLOR_ERROR, "Votre faction n'a pas débloqué l'atout \"AK-47\".");
				return cmd_mafia(playerid, "achetercaisse");
	        }

	        if(GetMoney(playerid) < PRICE_AK47)
	        {
	            SendClientMessage(playerid, COLOR_ERROR, "Vous n'avez pas assez d'argent.");
				return cmd_mafia(playerid, "achetercaisse");
			}

			id = Crate_Create(playerid, 10);

			if(id == -1)
			    return SendClientMessage(playerid, COLOR_ERROR, "Le serveur a atteint sa limite de caisse.");

			GiveMoney(playerid, -PRICE_AK47);
	    }
	    case 10:
	    { // M4A1
	        if(FactionData[ PlayerData[playerid][pFaction] ][factionUpgrade][UPGRADE_M4] != 1)
	        {
	            SendClientMessage(playerid, COLOR_ERROR, "Votre faction n'a pas débloqué l'atout \"M4A1\".");
				return cmd_mafia(playerid, "achetercaisse");
	        }

	        if(GetMoney(playerid) < PRICE_M4A1)
	        {
	            SendClientMessage(playerid, COLOR_ERROR, "Vous n'avez pas assez d'argent.");
				return cmd_mafia(playerid, "achetercaisse");
			}

			id = Crate_Create(playerid, 11);

			if(id == -1)
			    return SendClientMessage(playerid, COLOR_ERROR, "Le serveur a atteint sa limite de caisse.");

			GiveMoney(playerid, -PRICE_M4A1);
	    }
	    case 11:
	    { // Rifle
	        if(FactionData[ PlayerData[playerid][pFaction] ][factionUpgrade][UPGRADE_RIFLE] != 1)
	        {
	            SendClientMessage(playerid, COLOR_ERROR, "Votre faction n'a pas débloqué l'atout \"Rifle\".");
				return cmd_mafia(playerid, "achetercaisse");
	        }

	        if(GetMoney(playerid) < PRICE_RIFLE)
	        {
	            SendClientMessage(playerid, COLOR_ERROR, "Vous n'avez pas assez d'argent.");
				return cmd_mafia(playerid, "achetercaisse");
			}

			id = Crate_Create(playerid, 12);

			if(id == -1)
			    return SendClientMessage(playerid, COLOR_ERROR, "Le serveur a atteint sa limite de caisse.");

			GiveMoney(playerid, -PRICE_RIFLE);
	    }
	    case 12:
	    { // Sniper Rifle
	        if(FactionData[ PlayerData[playerid][pFaction] ][factionUpgrade][UPGRADE_SNIPER] != 1)
	        {
	            SendClientMessage(playerid, COLOR_ERROR, "Votre faction n'a pas débloqué l'atout \"Sniper Rifle\".");
				return cmd_mafia(playerid, "achetercaisse");
	        }

	        if(GetMoney(playerid) < PRICE_SNIPER)
	        {
	            SendClientMessage(playerid, COLOR_ERROR, "Vous n'avez pas assez d'argent.");
				return cmd_mafia(playerid, "achetercaisse");
			}

			id = Crate_Create(playerid, 13);

			if(id == -1)
			    return SendClientMessage(playerid, COLOR_ERROR, "Le serveur a atteint sa limite de caisse.");

			GiveMoney(playerid, -PRICE_SNIPER);
	    }
	}
	
	return 1;
}

CMD:hideadmin(playerid, params[])
{
	if (PlayerData[playerid][pAdmin] < 5)
	return SendClientMessageEx(playerid, COLOR_ERROR, "Vous n'avez pas la permission d'utiliser cette commande.");

	switch (PlayerData[playerid][pAdminHide])
	{
		case 0:
		{
			PlayerData[playerid][pAdminHide] = 1;
			SendClientMessageEx(playerid, COLOR_INFO, "Vous n'êtes plus affiché dans le /admins.");
		}
		case 1:
		{
			PlayerData[playerid][pAdminHide] = 0;
			SendClientMessageEx(playerid, COLOR_INFO, "Vous êtes maintenant visible dans la liste d'administration.");
		}
	}
	return 1;
}

CMD:destroyplant(playerid, params[])
{
	static
	id = 0;

	if (PlayerData[playerid][pAdmin] < 5)
	return SendClientMessageEx(playerid, COLOR_ERROR, "Vous n'avez pas la permission d'utiliser cette commande.");

	if (sscanf(params, "d", id))
	return SendClientMessageEx(playerid, COLOR_USAGE, "/destroyplant <PlantID>");

	if ((id < 0 || id >= MAX_DRUG_PLANTS) || !PlantData[id][plantExists])
	return SendClientMessageEx(playerid, COLOR_ERROR, "Mauvais plant ID.");

	Plant_Delete(id);
	SendClientMessageEx(playerid, COLOR_INFO, "Vous avez détruit le plan de drogue ID: %d.", id);
	return 1;
}

CMD:sa(playerid, params[])
{
	if (!AnimationCheck(playerid))
	return SendClientMessageEx(playerid, COLOR_ERROR, "Vous n'avez pas fait d'animation.");

	if(GetPlayerAnimationIndex(playerid))
	{
	    ApplyAnimation(playerid, "CARRY", "crry_prtial", 2.0, 0, 0, 0, 0, 0);
		ClearAnimations(playerid, 1);
		
		HidePlayerFooter(playerid);

		PlayerData[playerid][pLoopAnim] = 0;
		SendClientMessageEx(playerid, COLOR_INFO, "Vous avez stopper l'animation.");
	}
	return 1;
}


CMD:appel(playerid, params[])
return cmd_appeler(playerid, params);

CMD:app(playerid, params[])
return cmd_appeler(playerid, params);

CMD:appeler(playerid, params[])
{
	if (!Inventory_HasItem(playerid, "Téléphone"))
	return SendClientMessageEx(playerid, COLOR_ERROR, "Vous n'avez pas de téléphone portable.");

	if (PlayerData[playerid][pPhoneOff])
	return SendClientMessageEx(playerid, COLOR_ERROR, "Votre téléphone est éteint.");

	if (PlayerData[playerid][pHospital] != -1 || PlayerData[playerid][pCuffed] || PlayerData[playerid][pInjured] || !IsPlayerSpawned(playerid))
	return SendClientMessageEx(playerid, COLOR_ERROR, "Vous ne pouvez pas utiliser cette commande maintenant.");

	static
	targetid,
	number;

	if (sscanf(params, "d", number))
	return SendClientMessageEx(playerid, COLOR_USAGE, "/appeler <Numéro> (1222 » taxi, 911 » urgence, 222 » san news, 223 » publicité , 555 » Mecanicien)");

	if (!number)
	return SendClientMessageEx(playerid, COLOR_ERROR, "Le numéro specifié n'est pas disponible.");

	if (number == 911)
	{
		PlayerData[playerid][pEmergency] = 1;
		PlayerPlaySound(playerid, 3600, 0.0, 0.0, 0.0);

		SendClientMessage(playerid, COLOR_LIGHTBLUE, "OPÉRATEUR:{FFFFFF} Quel service avez-vous besoin: \"police\" ou \"medics\"?");
		
		ApplyAnimation(playerid, "PED", "null", 4.0, 0, 1, 1, 0, 0, 1);
		ApplyAnimation(playerid, "PED", "phone_in", 4.0, 0, 1, 1, 0, 0, 1);
		SetPlayerAttachedObject(playerid, 8, 330, 6, 0.014000, -0.007999, 0.000000);
	}
	else if (number == 1222)
	{
		PlayerData[playerid][pTaxiCalled] = 1;
		PlayerPlaySound(playerid, 3600, 0.0, 0.0, 0.0);

		SendClientMessage(playerid, COLOR_YELLOW, "OPÉRATEUR:{FFFFFF} Le service de taxi a été prévenu de votre appel.");

		SendJobMessage(3, COLOR_YELLOW, "%s demande un taxi à %s (utilisez \"/j(ob) appels\" pour accepter).", ReturnName(playerid), GetPlayerLocation(playerid));

		ApplyAnimation(playerid, "PED", "null", 4.0, 0, 1, 1, 0, 0, 1);
		ApplyAnimation(playerid, "PED", "phone_in", 4.0, 0, 1, 1, 0, 0, 1);
		SetPlayerAttachedObject(playerid, 8, 330, 6, 0.014000, -0.007999, 0.000000);

		if(!AstucesChallenges[playerid][0] && PlayerData[playerid][pAstuces])
		{
		    ValidChallenges(playerid, 0);
		    SendClientMessage(playerid, COLOR_GREEN, "Vous avez débloqué le challenge \"{33CC33}Loue un véhicule ou appeler un taxi{FFFFFF}\". +1 point respect (/challenges)");
		}
		
	}
	else if (number == 555)
	{
		if (getMecaservice() < 1)
		return SendClientMessageEx(playerid, COLOR_ERROR, "Aucun mécanicien disponible");

		SendClientMessage(playerid, COLOR_YELLOW, "OPÉRATEUR:{FFFFFF} Le service de mécanicien a été prévenu de votre appel.");
		MecanoApel = playerid;
		SendJobMessage(JOB_MECHANIC , COLOR_RADIO, "Une personne a besoin d'un mécanicien, utilisez \"/j(ob) mappel\".");

		ApplyAnimation(playerid, "PED", "null", 4.0, 0, 1, 1, 0, 0, 1);
		ApplyAnimation(playerid, "PED", "phone_in", 4.0, 0, 1, 1, 0, 0, 1);
		SetPlayerAttachedObject(playerid, 8, 330, 6, 0.014000, -0.007999, 0.000000);
	}
	else if (number == 222)
	{
		PlayerData[playerid][pPlaceAd] = 1;
		PlayerPlaySound(playerid, 3600, 0.0, 0.0, 0.0);
		
		ApplyAnimation(playerid, "PED", "null", 4.0, 0, 1, 1, 0, 0, 1);
		ApplyAnimation(playerid, "PED", "phone_in", 4.0, 0, 1, 1, 0, 0, 1);
		SetPlayerAttachedObject(playerid, 8, 330, 6, 0.014000, -0.007999, 0.000000);

		if (PlayerData[playerid][pLevel] < 4) {
			SendClientMessage(playerid, COLOR_CYAN, "OPÉRATEUR:{FFFFFF}Désolé, Vous devez être level 4 pour placer une annonce.");
			cmd_raccrocher(playerid, "\1");
		}
		else if (PlayerData[playerid][pAdTime] < 1) {
			SendClientMessage(playerid, COLOR_CYAN, "OPÉRATEUR:{FFFFFF} Dites \"oui\" si vous souhaitez faire une publicité pour 500$.");
		}
		else {
			SendClientMessage(playerid, COLOR_CYAN, "OPÉRATEUR:{FFFFFF} Vous avez déjà appelé il y a moins de 2 minutes. S'il vous plaît, ré-essayer plus tard.");
			cmd_raccrocher(playerid, "\1");
		}
	}
	else if (number == 223)
	{
		PlayerPlaySound(playerid, 3600, 0.0, 0.0, 0.0);


		if (PlayerData[playerid][pLevel] < 2) {
			SendClientMessage(playerid, COLOR_CYAN, "OPÉRATEUR:{FFFFFF} Désolé, vous devez être level 2 pour louer un panneau d'affichage.");
			cmd_raccrocher(playerid, "\1");
		}
		SendClientMessageEx(playerid, COLOR_YELLOW, "TÉLÉPHONE:{FFFFFF} Bonjour, ici l'Agence LS News, écoutez les choix suivants!");
		ViewBillboards(playerid);

		ApplyAnimation(playerid, "PED", "null", 4.0, 0, 1, 1, 0, 0, 1);
		ApplyAnimation(playerid, "PED", "phone_in", 4.0, 0, 1, 1, 0, 0, 1);
		SetPlayerAttachedObject(playerid, 8, 330, 6, 0.014000, -0.007999, 0.000000);
	}
	else if ((targetid = IsCabineNumber(number)) != -1)
	{
		if(CabineData[targetid][cabineCallID] != INVALID_PLAYER_ID)
		{
			PlayerPlaySound(playerid, 3600, 0.0, 0.0, 0.0);
		
			SendClientMessageEx(playerid, COLOR_YELLOW, "TÉLÉPHONE:{FFFFFF} Tentative d'appel au #%d, patienter..", number);
			SendClientMessageEx(playerid, COLOR_YELLOW, "TÉLÉPHONE:{FFFFFF} Le destinataire est occupé.");
			return 1;
		}
		
		if (IsValidDynamic3DTextLabel(CabineData[targetid][cabineText3D]))
		DestroyDynamic3DTextLabel(CabineData[targetid][cabineText3D]);
		
		static
			string[64];

		format(string, sizeof(string), "Numéro: %d\n{A5BD44}La cabine sonne...\n{FFFFFF}/cabine", CabineData[targetid][cabineNumber]);
		CabineData[targetid][cabineText3D] = CreateDynamic3DTextLabel(string, COLOR_DEFAULT, CabineData[targetid][cabinePos][0], CabineData[targetid][cabinePos][1], CabineData[targetid][cabinePos][2], 15.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, CabineData[targetid][cabineWorld], CabineData[targetid][cabineInterior]);

		CabineData[targetid][cabineCallID] = playerid;
		PlayerData[playerid][pCallLineCabine] = targetid;

		PlayerPlaySound(playerid, 3600, 0.0, 0.0, 0.0);

		ApplyAnimation(playerid, "PED", "null", 4.0, 0, 1, 1, 0, 0, 1);
		ApplyAnimation(playerid, "PED", "phone_in", 4.0, 0, 1, 1, 0, 0, 1);
		SetPlayerAttachedObject(playerid, 8, 330, 6, 0.014000, -0.007999, 0.000000);
		
		foreach(new i:Player) if(IsPlayerInRangeOfPoint(i, 15.0, CabineData[targetid][cabinePos][0], CabineData[targetid][cabinePos][1], CabineData[targetid][cabinePos][2]))
		{
			PlayerPlaySound(i, 23000, 0.0, 0.0, 0.0);
		}
		  
	}
	else if ((targetid = GetNumberOwner(number)) != INVALID_PLAYER_ID)
	{
		if (targetid == playerid)
		return SendClientMessageEx(playerid, COLOR_ERROR, "Vous ne pouvez pas vous appeler vous-même!");

		if (PlayerData[targetid][pPhoneOff])
		return SendClientMessageEx(playerid, COLOR_ERROR, "Le téléphone portable du destinataire est éteint.");

		PlayerData[targetid][pIncomingCall] = 1;
		PlayerData[playerid][pIncomingCall] = 1;

		PlayerData[targetid][pCallLine] = playerid;
		PlayerData[playerid][pCallLine] = targetid;

		SendClientMessageEx(playerid, COLOR_YELLOW, "TÉLÉPHONE:{FFFFFF} Tentative d'appel au #%d, patienter..", number);
		SendClientMessageEx(targetid, COLOR_YELLOW, "TÉLÉPHONE:{FFFFFF} Appel entrant de #%d (utilisez \"/decrocher\" pour répondre).", PlayerData[playerid][pPhone]);

		PlayerPlaySound(playerid, 3600, 0.0, 0.0, 0.0);
		PlayerPlaySoundEx(targetid, 23000);

		ApplyAnimation(playerid, "PED", "null", 4.0, 0, 1, 1, 0, 0, 1);
		ApplyAnimation(playerid, "PED", "phone_in", 4.0, 0, 1, 1, 0, 0, 1);
		SetPlayerAttachedObject(playerid, 8, 330, 6, 0.014000, -0.007999, 0.000000);

	}
	else
	{
		SendClientMessageEx(playerid, COLOR_ERROR, "Le numéro n'est pas en service.");
	}
	return 1;
}


CMD:cabine(playerid, params[])
{
	static nom[24], scmd[128], cabineid = -1;
	if (sscanf(params, "s[24]S()[128]", nom, scmd))
	{
	    SendClientMessageEx(playerid, COLOR_USAGE, "/cabine <options>");
	    SendClientMessage(playerid, COLOR_USAGE, "OPTIONS: appeler, raccrocher, decrocher");

		if (PlayerData[playerid][pAdmin] >= 5)
	    {
	    	SendClientMessage(playerid, COLOR_USAGE, "OPTIONS - ADMIN: creer, supprimer, pos");
	    }
	    return 1;
	}
	if (!strcmp(nom, "creer", true))
	{
    	if (PlayerData[playerid][pAdmin] < 5) return SendClientMessageEx(playerid, COLOR_ERROR, "Vous n'avez pas la permission d'utiliser cette commande.");
    	
    	static
    	    id = -1;
    	    
		id = Cabine_Create(playerid);
		if (id == -1) return SendClientMessage(playerid, COLOR_ERROR, "Le serveur a atteint sa limite de cabine téléphonique.");
		
		SendClientMessageEx(playerid, COLOR_INFO, "Vous avez créer la cabine téléponique ID: %d", id);
	}
	if (!strcmp(nom, "supprimer", true))
	{
    	if (PlayerData[playerid][pAdmin] < 5) return SendClientMessageEx(playerid, COLOR_ERROR, "Vous n'avez pas la permission d'utiliser cette commande.");
    	
    	static id;

		if (sscanf(scmd, "d", id))
		{
			SendClientMessageEx(playerid, COLOR_USAGE, "/cabine supprimer <CabineID>");
			return 1;
		}
		
		if ((id < 0 || id >= MAX_CABINES) || !CabineData[id][cabineExists])
		return SendClientMessageEx(playerid, COLOR_ERROR, "L'ID de la cabine est invalide.");
		
		Cabine_Delete(id);
		SendClientMessageEx(playerid, COLOR_INFO, "Vous avez supprimé la cabine ID: %d", id);
	}
	if (!strcmp(nom, "pos", true))
	{
    	if (PlayerData[playerid][pAdmin] < 5) return SendClientMessageEx(playerid, COLOR_ERROR, "Vous n'avez pas la permission d'utiliser cette commande.");
    	
    	static
    	    id = -1;

		if((id = Cabine_Nearest(playerid)) != -1)
		{
		    ResetEditing(playerid);
			EditDynamicObject(playerid, CabineData[id][cabineObject]);
			
			PlayerData[playerid][pEditCabine] = id;
			
			SendClientMessageEx(playerid, COLOR_INFO, "Vous modifiez la position de la poubelle ID: %d", id);
		}
		else SendClientMessage(playerid, COLOR_ERROR, "Vous n'êtes pas à proximité d'une cabine.");
		
 	}
	if (!strcmp(nom, "decrocher", true))
	{
	    if((cabineid = Cabine_Nearest(playerid)) == -1)
	        return SendClientMessage(playerid, COLOR_ERROR, "Vous devez être à côté d'une cabine téléphonique.");

		if (IsValidDynamic3DTextLabel(CabineData[cabineid][cabineText3D]))
		DestroyDynamic3DTextLabel(CabineData[cabineid][cabineText3D]);
		
		static
			string[64];

		format(string, sizeof(string), "Numéro: %d\n{FFFFFF}/cabine", CabineData[cabineid][cabineNumber]);
		CabineData[cabineid][cabineText3D] = CreateDynamic3DTextLabel(string, COLOR_DEFAULT, CabineData[cabineid][cabinePos][0], CabineData[cabineid][cabinePos][1], CabineData[cabineid][cabinePos][2], 15.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, CabineData[cabineid][cabineWorld], CabineData[cabineid][cabineInterior]);

		new targetid = CabineData[cabineid][cabineCallID];

		PlayerData[playerid][pIncomingCall] = 0;
		PlayerData[targetid][pIncomingCall] = 0;

		PlayerData[targetid][pCallLine] = playerid;
		PlayerData[playerid][pCallLine] = targetid;
		
		PlayerData[playerid][pCallWithCabine] = cabineid;

		SendClientMessage(playerid, COLOR_INFO, "Vous avez répondu à l'appel.");
		SendClientMessage(targetid, COLOR_INFO, "Votre correspondant a décroché.");

		SendNearbyMessage(playerid, 15.0, COLOR_PURPLE, "%s a accepté l'appel entrant.", ReturnName(playerid));

		ApplyAnimation(playerid, "PED", "null", 4.0, 0, 1, 1, 0, 0, 1);
		ApplyAnimation(playerid, "PED", "phone_in", 4.0, 0, 1, 1, 0, 0, 1);
		SetPlayerAttachedObject(playerid, 8, 330, 6, 0.014000, -0.007999, 0.000000);
	}
	if (!strcmp(nom, "appeler", true))
	{
	    static
	        number,
			targetid;

	    if((cabineid = Cabine_Nearest(playerid)) == -1)
	        return SendClientMessage(playerid, COLOR_ERROR, "Vous devez être à côté d'une cabine téléphonique.");
	        
		if (sscanf(scmd, "d", number))
			return SendClientMessageEx(playerid, COLOR_USAGE, "/cabine appeler <Numéro> (1222 » taxi, 911 » urgence, 222 » san news, 223 » publicité , 555 » Mecanicien)");
			
		if (!number)
			return SendClientMessageEx(playerid, COLOR_ERROR, "Le numéro specifié n'est pas disponible.");

		if (number == 911)
		{
			PlayerData[playerid][pEmergency] = 1;
			PlayerPlaySound(playerid, 3600, 0.0, 0.0, 0.0);

			SendClientMessage(playerid, COLOR_LIGHTBLUE, "OPÉRATEUR:{FFFFFF} Quel service avez-vous besoin: \"police\" ou \"medics\"?");

			ApplyAnimation(playerid, "PED", "null", 4.0, 0, 1, 1, 0, 0, 1);
			ApplyAnimation(playerid, "PED", "phone_in", 4.0, 0, 1, 1, 0, 0, 1);
			SetPlayerAttachedObject(playerid, 8, 330, 6, 0.014000, -0.007999, 0.000000);
		}
		else if (number == 1222)
		{
			PlayerData[playerid][pTaxiCalled] = 1;
			PlayerPlaySound(playerid, 3600, 0.0, 0.0, 0.0);

			SendClientMessage(playerid, COLOR_YELLOW, "OPÉRATEUR:{FFFFFF} Le service de taxi a été prévenu de votre appel.");

			SendJobMessage(3, COLOR_YELLOW, "%s demande un taxi à %s (utilisez \"/j(ob) appels\" pour accepter).", ReturnName(playerid), GetPlayerLocation(playerid));

			ApplyAnimation(playerid, "PED", "null", 4.0, 0, 1, 1, 0, 0, 1);
			ApplyAnimation(playerid, "PED", "phone_in", 4.0, 0, 1, 1, 0, 0, 1);
			SetPlayerAttachedObject(playerid, 8, 330, 6, 0.014000, -0.007999, 0.000000);
		}
		else if (number == 555)
		{
			if (getMecaservice() < 1)
			return SendClientMessageEx(playerid, COLOR_ERROR, "Aucun mécanicien disponible");

			SendClientMessage(playerid, COLOR_YELLOW, "OPÉRATEUR:{FFFFFF} Le service de mécanicien a été prévenu de votre appel.");
			MecanoApel = playerid;
			SendJobMessage(JOB_MECHANIC , COLOR_RADIO, "Une personne a besoin d'un mécanicien, utilisez \"/j(ob) mappel\".");

			ApplyAnimation(playerid, "PED", "null", 4.0, 0, 1, 1, 0, 0, 1);
			ApplyAnimation(playerid, "PED", "phone_in", 4.0, 0, 1, 1, 0, 0, 1);
			SetPlayerAttachedObject(playerid, 8, 330, 6, 0.014000, -0.007999, 0.000000);
		}
		else if (number == 222)
		{
			PlayerData[playerid][pPlaceAd] = 1;
			PlayerPlaySound(playerid, 3600, 0.0, 0.0, 0.0);

			ApplyAnimation(playerid, "PED", "null", 4.0, 0, 1, 1, 0, 0, 1);
			ApplyAnimation(playerid, "PED", "phone_in", 4.0, 0, 1, 1, 0, 0, 1);
			SetPlayerAttachedObject(playerid, 8, 330, 6, 0.014000, -0.007999, 0.000000);


			if (PlayerData[playerid][pLevel] < 2) {
				SendClientMessage(playerid, COLOR_CYAN, "OPÉRATEUR:{FFFFFF}Désolé, vous devez être level 2 pour placer une annonce.");
				cmd_cabine(playerid, "raccrocher");
			}
			else if (PlayerData[playerid][pAdTime] < 1) {
				SendClientMessage(playerid, COLOR_CYAN, "OPÉRATEUR:{FFFFFF} Dites \"oui\" si vous souhaitez faire une publicité pour 500$.");
			}
			else {
				SendClientMessage(playerid, COLOR_CYAN, "OPÉRATEUR:{FFFFFF} Vous avez déjà appelé il y a moins de 2 minutes. S'il vous plaît, ré-essayer plus tard.");
				cmd_cabine(playerid, "raccrocher");
			}
		}
		else if (number == 223)
		{
			PlayerPlaySound(playerid, 3600, 0.0, 0.0, 0.0);

			ApplyAnimation(playerid, "PED", "null", 4.0, 0, 1, 1, 0, 0, 1);
			ApplyAnimation(playerid, "PED", "phone_in", 4.0, 0, 1, 1, 0, 0, 1);


			if (PlayerData[playerid][pLevel] < 2) {
				SendClientMessage(playerid, COLOR_CYAN, "OPÉRATEUR:{FFFFFF} Désolé, vous devez être level 2 pour louer un panneau d'affichage.");
				cmd_cabine(playerid, "raccrocher");
			}
			SendClientMessageEx(playerid, COLOR_YELLOW, "TÉLÉPHONE:{FFFFFF} Bonjour, ici l'Agence LS News, écoutez les choix suivants!");
			ViewBillboards(playerid);
		}
/*		else if ((targetid = IsCabineNumber(number)) != -1)
		{
			if(CabineData[targetid][cabineCallID] != INVALID_PLAYER_ID)
			{
				PlayerPlaySound(playerid, 3600, 0.0, 0.0, 0.0);

				SendClientMessageEx(playerid, COLOR_YELLOW, "TÉLÉPHONE:{FFFFFF} Tentative d'appel au #%d, patienter..", number);
				SendClientMessageEx(playerid, COLOR_YELLOW, "TÉLÉPHONE:{FFFFFF} Le destinataire est occupé.");
				return 1;
			}
			
			if (IsValidDynamic3DTextLabel(CabineData[targetid][cabineText3D]))
			DestroyDynamic3DTextLabel(CabineData[targetid][cabineText3D]);

			static
				string[64];

			format(string, sizeof(string), "Numéro: %d\n{A5BD44}La cabine sonne...\n{FFFFFF}/cabine", CabineData[targetid][cabineNumber]);
			CabineData[targetid][cabineText3D] = CreateDynamic3DTextLabel(string, COLOR_DEFAULT, CabineData[targetid][cabinePos][0], CabineData[targetid][cabinePos][1], CabineData[targetid][cabinePos][2], 15.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, CabineData[targetid][cabineWorld], CabineData[targetid][cabineInterior]);


			CabineData[targetid][cabineCallID] = playerid;
			PlayerData[playerid][pCallLineCabine] = targetid;
			PlayerData[playerid][pCallWithCabine] = cabineid;

			PlayerPlaySound(playerid, 3600, 0.0, 0.0, 0.0);

			ApplyAnimation(playerid, "PED", "null", 4.0, 0, 1, 1, 0, 0, 1);
			ApplyAnimation(playerid, "PED", "phone_in", 4.0, 0, 1, 1, 0, 0, 1);
			SetPlayerAttachedObject(playerid, 8, 330, 6, 0.014000, -0.007999, 0.000000);

			foreach(new i:Player) if(IsPlayerInRangeOfPoint(i, 15.0, CabineData[targetid][cabinePos][0], CabineData[targetid][cabinePos][1], CabineData[targetid][cabinePos][2]))
			{
				PlayerPlaySound(i, 23000, 0.0, 0.0, 0.0);
			}

		}*/
		else if ((targetid = GetNumberOwner(number)) != INVALID_PLAYER_ID)
		{
			if (targetid == playerid)
			return SendClientMessageEx(playerid, COLOR_ERROR, "Vous ne pouvez pas vous appeler vous-même!");

			if (PlayerData[targetid][pPhoneOff])
			return SendClientMessageEx(playerid, COLOR_ERROR, "Le téléphone portable du destinataire est éteint.");

			PlayerData[targetid][pIncomingCall] = 1;
			PlayerData[playerid][pIncomingCall] = 1;

			PlayerData[targetid][pCallLine] = playerid;
			PlayerData[playerid][pCallLine] = targetid;

			CabineData[cabineid][cabineCallID] = targetid;
			PlayerData[playerid][pCallWithCabine] = cabineid;

			SendClientMessageEx(playerid, COLOR_YELLOW, "TÉLÉPHONE:{FFFFFF} Tentative d'appel au #%d, patienter..", number);
			SendClientMessageEx(targetid, COLOR_YELLOW, "TÉLÉPHONE:{FFFFFF} Appel entrant de #%d (utilisez \"/decrocher\" pour répondre).", CabineData[cabineid][cabineNumber]);

			PlayerPlaySound(playerid, 3600, 0.0, 0.0, 0.0);
			PlayerPlaySoundEx(targetid, 23000);

			ApplyAnimation(playerid, "PED", "null", 4.0, 0, 1, 1, 0, 0, 1);
			ApplyAnimation(playerid, "PED", "phone_in", 4.0, 0, 1, 1, 0, 0, 1);
			SetPlayerAttachedObject(playerid, 8, 330, 6, 0.014000, -0.007999, 0.000000);

		}
		else
		{
			SendClientMessageEx(playerid, COLOR_ERROR, "Le numéro n'est pas en service.");
		}
	}
	if (!strcmp(nom, "raccrocher", true))
	{
	    if((cabineid = Cabine_Nearest(playerid)) == -1)
	        return SendClientMessage(playerid, COLOR_ERROR, "Vous devez être à côté d'une cabine téléphonique.");
	        
		new targetid = PlayerData[playerid][pCallLine];

		if (PlayerData[playerid][pEmergency] || PlayerData[playerid][pPlaceAd])
		{
			PlayerData[playerid][pEmergency] = 0;
			PlayerData[playerid][pPlaceAd] = 0;

			SendNearbyMessage(playerid, 15.0, COLOR_PURPLE, "%s a raccroché le téléphone de la cabine.", ReturnName(playerid));
			return 1;
		}

		if (targetid == INVALID_PLAYER_ID)
			return SendClientMessageEx(playerid, COLOR_ERROR, "Vous n'avez pas reçu d'appel.");

		if (PlayerData[playerid][pIncomingCall])
		{
			SendClientMessage(playerid, COLOR_YELLOW, "TÉLÉPHONE:{FFFFFF} Vous avez refusé l'appel entrant.");
			SendClientMessage(targetid, COLOR_YELLOW, "TÉLÉPHONE:{FFFFFF} Votre correspondant a raccroché.");
		}
		else
		{
			SendClientMessage(playerid, COLOR_YELLOW, "TÉLÉPHONE:{FFFFFF} Vous avez raccroché.");
			SendClientMessage(targetid, COLOR_YELLOW, "TÉLÉPHONE:{FFFFFF} Votre correspondant a raccroché.");

		}
		PlayerData[playerid][pIncomingCall] = 0;
		PlayerData[targetid][pIncomingCall] = 0;

		PlayerData[playerid][pCallLine] = INVALID_PLAYER_ID;
		PlayerData[targetid][pCallLine] = INVALID_PLAYER_ID;
		PlayerData[playerid][pCallWithCabine] = -1;

		if(PlayerData[playerid][pCallLineCabine] != INVALID_PLAYER_ID)
		{
		    CabineData[ PlayerData[playerid][pCallLineCabine] ][cabineCallID] = INVALID_PLAYER_ID;
		    PlayerData[playerid][pCallLineCabine] = INVALID_PLAYER_ID;
		}
		if(PlayerData[targetid][pCallLineCabine] != INVALID_PLAYER_ID)
		{
		    CabineData[ PlayerData[targetid][pCallLineCabine] ][cabineCallID] = INVALID_PLAYER_ID;
		    PlayerData[targetid][pCallLineCabine] = INVALID_PLAYER_ID;
		}
		
		ApplyAnimation(playerid, "PED", "null", 4.0, 0, 1, 1, 0, 0, 1);
		ApplyAnimation(playerid, "PED", "phone_out", 4.0, 0, 1, 1, 0, 0, 1);
		RemovePlayerAttachedObject(playerid, 8);
	}
	return 1;
}


